{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6e95520c-df46-4197-a399-9c2ea540712f",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2990a45d-f348-44e2-a6ac-ebd17bbd77ad",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "274cc773-1696-468f-97e2-a90d5aba2c78",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "92a73d4d-4b69-49ba-a84d-dfde401709cb"
                }
              }
            ]
          },
          {
            "id": "6150d1ec-c995-4270-96d9-c2ff00c23e8b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "531ccb24-d76a-4576-84c4-9c1116f76daa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "592e397e-008e-46e4-b4b4-e5d10f58c4b1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ab46a889-fe07-453b-a89e-4c782ba20f4f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1f2a781a-d1ee-4ac9-a53c-076593861ace",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3f4e24e9-c2f0-4e5b-b0ed-0b7e83b8baa9",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f339b76c-20ad-494f-8e7b-8902280bf147",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5c6746bc-b77b-4148-9430-fc88c5010e34"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ce840c8a-c37e-413e-918e-b0f3ff16f0ed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dd4dc11c-20b5-4b58-a174-c4b00471dd22"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8372adb7-b0fe-401d-8f6c-1d756593c5b2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "baa7eff7-9c5c-4ba8-b898-f0ec0a9be6e3"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0ff82e3-777d-4deb-b0b1-c6d544355358",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3c5b4701-6cbd-45da-b2f8-7eb077fbdb49"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bea19c3f-79a3-4e4b-99f1-512c36bab2bc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "62e0355c-02ca-4230-b390-b9a8b0803e34"
            }
          }
        ]
      },
      {
        "id": "c41dd78e-b725-4633-82eb-17a904d9ea90",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3cf17056-db16-42a6-96f1-865561eee294",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7a7c6f58-4996-4568-ab17-90a1af6d498c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d1ed314a-9076-4b4a-9a0f-b94a409f58d3",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c9bb22-6f81-4ce9-b9f1-57f317fd90e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ad47a8f-bdcd-459d-9225-63d5cd335664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6851c627-fc2a-4f29-b0b5-97b490d09ff0",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67bad3d-f8a6-4b17-ab58-6c64bc97da39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b669d744-3d04-43f7-9236-9884db7ccb2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39482e9-0ed8-4506-97ee-19c9c3e54400",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd805bc6-012f-49f9-af56-17b0d40100a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e20dfaad-0fa2-419a-9f3d-c2b130bec641"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a2a16c69-d478-41b3-9fbd-caace0ba105a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "99ec59c5-f066-4b22-b783-fcd7e4add830",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1913619b-4eeb-4c0f-850b-b626a32d0a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76c1d52d-d7e9-482a-8b86-b1eacabe210b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f02bad0-96b1-4df8-bbb8-694160ca2ce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4f414ef-8b7f-4b01-ad84-ea1030c080bf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b3011d68-b0dc-4343-9ff8-bd6b19040aed",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d76d9793-e9f4-4676-ab6f-f052a3a99d3b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b275e152-9f12-499f-8302-8c2228db5bb5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6830f2f3-89a5-42c3-a77a-6307384f9206"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3618fec5-b814-4e40-b581-1f0c8e825f20",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "22847fbf-dd23-4279-ab14-c528a4405c65"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c9af064-9b13-45f7-9bb3-3e700e5198f6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "56027aa4-f069-4f92-8759-27d8b45896df"
            }
          }
        ]
      },
      {
        "id": "91d0757e-3666-4dbc-8b72-23e0a2c68ecd",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d0b9e75f-169c-4ba3-9a57-0d6c302e64a3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "213a1a34-33a0-49fe-a049-a1e75cc3d465",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ffa98147-0c74-4bf3-934b-74f59662514b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92b44812-0b5f-4906-b71c-20e4a405e2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ebb074e-7af0-4824-9069-7ca77ce486a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cfb6779-a05e-4c0b-9719-3198560e7520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80a52319-6892-4272-95ac-08ac9866c713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef79c781-2360-46b4-9211-0556a4767d97",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d53562-7707-42c5-9c63-293c0760542c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4c9866f-d9ca-4fcc-b0f4-fa88ee32da29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a4e360d-55f3-4370-a85b-6871df555859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0faa22af-24ba-4daa-9ca2-190a8340f4d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84871f9a-5021-4a2c-b23b-be11c0a225c9",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e79ba3e-a254-4752-a476-e5ddc604e978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f2f0cc-5a3f-4994-ba63-5c3ce9fdb874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8157fa-f578-4dfb-929b-e9edcac05266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "534304a0-346d-453d-91c1-c843ed39221d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9529f9d1-9f7a-416b-a273-5117bb81da2a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aceb62f4-8c7f-48df-8493-17dca46b55a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f4de86d-e543-4f1f-a8a4-ca5e1479950c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e693a9-b61b-4fdb-aadf-baa23da1ca54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7db79b3-7f7b-4b68-a966-195c9b09c767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55339b34-0cfe-4734-8c09-05a5363ba17d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0dc2b35-b3c7-4b80-92d3-9afb1ac65dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9fb4bfe-1a47-4a6c-af75-3fc734a5836f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78847251-de8c-4774-b38c-1636e417586e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d052c696-82e4-43f9-bdd0-ce701ee0f057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e97bed8b-b73f-4ad8-9808-9e4182dbd6db",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b74f352-422e-47a6-8093-d728827201e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25d3af9c-b031-4387-8f4b-c83b3ac9cc30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f10e5e-ea1d-4d2c-a6d8-021e793c18e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93dffedf-e431-4f10-af84-589427999c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e561c8-bc4a-4483-ba9a-c5d62844a081",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d92c30-7533-459d-8a38-68e9cdaf3070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e25dc348-3c0f-4157-ae81-a58e1e5d3100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f566eb5-a8e0-44c7-9e1c-84b3681df6e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3932f46f-ac8f-4bea-a8b9-8c69256a6e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "797a82b5-095a-4186-a353-b04b2043c31e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4f10d5-15ee-44af-bacf-45e008159e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8bec454-afee-48a7-8601-5de9eb8aea77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc7f022-281d-4b3d-9d5c-e2dba7fa4993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09e4a257-f015-46ad-8832-9a490dc93e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18a3734-6855-41fa-9f78-6507ea760cfb",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5885e6b-1d3b-4e83-a592-12ae7b6d837a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1160ef59-e9dc-4766-ae92-89720f7367bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f2bd8f-13e0-4d9b-b874-f5ea6b48c9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7859b948-fb42-464d-94ce-2d0d532791d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f81898e0-815a-4d1f-9f1f-91cbf8aef99f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43bae1ba-11db-4d7e-9cc6-af9fae581496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e9d2c85-12bf-42bd-93f3-b09b6ee17c8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b6d174c-7117-4d3c-9612-cc53f3ea4ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf7e8203-2447-4d12-9951-e75a5f9636ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c95f784-fd2e-4d9c-b726-6d65d16c108e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "603a0388-e942-4aa9-9857-7614c74859fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86e3a639-991d-4bd3-ae3b-2cf29fe5ad6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1bc01e-8be2-4cec-9a0f-6714e81e0dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6aee0076-f96c-43de-a7d8-aac4a2c46fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92586516-2ceb-4a5a-a5b5-cbdb9d2db24c",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52225c09-5cdc-42a9-ad8c-3eda28892f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ef36ee7-3779-4688-a795-5428ce312965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ac051e-4e93-4705-abed-b420c9d65598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54906df5-2605-4052-9fe4-4b93c9d203b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58041625-2728-4161-a2fc-bbffdc4dd90b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c9e84f1-d3e8-4794-9fd2-d38c66af69a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5425df41-0f8f-40a0-89cb-1c1281f2e760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad2f6ca-853f-45bd-9929-1a7f3d4827fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94e98722-434f-430b-a3b3-1096aa7c4583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c17413-77f5-473c-801d-78f4a676da01",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c12f4a-d226-4963-8aa1-521ff55c071b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca824586-3f13-469b-9943-b9b472448dca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5829dbad-4d93-4b4b-9d29-ed993861349a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "659bfe4b-3cd0-4ec0-ac94-c74e86002989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a87a6b-a593-40e2-b335-5cf585392e93",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a3aa2a-7a00-4e72-ab28-03db17bfd90e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "726ce341-c209-45fd-8f36-ce69e6635cb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eca20c11-6c52-4f61-891e-dbf94c2c63ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aabc7bce-234d-4684-b046-d97b86599c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c5e76b6-c421-4c9e-95fe-839156ce6587",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e730f9-21ec-4ee5-bf93-bb395844215c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0eee1d6-d1f6-49fb-bd05-ff9794df11ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75a439f7-a5e8-4b88-83ab-e85feb29e0c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f3b7bdd-ab31-4b24-9bf2-d7119b2ea2cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24d7a4a-e7aa-4b0d-b245-6f2546e06d1b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d9dc86-1170-4870-8418-5d0d89e92cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f225a52-672a-48b3-9c25-57a739bb2b53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f61a6c9-2f32-4d67-a662-cea380af492c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "223b711f-a760-462f-93e2-244c7be99db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2303ed-c22f-40a5-bc56-226915220bb5",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96da095-870b-4855-97f4-bb1e504bf900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "277e96c7-aa25-47c9-a21a-9d92fa1a5b6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7c5e11a-f2ae-43a6-92a6-9d7a30f11832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "735d168a-5e5f-4b57-9fb9-27541fd4368b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d0aba1-a56b-406a-a9f2-6b1245f90240",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0a725e-4f58-4039-9406-c7ba0e9225d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c9b60d2-432a-4d36-a010-f86ee6215720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c500f892-a78f-4926-a5e0-2ebf54b6811a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8e93b0e-2d8f-4b5e-961e-3b6c0d66d59d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70da0b4-9864-47d2-8aa6-b69bd40c2b4f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ecb0fb-1f52-4af9-b58c-0f38900d1b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8611cd09-7f9c-4ed5-978c-949f16c2b5ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b040495-94a0-429c-a351-5f78cbc5e84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "40ca44ba-ba43-48b8-b9ac-f0b1d3760cd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce2677d-bcdc-4d72-a5f1-9796632c6318",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7660a22-ee59-4019-aab5-e4e5ebba0590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "926fe1a1-4285-492e-a940-6e26d0200561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "741e772c-48a3-45b7-843f-7ab9d1af25c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0eba35b7-15f1-4436-a005-c24a5872b3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24fe8783-bd85-4ca3-96e6-2052b8cbb325",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0157aa-d8a9-4e33-8d37-2dc7f077baf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca852aea-240c-4033-b0b5-c35dcac8e41e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42fa8038-7866-4443-b98e-439584663804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8c3c858-497b-4ef9-9b2a-c2e8e8e01e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71db579f-25cb-4d15-b6f8-376496114709",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0a2309-8dba-454c-9d85-b04e14109be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77373ff6-5fa8-4a9c-a7d1-e99b82548456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e93346-d335-4bd3-b8c5-aefc06512e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7fdf6f9f-0fdd-45e0-9c38-966156da1ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5dac5cb-a97e-4b7d-8704-5d78807f054d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58f7ce5-2116-4db9-8c44-10bfc7c96fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56b61f77-caee-4551-9eb5-68dca5708ca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "569e40f2-b151-4d2f-af66-e7080ac295a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "87c88085-a3f4-418a-b1cb-a4f504b4c426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410fe06e-c19f-4642-9f36-f70a547b1634",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "689d0bf6-ef12-41bc-b44c-14e6caa29af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22921838-f21d-4cb5-9bc9-591e5d700ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97fffd49-388b-4ff1-9152-2d584eac564d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "38bda112-842e-40d1-bfcb-d195c6e67f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6747d474-426e-4952-890a-e68667062a60",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c526ece3-5997-4422-a924-7d80bd7232d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7f2098e-178c-4059-b579-8d78252f039c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5c978c-8f11-4052-b837-9bd0c3bbcd80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "062a37cf-3afb-4436-9920-fb85890f8d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbff2f4e-b157-4a2c-9cde-9c97362ee3cf",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da25bbd-5e6d-43f1-8aff-ac7cd44b4c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8207912-45e1-48b6-955d-2649385674f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f446c910-cee1-4236-ab3d-69cdf42b8b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c215ac7-3664-4ed2-a704-ef421aa206f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f4c2bf-8ab5-433f-b309-479e0cea0bc2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a4c12b-ed7b-4b5b-8782-cc83b4f3f023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9afe2e6a-4ede-4046-b727-a3773ebb1a3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a045f1-abfa-4561-9433-5468a2637571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc6b3708-cf36-49b4-912c-73c76456e3c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19fb6b14-ff1f-43a8-bf9a-872a985a3c11",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef21ca9-9a77-4943-b578-9eb58c929d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96c360f3-ee70-4466-a37f-ad1d08182de3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c401738a-4e62-43f6-b4ae-eae83f97fea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "72e737ff-842a-47a9-8f02-7fe68b059922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d976d06e-3934-468c-86f4-91f9b47f88e8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f964149-302e-411c-a2f7-f90e6bc9da98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06bcb1ef-c727-4e49-933c-27c3d4b3a5e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8ee583-9dbd-4fad-9839-0b6d3abbc5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "325479b0-1947-4c76-9460-cbfb03d990d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0072e35b-9c42-4403-98f7-ede3179053d7",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0410c4-1c41-435b-bb70-eeed5fcdc4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32cdfb48-54a3-4ec0-923a-0fbbc2989406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e9f1dca-3c67-4a6a-9878-c1699624de8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a295538f-8c74-43c8-b67a-fc8f46c42e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be40df0-3dfb-4aaf-a407-0822e5fc68e9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e03fb3-3380-4e73-b159-4fec4bb1390c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "033f2b25-336f-4574-8114-8e54c144f887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28395243-d604-46d2-a5a1-d02b2b50ccf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6038968-9f22-4211-906d-4a3141d6c9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458448c2-a5a6-45db-8e8d-3f619c0611dc",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ea97c2-7b0c-40c0-9841-d8287f3a902c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fa6bd30-475d-47c1-8983-2c8800c5b4d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d240c6a1-ab0c-4415-abf8-4ef5a9915c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "12f2e11a-0efd-45a1-9c08-4145395bf16c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93706261-1eef-4838-87a7-dad70479a435",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ba9015-0aa6-41c1-a6e0-dd07ae9d2b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "291502b6-2314-4fc0-a2f7-db77e983bdf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e479f3e-6757-46d9-9106-a363fdcd3bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1032a53f-2e70-4f77-8da1-09af82aba691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71887353-7420-44be-8b41-7c77016f2b77",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79be86a6-a6da-4297-89a3-14e254034c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea58a97e-a9f2-411a-af39-c5193f5674b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c0c7a5-4e36-44e1-8694-955a2cf8554c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "df746319-2779-4363-b5ae-4f5f8b4c7d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef8fa34-7b45-4b4e-96e6-d2fa132e4a73",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dedb14d6-b3f4-4cbb-b021-97d9b3b2bddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed203708-f02c-41ef-bd0d-5f707bc7b791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d50abd-7234-4d77-bfda-e77dfbd0db38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "423fc4b6-2e66-4891-8e00-257b4e0b468b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe64db9-f3c8-47a7-a31d-e286bd72f166",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e035cc2c-c458-4171-aa66-df7ba294674d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65478cfd-6c7a-4227-89ab-da05c4d79020"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e593069-15b7-4a80-913e-096191c4ea67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ba02cc9-b15d-4bb0-b9cc-d5f8ef0f97e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d427936-6b3a-49af-a6cc-83d23fd5ea60",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9197bb5b-b017-4c63-bde4-260578ad98b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6990dbd-71d4-4689-838c-a9734dcd86bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "747cc35d-2e17-4a12-acec-aab5559c7fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f07ad08-af8d-4090-b1dd-a1bb95ea18e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b97c846-f858-42b7-b0df-5075addf84d0",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "775c511d-b306-4dc3-bb7c-ea94251d9284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a952673-7003-4c90-a83e-f097cba01ef6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20256c08-8564-45a8-a910-8cba2bf85f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b7fdf9c-be04-4be4-84c3-f11707db00e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56fdacbd-c12c-40f8-890a-b05bc000c906",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3676251a-9fb5-46cd-8212-dd14931c4d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6508220b-39d4-44b9-9da3-b7b64c56e62f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf91910-2a39-4c2a-82ba-4da43a81f3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "186218c6-de5f-4b49-ad4f-cd6922622fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da644aa1-88b6-434f-8fd2-f8a251c4f443",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f22d8f7d-6d51-487d-a55d-9813e9a8b97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0a0671f-7c62-4fc7-be53-e4f1ef671498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a579465-6e43-47fe-be5c-755f18d445ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3526146-3d4c-4d10-a435-cc161093b21c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5964acce-116b-4262-8098-d25a2b5d1c94",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "543a8d7c-7dc1-45e4-b90e-08e6dc89640c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dd34aac-e738-49f8-ac00-30d03570ccf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cddec13-95e9-459b-ad89-b10b8d284b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "70e33830-2acb-43e6-8b7f-d7368dd4cfe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7847d05d-57b5-4e63-96c8-205a282ba042",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "029b02ea-1b5b-4159-b4c4-3e52209e8ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cd6eea9-4a35-47a0-b554-c23fccc25f4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2e2395-a66d-4f0b-adbd-993271330b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b65e51c-6f32-4a6a-88bb-3bea66cf43aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39af8e57-c787-46d1-986e-6668bd8cab5d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a05f80b7-838b-4b65-bd00-ae13067a47ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62508e79-198d-49fe-afb8-d192bdddc714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d4d6138-653b-4f3f-8ae8-f46a5070cf63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "425fed6d-d3bc-4a35-834d-362386b771c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eac4424-e096-423b-bf8e-40e5e2120a66",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b890e6e7-fbec-43b0-90fb-fcf3a24c9278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3033b3cf-0a13-4ca8-ba84-edb490626fa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48e14b9-27d4-4fe1-aa11-1a109e366127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9dedcef-cf7f-48ee-81cf-cbf7249ea7a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d3dbc3-49f7-4c6c-b5a7-2a200504e2e5",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9512b35-0b06-45fc-bd24-e40ca654b53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c59f359a-4b04-4b39-b254-404176e3c113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b6dcca-7b22-4123-a6c9-1e733c6b88be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38ee942b-f2eb-47e5-a8e1-5753b0b65b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096681cf-2cbf-478a-96e4-275ecd5013ea",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43a52b0-61fd-41bc-b3bc-51a8c15e9e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b7f9b2e-9cb3-4149-9a49-5d87616a3a6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "126ed5ff-30e9-4f1c-a9af-5f588c9d6c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cdeb9c2-49a7-4d53-9c0d-7a828f12f666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6410cd0-9212-4285-85f6-314408e12a7a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e20a9f-a2fc-475c-a36d-4df9fce8fba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "396b592b-107a-44b1-a35c-d924d44f0779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df72c496-b015-4a62-b857-de7da1d73754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1736d65-14dd-4006-8d07-7883b539378c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac0c2ca-0cce-4379-a23e-2afd18ab9efc",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61920573-d1a3-45c1-aa25-95ba8e543b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27fc6763-76dc-46c9-9019-1f1ad578152c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217fd1b1-1fe4-43e7-a37c-ddbb7e009016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "390635e9-a238-411a-9ae2-121df65df9ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f431bf-3bcd-4bd6-8a24-3c2fce6de051",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c0f77b5-b82c-4c92-95bd-b272afc4d163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8712ecbb-5df5-4d1c-a281-71a8f7ebf070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffff68a4-f577-4cba-a08b-4b0b3b13fc4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "584deb10-da4a-48e1-b959-582fd2af7c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c9429f1-43be-4b42-9a9f-eabe81be3caa",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa743d85-084d-428b-8eca-328e894ea231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f307074f-a4f2-45a6-9805-b14b7da9dc9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0959c957-38a2-4f3a-a71d-2b27831dd7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3e35a73-f283-4560-9a73-3abbb21429e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e186ee8-2a37-48e4-b119-be4223bdfdfa",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "115f4de5-3d06-4121-8088-7442e6b40ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e147aa2c-ba65-48c2-a569-f052afba02e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "791b314d-b391-4c69-9df5-812e7ae6c93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "325db0ca-b56e-434b-b71b-03e281d0c1e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6fa4635-721a-48e1-99a5-a4d4001c9ae6",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b5cf81-31a6-4a4b-bf14-b3937b3d5a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d80f9ba9-203a-46f2-9f31-23f1f5c10e81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4610b16-caac-4583-9593-5b09648b6816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "80f33b13-c8a7-4a81-8f5a-291183dd1e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46715d95-d22e-4eae-8959-5de4ad6e43cf",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "181d7f3b-cdd6-4379-9730-24174299a4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e783552-4469-4af0-8cf7-bd2edb34c4f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085d7754-38ef-4b17-8802-8af063656543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a9e6825-59dc-4191-939a-ff06eb41ccc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "146817a9-a408-479a-9de6-94937f328c5c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b47a0d-aa32-4c23-b0a4-3733ede03002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a2791aa-684f-4088-95f3-2af1848022bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51508934-34a1-4671-8a6f-72daa165c5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "52ade103-0f1a-4f74-ba55-c8c813f977aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e59f2e8e-b874-4309-a41a-699566cee37e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff38a82-6a51-4214-a6c8-7d5e7b5532b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15436b68-5874-433b-a031-a05594841157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7277e613-9a75-42c7-9fc1-41e7ea5cba7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "45e4cb04-d528-4610-85dc-ca59ca3cbdeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d1c97f-caad-4ea8-b2f5-7bb01688f77c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b26e2819-275a-4f1c-9115-a30a47bbc34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa389a73-0770-4ad4-bb64-2626ea221aa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709cef86-c57e-4777-9e87-c7dc39c03d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "293ae6f7-cd66-4ae3-a8ee-ac3c1b4b6416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6f75fd-4aba-42c1-a2f3-315f1f30dab4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83acffe4-be2a-417e-a230-d517e57aeb71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f80a2780-a2f9-48d0-91da-223fe14e35eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c685d659-cb4f-4dc4-9c40-c89861e44f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a4733c4-fe58-4f27-9282-a30aad04218f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a129be-a428-49dc-be1e-76486c5012c4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "840ea3e3-12c4-458b-88fa-df35e427761a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e834da2d-86c0-4d9f-87cc-06624a880e8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858e30d2-5c41-496e-8837-4a9eb95b3995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d10b2fa5-e5cd-49e1-9d68-28aadbeb84b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e95791d6-0845-4884-88de-151887dff6bc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4948c2-34dc-4ac8-abc4-ee0de192b71e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c773f22-71c5-49f5-9495-087928438a17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256a43d1-b764-4bcf-84ec-773a97e297af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f2d64be-113e-4d95-ab38-3906a1926eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77a7223-69e6-42a1-a1d1-3c04be90fc74",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d83d7a9e-a5cf-40ea-9b8d-79e9546cba82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f696cf5-5e60-4f17-92f1-7333dead9f07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66513a6-94fe-422c-9787-d3d049e33fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee37afd3-b667-4df0-9b0f-da173a9b8a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be4ae84-57ab-4564-b47c-a73721a30202",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f826cbef-668d-4fbe-bd66-7e4fa65c4add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80fc5974-5df3-4253-a9d8-c52f5a583080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3fa2b0d-0e11-44b8-bc08-41e3ab9780a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3c82f7f-8478-4370-b566-94423c1e67c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9a1a4b-9fae-4776-93b9-daa1b3eebc23",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc2fb7a-4a62-4a7f-9815-d14368d40e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b700e1ea-10a2-4be0-80e3-a7e33450e377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00beeea-da44-4d4d-bbb4-ab22f10ef787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "705e391d-f516-453f-8252-dc52e2fccf04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2cdffba-7f07-46c5-8dcf-adbd3adb17eb",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6005c365-cf96-46b3-b167-cb9664f185b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fb04277-c06e-45ab-a2c5-a6e7347407ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b659478-a6da-4d7f-b61a-dfb6fb73a003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "22e28e61-6620-4db8-afcb-e6116cd94a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad55a6d-6868-4880-8014-4f9836b9a068",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf64ae7b-0be7-4a79-8f83-3eae8aa02eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ac0a518-60fa-4d67-a702-c8e13ad1bcbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b18c9b94-966d-4e28-8d20-d94238f7f4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f985d5d-186a-4dbd-88c1-cd260c1d52e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92977d25-d025-434b-8d57-f12e002fc6c7",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5cb990b-37ea-4cec-ad5d-09d76771a263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "108124e7-d23c-4396-b190-0846bbf7f566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c1264b-32c5-4619-a4e9-1e8ed2a144eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b94a8e7-0198-4284-92f1-e3cb9d2ebd16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dee428c-f067-41a5-baee-d7bad6864d08",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2094568-4cf4-4c92-b0cb-d3cbb2fe1195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2617141f-00bd-4bdd-afbf-48d67bb3c80a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690102c3-6b13-457b-a524-d67ec65136bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d0c1f7bf-1e6e-42ed-a8ea-e907f39614d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a7fa64a-6000-4766-9580-227108b19f01",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5806a09b-0f97-4cd6-b0ef-396d209077ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6232f945-57db-4ce8-9b0f-598e853f8eb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8482c795-cd82-4755-8f88-2dd006e2f0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e20a4d48-f894-4751-b9d9-0daef2bb5d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb6d46a-357c-4a65-aa24-c8a273ce8155",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6066c930-3e7a-415f-8e4c-c4f030f4a9d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc6504e7-ea3a-467c-982b-b321fc9e2f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "813d86c1-7db2-463f-a1af-fc10a6535201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "97798138-ece5-47c3-95d6-34603121b836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4700c82-0b61-4219-b110-984a7be15b21",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c0efae-7b88-4588-8cc0-0b1fafee1558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b44bb4c8-0036-4d3d-af5d-573e28d76cf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c885bdb8-343f-40b4-b0f0-5cf1f5851bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f82b558d-1244-4e32-a6d4-e987d34f5da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06178d3c-bd3f-47fd-87a1-990e1c97bd5d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7224c320-1006-4448-8134-5b7ca5920dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f80a1529-da85-4c26-ba4d-571bcf168134"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c12382-0ad1-4df1-bd5c-ec7ca68a9867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbe4348e-18d1-4a94-bd5a-c20a5137b01d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2fd174d-904e-4590-9025-cd11c5603c6a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9044b4-01be-4d86-a281-69a186909e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f954c638-d74f-4626-94d8-a2c7ab2c3936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a45553-0431-4190-8040-8322faccc5e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "78fdb094-6b1e-488a-92c9-5e1f4e4b66b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ba1e9a-85aa-453d-bcf9-443789fe854d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d62d7cf-0546-454f-b928-222bcf6f1921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0144d574-517d-495c-bd1a-80bfea22a5b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd9832e-31be-41f2-a4ef-11fdf52b2cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f404eed6-6a16-4057-bd33-0179468e921d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6dce7f2-6524-4d48-bc39-59cd5ba7fdac",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "894b0d2c-bac2-4844-b0ba-f3d327e68f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "983f2b2f-63c0-4256-b0ac-544e8ac80302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc710a6-688b-43f3-a169-d3100e974530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6493fe4a-476b-402c-b487-549281039ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87093af-6e2a-43b3-bcda-38a12ba5e210",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd0f728-9f54-447e-aae2-016a6103c0e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de0fa44-ef79-48e9-a774-9922d3da7ad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586a56a9-0bdf-4203-843a-b54f56d98af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d2e63a4-2333-4b7e-bae7-d5783ae0e002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e18998-6e9d-415c-a233-6a77e1898f02",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f236cc87-4d1b-42b2-a4fb-b3eefa8a2e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c74eeca5-604a-4856-907d-71d919953b31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "276c2239-0d98-4918-9039-e7abe51d8962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5ae6cf9-d1cb-4d31-8261-4b88322d98a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7483e6f1-599e-4728-b911-6b99504ce89e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe142d4-92d8-43e1-85cf-2a4f26dd6109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "859fb820-aed8-497f-a7e0-74c8f07c61df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c2d49e-8298-4705-b1b5-41698511b03b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "daff23a9-a7a2-4f9f-a258-e2533e6ba9f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c578961e-0452-4982-82b8-b7d70d938e94",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af437584-b101-4e39-aa60-a403b59445fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8ce88d9-c26b-41d6-85b4-560eae1a5094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b845f4-a8a0-47de-b3eb-5a12b699e047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "95beba88-304e-4bd7-b6f7-c82f145554c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801c6f03-4648-49fa-9ab5-ed4993b80c88",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "907667af-5d22-4c88-817d-811373d660e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6905bfb1-48bb-4d4d-b6ac-d1ad3ff7164c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2ca33e-f0df-4fee-af0e-0190b8e05d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd206039-b7d4-46d4-b9fd-345838c96103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5385d340-398a-4ea2-aee9-b7d027431547",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65119ed3-6b16-45a3-9377-e201d88b957e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2347890-934a-4802-877c-3e4b3f371f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeab0c8a-80e6-4325-86b1-e925e5d443e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "13207e39-a75a-4833-833b-2cb0fd0f1935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e26f1f8-1bae-4795-848d-d1eae3ac04f7",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f4978e1-1156-45dd-b57d-f9da8347f89d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c76ce4-c7b5-4449-af7c-ec293d6e155d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e29c37-cadc-4b84-a76a-16b2c1c20203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f6e3cb0-55c9-4cfd-b552-535ed207344b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f45746a5-26ca-4912-8873-ac8b0f797ef0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20635e0a-498c-44ba-b3e0-3e41d75f0a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ba614ca-35bf-443f-8c07-a25eb9f61443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec9574db-dccf-43ef-bc65-4cf28766e603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a967378-7c7b-4c23-81aa-b3810a2836fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a6b4b94-56c0-4233-aead-05af3bfb9029",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a36cc1e-ecb3-420f-8399-ff00443dd5db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f54a5d39-6066-43ac-9359-b2f34a253e7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c418edc-899c-4550-a3e1-4f0678db5e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92909e2e-7351-454e-9422-c6ed971a703f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef6cadf-d51c-4105-8b2c-3345ebf29f7b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "269e68be-5dc9-43c1-94c6-d6e2b71f6173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8662379-0c3f-4c07-88da-5ffc522fd5a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5602fe-91d1-4727-954e-416a6ac9c79d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5baaa811-b0a1-410b-a845-6b776417e055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff63cbd-99d7-448d-8518-813902449039",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f197bcc0-e91c-4628-9bad-98d65f683f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28b5ec56-e30c-498a-b1c8-0640012db0c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da71905d-2cfb-406a-b128-acca73c8d4fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c5a860da-923d-4ede-be37-84bec0d842ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ade8de-cfc3-441b-9b7e-c529bfe8ab1b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a01b18da-9fd3-4dd7-aaa7-acd134dc712e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac7097c1-bc82-4001-97cb-a1840569076e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9178f942-1e14-44a1-8636-904043c59c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5cd16e7f-04f0-4bba-acc9-06de23372be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20cf2a83-5290-4156-9ad7-968d5d80bb28",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f734b3d5-3a88-4fa5-8003-233d4b404471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd39a5a9-5fbd-40a7-846a-59623915179a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fdac1e7-c6c6-48ff-b478-0c68fef8a852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "456d386a-b651-468c-9a08-e938af1f270a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263d3dd8-fcc9-4b99-b8ef-dcff218c70fb",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3100af8-1e58-4376-a6ab-b86b81ac6777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb49c38f-5ec7-421e-a06f-6ddbd661ca17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892c765d-31e6-43b5-9da4-4e446155eb8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea46480f-25e9-4099-b839-05a4e9c57ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae0bae5-f7f5-4e0a-b6dc-7fe6c1515715",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0668b5e-8c2f-466d-b577-790987195980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b07ac8f-7605-4ffc-aca2-c24fe8a8bac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b92901e6-55ef-4ca0-88fb-66fdb65b1a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "22ea79de-a480-473f-b2f7-600c9a064ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e245571-9185-4b25-b757-0206fac86cf1",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39ea6a4-1402-4025-bd3a-b03e9884aba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7c95ef1-9c9a-44a1-8869-184e8d29bf91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbbc6d2b-21eb-4d64-aaa7-75bf06c96069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4c4528f-5be4-41af-8f31-44795fff0225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a78b98-0949-4973-840f-f7007ac3a9db",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c334dc-7670-4b23-a451-1c94418c2e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57907dc8-adc5-4a33-a9cd-525399fb3a19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b45309ad-7f04-4968-8e4a-605f0aaff573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa977d92-1801-4c09-b7f4-94b7ed20cff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b475007-5e98-4310-8024-189c33d23bff",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b5edae-0413-447b-bf18-149bd294f7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "48b4be66-d9da-47f3-8df2-ecaa27f9594b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab42fa81-8fb7-4764-a7a1-86336073802e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e3aa599-4127-4767-984a-dc4d19a3d6d9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "db6e6a14-1cc4-4f4c-84ab-10667c706f5a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "82880904-8aca-40b4-9450-20d0080781f7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3a0a8f-c641-4788-9213-9a88dd9a11a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "241c9865-285d-4cbe-8153-5fa7e2ea89ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070b0f3f-a82f-4e1b-bc59-9bf42e343320",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47aefa9c-67b9-4de2-98fd-029df6e685ef"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b09527f-a7ef-47cc-a5ff-d283e2d2a8dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fcb47532-5868-48e4-a1a4-6d4328a218ac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cdbbdfcd-14d5-46b4-8591-034d44005337",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca0e06c6-b74c-47c0-ae70-6c61235df4c2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "af50a420-c5ad-40b0-8581-2bf3f9f4c94a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "59c3d551-695c-4f44-8a67-4571baf3e75f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6b618cec-0ea8-497d-98a3-ddf99ec4be0f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c2039909-a17a-4898-8c6a-56f62ab15756"
                }
              }
            ]
          },
          {
            "id": "3afdef6d-7881-4e7b-aa0a-dcc08f5ff9e2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a41255b0-18da-4640-aaa2-485e86797393",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4dfd4fa1-f06a-4f65-8a5c-7e68a7d7038e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1556425e-64f3-4d4c-b128-1932a7ef82d0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7851d6bb-a1ad-4315-805c-f18cc3be7701",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "366d54ca-14e8-47fb-b0f3-a506f48c4bd3"
                    }
                  }
                ]
              },
              {
                "id": "570481f5-cea1-4010-8853-8d7a51486223",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "343ea5f7-afd3-4815-8e97-4e31f0e85bc9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "35558256-da6c-4595-b72e-00ea25269f4a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e16554d-f864-45f7-b9d0-08d9a062ffd3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "725f9a21-5067-4427-9295-34a3b42f614e"
                    }
                  }
                ]
              },
              {
                "id": "4272a9f3-0212-4354-b434-b7b629943f85",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19d79b15-a3c3-451c-b5cc-c4fe3c8ba6ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "323ae494-da1a-451e-9d39-9fb393ca85b2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c5a2e2a-09a5-4a1e-8e9c-8deff9434097",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7feb1fc0-48fe-49df-a9de-0b4975c3f51e"
                    }
                  }
                ]
              },
              {
                "id": "23ca2f54-204f-4395-8413-f50c6a17b41d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8497e08b-a6e4-4a6d-a503-5bee10c3fd71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e23b96a0-96f8-45b7-a344-f743fcab4493"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "211b288b-d188-4061-9727-242e77cd47b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d7315168-0d92-4d3d-aaa6-a011155983f7"
                    }
                  }
                ]
              },
              {
                "id": "0160f897-2a65-4271-bfcc-57f3c0bcada6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ccadb31-ea98-4c77-a606-fc02db8ed6ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2dc8c796-1ec0-48e3-8c26-49750d47bf61"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "566fb60a-5042-47f8-9ae4-2bc5579eb960",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "8ca5c45c-dc13-4947-94c2-4c7ad460e6bf"
                    }
                  }
                ]
              },
              {
                "id": "0ddab72d-acab-4da0-a167-1bf7802578cb",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e425cd5d-9d89-4622-9a1a-d080cfb21070",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b8a7f5b3-fdba-4e53-9e1f-3942e0e8e70d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb5aaf46-60d0-4c05-b296-612568a6d95f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "952bd0f6-48c2-4782-8a2b-a36678da6577"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "365681cd-6403-4679-a4dc-7374ed8e3813",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1b850222-f7ad-40e0-8783-e364c0c7e0f9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "604856e9-5cc1-4354-b1e3-b338ff79de9b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "20592851-b78d-4f58-9f8a-01aaedab1e36"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "36bd003c-b1b7-4fe2-b237-27315d9e20d2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1dc1fb3b-cc0e-4f58-966a-776d42f0c332"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6eb05e6-23d5-443e-8d86-527e3df6f4c1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "af6fcca1-212b-4a74-a422-6f3b18b529b3"
            }
          }
        ]
      },
      {
        "id": "ecb0c970-aefb-455f-96fa-7a48a78d5a0b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "9cc86a98-cc40-4808-94d7-e6cec4cfe63e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ef39ad30-666d-482b-adca-5a7bd570c06f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "47faa745-ef90-4e18-be00-263ab8e4fe70",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef67e8e5-8956-4dd2-afe8-3efa74ebbfd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0f07b30-2603-4400-aaab-65de02dca8bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80095184-adc7-4899-bed5-c8cc23a04300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c524680f-9063-49a9-ba8b-da5986b13646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cca4a5b-3683-4ea1-bc72-092c536ba2c5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec42ab4-c621-4e51-9a23-1d7abf890678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a232cc-b7b6-4c03-a2e2-d52056c0d106"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dfebd09-9fa2-408e-88b3-36a5f7b8b192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "36e206da-8911-4485-9dea-fd36c6714056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6d44c1-59b3-42a3-b958-0da55544bcfa",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42208de4-9661-4153-8e0c-0a9bd6efac2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f87a8d34-8f0e-42e8-a77c-5ef620412062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a34068-cafc-471f-b80c-c744cd062b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ea9e701-22f2-4b14-aa79-e936928b8fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a85152-dea4-4624-988d-430d9f7ddaa3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3e3cb3-0cca-4662-965e-8ac91fe10b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eab8266c-5c62-40be-9d13-20315b5a6839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f20159d-f367-4a71-b163-1f56a4d4ae6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "10930d71-0b99-4aaa-8b7f-43bce02eab46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc5735af-9017-4b5c-aacc-495f6f9b3e93",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "678a15f5-b53b-41f5-87d9-e87a9d828a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f488969e-3833-4e64-9a36-d3bb7dfb3276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd26916-5fb1-4403-bf6f-1b2db44667b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "84c7d3a3-1e92-4d4f-95cf-5b926364d008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "726633f4-3bc6-46b0-afa1-b92b5f71dfcf",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "124e8455-9a4c-4076-a0f9-4291a0050d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f4b885d-f85c-428b-858a-44e10587db89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ac342c-0e44-4e87-81b2-515309ff10a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "09134bc7-78f9-402d-9943-4e2cef3c21b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c4e49a-c2b0-4060-b009-5f733fffb592",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39ef398-d528-4af3-b30e-c887be782a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "943b4d6a-f984-436b-be04-69a1cd81ed92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f6e7038-ead0-4589-bc0a-abb9cc205de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0acaef92-d695-4572-b740-19ba9104e5c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce82406-e4a6-4eb9-92ca-50b0f4774964",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e7be21e-5882-4dbc-8510-4d1c5dc57485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0140a40-9a38-4dcc-a389-a68ba43cf8ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061b1215-858d-4d65-a8f7-ea7b5217718c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "704976b0-3a61-44a7-8d48-43999d6f84b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea769c6-fb1f-411e-893b-05b84f0f2645",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea2da72-394c-48c9-a4a3-7d911d9fb26d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ca6a3d7-159a-4c08-aa7b-03e6067065ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be67eb7-101d-4029-bbe7-4f6d472bf6fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ea5b5a6-90e6-4fa3-a90a-b2231a0f7c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1db8137-9eb7-4c71-8ede-93b49e9b7c7b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "118febff-26ea-4dcb-9fe1-c758aaa6dc1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32be93fa-e3a6-4ec4-9655-cb2001dd76b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a298c35a-28b7-4d9b-92a8-29a9fac3065e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42b17d08-7a44-42e6-a2be-b7302e3d1b26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac63f87-f658-4915-84d6-7a6456405342",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d066aeb-8d90-4830-9efd-e2dc143f7510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd00b2b2-96c6-4cc4-bbb8-70c93813e1f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b2322c-dfc1-4d40-9f84-3b685c7db4b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "cfb1dbe2-ab86-468c-8041-a33c64eefca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb535f3-7a78-4576-9470-f7d63de16e69",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dce98ef-a528-4965-bbd4-540c1334fad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15745331-52d0-4f40-a908-88a1283d59ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3615fd-4727-48a4-8c03-868991ff470a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "85e28efa-6210-4850-adc7-bbdbfd4b486f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e856aa-da56-4c17-bec0-7e9d522699ad",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2883cd4d-9b21-4928-8fa6-86cbe55aeabb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11623e48-389e-4d4a-8244-155862ad9c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a3c9595-68b2-4856-98bd-dcc06b9c2a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eea82807-e077-4f59-9db5-743e2204186e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b13b7fe8-239e-4bb0-9447-3df4dde5d609",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01975ea2-702f-4e02-a8fc-9bcbf1bc8ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a60c78f0-6c7b-40fa-b242-494370ca1fb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f55640-5885-47b9-bab5-77cd289ed46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3fbd8f0-f519-4260-a1e6-600b322a9c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ea0317-f214-4e50-bbb2-d3f4c4778f53",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf8372e-2763-4859-bd72-907b3cd491c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf077d4b-1024-4958-bd85-613279163906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eae5ea6-031a-44ec-a5cc-fe2b645902f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5ecc9f9-26a8-4817-a175-836dfbd4fd2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "581158a5-a5ff-4b8f-93ec-51756113583e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf34c8fd-4d18-4018-b2f8-94a971c1ca24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3ad73de-4a5b-4302-974a-8ee8d6640620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c374165-fd85-485b-afbe-3a1f4c0093c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "07a98fbe-4857-4c41-aad0-a40cc89dbea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0938d4f3-3ac8-422b-81d0-4f06ce4f086e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b364fbc2-427f-4c97-9761-1faeaaf1e23c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7a1a2da-1fad-42de-a1d3-ad43235ec8b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d4c8e6-5e11-4353-8aee-c3f6c63603c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0d98785-8c68-4355-a453-1f0d04a9ddff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01553f85-7b1f-450b-9a88-df03ad12ffd2",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eec9f7c-f35c-4e1d-8fd4-4afc5af74d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43db50e7-5b3e-43dd-a0d6-103959744018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "057a118d-a31c-4df3-a920-e9f37735676c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed90bd7e-9788-45b2-8a94-395cae915eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19787b72-f12d-47f0-b0ea-27dad24ef955",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2233df-98ac-438e-b524-d6478c4ef13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "042ef330-0958-4dd0-b7b3-8a5d5f43d908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0826cbff-b6cd-40ea-8028-f546d8346a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3dd0dfe-f402-4cc4-9e05-d8604f869cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1eedc69-9b0f-4ec6-a6c9-21474c5de934",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf20203-96d2-4189-b7b3-f8a4755da63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1875667-cae8-4059-b8fd-38e29d015220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51f79a23-710f-481d-99a1-8e6a703d401a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d895579-9428-47d8-b628-0af3d2314744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e143a02b-77fe-42c0-86fa-2f041590f5a2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "190fbadb-2305-41e0-97e5-511a96a81575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb988fec-978f-472c-badc-1c6a9338640f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc1a7a39-b823-4a11-9b43-8582e362b45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9ec1013-7bbd-48f3-b3fd-0fb3db95f7d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5e34d5-1ca6-4b0e-ae3a-5b7a49ff845f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de535d6-5a96-4228-b30a-613a9a2d1a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2be5084-81d1-49f2-a35d-3f22b6dc3f09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0613ae-415f-471a-b0f3-2126fa1a0e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbfac937-fbcd-4937-b358-f67aeaa7fbcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a37e3b1-e7ab-44f9-9c4e-4326f1b538c9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "972e8cb4-ac06-4977-8d2b-f9a72547d6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5547eec0-be0d-4555-a0fc-529c88d62303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0401165d-5e8e-40a9-9486-4d6eb18ff73c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88563963-3e82-4cd4-b69a-7fb7fa0134b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d957433-8fe8-4881-8b11-36210b4fb5ae",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ffe180c-a904-4dbd-bcc5-aaf4c7118d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10998e8c-0961-4726-ad02-a1d2ca762a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d98122-582a-4cad-a3e0-e3d128718150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02b16ba6-57e7-416a-9b59-b45b39a9529f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5adb4c46-7d18-4cd5-a06f-216fad38fc05",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa6727e-2523-4cdd-b582-3ab34fd61757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b618bfa-b52f-4df3-a869-038dad906327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdbe2ec1-894e-474e-8c51-5a859bf8fb2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c41f95ed-b0c8-4037-88fd-ba8baa27ea48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af57227-78a4-4506-b775-f12a743f4c27",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4d61c5-759d-4af8-bf5a-57d7e63693ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3481f7b5-eba5-4220-b4c3-f628eaef23ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d3b60d6-04e8-4030-9fc0-f3cfea58a111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4451115-f68b-4ccc-8a57-f119812dafaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6733ac-c16f-4a18-97a4-8442638c1483",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae6b0ef-dcbc-4151-9798-0d3643881fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e4c856f-26de-4954-be1d-5ce195f68c70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a344308-a338-48bf-97a1-38864e63006f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad0cc096-fc3f-4e76-9e54-394c7c3ac840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d744af32-504f-43fc-82b4-2906e5b3c96e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9509805-f04e-4db5-8ae8-e11d2aa1811c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a182a7-8e23-407c-a3a3-a8352e734795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60cc4fcb-7b9f-4e40-b978-3a6856df477c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b444543-73e8-466c-832e-2cb5b3b0245b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b64dcb-c2d8-459f-9eab-09cce4d96c6a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14f84b8-aef3-46ae-9570-6d5c202a63cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc662424-ca38-451d-a2e1-a31d388b087c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac71aca-0b1a-4d72-b876-6dbcc78fe9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d24e9004-688c-415c-928f-1ebd5caaf705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa33e15b-5111-4fc0-86a5-cca7b7ef52d6",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53052914-1474-4b72-af9d-26e51c2ca1aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a52d7965-7325-424a-ab47-ded19b0f0956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19036115-00d5-4ad2-8551-02d48958706b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee3ea686-2de2-48da-9da9-5c1907eddffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb96a816-c5fe-4458-8b21-382502eea7f1",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f8122c-ddfc-4cd7-80bc-84bc90e54982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cf8c4e3-f728-4578-b0db-2c1d0cbb9c12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0d3471-9b04-4429-964a-9cf5ef2c41ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc506a95-11f3-4ba8-8e89-b5a699fcae5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db80f622-40f2-4348-8db9-af604cabb5d6",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6550a7c9-2fd7-41d8-b6dc-1fb89a4d7101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3e36e67-7f93-491d-a46c-871cd4b91fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb58511-1af7-4098-a591-fe537ed700c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "773d1eec-09bb-4e81-a532-469d1d9df15c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6811b2cc-5279-449b-8f96-4b2cf44d914b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8ccfc501-4fba-4e4e-be54-8e502b1f6b13",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f438f76-aa8c-4131-b667-86dc1c1df22b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0304f57b-9218-41cf-8150-662696515b3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c38ba47-d98d-4c3a-94a3-0d82d0f9fffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb8c3903-9e16-4deb-8669-e1fcb43264d7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1b7cf31-6326-4076-a1ce-9d49476f3136",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6477e62-261d-4a12-b513-3a0ce160acd3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "05faba1e-a407-4914-bcca-a4b173865412",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c76521c4-0751-4ad6-8b4b-c0416f1c7ed6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "89d76fb4-3f7d-4fce-9179-e9980582ca9e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "450dda00-4aa6-4674-ab9a-70b658815d01"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6339dfbd-5f5f-4c90-9b46-61cd03904f58",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bb7ab003-5bf3-49d6-b42f-940edf0cc32b"
            }
          }
        ]
      },
      {
        "id": "81b75bee-ac4a-4435-b185-969321a8275d",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "0307aa0b-66cb-4efd-a1a0-5c1632431b6b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "51b6e846-eb20-4e62-b562-dbf689e714db",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bc742c86-d0f9-4f55-b2c7-afe409ccbab2",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f384dd6e-bfb4-456b-9495-bf13fb33c3c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46cb034c-429d-42c5-a49e-7e55be11d1a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e8d72f3-29ab-4f42-9cef-e4f785973b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b9d3913-9e34-43e3-8f04-e3b9dd3da158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d373e0-03f1-4bc5-870a-8ef45fc14bc7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb2c363-c6bf-46d2-8632-c76d1d02dff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e67c398-cd95-43ac-a7aa-ae4338fe4f15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ab5c8d-712f-4b78-be4f-55ee12edcd96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b749c88c-8532-4b0d-9555-01a451da5e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822eba2c-d088-420a-844b-0aab8706e1a6",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c9d30d-39a6-4fc4-a13d-26fe22dac510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83c2aa29-d65a-4f8f-9370-488d74c813eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e49d94-9a43-49fd-8f34-a668109604c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c022650-018c-42d6-b61b-8dcac524c783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3fccd6d-9090-4225-80eb-5a113eb110bb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd99c44-54c6-4443-85e5-ae6ff84f6315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b284b471-58ff-4b68-802c-92cdf962ed2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c94c04a-c31a-45c0-bace-9ac25f2c3629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "47104483-28a8-4a8f-b3b3-532644be0f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971da1d6-6f00-4eb4-91b1-a9f52fa708d9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc94d0bd-99c4-442c-b848-fb9d22fe8763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "636fa3ee-4831-489d-9567-27b1d125a752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e60576-6d39-49c2-869f-09c174b603f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1672b87d-5678-4b92-8d8f-7aa8af6d1cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f392d79-162b-4847-89bc-0d82a9d9c701",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea385ff2-3c61-4b0e-bf8c-4011ed9fb6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a82c76b6-1058-43e4-b71e-25656ace1c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf6367f2-447d-4254-9960-c1ca59c2d09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c220db7d-155e-4c09-88cc-88c426046c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b8f59f-80aa-44c7-974c-8ade6e838bab",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d34d7b5-a39b-4e25-a9e2-4ba918927e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bd032ce-5319-411d-a8b8-3afd2ac46fed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6887bc37-6717-498d-9e92-025f0a625d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c87caf9-4373-4eeb-bc69-8de235279bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf0222f5-6022-47f5-a672-26385c7a844a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac3e47b-ad67-4733-96bf-e206e0e3645e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ade9944-1dde-43b3-a9e4-4748fc452ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec2596ea-1884-45ab-8187-1c35e957e40f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38db80ca-61e8-45cd-820e-915d8585a983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d39e235-a245-4a01-a82a-75a9f7c62a70",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0665586-2a08-4619-b156-aec39dc05e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83b246e2-f748-4e2d-b994-95f84896efee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215be47d-3d6c-4c51-ba9d-f5f15be5ec1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "365ff98f-4ad0-43f7-80fa-6ae5304a850e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d8aba21-8f71-4d24-b3d2-fd1ebad73cbb",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8f72a4-548b-4d07-a8e3-a6286a188bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e492b9d5-f1e0-4fb9-a36e-c6c1d5d5a5d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9787bc67-eed6-49d3-ab27-b908699f0fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c1c97f3-3ad3-4fd0-8b6d-bac37679e644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f505c5-e626-40d1-a6ca-92aa493434a5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31d43081-3b6c-41a9-b6d0-1c3803691eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20d5b63e-ce86-45e8-8097-944c729872d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c719ca29-82db-4e59-abcb-769674a0a5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "035e3d9c-7416-41af-a08f-89c63f5a2984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a4a05c-5231-4a79-a565-7d6199a2c57f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d5f78fb-b982-46b0-b084-bf5526d8f563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83653c77-c2b5-4bee-b3e9-0128350f60cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7c7b64-92ee-4d5c-906f-7aac332f40fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "79f881a3-5c36-44da-96c0-2f2030a69046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7962669b-00e4-4676-baeb-7368670a8d81",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54bb9b5-ca4e-4bbf-9002-b59c8a9ac525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "752ef206-65be-40c5-9d54-83051dfabc15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3cc0ae2-06ea-476a-9b68-24509a303390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8588ced-fd97-4ebc-9e64-c68ca4aeb556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de83527-a1db-4be9-a2b4-984dc7f60ae8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3175bdf-267c-4490-95d3-cc560b4eb90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b9a202b-758a-482d-a832-0fd31b2821d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d07203-d2db-4439-96ea-af2072d77089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d7f7e36-98a3-4439-8df6-7432d5db9fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae0d93d-8abb-4c50-8803-e946cceb5130",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b89d6730-6bf4-4a27-a928-7fbd0a180ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8529aece-4748-4fd4-8e92-016eddd2db5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a674878-cb7f-4a53-922e-2183ef879a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce15ce1b-0de8-476c-8ae2-7d77ec9a2b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd77273b-5989-41d3-9234-9d573c532bde",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ae791b-2343-4255-81be-087d4c7047c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f120f01-bce0-48be-8954-02083cf47cd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e379953-4a2e-4f39-94d7-e4b19a15db2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfbcde2f-c77f-45e0-af81-65ac4503ae7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4167e6b7-8d51-40be-928b-2cc6c16ee816",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4506d925-7e9d-40fa-acba-be1e9b84e2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b1ea184-2975-4df8-a6c1-41f27fbe44b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4edd78-5277-4f8c-b5da-971df6873eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd51c07f-d6f9-449f-b95f-9cd5e52b4ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ccf5953-85d2-4d05-87bf-d870a829b825",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33040695-5892-4e4c-92de-d754d675f2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f68ffe04-ca8f-40f2-bfbc-5453ae76ab6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf17796-1b64-4002-b712-756002d97804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f164d41-cee8-45c3-b4be-231ebf30c77a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33ec5e1-a99c-4ddb-9e68-db030c3f7a71",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4352f666-7433-4e76-9104-14515d5dbe03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f1f45a-1209-4820-8e7d-50f788b16578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "308b74cb-7bb5-4573-910c-e5b4d9cac387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28a982ab-0a1f-4c80-bdd1-53656971e729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376e6eac-2bb0-4c85-803b-d134dcfebac2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb31440d-9b27-48dc-bab0-30424bfa8d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71a9728a-991e-40e5-8f58-cce8ad98b9fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc50c6d-0c5b-4d64-8588-276fc7d56fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97cafba7-10b2-4ae9-8241-f635aa6e11ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609a8c3f-ca27-4254-8eca-0ed860dfc4c7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f78957-50bb-4788-ba83-f93a06f5a31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e24e085-ba57-461c-b23c-ba73f62c07fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea756f18-a8af-4fa4-8a68-eb2f45bdba36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af443ade-9045-4bcf-b2ab-8f453144504f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95f13bb-b54d-41fd-a03c-916a89108f06",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb528d9-6870-4ef2-b92e-5df8180e587b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "830f6cdd-8962-498d-b448-24fb4f9c4147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e24770c2-ec34-43fb-a9af-52b3c9099c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d2c4070-ef2c-48be-9c8d-36c19388524e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee588e34-cb29-4027-8e6a-30b0acc6ab98",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3611bf34-7495-4cbd-96d3-bb9950ba56cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "809d5147-3cdd-4137-bea8-fa338e5a2b2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8d1612-a8b5-4c58-bd00-4f094b507157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "999ca0d1-fe37-4f8d-bc9f-b0932ff027e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ac3d6a-9f3a-4527-b29b-3742ac9629ee",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a977995c-ddd3-4043-a6f0-fd46060e6cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef1af477-d061-4a7c-b323-c30c2f490749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2c57c4-2d72-4ba2-b4ce-8a1155a8be3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b994980a-e000-445e-af3f-94ff20d21aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be29188a-628e-4226-b459-6486d6fdcfe9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c75bc86-27b2-4bda-8e39-dbb74f1d8f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b511d314-2608-427b-bbfc-cf9c7bbb79c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fdabc5b-c8ac-49ea-82e0-ff41b542d365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e997f19-3a3c-4cd1-aece-45e554a10099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2777e24b-dd56-4821-a5d4-7fb71fbd5862",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fecc9272-5911-4c15-8c3f-ef07991ee034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20add538-7052-40d9-9812-68c400e41b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4d2bce-79af-4319-8e13-23e699d42e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6785a268-6c67-4cdb-8862-658d9c857f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55bb3117-23cb-4795-b052-be023d10b03e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e8d1b4-d2ba-422e-b662-77f1f50ccccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a40d9958-8aa0-409c-9780-45477233d45d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979095d8-e8a5-4b2d-9bc1-67a790158925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bd7399a-3823-4b15-9155-27eef63b278a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d80d783-9a2a-4e32-b185-51f17045f8b6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "844c892c-a53c-444d-9739-e8a9d2dededf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d46028d8-cdc9-4075-8741-cc1e79639e74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a057af3-5fdc-4c97-b35c-8c2d040b76ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e2605a3-2da4-4e0c-8eff-dab0a9bc55c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b1ca544-793f-4dab-96c1-bdd07934841d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c5b059-85e6-43f1-92e9-ed4fc44baa6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c1be36c-3b58-42e6-a5ea-352ef640d4bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "569c4baa-9506-47ce-94e8-3fae5bf5e376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0f270f7-9c96-433f-b9d8-a3b98ffa4a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6d8061-0a17-4150-a2f2-a0ce565ff198",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "576daaca-75d5-4a05-9a30-e320ea477e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b238c648-673e-43db-8e1a-afd294cf5105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8e70df8-c4f0-4e0f-a481-ccd6eee7f371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6354edaf-0b39-4982-a7e1-ec8a54962462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0986516-e18c-48fa-88fa-2bc1a1e843b1",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a21923-7654-4846-826d-b50c982ef0b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "200b7d95-2ec1-4274-87e9-68c6c9e6667d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35674e78-2f7c-40ad-9302-ead29221167e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "557e35ac-3276-4ce7-b5fe-ec69a9a1944b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4314bd9-d318-4439-9984-36b8a716657e",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3737412-a6b4-4525-a723-7d7426bde8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f51c5f52-b05c-4686-a088-7e3d4c85cc40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937c45db-7be4-4b3d-ae30-715e7b30e75e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c888d0e-329a-4501-91a5-a7fcec76d269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367c01f0-0a9d-4a61-b402-386cab816d6f",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b3c204-873f-4a23-b52c-683f09fcf2e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41f439d5-83ac-4305-94ff-071d80f2b5dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4d291c-4308-46e8-934e-2544e3517f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6af8b9c4-83ac-4914-a8e7-16f492882ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52400e61-7c6c-4b0a-9e1f-ad65d0c31773",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd81dbe-b638-4e9d-9b9c-451d34db8c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9684c9e4-d714-4c2b-8f6f-2a6bbd3ce145"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5003a8d-882d-4288-963f-86253f69b4eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7235c35f-f8e6-4142-a777-c0d2420f2ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a628a27e-bbe2-45c4-aab0-c63faa7bed14",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac63449c-5304-41d7-8686-f152c8c82846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c743f012-1300-41f9-a248-08bb714fd95f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a146b6-de6c-4986-a610-cb0b9d3d6ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ba0b71a-5415-4673-9763-667ba44168fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6b7270-728a-4e46-aad0-36b799ec45a1",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f7f9ea-2aaa-448d-84e2-00c848c49d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33d66993-c169-4399-9ede-1dd924bced7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0887f7a1-516c-4cb6-966e-1ef1080851cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f695c7e-3569-40d0-ac79-2cc95ac18b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67bd8bd4-f91b-4187-ad06-54823f5dc63e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04501e6d-cd50-4f27-8d15-5c858b365f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97357401-9831-457f-b38d-6bafac517d11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f4fa484-4a81-41b2-a3cb-86e4afdcde59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5824658-1d6f-465c-8f5e-aa981c9c5685"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9a0c44b0-7a24-47c5-911a-a38b38c066e0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e20f3ef8-aedf-426c-9067-0324750377be",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26fe4403-17cb-46c1-b767-d14064283568",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "214d44fa-9c6a-44cc-92a4-7fe81d157e70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13699668-9efa-4cbc-848d-7d91b72d1ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c87cc0b5-a84f-47fd-b331-16d106d06a46"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce24fd1a-879d-4d86-a935-cc98567c00e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79f14468-5b92-4bbe-b052-18752cdad604"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d90477c2-63b9-455d-ae28-e86006f5cc57",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4b1c891-9d2d-4745-89f5-9bd5cbe0a70c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2fd21443-31ff-43ca-8b2b-7c08707a68fb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9e22e566-22e9-463a-9e9a-c83e904cf6ea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c16f688e-1d04-4fc3-8132-c32ef1e9ab47",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "60ed4f4b-354b-47d4-97b6-759632de33e9"
            }
          }
        ]
      },
      {
        "id": "706f32bc-e41e-4883-8e10-4927c0da8fdb",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "91c07e5d-e3be-4a21-a125-235e893be152",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a81bb21a-3557-4232-b3fe-a483cec3000b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "485ab0ed-dcff-41a1-89f6-884da47486f6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3888c44e-c4e8-4e7c-80e0-dade564c1843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "098044a5-295a-4c3d-9a4d-3dca08f01edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9daee0-ba63-40e8-9422-563d5fa07b15",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe2a570-4500-4663-9796-709a8a6b096a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dae50493-1dc8-4a31-bb4b-459ebac347f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b7a9ce2-297f-44cf-9046-d83711c6b640",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0921fff3-96c2-4b42-8e19-a9a30ba0c680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "703aa25d-32f0-4451-91df-4c2fdd6617c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e47bbe7b-e351-4bfb-ad8e-ee206a2e3e00",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e652f2-a7c1-4a48-8a20-9ddf6200aa7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "736e450e-d920-4987-a375-71837546ba32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0698129-c79b-4e53-99f2-472ccd5a8c32",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efac138a-cb08-4f6f-8e6f-35bb7ef75f47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81f4e90e-c3f2-41dd-8c49-0f8df26bb1ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e869fff-4f09-4a8d-a289-e1b807f82b71",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a6cff9-bdd0-46d3-bf84-c6b32087b5e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9feecc86-b713-434c-a39f-ec47ee09dc6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01246bab-cf6f-4983-950a-b84618bfe5c3",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d219ccf-97dd-4faa-8c34-2f503589e424",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f8ac22-3130-417e-b966-53b610b943b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3505da2a-c3be-4102-9a12-cbd494c540a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec40a2dd-9808-4515-8cc7-3d1e6b194e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344f3af4-1239-4371-889a-27eefdc03a1e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d8132f-a041-4841-bf95-d86b941d4bc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edff9c8d-4730-4bca-b686-0957e593245b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a1b093-42a4-4171-bcc2-e603b6f48668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d2bb9d5-c48c-409e-9122-bb4403626b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9cc7fc8-f6c9-4de8-928c-52625e01b786",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe2ae7b-b2a4-492e-bab7-cacf0fe456de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "694aa8e9-3656-4eea-9fab-471d4b29f05d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31456cd1-cd14-484a-bf67-7376fa36450a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6714054c-974e-4dfc-9e78-6fccde64aab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a921043b-3c92-4d28-ad05-0dc820d4ae97",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f32fc4b0-b48c-45fa-a067-2ec5a8760aa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cf6417f-96b2-4ab0-b712-039bf819c5a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d394bd96-965d-4f53-b36a-459901cedb12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4e0c090-b497-4fd1-b04b-80146c17d275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c9b369-8323-4ccb-bc73-5832f3257f29",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c90b0b-632d-4150-83ff-dd20b0d11ab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58fd1458-8280-4b69-9927-ce630d67f1c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e2563f-471a-44bb-aa48-bc6017dfed4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f4372b1-8524-4676-9d67-1fba78c77544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f42c6e-4432-4181-85f4-c02ea901feef",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20efaa90-f223-41fe-8cd1-101cac1569fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b14733a-e6b0-4eaa-a6fb-36c57c55172b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e501f30-514e-460c-8bba-46c6c032517d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63b5afc2-0a50-4ad5-abe4-982b9a7cb144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d37242-a809-4e2b-a18f-5a05b941234e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515678ee-f321-4473-bf14-6625990c1737",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "523568f1-2743-403b-9a38-1ceeb154afe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dba69ca7-3c0e-46b8-9b17-b9d572aca94f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abcd577c-1297-408e-9144-51b12f1485f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3268f1fe-06cf-4579-88df-47d21ec28d63",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef826d4d-fa8e-4b1f-9433-e291c2e06f0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2364ca57-9141-4fee-b8a6-1c1bc7d1a576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15aec87e-43ea-41b5-9da2-e74313bc866b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e01048d8-b483-407a-bd05-8e98390c8515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f002d474-c527-48e1-aaee-df71136ba1b6",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0ec54d-33e8-47b7-b87c-22d871cfb77f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0d32e88-05e7-4548-8ac3-300a0e5afebd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e36a19-9d6d-49a6-912a-2f1c836ae962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9b3004e-d66c-4f76-8e78-3c4aced56fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf1c0ea-bb23-43a7-92da-fbc57022a283",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32316074-91bc-4104-b568-701d7cc90048",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5eea2b1-fa82-4a58-9447-8af845d88057"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "842889eb-1a5a-41df-9c90-181821ba9768",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0e27d5e-b4c6-4f7e-b8a4-76ecfef2c025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1953ba66-b976-4a93-aa36-92891607bf4c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21cfd530-c167-4739-8876-bbd8113a364a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd7bd316-0b9f-4429-8209-378a619613ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "643f446d-1893-45c6-ab2b-2df3569c7e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "656aa4ad-26bc-4fe8-b668-15dee6d1f8cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "022729fb-66a6-4d65-9683-859b6b4408b5",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffba968f-a6e6-4bb2-80f2-0dfc6fc0fb18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15cba00e-b463-4e38-92f7-b4c54a62ba22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e94b532-e594-4867-9d78-bd937b00f4b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e659cd8d-587b-45ca-b06c-c938d575d444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253f56e5-dcca-474e-bad0-aebd2f709674",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22471236-3537-4f32-b118-dadf77da176f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2597f7f3-f85c-46df-a36a-c8ccd99a5022"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "277185dd-5fdd-43a9-83a5-66612640ffb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b76b7706-8104-4c35-bf77-6e78d5073f2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316a61df-ce8b-4cc8-bd80-4fc5dc1263a6",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97bddea-d2ea-4761-bf1c-90965e67c4a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a631bac-f5f4-42af-8b4d-871bd8f6206a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27fc97f3-997a-4573-8413-cc605e81907f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "584bfd60-ee11-4842-9df4-d7f0f6645d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93303c0d-8b3d-4d8a-8f46-e0bf9191cb3f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98788cb5-05b9-487b-800d-387c0b7944b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05aab6c6-0e09-47ec-aab8-d42a1d160afd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc1b9fde-5d05-4e8e-9a93-34d24c6567f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d50237d-9653-485d-8cfc-6d552c44695f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65abf0c0-3cde-4278-86d7-8459d6dbb414",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae21076a-8a7a-489d-a326-ab7df0a105ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d2f25c4-b50a-437a-bfe3-c24f7081d2bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36d0325-ac05-4266-a519-6c7ea7e6fe00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d05ab3d-8a96-495f-9596-40f7019bce31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13cd32ff-7c05-4cef-acda-83a53e4ac057",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9bb9247-384b-4ca3-96b8-3a43f59a76e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e412b1e-d9de-425f-92c4-471ed5cfb9ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe79974-aad8-40ca-ac7e-d15fc0f0f52e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1d61709-4af3-4084-9c01-bc6e210a4749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b1fcd9-b412-42b2-8813-a1c8dd3a45d5",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851389fb-a46b-46c1-8a33-71bd4c6cf8ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7132f15a-0360-4109-94ea-90d2ea5195d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80a5585-5e55-4d36-997f-e3b8a352cf7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6845003b-2470-4ab8-8851-fe133e1af1ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "699619aa-40ff-40b9-95c0-449242bd89ec",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a36643-8396-4e9a-a19d-b19c40d54438",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8514c287-1c6d-4600-991a-5ca3aefc859d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7680a35-6b8a-4831-93be-cc9e3ff762d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be9116c-b1ef-40aa-a100-68c379b28676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b74f2d-7662-4e91-9acb-d277cdc89691",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c539f9f6-774e-4d02-8e78-b66046eb00ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01dfd33d-621d-4edf-a5d5-35089f8e683b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a161954-310f-422d-bdb8-1dcffe7b23c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e4c6b14-2d0b-4cfa-836a-71f6bb5d6645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932610cc-bb4a-4d92-9568-ddc04e40ef55",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc7891e-05ce-4655-8cdd-02a637cd0dae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62b8b16d-d3b6-4aa6-860a-24fc62600d8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "035baa70-b1c5-414d-8b91-8f74ab32f278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d26ee72-2135-4ed3-9c4a-bbeaab0ccc33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb23f2f5-09ab-41a6-b3c4-9ae2ba06f1ca",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3bfbe27-f2ea-41b3-9894-34639898b6d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "698df43c-c291-4a14-8b2e-be0d446ca324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b351fdc-ff62-4d9b-83da-b1a920983520",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32549ccc-cc9a-441b-8168-8a80be60186b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c1abb5-fd59-4e6b-a106-48be914e7329",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd233d50-eed6-4c1b-9c6e-92dfab7e7577",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c32fcac7-6fd1-4b23-83bb-7c71e410d278"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef31038c-a43e-47f1-8f94-69e5219c2696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d866a26-fe44-4052-8038-61ebe8c9f01d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eac891f-b476-4429-8851-b88e5cd06018",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6df826-74d0-4ca8-b0c9-68f853165d93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1c8d756-6136-46ea-bf1d-7d5b16c7531c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2217c28-6cfd-48b7-b609-918d25005ddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6591401d-0f6e-4e45-892d-83b9d0bf3ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ed9df5-835d-4925-a73c-8d0a92f6605c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3527d12f-4c64-4f54-b75c-87b8b3d4ca7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75208b0b-03ed-4338-bc9b-5984a9544356"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc214e06-c4ea-49bd-9a2f-cea31197cc3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82c8c234-8225-4547-9b7c-ae98d57d5464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1e16b7-334b-476b-b539-d084576a85d4",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d5068f-6489-44a0-b97a-e56736c473c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8ec86f7-f9ac-4fa9-88b6-9f4076242700"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "576c7444-1f1a-4868-af6a-6a956c142c2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daea8444-055d-478c-befc-29d266b06ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801756bb-cc38-4582-b2e0-21c25ef3e3cb",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b1e3c66-cbdb-4b5d-9637-375927d51324",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c9d6c7f-664d-4921-88e5-0b7c94353fb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "100eacf8-0eeb-47d7-8b11-8a5a3e519823",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d85f238d-b3a9-45b3-9caf-c4549e40e3d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65edcaf5-ed71-461b-8b6c-44846d4829be",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4960e2aa-d98c-45bf-affd-60430925d9fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a42d828-a1d2-4caa-872f-211cf4a79540"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ee5faa-6006-4b14-b274-dcb3a0d7a69e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a100c974-86e2-4751-b368-a67510116af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e0432c-c9dd-4d40-a41f-815990d781f9",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b2563e-bcee-4061-8744-c9e5b6e9993c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7d11515-36c4-4777-a553-3b32288dc69f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f50af3-0936-470e-b292-d93235607335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18a4e92c-80af-4e67-a1a3-4d54fd9e886b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31afa08f-3b10-411f-ae76-df071c69d2d0",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef67690d-bccf-4b32-a2ed-884fd0d19af0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5834ed24-ffdf-4e5c-b814-0f364b80b7cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6198c945-2481-40cc-be53-86467822de6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c72dea2-7813-46a2-8e65-f303cdd73975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffbad32d-21ba-4d47-aad3-0c6c8f789d01",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc94907-ce03-464d-8be7-139c86f951c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3f4d47d-fc72-4633-9fc3-170a2ccbe7b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44da6759-a080-471d-9888-2c4a485286ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84cc1ab0-37f7-4ada-a507-a55bdccb6170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f54f9a62-da5b-45c9-8e0a-46faeed2594c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c1aaee-ec70-4a9f-91d7-2b61d3e27191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded46da9-56f1-40dd-9750-472904180537"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9573a850-d2b1-415a-9ff3-2b73e14be577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd943230-2d1b-412e-bdb8-28407f3ef877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b68a4ed-5389-4ba5-8ddf-446a6ff3b87b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fae27b16-9913-465a-9250-860eb2b89b50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfc20816-07e1-4982-929c-f1a6e8a39302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16e93b8-bdf0-4393-95f9-d67e1a3401af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1bb4b18-7f15-474d-ae2a-c9b37023cdbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca79c8be-5325-4afb-9fac-403528d40a46",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0649263e-6251-4f70-a165-c89b5772893a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "702eda7e-18ce-4114-8713-217b6eef9332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1feb80d8-1379-4d0d-ab6e-f9e5368194f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74c5fda2-f48f-44f2-b443-16b65ed42102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3af8519d-4bd0-4cf5-8574-655e7ed81d9d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "818441b1-5f4b-41e2-bdb2-8a863d28dc80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ec12a2-91b1-42b3-ba2c-42d60e876b47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3929e835-6dc4-4e66-842b-0fd95b2c30b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97fdc2db-2c72-4a88-a566-271b2569f56d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa20ec56-21e8-40d1-b085-8858ce9d7879",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb8f8b4-d219-4e27-a007-a00cc940d004",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2057996c-90d8-4d6e-b3b5-82eba106a913"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c985e17-3e9d-4236-9c81-520f1c15da41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5557f05-516b-4f12-ac27-fcc59dc87e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fab25de-3147-41c6-90df-7edfd2488e30",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3edd4895-d349-4588-b4e4-0daccf902c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ce39af-4e03-48cf-8499-cb2b14128efa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90c29ff-8e3a-4b91-98fd-820c24825622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14dcbddc-62f5-4c99-bd15-3a6d1765c0f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca277ff-a559-4e57-83a3-02cae328e27e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8434bad1-a53a-4151-be5c-6e2b609b9f18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "441f20ac-9b37-43ac-b1a8-864ec8e087b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4bace4-1a1b-4131-9c58-7f0b304ec08e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c0b20f0-aac4-49c4-ac86-c936e3b1a9ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f234b46b-e17f-48c0-bedf-c245c8645cb0",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8079b8ca-b78d-46e4-9950-a53910ad5641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24568fe7-07cb-45db-bcb1-61d862e5cef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab76a76-3ee1-49d6-83da-3c81fd72dad7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0411db8-728a-4eda-8cc0-8e6e07c3179a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f801fb3e-fca1-457a-9f13-0a54d8bd9305",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2ec5ba-c141-4e02-a107-1eda82c0e8a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce1941c2-a984-483f-a93b-6cb7e9c72f5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c528c6-ba23-461c-b7a3-0d13421061b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0b524ce-868d-469b-a409-acdeb46178ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ad6b23-5730-4510-b77d-3653670cbb5f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4996f9-4582-41f0-861c-36f18e19f07b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b61ce1a8-7255-4fdc-adf0-36ead3da6e2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f10dd1-5f96-446b-be2b-ad257cfffd24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7a3738b-6cc4-456c-bcfa-550d55ec985e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db32e56-dd5d-4b2c-bb1d-334e5e3e4946",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20ed758e-5711-416a-beaf-a1a4d9e42389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e607c54-7bbb-4981-85bf-ab8a15784cfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ac9538-adf3-4458-b141-c72ef77e3b20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff1af42d-4446-4d69-85be-52fceb709bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46202b58-863b-4c00-9d74-e71bc2ae098f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29a3cf0-5de8-423d-b2c0-90c64a917e12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7606cf7-d8db-4f34-9a85-50a0292c39e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad7bdbf-feb8-4351-8289-a4cc3d0b1c64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "211d0715-64c9-417c-9e7b-c65d9fe225bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d2527d-5b84-412c-be90-80e715e841a3",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff0567c-4b91-4da3-990c-f303e7e5eaa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4787b533-bb01-438c-a033-9a91db5fb2ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c081804-f879-4d9f-8c56-347232a84853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5a27430-de2f-4c17-ae63-4136a7bf684a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc49df4-e9ea-4966-82aa-c265a0ea6384",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aacba9b6-8969-4d1a-a2a0-e921a44922e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4094e453-8605-4fed-a293-e9c3dad86e5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6144a18-b47c-4dc4-b003-ab1d8d9de63c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "214e9db8-a5d7-4bf4-ab38-6bf0f93b575c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd17e86-2d43-4f3c-948b-21d9bbf0515e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d4cc556-cc32-47f6-8ce7-ce0fea65cdfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6db26e0-eee6-41fb-a188-3cfc41e9815f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5d64dd-7945-4420-aa8f-d31cae0081b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ff3fc0b-af8c-4df0-9c8a-6fd79d99ffb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d82b13-01a6-43a0-a563-e3efe068dc3f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f67084-64b2-4ec0-afe8-f3ff849bf009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1075597d-8f24-42cd-b009-27d46096b926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c2431e-e172-4e41-9adb-75e8888866bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a90c954-c9e7-44e6-93d4-4bb00aa4f175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d5e0432-1f91-48b8-8875-42ff2e4c0889",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ff567f-65f4-4950-9e6e-a296ebf4d540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "047cdfa0-813f-4500-b91c-e4d41e3bf4db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34805fe7-facd-4fdd-bdec-c5a57ca9e087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e26cd63-0291-438a-bc03-6930056237cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1dd9209-b159-468e-af70-ed96bdabd41c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d9d70f-013b-4fa6-8443-0fbd1110fc3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef242c2a-840c-48e3-9afa-2cfeab6e43c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca0bf092-ec3b-410c-983c-62684472c52e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b326e13-9b05-4dd6-8f29-31c38ac0a4bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c111114-5c85-4181-b86c-15aafc7527a3",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ba292a-4c6d-4b97-a4a8-f80acdf027bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a817aef8-cb07-41d4-a7d2-dc79b2dfd200"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb1462c-1337-48e9-9692-02fff068c749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b0d694a-585d-42bf-9467-19fe7eeccfec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e02c473-e1d8-49b6-b308-64cc212fdbfd",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c95734a-c020-41a5-9772-071ff4d62f48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fe74e0b-b590-4ff1-a535-f41a956dd23a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c86bbdf-25aa-429e-a56c-2f566cf18a65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e65aa63d-1c98-49eb-8cc0-053d9af18a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9f5c3e-788d-4596-87d4-1c9b8df521a0",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c25495c7-769e-4b80-b46a-c50959201e4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b862117-316c-444f-abef-b500c140e6a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f96d153-0a74-4ecc-be90-3633d442caf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fc1ef4e-4911-4063-a2d9-bf4bdde314a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc5fbb4b-39ae-4955-8112-ddbf2295c95a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e5ce0d-3ac0-4ed9-ae60-e473553822f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "489ae5fd-5461-4d4e-be5a-7b6f0c0f1aae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0376b24-538b-430e-bfd5-7aae06ffea7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e3d9804-0bbd-4ffc-81c8-8bb5a89c1aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b58f2b2-3ebf-472d-8c8c-eaaf829a9f69",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c805dd36-cd57-4cfa-b973-a29fa05af1b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81e3dca8-b8ce-4fd5-bb92-a6a7328fab58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfbef95f-66c4-4b71-8cc8-7ef562b9ed6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb066a4c-9bc6-437c-8d28-0935e4825722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a2af74-5d9a-4afc-af64-718e82e5d6bc",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c069c2cd-ec0b-433d-b21c-310f777bb56e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c45cf129-69f6-4377-836d-666c0abe478f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8193917c-d567-4fec-9a3c-6bf05ec72bfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e1a9746-9ed3-41fd-ac2d-a694b481c431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5adcfc1-c251-4e8b-b9d6-753d0f8aff76",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d76e64-c1a2-4a82-a3cb-50ee9ebb9d3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bd63416-8020-4d21-b691-63ae7baaa82a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60257eb0-62d4-40a0-ba3a-e1579cfb2289",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9addc80a-273f-4781-9337-476bace8cac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "370257c2-b771-4359-8e89-c84628f50cb5",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593b406e-2c57-4268-9759-28485760eef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07a1e256-df02-45b0-a682-545b77038bfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf518423-368e-4a8b-8632-e558549b8a36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8db14b61-d722-4abb-aad1-ef87bb2ffafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6cd4444-e49e-43e0-b92e-0d282a2f41e9",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "488d3ea3-78d8-43ed-800f-1563f15e6977",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f273d26-d73a-4b09-a08a-7333feb569f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6caf8200-98d5-4ed9-8b2c-c0f680037519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "181650c3-055f-4310-80d6-f59737f0b486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c31828-6cef-4850-bfab-d853bbdda4e7",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1030e697-9173-4985-a2b0-5d28982d071f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd77dc55-8ade-4aa9-995f-2594bee56620"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8998d957-d2ba-400b-bbf1-e668c2ef3da8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21acb276-114e-4aab-b14e-453f402b1ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73ac8bf-5754-46a9-b218-c0480827de3a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c87257-61e1-4cd2-b7e5-a929c20ad75e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a4be6b3-eae4-4eef-8c08-e6c2054ee311"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc3e734-dd39-479a-85a0-742f121d7d3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27508abf-d3c6-4589-8eb4-7ad63d8f6c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874c74d7-be7d-4381-8076-9a05729392a4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef7f36a-9333-4b53-aa69-0e7afbc1b54e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5223c8a5-3142-46b9-b278-150ea12c772b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb9815da-007f-42f6-adab-97001990cd78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cab9ea9-3d07-4783-82f0-c8d4a43a3ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c87eff2-4f3f-41b2-9121-479b584b496d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "529e9466-ee66-4ac5-940d-0d44efa949e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6db30f8-001f-4b2e-8b0b-095f29243d91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd3565c-9bbc-476a-aaf0-a4b0ea96e20f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86404ab9-7d80-49ea-a595-ec67dcb0a5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e08e8b-53bf-45c7-8c12-01f3aead36c7",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa5df0f-a361-45bc-909d-0dc7f47cbad9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5af7dd69-d6f7-4a9a-8556-9c9e05e1f6fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc2d186-176d-470f-aec7-4d0cbc79d288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e26868d6-a011-430b-8c66-7a2f8bc9175f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b8c109-c695-4f55-9b62-d34d508effbe",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22be80e5-0e9c-4094-9f0a-aa17efd87aaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81692131-d359-43c3-9a69-c84c9b22566a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d09a7d-8407-4bc2-b0c3-d8ff1095f9b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85f63432-c944-4a14-bab8-4ebe19dc8d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8350f7e5-ae04-4b86-9cf4-9818cc6c5f50",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb19145-56f5-4c4c-a61c-ad6cc96a784e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e942d3a-8864-4acd-abba-ebf83227e07b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e98a2041-685d-42f3-8e0c-a77fc0dc5d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d69b70c6-b7a9-4e4a-9462-aeba10ff2691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e65420e9-f70c-496a-b0d0-9f4ccc0522fc",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ff3303-f56a-4321-b07e-032924d50f5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1263bd33-a681-451e-af4e-23a40c1ebeb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "183f9760-14f8-4e05-9122-f23fe874f2e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "946dd958-15c8-4baf-af77-70291d1c776c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a4e690f-36ed-4115-b390-0f0cab166cef",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3885340a-52f5-441a-9c35-1f2dd47f1819",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c25d6e3-86d2-4591-8ea9-93fe226f834c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f992cb76-9a2e-409b-9562-9de851284b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e94928c0-0475-41ab-a39d-76d81ac4dfae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c792fe-a6dc-4157-9f2d-5e732d89a543",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e603ae-f00b-4de9-9c6b-f36f4d94704f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9360b467-4136-4854-aa84-8ac33f54e003"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4758a3e-4bfb-4a69-97ef-77b8df3c7465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f1d0635-50cf-4845-9ed2-bfb7579143aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e45c03e-74fd-47d3-9625-dcccf5f61bdf",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c22b4f3-e326-4976-9383-35b10a5f9d11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05be7a66-18f7-42f1-8bb2-140ba813d5df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd835cb-e95e-4415-8c5b-a3828da4b26c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9565e2dd-bd9e-4670-8d69-63806b16f344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487c57bf-d68a-4954-8486-fd6725fd19da",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af6c1431-9d35-4bce-8b10-419f9410abdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a399470e-ed23-441e-a636-ef973b90a23d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a36a4f5-9d2c-41e5-800d-ee6dfa0620b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51acee6f-a5a0-408f-b454-831b896a4e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b17e79e-39de-46df-823d-a3c80e92284b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6886f79b-a37f-455b-a9a8-341687c3dbba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8292cfa1-7e56-4654-a6a3-e8412159f25f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e696df2f-56e0-42bb-b9c6-28dc674ea6f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6772977d-1055-412e-91f6-c87bccbd6d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6377825-04b9-4302-a174-f1f969c37916",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e8d276-daec-47e2-be78-de1a7f94915e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd7fdf73-a93f-4dd3-8234-866e3c001fa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a68ca487-bafe-4551-9c96-69a5323cdf14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf75a28a-3018-408c-a1ea-12751c0a5dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8916b4a-25cd-4b86-a50f-b0c324b98960",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497a62a5-5a3f-475c-aa89-b767ceda9401",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7ac6a48-5ae9-4750-abcd-ff411a4199f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c759e9-6564-4aeb-b152-bb5d6dc7a4de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c856e518-d96d-4598-8b31-abdac0e80eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2ea62b-4820-4f7f-ae90-9c525ab60613",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78ab046-6dd2-4731-be9f-98ee51caf414",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "082b0aea-216f-4092-9da8-6785d4962942"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be1545f-196a-4e11-8cf1-b43ba3b46966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b241c924-b0b5-4cc9-b2a8-2de3253fefbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "996164b2-daba-4c40-956d-96a9c844b515",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c21b988c-ff0e-4d47-8c0b-b277c7363923",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fba05d07-70d0-417f-b62d-635deaf4fdee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c953cb-2bb8-410d-b517-9ae195985608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fc134c1-4a8c-4590-89a3-dcded77beb60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9df0fdd-f00e-4131-8ad3-518daed98544",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49fe436f-0c67-47a7-97b4-c84163a9175e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e0f02a6-4fa0-40f2-9f99-178a59d4959f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc4f9c7-a7cb-4ffc-8153-dd682c1e120d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "380f9534-5208-477c-817a-9363c105f2e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5b640f6-9618-48d7-b2f9-ed4d149ea706",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91829684-e05a-432a-922a-6e863a33cfd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22a6102e-9614-413c-8a60-fe78d09c5039"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cad4c5f-f944-45d3-8e3e-9dc976df3d0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f82ca29c-3265-483f-bcd9-340e69ca028c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc0632d7-5935-4a9d-8ec2-3e98b4310bb6",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe5d8f9-a749-4646-9bf3-73c60110f9c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48b076ec-c8aa-42b1-8235-f264c34c0d03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "585ebe2a-268c-40c5-9f86-d442aef6c0f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd163c53-3a1c-4923-99ba-746db7c3c019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37192d1a-8fa6-4b3c-b9d4-4c4329f16084",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5949dc6-64f8-434c-bd9b-c9c357c73c43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fa733c3-02ff-4fdb-b7f8-dc3efcbba59b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b727a049-2f65-4334-9dc4-84b26a7f6b35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "617e9805-eeb3-44e5-b6e5-48c4a6a83a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac42f7b1-679b-4450-977b-8fae7aeb4523",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dce434b-105d-4eb5-9ed9-1bedbdb7c6b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b22300ff-7c37-46ac-b3f3-83bf13b4cac1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5145453c-1a98-4fe4-b24b-5f38dbccd9ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9b44b5a-cbd1-43bb-9512-26c58562cf26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9066b76-c0d7-44d6-823b-1d38f1801a5c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191bd3f0-e39b-4cc5-b141-81bb0a97e3ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "832d0136-9c0f-47a2-93c5-e670fd674e7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b3a7eb-86f9-4d7b-b8b4-b7dee8987139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1ce5e98-7734-4220-be8d-9730aefb3e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0d90d1-569d-4dd4-b51f-42530669e1dc",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec0293ee-795a-4d04-a47f-4e172b63557f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7283cc78-614c-4bb8-97db-a6756bcd31f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37bcd0f-a952-4076-9b00-2af41df8e736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84a824d3-68b9-4dbc-8c84-dd5f765c55b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f7af33-b8cc-4091-80cb-d026daa11e96",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f668b98c-d8ad-4fba-8444-81bccbdc59c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df0988dd-b702-4c92-95d4-fae084e0964f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f2bdc5a-82b5-4230-80e5-07ac2fb1f4e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "718e5efb-5748-417f-a5da-eeca1a6b44c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d51c166-6b52-46be-9732-39e864085504",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e9eec2-4eae-4dbd-b825-426e4228bccf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba69d20f-ba66-4ea5-9ce2-d73e7a618b04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1cdb935-fece-40e6-8577-06a02b237f23",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42324bee-016a-44a5-8646-40ddab1040cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc303a29-41e6-48bc-9e0e-639492a4db46",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a858f9b3-f7d5-47b6-ace1-a370edf6665d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4d92d4f-bc51-40ec-941a-c94387488cc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6baea82-fef5-42ff-a90a-93eabc4a264c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eab119b-53c3-4460-b76c-e6ff77f75413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721bc347-3fba-4143-a8c2-35c3ade4fb23",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b255edae-e775-4180-9efd-b75a6deeeb2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa7391a6-7b47-447e-935e-98b7a7089691"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc26c07-71e6-4584-a1f8-f8b39ffc9225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f0e3ece-7d75-471e-a31c-b1fa69209077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72249d74-3be9-4ab8-9e2e-b02c51b1f3c5",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d305a8-9a6f-43b0-96df-e341bb04ef79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53c83a44-fe01-424e-bed2-16ef125dc317"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0539c7ec-a2c2-4c8e-887e-24ff7e4d7ad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2baaae50-1614-4529-8d44-f09de7d8eeb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1706c1f4-01ae-48ad-910a-f551cb71f097",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af0b9f1-e084-4acd-a0e6-e9fd9713a7bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "706458bd-c88d-4ca0-8eb3-81909d1a45bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c965a0-dec2-4cc8-9564-2162d2ddc42e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c277ff8-0655-411f-a139-9f11246fd092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60851b6c-e0c9-44c8-a461-99daa88c59ac",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0809dda-5424-406a-9de3-9a309f7e1d26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7678d79-62d5-46d6-a26e-6c7a22afcb10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb375ba4-4386-4e2f-a022-22283ffcac30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa359db0-a5e8-4fe0-abc2-7213b5f8bede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab4587c-2df3-4c1a-b40f-d30ec4abdccf",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75382ebf-bc7f-4253-ab52-59f87b626019",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b48b560-1940-4f47-b408-62e583c1200a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5bf16c-d51a-4b6d-923d-66205a7a372a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4666ed8a-7fdc-49a4-8878-65c4cd74127f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a553f60-1724-4cc2-9c06-b6ac4e1bc740",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b4763f-24ec-4fb9-92c8-9bf595c9689a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbfd1dbf-aedb-49df-ae4d-80fd6c6dd5dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0a1d7b-6ee5-40ea-aeb4-fa4daf63dab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "480dd324-06c2-4f62-963d-ac0e0c72fba3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "629a3301-3321-4173-afc1-ffe0e5120de2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7bfa82e1-41d4-4df3-b0e5-1f69b8ee31ef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "93f0826f-3882-4404-ac8c-5fd46441afbf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "31a999ff-eb74-4192-8003-2cea60fd33b2"
                    }
                  }
                ]
              },
              {
                "id": "b7358231-92ea-4eb3-b9a5-2192d1641b13",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "84f8ce74-d45f-4589-9038-c35a6c776edb",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d285d4-a4f4-47e5-8468-4fbb885122e0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4f5849b7-a4c9-4d47-9c60-13e4919ec475"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6799a5-543c-4c3d-9146-786c6b897bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41a668f8-b2ed-4cbe-9dc3-2db084e0939b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ed29341-5029-49f0-8b81-e0b026ac5912",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1024c669-6090-4e6b-8a5d-f9652708e8a8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7caef05-6a7f-444c-b8e0-1c558001b5f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9229e43-27c5-4620-a477-b4485872421b"
                    }
                  }
                ]
              },
              {
                "id": "a09e96e0-8b84-495f-b34c-d28167c94e1d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "3b155707-b555-42e5-a428-758ab48374aa",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86af72c-1f69-43ce-a097-f5279c2fbcc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d4238153-e468-4556-a856-07794671b089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b6d7e87-fbc8-4323-ba5b-0ba2b9b3921a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "075f6f65-a1e2-420c-9198-1d46a7f4c63e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "58cc0c44-f309-49f8-a710-01006fe687ed",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c1074cdb-617d-45a5-9b11-f2f9f92f3f39",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "252b85c5-55b4-4ef1-8e7d-6cb3a7c3d0f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "79cdf959-ae65-4a86-84c1-7d0fa78e280a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b29383c3-3f8c-4b94-b817-0dc4994c47b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4825227e-1c67-417d-ace4-2b3311838ce2"
                    }
                  }
                ]
              },
              {
                "id": "51bb18c8-3bf4-4f4a-8381-7b984181dde9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f914a2d-bacd-48f1-9d54-75780739a681",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8bab41e6-a6cb-4b6d-9b3b-8148477aeb12"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7d96234-0e2d-4f38-8b55-a4182bd7f2d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44abd937-1a31-4cd4-938b-a9d3e015caae"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "957b4790-a0ad-4db6-b2b1-99dd1e91e19f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f63cddba-0afd-4f5d-9f85-79a805c63b16"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5a2bcbab-e722-4264-910f-06803ab559ec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e8fd31fd-8761-42bd-a6e1-0ec7f6d3999b"
            }
          }
        ]
      },
      {
        "id": "e92f6562-107c-44b6-bcd9-42beec87df21",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "bd36a353-3f5a-4218-b086-3220a9f26704",
            "name": "Negative Testing",
            "item": [
              {
                "id": "810cc7a6-2a30-4ca4-a01c-78924d8de6ed",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "181f1a9c-7f43-4ae6-afc8-e8a869755e19",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8de369-a4c0-4d6d-9c39-c9d95e8c63ac",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "97ca3249-fa38-4411-aeaa-6ffe7234d355"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "679543fd-c934-451d-9508-20206fb492b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2eb9b5ca-8fe8-4ede-80c7-4f4a7c8d1419"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b730ab01-0447-490c-9be2-a64453a00ba4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6bc3354-4d31-42e0-8073-e4429e821d7e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "06f9eb1c-76c9-4dab-bf77-86a55ea793a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb162cbd-cf4d-4d36-b345-8fa3820b96d0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd5325a5-f88e-4a7f-9a50-c5fc5a76c9dd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2043d361-3368-4312-9e90-7c305890423a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "23c54c89-7b2b-42ee-a1d3-34c2e12ffddf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ea0c7d54-efb7-451f-920b-d3b631cda890"
            }
          }
        ]
      },
      {
        "id": "a35cde12-095c-4b2a-a58b-d6a208141ecc",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "fe73c37b-98b3-4ff6-bc24-512e0ddfa031",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7a75d63c-667e-47af-bb92-decec345d527",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7afa7187-7e38-4fc9-be05-0ba482af7878",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f86bce93-6970-4f32-896e-19f16124fa40",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d7c85c5-ecdf-40fc-a615-73671d437510"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1de9d4a-7d5e-4466-ace6-ec94cae25f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "425dc996-3344-48c9-b411-977c96fce57e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26f22246-605f-42e9-9d03-fe6998fa081b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34fedb9e-cf63-44b0-9fe4-871c3f49dc8b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f89cd98d-d0dd-4aed-933e-0768135740f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ab8d9f6-0973-4d04-a43f-5d6a8944ba4e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a097fcd-5506-47bb-b5db-56820f3bd71a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d538dba7-c1af-4661-901f-25ec06c1ca92"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e3ca08d3-32ce-4d03-849a-ebd84519f0fc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "189aedb9-71e7-4eef-b67b-f5050cda3a4b"
            }
          }
        ]
      },
      {
        "id": "657d6b7d-505d-41a7-9925-fd0286e02741",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "973e1829-efdd-471b-b265-bd1d4bf6f7d4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "12d79597-27c6-4877-87d7-62de474dfc32",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "539c5c77-9346-48e5-908b-cf7c71feec0d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720486ee-02d9-4c24-8435-c6def8e53b72",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ecbb2264-a71b-46b6-9f88-2242d9f50f13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94cb779-2374-4151-94b5-6f442bed796d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f85e6593-8a74-4262-99e9-38393e25598c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19d33f6b-b008-40e0-a907-f891d634be6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43789228-1c88-4add-bfeb-d4faf9785754"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2039f20-37c9-4a00-90a4-814b970f1b81",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62400a92-daae-4480-b8ee-dced3c96382c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8275e810-566f-4f5f-b476-7c626e5347a3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "69eacb90-f0a7-44eb-917b-2e1d2c0adfa7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1655281b-9691-4573-ad19-ee75e2d9a6bc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "75dc9376-0f43-49c0-87ed-8c49721bde09"
            }
          }
        ]
      },
      {
        "id": "ab5f0fbd-d9eb-4a2a-becf-c6d6157bc392",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c920df8f-6018-46b5-971e-31e8ac211440",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "35e87c29-d24a-4ea7-b2c8-aa74bc9e2c03",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8bb88232-e10f-4372-8058-8add7fd2b67e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "441fbd55-d3cb-4d84-b6f3-94518a4b4fca",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e15e4cc4-5867-4730-a248-fad905720b32",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 3
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 3
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 79
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 3
      }
    },
    "timings": {
      "responseAverage": 117.0427046263345,
      "responseMin": 6,
      "responseMax": 1350,
      "responseSd": 146.89337512883947,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1696033950368,
      "completed": 1696033996445
    },
    "executions": [
      {
        "id": "2990a45d-f348-44e2-a6ac-ebd17bbd77ad",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0bb3f8cc-bdc3-4c0a-8959-7ffc797dbe00",
          "httpRequestId": "e3ab924e-66ba-4ea4-b7b9-b1175229afe5"
        },
        "item": {
          "id": "2990a45d-f348-44e2-a6ac-ebd17bbd77ad",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0c1c53cf-9d2d-4d36-a0bf-cd295d768cc1",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 0
        }
      },
      {
        "id": "6150d1ec-c995-4270-96d9-c2ff00c23e8b",
        "cursor": {
          "ref": "5d8046b6-11fe-49f8-9cf5-cbf17bf39b71",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "afac5f90-a8f6-42e1-9c60-5dcc4dfa3101"
        },
        "item": {
          "id": "6150d1ec-c995-4270-96d9-c2ff00c23e8b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "1d69d4a3-db20-4c7c-b1c9-62624fc5e08a",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "3f4e24e9-c2f0-4e5b-b0ed-0b7e83b8baa9",
        "cursor": {
          "ref": "422efbba-db7f-4197-ac2a-11e52db86cfe",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ebd29b97-af1b-404c-bd8b-b7ad8fad092d"
        },
        "item": {
          "id": "3f4e24e9-c2f0-4e5b-b0ed-0b7e83b8baa9",
          "name": "did_json"
        },
        "response": {
          "id": "cf7f515b-89fb-437e-b8ff-8697f3a3580c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 310,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ed314a-9076-4b4a-9a0f-b94a409f58d3",
        "cursor": {
          "ref": "a179413f-d617-485f-962c-327a1f0a88bc",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6ee53cf9-388e-4024-b9f0-977c63bf8656"
        },
        "item": {
          "id": "d1ed314a-9076-4b4a-9a0f-b94a409f58d3",
          "name": "did:invalid"
        },
        "response": {
          "id": "51a73c63-fbe2-43b3-8157-636151094dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ed314a-9076-4b4a-9a0f-b94a409f58d3",
        "cursor": {
          "ref": "a179413f-d617-485f-962c-327a1f0a88bc",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6ee53cf9-388e-4024-b9f0-977c63bf8656"
        },
        "item": {
          "id": "d1ed314a-9076-4b4a-9a0f-b94a409f58d3",
          "name": "did:invalid"
        },
        "response": {
          "id": "51a73c63-fbe2-43b3-8157-636151094dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6851c627-fc2a-4f29-b0b5-97b490d09ff0",
        "cursor": {
          "ref": "2fac2e81-d491-406f-ac40-0e48439371db",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2f6b228f-2ad1-49e5-bb0d-0f108bd6b059"
        },
        "item": {
          "id": "6851c627-fc2a-4f29-b0b5-97b490d09ff0",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "623054d1-42da-4235-a591-87738bb6b7b1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 151,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f39482e9-0ed8-4506-97ee-19c9c3e54400",
        "cursor": {
          "ref": "e57d7cc2-d6a7-4eea-8634-ba3cac69b73d",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "abb5f2dd-6395-4489-b3ef-9c7202b6ace7"
        },
        "item": {
          "id": "f39482e9-0ed8-4506-97ee-19c9c3e54400",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "af5fe98a-58d9-4500-ba04-304e8f381b3b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 106,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ec59c5-f066-4b22-b783-fcd7e4add830",
        "cursor": {
          "ref": "85bf7ce5-3b11-4b88-9102-7438ff61405f",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a91aae91-0fcd-42d1-8551-17deed0d0fde"
        },
        "item": {
          "id": "99ec59c5-f066-4b22-b783-fcd7e4add830",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b1633de1-0c89-4b25-98a3-d96aa72991cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d76d9793-e9f4-4676-ab6f-f052a3a99d3b",
        "cursor": {
          "ref": "2b90abaa-dd6e-41ac-b3ad-f0431739d702",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cdfed1a9-24b3-4fc6-9cb3-2dda9ac5ea64"
        },
        "item": {
          "id": "d76d9793-e9f4-4676-ab6f-f052a3a99d3b",
          "name": "identifiers"
        },
        "response": {
          "id": "0c4435af-d46a-4dc6-a1ef-423bac62a788",
          "status": "Not Found",
          "code": 404,
          "responseTime": 125,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "ffa98147-0c74-4bf3-934b-74f59662514b",
        "cursor": {
          "ref": "91ef7a0a-64a3-47c1-8f0c-aa62b729bee8",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0110da84-b8ed-451b-bebf-3d2d4f206cf4"
        },
        "item": {
          "id": "ffa98147-0c74-4bf3-934b-74f59662514b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "36f65eb3-3fed-47be-96df-d1e452802200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef79c781-2360-46b4-9211-0556a4767d97",
        "cursor": {
          "ref": "f25f3e20-db3c-49c8-8b81-e411d334d50b",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2d8c48bf-8eda-4b61-ae70-1db20c605c64"
        },
        "item": {
          "id": "ef79c781-2360-46b4-9211-0556a4767d97",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "8b72a2de-6ef4-4c05-b2a2-e59f48770263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84871f9a-5021-4a2c-b23b-be11c0a225c9",
        "cursor": {
          "ref": "028506ad-5c19-4d40-9cc4-0d1e15e24bdf",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "53ee86a1-9645-49fa-a1e2-06b0dd80c281"
        },
        "item": {
          "id": "84871f9a-5021-4a2c-b23b-be11c0a225c9",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f3c2cda0-f1c9-4522-a3a1-6216bc1723f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9529f9d1-9f7a-416b-a273-5117bb81da2a",
        "cursor": {
          "ref": "85d9c19f-fe5f-471e-aca2-b07d4e3e5455",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "807ea0c6-7ecb-4bab-a634-6ccc996fc906"
        },
        "item": {
          "id": "9529f9d1-9f7a-416b-a273-5117bb81da2a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "6f319e81-e392-46f2-a0ac-f7fdc2fdc598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55339b34-0cfe-4734-8c09-05a5363ba17d",
        "cursor": {
          "ref": "70f18fc3-e731-4c07-9294-e7f5b08815a2",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "eaf47c9f-372b-482b-ac2b-1c524892d51c"
        },
        "item": {
          "id": "55339b34-0cfe-4734-8c09-05a5363ba17d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "bd04af6e-22ae-4810-baee-002f2a8083fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e97bed8b-b73f-4ad8-9808-9e4182dbd6db",
        "cursor": {
          "ref": "05556e15-10f4-4011-b822-84ab25c5e2e9",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "45cf1143-3d98-4b27-b8e0-704c8903a854"
        },
        "item": {
          "id": "e97bed8b-b73f-4ad8-9808-9e4182dbd6db",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "e754a0bb-9309-403a-97a1-455d32f2960c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01e561c8-bc4a-4483-ba9a-c5d62844a081",
        "cursor": {
          "ref": "5479ccd8-56ad-4415-8bdc-0fa9e2faa6e7",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0af13fdf-3f27-4e87-957a-f14a55e012de"
        },
        "item": {
          "id": "01e561c8-bc4a-4483-ba9a-c5d62844a081",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0215219b-9488-481d-8eb1-c45a713fc2a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "797a82b5-095a-4186-a353-b04b2043c31e",
        "cursor": {
          "ref": "28a37911-0eb0-4a46-a1b7-d75782272932",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8290ae03-1f2c-42ca-88bc-6cd610cd7496"
        },
        "item": {
          "id": "797a82b5-095a-4186-a353-b04b2043c31e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0cf056ce-54a7-4829-9007-070e87f861d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18a3734-6855-41fa-9f78-6507ea760cfb",
        "cursor": {
          "ref": "4c5d7033-ca9d-49af-8d1e-f8d42e2ee593",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a19ca13c-1b30-4bd0-83c8-92aaf03fdd29"
        },
        "item": {
          "id": "d18a3734-6855-41fa-9f78-6507ea760cfb",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d4264918-a974-431f-a1f3-da6a24d3a4d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f81898e0-815a-4d1f-9f1f-91cbf8aef99f",
        "cursor": {
          "ref": "0b6c7eac-a505-4553-8b6e-993e647cdef7",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "dc47d7b9-4284-415c-b2bb-fa9be808d13d"
        },
        "item": {
          "id": "f81898e0-815a-4d1f-9f1f-91cbf8aef99f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "51f37ee3-7712-44bc-ab63-89f857073c86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c95f784-fd2e-4d9c-b726-6d65d16c108e",
        "cursor": {
          "ref": "5c495c7b-6c06-42fd-954c-b91ad8d1c446",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3090e85b-d29c-49ee-bcd1-e6746ca9696c"
        },
        "item": {
          "id": "4c95f784-fd2e-4d9c-b726-6d65d16c108e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "abc1b1d7-ac66-4bd7-b223-777d158e7967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92586516-2ceb-4a5a-a5b5-cbdb9d2db24c",
        "cursor": {
          "ref": "d065814c-91e9-40bb-9e3a-107fa9853325",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "16abac52-103a-49be-bf6d-3d08db1d13b1"
        },
        "item": {
          "id": "92586516-2ceb-4a5a-a5b5-cbdb9d2db24c",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "34a6ab70-da32-41ed-932b-c595b70aaff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58041625-2728-4161-a2fc-bbffdc4dd90b",
        "cursor": {
          "ref": "89fa674e-633b-41f5-8bf6-6885ba209dfd",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "40c5045d-f047-42a0-968f-c6081923a0b8"
        },
        "item": {
          "id": "58041625-2728-4161-a2fc-bbffdc4dd90b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "bf1021ef-0c2f-4eec-99a1-11a0c3a6c687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c17413-77f5-473c-801d-78f4a676da01",
        "cursor": {
          "ref": "3cbd7aae-c1b9-4f8e-b687-4f8738b71655",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e4c2daf0-03ad-49cb-8289-e692d8ff5021"
        },
        "item": {
          "id": "93c17413-77f5-473c-801d-78f4a676da01",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0c62dcd6-16f3-4c0d-a769-91dd779197c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a87a6b-a593-40e2-b335-5cf585392e93",
        "cursor": {
          "ref": "55457539-276e-4cf0-8be7-f1b5527f1ce1",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "eb0353e0-7344-4d7d-87e7-c2dacc541907"
        },
        "item": {
          "id": "57a87a6b-a593-40e2-b335-5cf585392e93",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "251d1def-0b8b-432e-aac7-1e1b1cb1bf04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c5e76b6-c421-4c9e-95fe-839156ce6587",
        "cursor": {
          "ref": "a6e292ed-8b7b-41b1-b117-1f386786bd5c",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "dcb8838c-8252-4ef8-944c-ab625a28310a"
        },
        "item": {
          "id": "5c5e76b6-c421-4c9e-95fe-839156ce6587",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "092d290a-4516-477b-932d-0d3d82eb240b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24d7a4a-e7aa-4b0d-b245-6f2546e06d1b",
        "cursor": {
          "ref": "264bc072-07fb-4c07-855b-482fcdfcd8f1",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0660265d-a9ef-4b90-b00c-a18c2e115d55"
        },
        "item": {
          "id": "d24d7a4a-e7aa-4b0d-b245-6f2546e06d1b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b937e2b3-b59e-4ef0-a9dc-aa0e7cdfd632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2303ed-c22f-40a5-bc56-226915220bb5",
        "cursor": {
          "ref": "b9114148-28ad-4c0d-80e1-3c3beb8ce521",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b1c0293e-080c-4626-8fcd-6138263c0338"
        },
        "item": {
          "id": "5b2303ed-c22f-40a5-bc56-226915220bb5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "35c3ec74-616a-4256-bccd-e9cbf6d9b3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d0aba1-a56b-406a-a9f2-6b1245f90240",
        "cursor": {
          "ref": "78f65dc5-a19b-402b-b021-8ff65cdcafd2",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8d0a5184-e2b1-49dc-b51b-4214bd892ec5"
        },
        "item": {
          "id": "45d0aba1-a56b-406a-a9f2-6b1245f90240",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "aa6e429a-7631-4e25-801c-91d2f805d3f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70da0b4-9864-47d2-8aa6-b69bd40c2b4f",
        "cursor": {
          "ref": "e98fb89d-3fd3-4d0e-9f8e-124a9b3fdf71",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6f3b28fc-a8af-43c4-b383-4229de645cea"
        },
        "item": {
          "id": "a70da0b4-9864-47d2-8aa6-b69bd40c2b4f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e532791b-538f-4374-97a9-0c4d771ec18f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce2677d-bcdc-4d72-a5f1-9796632c6318",
        "cursor": {
          "ref": "cb3345e5-e642-4c78-abdb-18462bffc916",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d4de752c-e23e-479e-af01-f2d3acc8e58a"
        },
        "item": {
          "id": "8ce2677d-bcdc-4d72-a5f1-9796632c6318",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "499c7b91-89f4-4c8a-9e19-d53aca4e75d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24fe8783-bd85-4ca3-96e6-2052b8cbb325",
        "cursor": {
          "ref": "566417fd-2744-42a7-90f7-a9597f0cc6f8",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f2bc467f-f86d-49f9-8a5a-4ea652972708"
        },
        "item": {
          "id": "24fe8783-bd85-4ca3-96e6-2052b8cbb325",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6519a30e-ff2d-4506-af29-197f5724f511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71db579f-25cb-4d15-b6f8-376496114709",
        "cursor": {
          "ref": "f603e5b8-e65d-4126-a792-62fa22507d00",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "da8b86c6-e937-49b9-b27a-2b6191009d05"
        },
        "item": {
          "id": "71db579f-25cb-4d15-b6f8-376496114709",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "74505291-918a-44ed-a211-76cf40355ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5dac5cb-a97e-4b7d-8704-5d78807f054d",
        "cursor": {
          "ref": "8bfbff0c-ad0f-4948-b381-d0177e0f08b4",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "64063aa9-b155-4c3a-a09c-08efcba6d438"
        },
        "item": {
          "id": "f5dac5cb-a97e-4b7d-8704-5d78807f054d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "483d1536-7955-4824-90a9-d6e33ce560a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410fe06e-c19f-4642-9f36-f70a547b1634",
        "cursor": {
          "ref": "9eb51bea-6286-4d40-be25-7fee6449b15b",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "22b049dc-f08e-4133-9b56-af44d0a77f06"
        },
        "item": {
          "id": "410fe06e-c19f-4642-9f36-f70a547b1634",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6bb4799c-7cb0-48cd-8371-a46fca61c408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6747d474-426e-4952-890a-e68667062a60",
        "cursor": {
          "ref": "fa98701b-a7c1-456c-9ede-9becf36b8be4",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d9582679-a1ed-41b2-808a-a48513109185"
        },
        "item": {
          "id": "6747d474-426e-4952-890a-e68667062a60",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "abd19ad7-ccbd-4463-aeb9-1526f17a6a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbff2f4e-b157-4a2c-9cde-9c97362ee3cf",
        "cursor": {
          "ref": "74ec6044-fde7-46d6-a642-a6e19ce5131b",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "42d96627-8c08-426f-a01f-321cf7cdf594"
        },
        "item": {
          "id": "fbff2f4e-b157-4a2c-9cde-9c97362ee3cf",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0df7e5e7-f1de-4899-9a11-60de347f3eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f4c2bf-8ab5-433f-b309-479e0cea0bc2",
        "cursor": {
          "ref": "bc336e5e-0d97-48ea-b432-797eff0c39ea",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9fa86fa8-5e1c-43fd-9f07-3350368fe0d7"
        },
        "item": {
          "id": "06f4c2bf-8ab5-433f-b309-479e0cea0bc2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "43a1cb55-679f-4d01-a959-0f50558ae3eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19fb6b14-ff1f-43a8-bf9a-872a985a3c11",
        "cursor": {
          "ref": "082176d4-c82c-4331-a24f-8ab7f58241f2",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "89e8453e-1c43-497f-859a-e9523c90021d"
        },
        "item": {
          "id": "19fb6b14-ff1f-43a8-bf9a-872a985a3c11",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "882de736-d141-41c8-9c75-7a443d9da36d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d976d06e-3934-468c-86f4-91f9b47f88e8",
        "cursor": {
          "ref": "4cef6c9c-c0b9-4c31-a5ee-732aacf9fbb4",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "aa8a2fc1-b786-4935-ab46-2b371f0c9fe2"
        },
        "item": {
          "id": "d976d06e-3934-468c-86f4-91f9b47f88e8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "65996b84-d183-40eb-b923-811fa8bfc035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0072e35b-9c42-4403-98f7-ede3179053d7",
        "cursor": {
          "ref": "790dd7d7-0ec3-4808-8ea6-e453d51c3e50",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ac9a3000-bfec-4cb3-8f46-a5fae3d73a44"
        },
        "item": {
          "id": "0072e35b-9c42-4403-98f7-ede3179053d7",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "337376aa-0bcd-4aa5-8630-822089358a95",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "1be40df0-3dfb-4aaf-a407-0822e5fc68e9",
        "cursor": {
          "ref": "050c94d1-276d-4cc2-9ea0-04bde81c061a",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7024d3cf-3091-452b-985b-bb4220daa4ae"
        },
        "item": {
          "id": "1be40df0-3dfb-4aaf-a407-0822e5fc68e9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "218a0ad1-4691-42b0-b3c2-8289472691fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "458448c2-a5a6-45db-8e8d-3f619c0611dc",
        "cursor": {
          "ref": "6e1b7301-ab20-41ec-8f97-b9360cb2fe66",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "140ca36d-23a8-4f7f-bd79-e3c3d6560423"
        },
        "item": {
          "id": "458448c2-a5a6-45db-8e8d-3f619c0611dc",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "3f78a99a-b19c-41c5-9df7-d26956a9d9b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "93706261-1eef-4838-87a7-dad70479a435",
        "cursor": {
          "ref": "0f706026-2f6a-4508-98bb-0918b7367078",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0a9c0abf-6ebd-418a-b3c8-edd982ff6a45"
        },
        "item": {
          "id": "93706261-1eef-4838-87a7-dad70479a435",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "edda5131-1441-47d1-8714-dff8cc36ae1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71887353-7420-44be-8b41-7c77016f2b77",
        "cursor": {
          "ref": "3fad2936-0930-4c54-8f01-ecf5b4a16dc4",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "cf7fc6e0-c73c-483d-8461-5cf2fa39bef1"
        },
        "item": {
          "id": "71887353-7420-44be-8b41-7c77016f2b77",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4bae8c29-e5cc-4178-9306-ea8505229135",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "3ef8fa34-7b45-4b4e-96e6-d2fa132e4a73",
        "cursor": {
          "ref": "16ddfd69-3192-4c89-9e1d-97498ca4e42b",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d13e1ba2-cac5-478e-8929-856b768d7027"
        },
        "item": {
          "id": "3ef8fa34-7b45-4b4e-96e6-d2fa132e4a73",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5b2ea45e-0503-41e8-83ae-adb5b274b5bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6fe64db9-f3c8-47a7-a31d-e286bd72f166",
        "cursor": {
          "ref": "11eae1ca-b595-421d-987c-24f635126bab",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b2722982-09fa-440c-b66b-973396fec10e"
        },
        "item": {
          "id": "6fe64db9-f3c8-47a7-a31d-e286bd72f166",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d62f6d98-fde7-4995-b0c5-7c5d0af5014b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 101,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8d427936-6b3a-49af-a6cc-83d23fd5ea60",
        "cursor": {
          "ref": "038c7a94-5830-4f29-87fe-1394453bf015",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ded563f7-005c-4175-bacb-97bc656bfec3"
        },
        "item": {
          "id": "8d427936-6b3a-49af-a6cc-83d23fd5ea60",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b802c3cc-e03f-4f92-aceb-3d4833fc8371",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "2b97c846-f858-42b7-b0df-5075addf84d0",
        "cursor": {
          "ref": "42312c37-71aa-46d4-a3f6-0b839ac53695",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3e7bb800-05cd-4337-a95d-03f6ed9f783c"
        },
        "item": {
          "id": "2b97c846-f858-42b7-b0df-5075addf84d0",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0775a02e-5aec-4771-97a9-b67300649111",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "56fdacbd-c12c-40f8-890a-b05bc000c906",
        "cursor": {
          "ref": "e463e334-ca9e-4d30-baaa-e2de3ba18775",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ea4a5999-18d3-4b0d-8a58-a95a158955cb"
        },
        "item": {
          "id": "56fdacbd-c12c-40f8-890a-b05bc000c906",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e024d02e-7647-4488-ba4a-88d634d9227d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "da644aa1-88b6-434f-8fd2-f8a251c4f443",
        "cursor": {
          "ref": "54dd3c50-3787-4df8-a49f-35a370535516",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2f849f0f-a507-45b8-92b5-7115ba0dc2e9"
        },
        "item": {
          "id": "da644aa1-88b6-434f-8fd2-f8a251c4f443",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "64ef6371-8902-4d9c-8e7c-566653e7c091",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "5964acce-116b-4262-8098-d25a2b5d1c94",
        "cursor": {
          "ref": "b61b4f6d-e20d-455a-b7dc-7b6fe8a51368",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f7d4087e-b9d5-4339-b6ae-3357974bcbf7"
        },
        "item": {
          "id": "5964acce-116b-4262-8098-d25a2b5d1c94",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "046beb09-1994-42fa-a372-d816f5dc4751",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "7847d05d-57b5-4e63-96c8-205a282ba042",
        "cursor": {
          "ref": "3c506871-c194-4495-8712-b1fbf7ed1596",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "45525a0a-f398-4d63-8990-d7e341baacaf"
        },
        "item": {
          "id": "7847d05d-57b5-4e63-96c8-205a282ba042",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4948d980-ef33-4636-b38b-d0c5d25cae10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "39af8e57-c787-46d1-986e-6668bd8cab5d",
        "cursor": {
          "ref": "99914ccd-14d8-4edf-aa71-cce1e6f38dc7",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "45263b29-5c41-4aee-b1de-e1436d112a80"
        },
        "item": {
          "id": "39af8e57-c787-46d1-986e-6668bd8cab5d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "10412e94-1264-4075-9183-4e40f2c1c76d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eac4424-e096-423b-bf8e-40e5e2120a66",
        "cursor": {
          "ref": "b2e83958-0036-4718-bca6-76f5d7312e2f",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a8943882-d6be-4cfd-abc5-27d0febbf226"
        },
        "item": {
          "id": "5eac4424-e096-423b-bf8e-40e5e2120a66",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1710bd8b-078c-4c10-8531-51c98010d36c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d3dbc3-49f7-4c6c-b5a7-2a200504e2e5",
        "cursor": {
          "ref": "6fa458fd-52ae-438c-b6f5-947843e6af9d",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "661760fd-1a17-419a-9464-dfa8c95933b0"
        },
        "item": {
          "id": "21d3dbc3-49f7-4c6c-b5a7-2a200504e2e5",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "8b3aa074-a541-49be-b1cc-23d2f87d99c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096681cf-2cbf-478a-96e4-275ecd5013ea",
        "cursor": {
          "ref": "6704209c-9f53-45e7-bec3-9c53f9fff46e",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "bd5528e1-c98d-4453-b973-d9d83942b200"
        },
        "item": {
          "id": "096681cf-2cbf-478a-96e4-275ecd5013ea",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c20082c9-4bd2-4d98-9eac-093b7e7e1ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6410cd0-9212-4285-85f6-314408e12a7a",
        "cursor": {
          "ref": "8c762ba1-98ec-4109-ac20-dd7cce619e12",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d8c18773-13fb-49b6-9358-765e7981e5f8"
        },
        "item": {
          "id": "f6410cd0-9212-4285-85f6-314408e12a7a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c5a351e7-59ad-4378-b8eb-32a1a1eb4063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ac0c2ca-0cce-4379-a23e-2afd18ab9efc",
        "cursor": {
          "ref": "b812b41f-5821-4171-ae20-b0d585e5f9cb",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ffda3b39-dc66-4281-9ccc-781ed2b04b6f"
        },
        "item": {
          "id": "1ac0c2ca-0cce-4379-a23e-2afd18ab9efc",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "dce55fc7-9a46-4a0f-9e3d-e3507f2f1153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41f431bf-3bcd-4bd6-8a24-3c2fce6de051",
        "cursor": {
          "ref": "91cded40-e402-4e50-8e01-8083f760fe92",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0ea4fde6-2548-4d1e-b2e8-c34882988c79"
        },
        "item": {
          "id": "41f431bf-3bcd-4bd6-8a24-3c2fce6de051",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b3ecf886-0735-467a-a435-5126bc0f407f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c9429f1-43be-4b42-9a9f-eabe81be3caa",
        "cursor": {
          "ref": "04aa3698-7c38-46db-9b3a-89d285d71080",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "88c186f1-1d64-4dc2-8b29-d1a9b2be692a"
        },
        "item": {
          "id": "0c9429f1-43be-4b42-9a9f-eabe81be3caa",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c4a2b98c-bb90-4c39-8a38-c519d9e210a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e186ee8-2a37-48e4-b119-be4223bdfdfa",
        "cursor": {
          "ref": "67967a99-8338-488b-be18-7c55b8642f09",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "96d629a7-325d-4af7-863c-68cbae17ebac"
        },
        "item": {
          "id": "9e186ee8-2a37-48e4-b119-be4223bdfdfa",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f5913e53-2f1e-41ff-a55b-77cb1959a4b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6fa4635-721a-48e1-99a5-a4d4001c9ae6",
        "cursor": {
          "ref": "e2b60354-8a3d-44f8-8dff-d5694b3163d3",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "419d601c-937b-4eee-a61a-89ae7dfa458e"
        },
        "item": {
          "id": "d6fa4635-721a-48e1-99a5-a4d4001c9ae6",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "1ae7428a-d458-4091-96f4-97141991a65d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46715d95-d22e-4eae-8959-5de4ad6e43cf",
        "cursor": {
          "ref": "04ed811a-c780-4c1d-8ef8-3e67228d7816",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "05345d60-67d7-40ed-aee5-f32c85a7e1ca"
        },
        "item": {
          "id": "46715d95-d22e-4eae-8959-5de4ad6e43cf",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "59472a01-d886-4b7e-8cc4-bbc0c61dea8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "146817a9-a408-479a-9de6-94937f328c5c",
        "cursor": {
          "ref": "a554403d-5076-4935-9e44-d31bcf78886a",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a3c7660e-797d-4b20-8106-63dd4c3a8359"
        },
        "item": {
          "id": "146817a9-a408-479a-9de6-94937f328c5c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5dcd7ae2-ad3c-4db8-9230-2a91906cd176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e59f2e8e-b874-4309-a41a-699566cee37e",
        "cursor": {
          "ref": "211e2c6b-f3bd-4eb1-abfd-c1e23fb96f43",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4a946115-c3b6-4c00-bbad-d4c411a2118f"
        },
        "item": {
          "id": "e59f2e8e-b874-4309-a41a-699566cee37e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "000d1d5d-4a82-480e-b455-87fcad34657e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d1c97f-caad-4ea8-b2f5-7bb01688f77c",
        "cursor": {
          "ref": "0e91501d-b374-40cb-ac3c-522bb7664734",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b9cbe89b-e40a-46ad-915a-c42caea127ce"
        },
        "item": {
          "id": "b6d1c97f-caad-4ea8-b2f5-7bb01688f77c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e44185a6-5fdc-4a3f-90bb-0e2484ee547a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "3f6f75fd-4aba-42c1-a2f3-315f1f30dab4",
        "cursor": {
          "ref": "0baaf824-49a6-4ac6-b09d-4ebc22621165",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d29082c6-14d3-484b-b401-26735c68f799"
        },
        "item": {
          "id": "3f6f75fd-4aba-42c1-a2f3-315f1f30dab4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f9b95a65-a73b-44f1-ba98-35bf876f9284",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "61a129be-a428-49dc-be1e-76486c5012c4",
        "cursor": {
          "ref": "ecc4da0e-4b08-44e5-a07b-3acb7fa6cf17",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b65a32b1-7d13-4c25-9544-fa5bab9f13d2"
        },
        "item": {
          "id": "61a129be-a428-49dc-be1e-76486c5012c4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d3e8581a-cdea-4f4a-925f-c1964376418c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 107,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "e95791d6-0845-4884-88de-151887dff6bc",
        "cursor": {
          "ref": "5dc18a86-d8b1-4edf-943d-78c60e69913d",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "4b26c072-95ff-44d9-a751-0abeccef6ae3"
        },
        "item": {
          "id": "e95791d6-0845-4884-88de-151887dff6bc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "3adb34bd-7fcb-4494-97fd-ba1ccdbb8427",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "b77a7223-69e6-42a1-a1d1-3c04be90fc74",
        "cursor": {
          "ref": "8e8f9119-b785-4a5c-89ca-e582b55ba15d",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "82b238b6-6bb2-49b2-817b-a45ce1d07dba"
        },
        "item": {
          "id": "b77a7223-69e6-42a1-a1d1-3c04be90fc74",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d4cc0e92-9295-4410-b309-bbec1a38477b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "0be4ae84-57ab-4564-b47c-a73721a30202",
        "cursor": {
          "ref": "6105da7e-00ee-45c0-af47-b8f53b86d56e",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "23238bfc-bcf3-4955-a569-2413e630c8fc"
        },
        "item": {
          "id": "0be4ae84-57ab-4564-b47c-a73721a30202",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "044ab458-6c90-4b56-8d28-0665313e9a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9a1a4b-9fae-4776-93b9-daa1b3eebc23",
        "cursor": {
          "ref": "04ea6903-fcd0-4251-87f0-12bf50fc3563",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "6519fe09-eb49-4ab9-80b2-969def1f6a14"
        },
        "item": {
          "id": "fb9a1a4b-9fae-4776-93b9-daa1b3eebc23",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7f090cdd-4b68-44d8-881b-e69d42bf2121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2cdffba-7f07-46c5-8dcf-adbd3adb17eb",
        "cursor": {
          "ref": "29dde23e-59fe-43fd-8bbd-4c8b2d6c7c2f",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e6cff278-406d-448f-8199-f2db916a930c"
        },
        "item": {
          "id": "c2cdffba-7f07-46c5-8dcf-adbd3adb17eb",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ce482f8c-460c-4ba6-86fd-3e8d22d893fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad55a6d-6868-4880-8014-4f9836b9a068",
        "cursor": {
          "ref": "eba355a9-2ac6-4b6d-b1fc-da97927f6dde",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "437a416b-44e2-4367-8e4f-1de2a0f694ec"
        },
        "item": {
          "id": "dad55a6d-6868-4880-8014-4f9836b9a068",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "fbb56ae7-02d9-486a-ab71-d169e49f3222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92977d25-d025-434b-8d57-f12e002fc6c7",
        "cursor": {
          "ref": "cb4167ee-17ce-4aaf-ba26-fe7a4f4c2763",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f3a7e09a-d869-48f4-b0e4-5e6911c54ee1"
        },
        "item": {
          "id": "92977d25-d025-434b-8d57-f12e002fc6c7",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "3c6d791d-2cc0-43f8-8bfb-aeee9d5a0780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dee428c-f067-41a5-baee-d7bad6864d08",
        "cursor": {
          "ref": "aee2a127-a3ce-4896-b8e5-b515bc577619",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "9b5bd2ed-c8b0-4035-a596-b94c6a1e06a7"
        },
        "item": {
          "id": "6dee428c-f067-41a5-baee-d7bad6864d08",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c89c23c1-f37e-4114-a314-2d1c7d4ae689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a7fa64a-6000-4766-9580-227108b19f01",
        "cursor": {
          "ref": "b94d8ab4-a136-4917-befe-26881861f8f2",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "60bf4c71-b6a3-4870-a25b-e9392dd5b71c"
        },
        "item": {
          "id": "0a7fa64a-6000-4766-9580-227108b19f01",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0ca86209-095f-4917-804e-1b5a8ffbd0a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb6d46a-357c-4a65-aa24-c8a273ce8155",
        "cursor": {
          "ref": "905c4945-5e9e-42bf-b423-69629c41587c",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "10d21bdb-d082-4600-8832-d808f561c75b"
        },
        "item": {
          "id": "1bb6d46a-357c-4a65-aa24-c8a273ce8155",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5b03ea3c-3300-46f7-a15d-98d6a90bd6c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4700c82-0b61-4219-b110-984a7be15b21",
        "cursor": {
          "ref": "054ba02d-7e95-4b95-a9d7-c6c5c2acfa54",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7813f869-79ef-46db-a025-d92a2d99fb73"
        },
        "item": {
          "id": "d4700c82-0b61-4219-b110-984a7be15b21",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "26613a3d-6908-42cc-8788-b06f1c23f8bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06178d3c-bd3f-47fd-87a1-990e1c97bd5d",
        "cursor": {
          "ref": "7ef8e8e8-a237-4004-89c9-24088383c894",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "586e3724-c211-4f2f-86ac-3ee056637cc1"
        },
        "item": {
          "id": "06178d3c-bd3f-47fd-87a1-990e1c97bd5d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "828744cf-2ec4-48db-8622-d16f3e537548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2fd174d-904e-4590-9025-cd11c5603c6a",
        "cursor": {
          "ref": "f11d8cf1-d19d-4214-9689-7cf55af48140",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b14db891-2b65-4ca8-a1f6-41b1cb28a9b5"
        },
        "item": {
          "id": "a2fd174d-904e-4590-9025-cd11c5603c6a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "6038bce1-5e8f-459e-aad3-bcc7f604f068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ba1e9a-85aa-453d-bcf9-443789fe854d",
        "cursor": {
          "ref": "a909401c-50f4-4813-8360-e804dc6efa90",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b4176773-65bc-41a6-8bc5-b6e758ca4861"
        },
        "item": {
          "id": "33ba1e9a-85aa-453d-bcf9-443789fe854d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ad55d8bb-5361-4fc4-9bd4-4c0ba310f89a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6dce7f2-6524-4d48-bc39-59cd5ba7fdac",
        "cursor": {
          "ref": "c957963a-95bb-43a3-b1f1-a15af512bb8f",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4fb72865-5a14-4e2f-a00a-14f6aedc8e0a"
        },
        "item": {
          "id": "d6dce7f2-6524-4d48-bc39-59cd5ba7fdac",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5fc6d887-f63c-45d4-be95-3e7993c8d2ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e87093af-6e2a-43b3-bcda-38a12ba5e210",
        "cursor": {
          "ref": "979732ca-0f8f-483c-b062-27fd58a2fd88",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a05736ef-f7f5-441c-b7d8-bad22391371f"
        },
        "item": {
          "id": "e87093af-6e2a-43b3-bcda-38a12ba5e210",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8fbaf493-1759-4ab5-bedd-d27d7ef95309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83e18998-6e9d-415c-a233-6a77e1898f02",
        "cursor": {
          "ref": "d28c4407-f4de-4cd9-9561-11f931be0361",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c062910b-f9c7-4379-8960-710fb3ae2e66"
        },
        "item": {
          "id": "83e18998-6e9d-415c-a233-6a77e1898f02",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e3ef71f1-eca9-44fd-a755-b8970d64f524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7483e6f1-599e-4728-b911-6b99504ce89e",
        "cursor": {
          "ref": "d78540e6-be52-4e4a-a946-430d56ff00d1",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ccafef2b-687f-4ae8-a2e3-362feb37b6b0"
        },
        "item": {
          "id": "7483e6f1-599e-4728-b911-6b99504ce89e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "89022029-2290-4f54-8a5c-017e195869c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c578961e-0452-4982-82b8-b7d70d938e94",
        "cursor": {
          "ref": "a411d8fc-47c0-4a22-a0f4-b1baec2cd8bd",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ba98b986-464f-43fd-8c1a-d973ce6665a3"
        },
        "item": {
          "id": "c578961e-0452-4982-82b8-b7d70d938e94",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "81c84447-0b54-483d-90b0-a8be97849eb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "801c6f03-4648-49fa-9ab5-ed4993b80c88",
        "cursor": {
          "ref": "7b63df76-bb18-41e6-8fc3-01f3dfd646e9",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7abe9f16-298e-4e2f-a9d2-78989cd22b07"
        },
        "item": {
          "id": "801c6f03-4648-49fa-9ab5-ed4993b80c88",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "34106dee-7167-4a1c-b1e7-b492cc0bec3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5385d340-398a-4ea2-aee9-b7d027431547",
        "cursor": {
          "ref": "94108bbb-8c8e-4a19-b0c4-be3271b9a314",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "0f9c9e67-ec15-411c-b92c-6c5611e44656"
        },
        "item": {
          "id": "5385d340-398a-4ea2-aee9-b7d027431547",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6145c44a-0e04-49b7-a237-4403c365cc48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e26f1f8-1bae-4795-848d-d1eae3ac04f7",
        "cursor": {
          "ref": "775ab7cf-3c4d-49c0-a6b9-87a57d2a59a8",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "cf7e20c6-8b77-42a9-b7f8-48f3b4f02225"
        },
        "item": {
          "id": "5e26f1f8-1bae-4795-848d-d1eae3ac04f7",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c6e3fcfa-21a5-4c7f-9f92-bf80f1e8126b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f45746a5-26ca-4912-8873-ac8b0f797ef0",
        "cursor": {
          "ref": "900d13c7-8ee6-4262-a8a7-9e0989ac634a",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7229aa4d-73a2-413b-b807-fbdf8c223418"
        },
        "item": {
          "id": "f45746a5-26ca-4912-8873-ac8b0f797ef0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7223750f-9729-4031-b198-61efeccda475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a6b4b94-56c0-4233-aead-05af3bfb9029",
        "cursor": {
          "ref": "60d1e026-96fe-4f58-8646-5c7121995af5",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2bcf63d8-fc7f-47d2-a184-024da556352f"
        },
        "item": {
          "id": "6a6b4b94-56c0-4233-aead-05af3bfb9029",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "40dbaeaa-a383-47f4-b4f4-22c298fcb31b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef6cadf-d51c-4105-8b2c-3345ebf29f7b",
        "cursor": {
          "ref": "67dd7db4-7cd1-414d-99f8-f3ff23c33c10",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f8debfb2-430f-420f-850f-d71be627dea2"
        },
        "item": {
          "id": "9ef6cadf-d51c-4105-8b2c-3345ebf29f7b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d15ae4b5-8c0c-46bc-8dfc-7fb26e32d789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff63cbd-99d7-448d-8518-813902449039",
        "cursor": {
          "ref": "a8b4a999-1838-4b41-a082-b16ccf2012bc",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "895c3888-fa52-4e64-8a40-b977ff5d9c87"
        },
        "item": {
          "id": "fff63cbd-99d7-448d-8518-813902449039",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "25792ad1-4527-4ae1-8967-64225d6e3fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ade8de-cfc3-441b-9b7e-c529bfe8ab1b",
        "cursor": {
          "ref": "9ae0efc0-c77f-432f-aca8-39090e10f49f",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ba01cb54-cf45-4077-bb55-6641cf839d7b"
        },
        "item": {
          "id": "53ade8de-cfc3-441b-9b7e-c529bfe8ab1b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "b46ea1f7-a894-411e-92af-b9d4c3c20185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20cf2a83-5290-4156-9ad7-968d5d80bb28",
        "cursor": {
          "ref": "b087e26d-20aa-43fe-915d-91d575b97245",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "22cc03b6-1f30-4ead-b95b-28947cab9306"
        },
        "item": {
          "id": "20cf2a83-5290-4156-9ad7-968d5d80bb28",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0e85243b-316f-461f-8984-972b0d1eefb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263d3dd8-fcc9-4b99-b8ef-dcff218c70fb",
        "cursor": {
          "ref": "f4b1c3c3-5803-4d25-a5d5-aefbb02fa074",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6daac850-61a1-4797-93bf-daa7c0c88319"
        },
        "item": {
          "id": "263d3dd8-fcc9-4b99-b8ef-dcff218c70fb",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0e49374b-c9af-4d2b-861f-ebeb65a09336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae0bae5-f7f5-4e0a-b6dc-7fe6c1515715",
        "cursor": {
          "ref": "bfdcc8e3-074b-4b01-9df4-9ac88aab8e6a",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8cc18791-d1c7-43e0-a077-d0bc08d03719"
        },
        "item": {
          "id": "bae0bae5-f7f5-4e0a-b6dc-7fe6c1515715",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5fe213b3-1968-4b1a-8160-f58495c20d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e245571-9185-4b25-b757-0206fac86cf1",
        "cursor": {
          "ref": "8a2adcd0-930b-41c9-8d95-05620ee68188",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4bd47996-755f-45b5-84b5-58589b9692de"
        },
        "item": {
          "id": "3e245571-9185-4b25-b757-0206fac86cf1",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b11d5db5-0197-4468-b9c0-72ba75f75544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67a78b98-0949-4973-840f-f7007ac3a9db",
        "cursor": {
          "ref": "6b71aada-405f-4614-b242-a097559c0373",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a2543f3a-55a0-4e30-ad85-50ce7746c2e8"
        },
        "item": {
          "id": "67a78b98-0949-4973-840f-f7007ac3a9db",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d141e5dd-fa97-462f-b6a0-784795a90223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b475007-5e98-4310-8024-189c33d23bff",
        "cursor": {
          "ref": "bb7ffa2c-ff2c-46e5-a511-3572959b1671",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "28ff4add-23f6-4746-8fba-826de3ca8ea8"
        },
        "item": {
          "id": "0b475007-5e98-4310-8024-189c33d23bff",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0c4aff0f-b200-424f-9098-27a4bfec54e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82880904-8aca-40b4-9450-20d0080781f7",
        "cursor": {
          "ref": "9147847e-f874-4e63-83c7-74a1a7041c36",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "03913d39-3905-4864-bf0b-1b271996da2d"
        },
        "item": {
          "id": "82880904-8aca-40b4-9450-20d0080781f7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "81b6234a-6c74-4965-821a-d6f38d0587f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a41255b0-18da-4640-aaa2-485e86797393",
        "cursor": {
          "ref": "d2db3120-d1e4-44fd-9b51-c66a1803840e",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c298a2f9-12db-4f63-b632-d4950c8c8067"
        },
        "item": {
          "id": "a41255b0-18da-4640-aaa2-485e86797393",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f20f5793-6d5d-4ee5-be39-f2bed30a6f2f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          }
        ]
      },
      {
        "id": "570481f5-cea1-4010-8853-8d7a51486223",
        "cursor": {
          "ref": "12c598bd-aa36-40a9-8efa-ed3725709032",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "3f8c432d-3b86-4cb1-b845-aeea4f346230"
        },
        "item": {
          "id": "570481f5-cea1-4010-8853-8d7a51486223",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "5d657870-bb3e-4508-9ee4-f59a816427eb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "4272a9f3-0212-4354-b434-b7b629943f85",
        "cursor": {
          "ref": "688327a4-5664-4847-9729-ff820d29dc03",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "680a822c-5f6f-40ff-8a65-5c562b212186"
        },
        "item": {
          "id": "4272a9f3-0212-4354-b434-b7b629943f85",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "dc01680a-50a7-454e-a7cf-260327d285a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "23ca2f54-204f-4395-8413-f50c6a17b41d",
        "cursor": {
          "ref": "c50df3a0-d163-49b2-9024-f9d65ea835ae",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "5f09c0ce-f239-4d65-8723-5ccca2e1d39d"
        },
        "item": {
          "id": "23ca2f54-204f-4395-8413-f50c6a17b41d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e5fc5c4c-93a7-40c6-9fd3-4083d40aafd9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "0160f897-2a65-4271-bfcc-57f3c0bcada6",
        "cursor": {
          "ref": "e2e6c23b-a1ac-4c67-903f-a14fae6400ac",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3b16b537-836a-48bc-86a2-2e2f45899b69"
        },
        "item": {
          "id": "0160f897-2a65-4271-bfcc-57f3c0bcada6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7ff9153e-f595-4d3e-965a-10804ce6a932",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "0ddab72d-acab-4da0-a167-1bf7802578cb",
        "cursor": {
          "ref": "f0b63b8d-b1c8-4a6a-b1d8-b4e915361ddc",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "cf5e43d4-a56a-4ffd-a7e4-431c9fda9061"
        },
        "item": {
          "id": "0ddab72d-acab-4da0-a167-1bf7802578cb",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "778256a2-6680-4bec-bd3f-07a818a58252",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 102,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "47faa745-ef90-4e18-be00-263ab8e4fe70",
        "cursor": {
          "ref": "46800043-953d-48e7-ab9a-33da4c918fb2",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e4d58fcd-c249-4543-9a33-0253f653278c"
        },
        "item": {
          "id": "47faa745-ef90-4e18-be00-263ab8e4fe70",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b8213aeb-9963-4d00-9ceb-cbce889c9973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cca4a5b-3683-4ea1-bc72-092c536ba2c5",
        "cursor": {
          "ref": "607264e7-40d3-4519-aff9-3437e5656a9e",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "26e728ed-7967-4f83-bc4e-8f97d831b754"
        },
        "item": {
          "id": "8cca4a5b-3683-4ea1-bc72-092c536ba2c5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "aba29e7a-0ddc-48d2-9333-484f9eef8437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6d44c1-59b3-42a3-b958-0da55544bcfa",
        "cursor": {
          "ref": "ea0a0b13-638f-451d-a06b-654fd632174b",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a3f917f8-a637-4540-bbf1-4e293dcba775"
        },
        "item": {
          "id": "ed6d44c1-59b3-42a3-b958-0da55544bcfa",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ad79c7bb-bedd-4790-a682-2fb40047b274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a85152-dea4-4624-988d-430d9f7ddaa3",
        "cursor": {
          "ref": "7758d670-e1ae-4e46-8f5d-b398c75fc536",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9208c72c-2c3d-48f8-8997-c8cee66c6e38"
        },
        "item": {
          "id": "37a85152-dea4-4624-988d-430d9f7ddaa3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "17bd5b78-cdbb-4fbe-8bbe-9674cb22c281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc5735af-9017-4b5c-aacc-495f6f9b3e93",
        "cursor": {
          "ref": "f9e24834-bd04-48f2-b75c-1755139ef0af",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e3193e63-10e8-43f5-98cb-1325a7e51fe4"
        },
        "item": {
          "id": "fc5735af-9017-4b5c-aacc-495f6f9b3e93",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "094c6e60-73b1-4e09-a668-70857dde61d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "726633f4-3bc6-46b0-afa1-b92b5f71dfcf",
        "cursor": {
          "ref": "77a75efc-8ba9-48fe-9940-963201ee7d3d",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "86fc4a5b-ccb0-45d1-9b07-55cc267bffe5"
        },
        "item": {
          "id": "726633f4-3bc6-46b0-afa1-b92b5f71dfcf",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "07a1e326-f2de-4755-9a25-41365c9d5cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c4e49a-c2b0-4060-b009-5f733fffb592",
        "cursor": {
          "ref": "32170e73-330b-42ad-bd0d-2fb22d07e23d",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1b5e76e0-731b-4999-b96a-596154ff504d"
        },
        "item": {
          "id": "c7c4e49a-c2b0-4060-b009-5f733fffb592",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8b87f452-6e0e-45ac-9772-133f64f28b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce82406-e4a6-4eb9-92ca-50b0f4774964",
        "cursor": {
          "ref": "15a0df10-6b12-4a49-aba4-e754e1ab17b8",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "30264d01-3486-4bdb-b76a-acf083386480"
        },
        "item": {
          "id": "5ce82406-e4a6-4eb9-92ca-50b0f4774964",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e6c7dcad-5903-4f4e-a23e-76887a22cdb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea769c6-fb1f-411e-893b-05b84f0f2645",
        "cursor": {
          "ref": "3dc94e94-9bef-4339-9658-76211a02721f",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "bbc3eb66-ac98-4860-bd65-eb727168ba2a"
        },
        "item": {
          "id": "4ea769c6-fb1f-411e-893b-05b84f0f2645",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "60c21387-72cf-435b-96c6-19aed6be713a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1db8137-9eb7-4c71-8ede-93b49e9b7c7b",
        "cursor": {
          "ref": "754a92ce-89dd-4517-98f0-28fc19b956dd",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "71904d41-ecea-42f9-81eb-d2aafbd3782a"
        },
        "item": {
          "id": "d1db8137-9eb7-4c71-8ede-93b49e9b7c7b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d1576c70-1c06-4807-bf19-84bf01b66163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac63f87-f658-4915-84d6-7a6456405342",
        "cursor": {
          "ref": "338bd71c-49c2-4b06-b442-cf674f012499",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9673005d-f92a-44ad-8af7-e083835c49ed"
        },
        "item": {
          "id": "cac63f87-f658-4915-84d6-7a6456405342",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "83d0cea5-6a43-441c-9dad-3f9a8b481c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb535f3-7a78-4576-9470-f7d63de16e69",
        "cursor": {
          "ref": "9bbb4be9-801c-464b-946c-57ab46043d86",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d252f3f2-0e82-4a33-b4a6-db18bd73634d"
        },
        "item": {
          "id": "6cb535f3-7a78-4576-9470-f7d63de16e69",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "01ffe79e-e86c-4788-8e19-c3dda1aeea0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e856aa-da56-4c17-bec0-7e9d522699ad",
        "cursor": {
          "ref": "aeedadf8-de7a-4049-9bda-e5beb396ab71",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "4d2a1182-37e5-408f-8b12-9b7b09f01b7d"
        },
        "item": {
          "id": "77e856aa-da56-4c17-bec0-7e9d522699ad",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a5f5699e-6af8-4a1b-9bce-132b3fa88ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b13b7fe8-239e-4bb0-9447-3df4dde5d609",
        "cursor": {
          "ref": "d7f42d1b-49ae-4e48-9ce9-ca813d6fdf84",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "40e6d834-7fb9-49c4-966a-7e5444b025ba"
        },
        "item": {
          "id": "b13b7fe8-239e-4bb0-9447-3df4dde5d609",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6779427d-959c-4075-aac3-c804715d0017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ea0317-f214-4e50-bbb2-d3f4c4778f53",
        "cursor": {
          "ref": "1dee72d4-03b2-4b6a-8bbe-ed194497ee3a",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "da1b474a-2b56-47c5-a122-0183b8403062"
        },
        "item": {
          "id": "a9ea0317-f214-4e50-bbb2-d3f4c4778f53",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ae09c6ac-5099-42b4-a4e7-5983d8c3061e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "581158a5-a5ff-4b8f-93ec-51756113583e",
        "cursor": {
          "ref": "0e5a4b66-a369-46c5-a8a3-91c48023f5be",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "78cd9e2e-6ba7-4cd4-b541-22d1af803e34"
        },
        "item": {
          "id": "581158a5-a5ff-4b8f-93ec-51756113583e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "62be08d3-989c-408f-bdba-56d9219bc241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0938d4f3-3ac8-422b-81d0-4f06ce4f086e",
        "cursor": {
          "ref": "7f4e0ea9-6dd9-4573-914a-eef214a99be5",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2edca3e1-01d8-4f00-9738-179baefa3301"
        },
        "item": {
          "id": "0938d4f3-3ac8-422b-81d0-4f06ce4f086e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1580ccd2-101c-4251-8098-45f865480533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01553f85-7b1f-450b-9a88-df03ad12ffd2",
        "cursor": {
          "ref": "daa850f6-1d09-4f58-ae8a-6b8123e2219f",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4d956454-a7da-4ba1-8f79-2dbb297c1e0f"
        },
        "item": {
          "id": "01553f85-7b1f-450b-9a88-df03ad12ffd2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6ae4e500-8eb2-40c3-9fcf-1fc82478d41a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19787b72-f12d-47f0-b0ea-27dad24ef955",
        "cursor": {
          "ref": "9b9e6dbf-4170-48f8-97b1-c98ee9c2bee2",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "a9f969e1-c152-4f76-b3d6-0c3b71f73b9c"
        },
        "item": {
          "id": "19787b72-f12d-47f0-b0ea-27dad24ef955",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6148e28e-8429-4abc-bbcf-23429b7919b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1eedc69-9b0f-4ec6-a6c9-21474c5de934",
        "cursor": {
          "ref": "4a6cc173-de91-427b-920f-1959af350627",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "bcee42e2-d8f7-46c9-a730-b1e15635c1aa"
        },
        "item": {
          "id": "a1eedc69-9b0f-4ec6-a6c9-21474c5de934",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9ae894a1-e52e-4190-b103-8404737a20ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e143a02b-77fe-42c0-86fa-2f041590f5a2",
        "cursor": {
          "ref": "a2d6d88a-cba2-4806-a0e7-0762fb94a1fb",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "36d11cea-2389-4358-bdd6-36754c041cde"
        },
        "item": {
          "id": "e143a02b-77fe-42c0-86fa-2f041590f5a2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c9ca9a46-b228-4d78-a356-d850a278a02f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5e34d5-1ca6-4b0e-ae3a-5b7a49ff845f",
        "cursor": {
          "ref": "9877848d-ef96-4244-a495-bb55911a8ffa",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "df944692-7f1a-4229-939e-eb1a304765bd"
        },
        "item": {
          "id": "2c5e34d5-1ca6-4b0e-ae3a-5b7a49ff845f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ad2d2a5c-e244-4e84-8e72-aa6908aca1c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a37e3b1-e7ab-44f9-9c4e-4326f1b538c9",
        "cursor": {
          "ref": "143e5844-191a-40d8-981a-b4a4f228837e",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f18d8cab-e54c-4a79-a111-2034bbb7f28e"
        },
        "item": {
          "id": "6a37e3b1-e7ab-44f9-9c4e-4326f1b538c9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d52cc7fd-5c0a-4e8b-9e9d-e3a2803ae6ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d957433-8fe8-4881-8b11-36210b4fb5ae",
        "cursor": {
          "ref": "60e36a90-b8f4-4f74-8bb0-6918c43dcd50",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "359f8999-698b-4f5a-9a90-15cad6f44652"
        },
        "item": {
          "id": "7d957433-8fe8-4881-8b11-36210b4fb5ae",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "bb860fe5-0078-4800-b2d9-a30d54a18d8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5adb4c46-7d18-4cd5-a06f-216fad38fc05",
        "cursor": {
          "ref": "3b261376-f07b-4464-8c36-7a291f21b9df",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3e36552d-2adb-454b-9f0e-bcb84df7a2a5"
        },
        "item": {
          "id": "5adb4c46-7d18-4cd5-a06f-216fad38fc05",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f01c65ce-df5e-45da-b85c-d1a969bf408b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7af57227-78a4-4506-b775-f12a743f4c27",
        "cursor": {
          "ref": "da00f194-5f83-4165-9cc6-93884b81412e",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a362bb24-f0dc-46ed-b87c-e9e3f56b82dc"
        },
        "item": {
          "id": "7af57227-78a4-4506-b775-f12a743f4c27",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5379bb11-0a72-4d74-9cba-38e2d8b06a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e6733ac-c16f-4a18-97a4-8442638c1483",
        "cursor": {
          "ref": "6834cd99-4324-4686-97c5-1b29374036ad",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "79fbb43a-262e-4012-8dfc-e66ef7877887"
        },
        "item": {
          "id": "2e6733ac-c16f-4a18-97a4-8442638c1483",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9ebcfae6-d3d0-46c8-96e9-8f6b8bbbec00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d744af32-504f-43fc-82b4-2906e5b3c96e",
        "cursor": {
          "ref": "b8ffbd7f-9e10-4c54-b293-c469c8aad87b",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "397015cf-e561-4f6a-8212-14c6c8780618"
        },
        "item": {
          "id": "d744af32-504f-43fc-82b4-2906e5b3c96e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1f83907c-6474-425e-966a-9573d3aefbe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59b64dcb-c2d8-459f-9eab-09cce4d96c6a",
        "cursor": {
          "ref": "ce05ed9a-192e-4d89-9f53-2a9dd37e84c7",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b4017c47-2af1-43ea-8c6e-2fa1b83d9e36"
        },
        "item": {
          "id": "59b64dcb-c2d8-459f-9eab-09cce4d96c6a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "069ed7f4-0977-4399-9f7b-7d7966766a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa33e15b-5111-4fc0-86a5-cca7b7ef52d6",
        "cursor": {
          "ref": "f82f9e87-2a9f-4c4b-bd5e-6d0a3f2429af",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e6d592de-62cc-45d0-9e61-de9acd613471"
        },
        "item": {
          "id": "aa33e15b-5111-4fc0-86a5-cca7b7ef52d6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3dfe95fd-11c8-45f5-8c58-39fdadf4f4b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb96a816-c5fe-4458-8b21-382502eea7f1",
        "cursor": {
          "ref": "efc7b7c4-4ed7-4fc9-af14-970a280a0945",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "94d9b4a9-d7d4-4349-995b-36fb229e91df"
        },
        "item": {
          "id": "fb96a816-c5fe-4458-8b21-382502eea7f1",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "369afd18-6818-4db7-b521-9747ada93d78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db80f622-40f2-4348-8db9-af604cabb5d6",
        "cursor": {
          "ref": "607eddf5-1c05-42b1-8530-c87a47561017",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3939170b-8f13-47a5-8e59-f1a970421a2a"
        },
        "item": {
          "id": "db80f622-40f2-4348-8db9-af604cabb5d6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6574ef96-e9f0-499b-b3e0-1d21a2a28381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ccfc501-4fba-4e4e-be54-8e502b1f6b13",
        "cursor": {
          "ref": "f19d21a0-e9ec-4f58-89cd-a25d94f88ce7",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "afb42c70-49dc-4958-87e4-3bdfac268ae7"
        },
        "item": {
          "id": "8ccfc501-4fba-4e4e-be54-8e502b1f6b13",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "683efcb4-c1f1-4b3a-8d4b-f14ca8a6b3ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc742c86-d0f9-4f55-b2c7-afe409ccbab2",
        "cursor": {
          "ref": "ef5480eb-8269-4b06-a4ff-f7b993b0defc",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "54288b63-0871-4094-aa65-b4b671531083"
        },
        "item": {
          "id": "bc742c86-d0f9-4f55-b2c7-afe409ccbab2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0634b227-be25-49fc-b147-92022528c25e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d373e0-03f1-4bc5-870a-8ef45fc14bc7",
        "cursor": {
          "ref": "abf9f6dc-0ef1-4cad-83b5-99cd28055d7e",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "da81ac02-28ab-4ee3-a33c-3d795671e7d3"
        },
        "item": {
          "id": "76d373e0-03f1-4bc5-870a-8ef45fc14bc7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "14e43a7b-159c-4e01-bb7a-101b2893129a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822eba2c-d088-420a-844b-0aab8706e1a6",
        "cursor": {
          "ref": "01c0478b-091a-4177-af9a-a7e0e3182f2a",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "78ec7c40-66fa-4124-957a-9e4ee83c2473"
        },
        "item": {
          "id": "822eba2c-d088-420a-844b-0aab8706e1a6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "fbb129b4-7bc6-4e15-aa12-9b4950738672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3fccd6d-9090-4225-80eb-5a113eb110bb",
        "cursor": {
          "ref": "faf280e2-5972-4292-90c0-59a5eead091f",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4142ad1e-dbc8-4ef7-b0f1-6a431f6bbcc0"
        },
        "item": {
          "id": "e3fccd6d-9090-4225-80eb-5a113eb110bb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "01ff03ba-c270-4959-bbce-29b91a5aae4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "971da1d6-6f00-4eb4-91b1-a9f52fa708d9",
        "cursor": {
          "ref": "8918fe0a-6ad5-4076-b01c-3cbe3e498db6",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ef68deea-ff46-4038-a5ae-f2345d103ad6"
        },
        "item": {
          "id": "971da1d6-6f00-4eb4-91b1-a9f52fa708d9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ceb6642d-a01c-42c4-b9ed-cf8771b3f97d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f392d79-162b-4847-89bc-0d82a9d9c701",
        "cursor": {
          "ref": "088ffe9f-87f6-49c7-a3fd-79c45eb8353f",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "e80ccead-776c-4e6f-ba40-5e878fe23818"
        },
        "item": {
          "id": "4f392d79-162b-4847-89bc-0d82a9d9c701",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6e84050d-190d-4859-af34-b6fea1d61e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18b8f59f-80aa-44c7-974c-8ade6e838bab",
        "cursor": {
          "ref": "157fd021-cead-4585-aa4a-d0d82ec93644",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "3e9c8b35-9cd2-4762-b919-8b3d455ab8f2"
        },
        "item": {
          "id": "18b8f59f-80aa-44c7-974c-8ade6e838bab",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a2b7d019-9768-4696-8db9-a8d12fe2e9f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf0222f5-6022-47f5-a672-26385c7a844a",
        "cursor": {
          "ref": "139fee9a-469b-46c7-afba-52c07407ea3b",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "613e68d4-e666-404f-98d9-6102cebaf65b"
        },
        "item": {
          "id": "cf0222f5-6022-47f5-a672-26385c7a844a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c2298dd5-2604-4de2-b36a-748b61e8e0e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d39e235-a245-4a01-a82a-75a9f7c62a70",
        "cursor": {
          "ref": "9e02eba7-a0ff-47fa-a929-860800875814",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3a2e8e99-55b3-481d-be26-7541b567d7e7"
        },
        "item": {
          "id": "9d39e235-a245-4a01-a82a-75a9f7c62a70",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "bb109a60-3664-4450-867a-16e8b08cbe43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d8aba21-8f71-4d24-b3d2-fd1ebad73cbb",
        "cursor": {
          "ref": "53feeec7-5d28-48d4-8199-719db3e65b43",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4a24f6a3-4eb6-427d-b15d-e842bb86178d"
        },
        "item": {
          "id": "4d8aba21-8f71-4d24-b3d2-fd1ebad73cbb",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6ded31a4-cf5b-44b1-a0ab-a3f73af0030a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f505c5-e626-40d1-a6ca-92aa493434a5",
        "cursor": {
          "ref": "9e9494a9-3bfb-4efd-8434-8cdbfcefd85e",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "41dc922c-8792-4b96-9105-4f6a5eac36de"
        },
        "item": {
          "id": "54f505c5-e626-40d1-a6ca-92aa493434a5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "01e80bae-0af9-4e99-a185-4ca3e083b651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a4a05c-5231-4a79-a565-7d6199a2c57f",
        "cursor": {
          "ref": "365925a1-6737-4759-af82-e7622628e476",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7c47a8fa-2080-4ad2-a642-cb47bd02b096"
        },
        "item": {
          "id": "15a4a05c-5231-4a79-a565-7d6199a2c57f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0c5f976a-7c62-4325-ae90-6ae5354f4fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7962669b-00e4-4676-baeb-7368670a8d81",
        "cursor": {
          "ref": "da326a38-fead-4a73-8fd4-49ad8ea16d90",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "bd53ca54-6d4c-437f-b7d7-e80e15f2617f"
        },
        "item": {
          "id": "7962669b-00e4-4676-baeb-7368670a8d81",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "db266a71-e4ec-496b-80b6-6937ad6cb121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de83527-a1db-4be9-a2b4-984dc7f60ae8",
        "cursor": {
          "ref": "6bafce47-6670-4c35-aa1c-17e4e2ca6b1e",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "53297df3-2724-49b2-b6f6-f78423822180"
        },
        "item": {
          "id": "5de83527-a1db-4be9-a2b4-984dc7f60ae8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "489e758f-23a2-45a2-8467-ac26a3fd6174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae0d93d-8abb-4c50-8803-e946cceb5130",
        "cursor": {
          "ref": "c0f9ea00-24c6-4c03-bae7-5c3f286ac91e",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "75f38f30-2bb8-4d6b-9a4b-17576a2fde9a"
        },
        "item": {
          "id": "1ae0d93d-8abb-4c50-8803-e946cceb5130",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0b75b479-6350-44fe-8dda-f2755931d192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd77273b-5989-41d3-9234-9d573c532bde",
        "cursor": {
          "ref": "6d0d250e-5072-49ba-ae2c-f6779c07f604",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8c314b58-e0f5-4a7b-a3da-3c60accc329e"
        },
        "item": {
          "id": "bd77273b-5989-41d3-9234-9d573c532bde",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f8bfaab3-4ecb-4037-99c9-112ad0f44003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4167e6b7-8d51-40be-928b-2cc6c16ee816",
        "cursor": {
          "ref": "f516525d-f4d7-481b-ab06-7358aa21b01d",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "90b237af-fafc-441b-9db4-7d350de4d58b"
        },
        "item": {
          "id": "4167e6b7-8d51-40be-928b-2cc6c16ee816",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bf95f7dd-f3f7-45f1-83f4-74c3cf82ad20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ccf5953-85d2-4d05-87bf-d870a829b825",
        "cursor": {
          "ref": "9f3979ce-bdd5-441c-83e7-adae2c47744e",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "62cb44b4-9245-455f-b5fe-1eca81476a9a"
        },
        "item": {
          "id": "7ccf5953-85d2-4d05-87bf-d870a829b825",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ccc86805-3bda-4fed-bc0e-e3a522d4db61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33ec5e1-a99c-4ddb-9e68-db030c3f7a71",
        "cursor": {
          "ref": "307e0437-90d3-4f25-b4b5-fb899e5f71a0",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1c36900d-29dc-4499-905f-f5cece4534f2"
        },
        "item": {
          "id": "d33ec5e1-a99c-4ddb-9e68-db030c3f7a71",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a5523db9-6385-4a7c-8dab-ecb7d0054957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376e6eac-2bb0-4c85-803b-d134dcfebac2",
        "cursor": {
          "ref": "3c4c96d6-caeb-4e5b-9eb2-6f02d3582585",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "be2d7a89-d8e2-4534-8b64-2908387e464c"
        },
        "item": {
          "id": "376e6eac-2bb0-4c85-803b-d134dcfebac2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "686556f0-0ee3-447c-8fd7-0dd07da4c3a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "609a8c3f-ca27-4254-8eca-0ed860dfc4c7",
        "cursor": {
          "ref": "bc42e5de-eb37-43bb-a2ee-60fcb7c5ec15",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1ff58c5c-5da3-4830-9a65-8d4bb9515341"
        },
        "item": {
          "id": "609a8c3f-ca27-4254-8eca-0ed860dfc4c7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8b78f905-89b0-429d-ad16-164a06886d9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b95f13bb-b54d-41fd-a03c-916a89108f06",
        "cursor": {
          "ref": "18d364fc-c860-4846-9ac0-3690cefc8840",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "af94bafb-9c78-4a32-a185-1afb8967e8b5"
        },
        "item": {
          "id": "b95f13bb-b54d-41fd-a03c-916a89108f06",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "dcbfbbcd-9835-42cf-9957-307fc8d34434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee588e34-cb29-4027-8e6a-30b0acc6ab98",
        "cursor": {
          "ref": "96d3728d-bb32-4506-b218-9abde9487cee",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "cd852644-fa97-4975-aac2-e74e098ba206"
        },
        "item": {
          "id": "ee588e34-cb29-4027-8e6a-30b0acc6ab98",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6a6cd94f-c219-492d-8680-2358167f87b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ac3d6a-9f3a-4527-b29b-3742ac9629ee",
        "cursor": {
          "ref": "7caccfe8-368c-490c-988c-f62cf4b703c8",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "77ae84ea-6252-4383-964e-24de5a650c15"
        },
        "item": {
          "id": "53ac3d6a-9f3a-4527-b29b-3742ac9629ee",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e9d98389-4673-42ef-84af-22efbb1b108d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be29188a-628e-4226-b459-6486d6fdcfe9",
        "cursor": {
          "ref": "73db50ae-874d-4fdd-9407-c8c2fe421747",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7b7af0c7-267f-4a1d-9334-66a291b8da93"
        },
        "item": {
          "id": "be29188a-628e-4226-b459-6486d6fdcfe9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "eaa55601-6f96-4461-ace6-21514e00d33d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2777e24b-dd56-4821-a5d4-7fb71fbd5862",
        "cursor": {
          "ref": "268efc9f-9293-458c-84a9-7dc6233e5534",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "96e1bb4a-f5ef-447d-aec2-0c4184753391"
        },
        "item": {
          "id": "2777e24b-dd56-4821-a5d4-7fb71fbd5862",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "62956a8c-b61b-430c-aa2c-44996f95470e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55bb3117-23cb-4795-b052-be023d10b03e",
        "cursor": {
          "ref": "035365c7-2088-413c-b8d2-41676e59e311",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "dee3d4c1-0e05-4639-abb6-f626469a2b0f"
        },
        "item": {
          "id": "55bb3117-23cb-4795-b052-be023d10b03e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0a0d444c-7d3e-47f7-a82c-8caf90bf3eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d80d783-9a2a-4e32-b185-51f17045f8b6",
        "cursor": {
          "ref": "ac99e0c8-63b0-40a9-b6be-d9a61588e4c7",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "74a1d01f-e2e1-4b7f-9ad8-feb48428bd12"
        },
        "item": {
          "id": "1d80d783-9a2a-4e32-b185-51f17045f8b6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "aaa83eed-34cc-411e-96e9-2df87c3ddda0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b1ca544-793f-4dab-96c1-bdd07934841d",
        "cursor": {
          "ref": "f2da2150-cab3-4c2b-bcde-bd03cc736dba",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b14447c1-f0f0-4a65-a3f0-e7419e2fc944"
        },
        "item": {
          "id": "4b1ca544-793f-4dab-96c1-bdd07934841d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5100e83a-b7b3-4efe-9414-152b0a05001e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea6d8061-0a17-4150-a2f2-a0ce565ff198",
        "cursor": {
          "ref": "1715ca11-f8d5-444f-9c48-4d1f9fc8a4a6",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d7bce7e6-917d-496c-97fe-e49477de9dd8"
        },
        "item": {
          "id": "ea6d8061-0a17-4150-a2f2-a0ce565ff198",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a066812a-f349-466b-9949-deec0f25c75b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0986516-e18c-48fa-88fa-2bc1a1e843b1",
        "cursor": {
          "ref": "16c668ed-2222-40a7-a786-fba0f8fc0928",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "137fdf32-0299-4d65-a2b5-a21925a40077"
        },
        "item": {
          "id": "f0986516-e18c-48fa-88fa-2bc1a1e843b1",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ee272dd2-acd6-4626-89be-60dfcba91ed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4314bd9-d318-4439-9984-36b8a716657e",
        "cursor": {
          "ref": "283a7fd8-b9ef-4921-a978-bd71d6c08d04",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "fb8264e9-8fb9-461f-a56c-ca7005bbcca3"
        },
        "item": {
          "id": "f4314bd9-d318-4439-9984-36b8a716657e",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "a049bb0a-d76b-484c-95f5-f36cb5321ee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367c01f0-0a9d-4a61-b402-386cab816d6f",
        "cursor": {
          "ref": "9a54c0fa-3b5c-4c11-b897-4c8b3e707115",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "cf401949-703d-4d5c-8982-d675376f6a87"
        },
        "item": {
          "id": "367c01f0-0a9d-4a61-b402-386cab816d6f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "ccd0134a-a63f-4a4e-96fd-08706c20b390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52400e61-7c6c-4b0a-9e1f-ad65d0c31773",
        "cursor": {
          "ref": "f6c87cbf-de12-4b1a-87e0-9f00fb193285",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8feea426-bbfe-47ff-80e2-ded39f3c6b84"
        },
        "item": {
          "id": "52400e61-7c6c-4b0a-9e1f-ad65d0c31773",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "99f68045-ca8c-42f9-8d77-156b3146c92f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a628a27e-bbe2-45c4-aab0-c63faa7bed14",
        "cursor": {
          "ref": "dd005022-dc01-42a7-9df1-9936d8aed01b",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "166cde3f-32c5-443a-8b51-8acfc5e28e74"
        },
        "item": {
          "id": "a628a27e-bbe2-45c4-aab0-c63faa7bed14",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "67fe3454-8669-4223-b685-e73c7ddb10bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6b7270-728a-4e46-aad0-36b799ec45a1",
        "cursor": {
          "ref": "2f92d6a3-068b-46e5-9028-9740713cc0a0",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6d15ffb6-f28e-4fb5-9382-25d338e93d24"
        },
        "item": {
          "id": "ac6b7270-728a-4e46-aad0-36b799ec45a1",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "1ac7568a-1b63-455a-b21a-2e0460465934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67bd8bd4-f91b-4187-ad06-54823f5dc63e",
        "cursor": {
          "ref": "0775873e-50e1-4a88-86c9-d0b2d833377d",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "861ac22b-59f2-487a-9147-5622470fbe0e"
        },
        "item": {
          "id": "67bd8bd4-f91b-4187-ad06-54823f5dc63e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "d27d6433-5259-42c2-96d5-6e974778fc70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20f3ef8-aedf-426c-9067-0324750377be",
        "cursor": {
          "ref": "2831b3cb-c635-4e81-b1c1-4e8f2bd32b5d",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "44e2aacd-7b51-45f7-932b-af6c8664ee73"
        },
        "item": {
          "id": "e20f3ef8-aedf-426c-9067-0324750377be",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8721549b-bbda-43c7-a59a-96a54f09c1ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "485ab0ed-dcff-41a1-89f6-884da47486f6",
        "cursor": {
          "ref": "76e68652-30c3-4a9c-b867-392b29d01224",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "6709770c-2539-4ce1-863e-6abf2e219563"
        },
        "item": {
          "id": "485ab0ed-dcff-41a1-89f6-884da47486f6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f7994afc-0962-44c3-bd7d-d798b1b8e99c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f9daee0-ba63-40e8-9422-563d5fa07b15",
        "cursor": {
          "ref": "4e1d9a5c-c7e8-4c1e-8243-9d10570b6d56",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "14abc29d-6e95-4791-abe1-23a907896979"
        },
        "item": {
          "id": "7f9daee0-ba63-40e8-9422-563d5fa07b15",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b478dd54-b47d-4b6b-a6e1-b7fd8e22555f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b7a9ce2-297f-44cf-9046-d83711c6b640",
        "cursor": {
          "ref": "e36db456-93e9-4b65-ace0-33081939ec38",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "faba252a-ece1-4cc1-a9de-44b8bfdc250b"
        },
        "item": {
          "id": "6b7a9ce2-297f-44cf-9046-d83711c6b640",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "85c0c300-78c2-489d-8f54-77462b8e3633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e47bbe7b-e351-4bfb-ad8e-ee206a2e3e00",
        "cursor": {
          "ref": "96c82422-7b79-4691-902e-a219df80f3a5",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "034f0db8-4f18-4971-97da-5bebb2095989"
        },
        "item": {
          "id": "e47bbe7b-e351-4bfb-ad8e-ee206a2e3e00",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b5b84b4c-73db-43ef-a328-686e4c1dbc38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0698129-c79b-4e53-99f2-472ccd5a8c32",
        "cursor": {
          "ref": "4e7eb0e8-8ff1-443f-8e82-f678d48fcae9",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e3974a27-9582-44bd-acd1-67e1a00cefa3"
        },
        "item": {
          "id": "d0698129-c79b-4e53-99f2-472ccd5a8c32",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7f6a47b2-5a64-4c8a-9eef-2b33cc65f8a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e869fff-4f09-4a8d-a289-e1b807f82b71",
        "cursor": {
          "ref": "6efba465-6699-4091-aa0a-1851cefd41b1",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "188c8a2d-f1da-4f1e-9be6-dd28be3ee16b"
        },
        "item": {
          "id": "3e869fff-4f09-4a8d-a289-e1b807f82b71",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f0ac2229-6e2a-4c79-943e-f9bedbbb51bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "01246bab-cf6f-4983-950a-b84618bfe5c3",
        "cursor": {
          "ref": "62eb23a4-e24d-4438-8dce-9d0f4ad1c7ed",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "3a762d7f-ea58-414f-87ee-42b0355054f6"
        },
        "item": {
          "id": "01246bab-cf6f-4983-950a-b84618bfe5c3",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a7bfc5a0-a2bc-4336-932f-3b6aa775a2f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "344f3af4-1239-4371-889a-27eefdc03a1e",
        "cursor": {
          "ref": "ec02d87f-8a86-4b94-9ed8-05ce5b873cd4",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c9cd1fbe-3a43-4593-8170-2e553ef681c2"
        },
        "item": {
          "id": "344f3af4-1239-4371-889a-27eefdc03a1e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "eb9d864b-5f49-4d2b-9449-f56706bcc854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9cc7fc8-f6c9-4de8-928c-52625e01b786",
        "cursor": {
          "ref": "af3370b1-47e0-48c8-958e-67c2ad3a0b25",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "672265fc-7979-414b-a792-36d781e7c800"
        },
        "item": {
          "id": "a9cc7fc8-f6c9-4de8-928c-52625e01b786",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "fc532e80-8c8f-467c-95d9-0f57dcaf390d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a921043b-3c92-4d28-ad05-0dc820d4ae97",
        "cursor": {
          "ref": "60403f97-818e-476c-b177-793f7113de16",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3a313243-068e-4247-8311-1dda9fd75499"
        },
        "item": {
          "id": "a921043b-3c92-4d28-ad05-0dc820d4ae97",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d2b6520e-8a2f-4cfd-8770-e88f09922f73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c9b369-8323-4ccb-bc73-5832f3257f29",
        "cursor": {
          "ref": "61c0cad8-9d8f-462f-b236-d27d1f6b5475",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4ebb214b-1b3e-4277-b2f2-290e744a76c5"
        },
        "item": {
          "id": "30c9b369-8323-4ccb-bc73-5832f3257f29",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f62fa4ae-3ded-4264-a928-cd2df9a2fed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f42c6e-4432-4181-85f4-c02ea901feef",
        "cursor": {
          "ref": "5316d3b7-8971-4015-854d-bda0d67ef5f3",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9256f301-8636-4073-bce9-2ab133b1681d"
        },
        "item": {
          "id": "b9f42c6e-4432-4181-85f4-c02ea901feef",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "bca1f3ac-4b37-4c1f-bede-727421a4c86d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53d37242-a809-4e2b-a18f-5a05b941234e",
        "cursor": {
          "ref": "56dc2cf3-6890-4a4b-9ba5-56df7c030714",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2fb59b82-7d8a-4e7a-9c83-77ecfa571a82"
        },
        "item": {
          "id": "53d37242-a809-4e2b-a18f-5a05b941234e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "60484ab8-1344-4aae-82a7-fe550774cfd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3268f1fe-06cf-4579-88df-47d21ec28d63",
        "cursor": {
          "ref": "58797b4d-fff9-471c-b6c3-06ca97699d5a",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "06f3537c-4cbe-4c4b-8a56-c98a435c5e96"
        },
        "item": {
          "id": "3268f1fe-06cf-4579-88df-47d21ec28d63",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c8d50ede-d395-4485-9c0b-b9d2ac4c77d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f002d474-c527-48e1-aaee-df71136ba1b6",
        "cursor": {
          "ref": "53910ae2-e4cf-4aa3-a329-3af0fa19f0d5",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "cf5ddfce-a17c-49b4-b7f1-099eada80183"
        },
        "item": {
          "id": "f002d474-c527-48e1-aaee-df71136ba1b6",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9337bffb-4847-4600-af08-71c2dadf20cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf1c0ea-bb23-43a7-92da-fbc57022a283",
        "cursor": {
          "ref": "370638b0-dbd8-43bb-a871-502bb7ad0d04",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6c2893a3-9887-4373-8181-a7ae2059855a"
        },
        "item": {
          "id": "bcf1c0ea-bb23-43a7-92da-fbc57022a283",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "09299913-22cc-41d8-84b1-a09d94ce88d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1953ba66-b976-4a93-aa36-92891607bf4c",
        "cursor": {
          "ref": "da69f89b-063d-4c9d-a219-861cc4bca67e",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9c5388c4-7c5a-4456-bd1b-bd28b8fefda1"
        },
        "item": {
          "id": "1953ba66-b976-4a93-aa36-92891607bf4c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c091b2dd-787a-4e5c-a1d1-e924048796e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "022729fb-66a6-4d65-9683-859b6b4408b5",
        "cursor": {
          "ref": "4896b1a1-5943-4857-9c0d-19426fc63436",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "56291910-4be8-4308-9441-2e6d03762af2"
        },
        "item": {
          "id": "022729fb-66a6-4d65-9683-859b6b4408b5",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "12686bd7-4cf4-4374-8ce7-fc89a3b8cece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253f56e5-dcca-474e-bad0-aebd2f709674",
        "cursor": {
          "ref": "662b4a87-ba48-4656-9439-4193c9e224f5",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "fb78863b-5f3c-4811-8d6f-2349d90609f2"
        },
        "item": {
          "id": "253f56e5-dcca-474e-bad0-aebd2f709674",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "4bb8f36a-5ec5-4110-890f-8e020915f76a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316a61df-ce8b-4cc8-bd80-4fc5dc1263a6",
        "cursor": {
          "ref": "1ec2bd41-d23f-411c-bec7-506d538c108b",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "89abc01b-a673-40bf-a09e-2f4eee82a77f"
        },
        "item": {
          "id": "316a61df-ce8b-4cc8-bd80-4fc5dc1263a6",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "862d0206-e25e-46c9-a211-db6ae308c2b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93303c0d-8b3d-4d8a-8f46-e0bf9191cb3f",
        "cursor": {
          "ref": "2e77a58c-59a7-437a-a357-aceaae618ac7",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a7307ddb-9f68-4999-a010-be904f4f00d2"
        },
        "item": {
          "id": "93303c0d-8b3d-4d8a-8f46-e0bf9191cb3f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "bd124525-e36b-4946-90d1-504686c46af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65abf0c0-3cde-4278-86d7-8459d6dbb414",
        "cursor": {
          "ref": "a54460a6-f7d7-4f4a-a9c0-a214cfcc7ce0",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e8890cc3-7ba4-4fb9-9315-b5a078974550"
        },
        "item": {
          "id": "65abf0c0-3cde-4278-86d7-8459d6dbb414",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "46ca2367-a784-4163-af4a-a76506b22bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13cd32ff-7c05-4cef-acda-83a53e4ac057",
        "cursor": {
          "ref": "56fe89e1-8600-48f6-9787-fd8baccc8fdc",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e07da22d-2eb5-41e5-9c0f-9dc7b4385ac8"
        },
        "item": {
          "id": "13cd32ff-7c05-4cef-acda-83a53e4ac057",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "2b74ae0a-f155-4e8e-ae38-b4ec4b520e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b1fcd9-b412-42b2-8813-a1c8dd3a45d5",
        "cursor": {
          "ref": "de71e1e4-1fce-4997-a944-9a5504177973",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1d3ff2a0-2a18-4806-ae3f-5f5f1926d171"
        },
        "item": {
          "id": "c6b1fcd9-b412-42b2-8813-a1c8dd3a45d5",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9e8741d0-48c9-428d-a670-9a7ac9e183d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "699619aa-40ff-40b9-95c0-449242bd89ec",
        "cursor": {
          "ref": "b3483c52-cd9f-415f-8542-5ca6b7b256cc",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "18902cb5-e353-4dbc-b082-bfa8e95a04ea"
        },
        "item": {
          "id": "699619aa-40ff-40b9-95c0-449242bd89ec",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "fb7bb60e-c478-4d01-af9c-9bb6dc8fccf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b74f2d-7662-4e91-9acb-d277cdc89691",
        "cursor": {
          "ref": "d13958ce-48ce-436e-ba11-a6f3fd16f8b3",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6e8a6952-4187-4de1-a948-1e644c397469"
        },
        "item": {
          "id": "28b74f2d-7662-4e91-9acb-d277cdc89691",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "82a217c1-7057-4991-b514-fad09f051605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932610cc-bb4a-4d92-9568-ddc04e40ef55",
        "cursor": {
          "ref": "445f29cf-a60d-4b4f-a7e1-ab6e3f669a13",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2ce81960-5e6e-46b2-80d3-6ab602a653c0"
        },
        "item": {
          "id": "932610cc-bb4a-4d92-9568-ddc04e40ef55",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ba1d5767-721a-4b7b-88b1-8c2e053ee929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb23f2f5-09ab-41a6-b3c4-9ae2ba06f1ca",
        "cursor": {
          "ref": "3f226b5c-c333-46ad-a2c8-23eb1835f6d7",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2fd1aa7a-dadf-4786-aba5-920b3e03ea48"
        },
        "item": {
          "id": "eb23f2f5-09ab-41a6-b3c4-9ae2ba06f1ca",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f16d0a0c-98da-46b7-bed6-f0a0eac8a7bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c1abb5-fd59-4e6b-a106-48be914e7329",
        "cursor": {
          "ref": "89776435-0518-432c-b6b6-2dd166609b9e",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "90ba7996-37a9-43ba-a69d-7cf37d04bf6d"
        },
        "item": {
          "id": "93c1abb5-fd59-4e6b-a106-48be914e7329",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a4711226-d5df-4488-9e8c-583d4a116e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eac891f-b476-4429-8851-b88e5cd06018",
        "cursor": {
          "ref": "8e5eea32-2bd8-48ba-8ae7-c2daf0f99dcc",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "047fec2a-be12-4203-8ee5-d111a3bf2b17"
        },
        "item": {
          "id": "2eac891f-b476-4429-8851-b88e5cd06018",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b2566b7f-0d4e-4d44-983f-556a0c86572a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ed9df5-835d-4925-a73c-8d0a92f6605c",
        "cursor": {
          "ref": "b73fb634-ab8b-4a61-b258-c346bec5f611",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "64062aee-ac17-4463-9526-8834751647cb"
        },
        "item": {
          "id": "21ed9df5-835d-4925-a73c-8d0a92f6605c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4802e813-64f7-47b4-b506-c0bfbe76bd80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1e16b7-334b-476b-b539-d084576a85d4",
        "cursor": {
          "ref": "c665b19d-775f-4b1b-8360-9ebe8da6d0cf",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8bb87f8f-f0d4-4650-bbd4-0bdb116b4f11"
        },
        "item": {
          "id": "af1e16b7-334b-476b-b539-d084576a85d4",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "36b40f21-cb52-4ac6-b8e4-fffac5529d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "801756bb-cc38-4582-b2e0-21c25ef3e3cb",
        "cursor": {
          "ref": "546bd902-6664-4c93-b82d-1d69ea96a4a0",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "91911c82-3a23-4bc1-9d3a-b82269699ff0"
        },
        "item": {
          "id": "801756bb-cc38-4582-b2e0-21c25ef3e3cb",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5c8577ac-04b8-4697-948f-dfa5bd69a077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65edcaf5-ed71-461b-8b6c-44846d4829be",
        "cursor": {
          "ref": "322e7824-b0b5-4587-94a6-f2b5217b9682",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9d6076d1-2dc7-4964-8171-467436159bac"
        },
        "item": {
          "id": "65edcaf5-ed71-461b-8b6c-44846d4829be",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "26487aa9-38ae-40ee-ac65-c305b7dbed2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e0432c-c9dd-4d40-a41f-815990d781f9",
        "cursor": {
          "ref": "5c0bcada-e8cf-45b2-b677-a66de61b1f71",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6798e587-8a32-4d5f-a3b4-d82b7bc0a340"
        },
        "item": {
          "id": "10e0432c-c9dd-4d40-a41f-815990d781f9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2e794b8c-ebad-4367-8fdd-38ed1b828fec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31afa08f-3b10-411f-ae76-df071c69d2d0",
        "cursor": {
          "ref": "ae437d4e-3037-42a5-9072-bfcb3e6292a7",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "fd8ee201-32cb-4475-b67a-c936e061acdc"
        },
        "item": {
          "id": "31afa08f-3b10-411f-ae76-df071c69d2d0",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d7d2e4b0-ebb5-4af8-aeeb-1877d5d1bd15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "ffbad32d-21ba-4d47-aad3-0c6c8f789d01",
        "cursor": {
          "ref": "b91b2986-c616-4f04-a18d-8ed59d0aa5c5",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "79658c48-df19-4e8e-bf76-d66769ead425"
        },
        "item": {
          "id": "ffbad32d-21ba-4d47-aad3-0c6c8f789d01",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "069ffca2-d9fb-41bd-ac63-469eb488d0bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "f54f9a62-da5b-45c9-8e0a-46faeed2594c",
        "cursor": {
          "ref": "d04afc8d-177c-4620-9fbe-b09ba9dfa09f",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "545b3cad-ec51-4122-bcd8-5c839cd29f90"
        },
        "item": {
          "id": "f54f9a62-da5b-45c9-8e0a-46faeed2594c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e25e2adf-5124-492f-b003-bf98710ec3dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "2b68a4ed-5389-4ba5-8ddf-446a6ff3b87b",
        "cursor": {
          "ref": "00013c70-9057-4768-bc87-f96de773471c",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7e31c73c-55c8-4d02-9cd4-ca7bff63fde9"
        },
        "item": {
          "id": "2b68a4ed-5389-4ba5-8ddf-446a6ff3b87b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "105632e5-9247-449b-b309-6e758163822e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca79c8be-5325-4afb-9fac-403528d40a46",
        "cursor": {
          "ref": "41f6400e-8800-4870-a377-710ec5b88aa0",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4c552571-9bf8-4e2d-8352-b8e91899c9b9"
        },
        "item": {
          "id": "ca79c8be-5325-4afb-9fac-403528d40a46",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "2b2e03e4-bfc6-48f1-92e2-fa1e725c1549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "3af8519d-4bd0-4cf5-8574-655e7ed81d9d",
        "cursor": {
          "ref": "26cc58b2-8f9d-4afc-b392-30d800334178",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "48c1bb6c-0728-4663-83ca-e5184dee6842"
        },
        "item": {
          "id": "3af8519d-4bd0-4cf5-8574-655e7ed81d9d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f20ff953-cb2e-471e-87cb-4b9fd5c4aa76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1208,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "aa20ec56-21e8-40d1-b085-8858ce9d7879",
        "cursor": {
          "ref": "d1444485-a556-4564-8cd5-130191516d71",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b7c2fa49-16b5-417e-b579-d0b95ce5a8fe"
        },
        "item": {
          "id": "aa20ec56-21e8-40d1-b085-8858ce9d7879",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2a517b07-58ff-4404-b684-c07e9d792d54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 263,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "5fab25de-3147-41c6-90df-7edfd2488e30",
        "cursor": {
          "ref": "35f6a316-5c20-44b6-a329-d4a5c54e9e7d",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7b8354ee-b670-4359-ab8b-2926612659ea"
        },
        "item": {
          "id": "5fab25de-3147-41c6-90df-7edfd2488e30",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "84a9b436-8442-4e68-bb76-7414622e4718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "6ca277ff-a559-4e57-83a3-02cae328e27e",
        "cursor": {
          "ref": "dfb4c5aa-f59f-47c3-bef8-b39d2a6e8fbe",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "47d0209b-d5c3-4e50-9b67-bbc9d08dda8a"
        },
        "item": {
          "id": "6ca277ff-a559-4e57-83a3-02cae328e27e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0990cfe8-76a5-4d31-9caa-f32e3ebf97c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "f234b46b-e17f-48c0-bedf-c245c8645cb0",
        "cursor": {
          "ref": "1102a74b-5be5-4e06-9974-ec4f3d5a7493",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "dcb4a907-6d8d-4c6d-93b0-a4fe834d7fcf"
        },
        "item": {
          "id": "f234b46b-e17f-48c0-bedf-c245c8645cb0",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3a1ccb31-0faa-4190-86cf-07092f5df78a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "f801fb3e-fca1-457a-9f13-0a54d8bd9305",
        "cursor": {
          "ref": "8ba529b1-4c7a-4c40-9566-542006d8046f",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c86334c0-013d-4feb-976b-6e40124e7532"
        },
        "item": {
          "id": "f801fb3e-fca1-457a-9f13-0a54d8bd9305",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7854c4c0-e1a4-4434-8146-28e2e4e17617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ad6b23-5730-4510-b77d-3653670cbb5f",
        "cursor": {
          "ref": "e6899ff6-ae7d-4ff5-8d29-81c06f61ba8f",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "98abceeb-706f-480a-bcb5-103582797e53"
        },
        "item": {
          "id": "a4ad6b23-5730-4510-b77d-3653670cbb5f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "23bcb1f6-daf6-4d55-9930-8a37a895cb5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db32e56-dd5d-4b2c-bb1d-334e5e3e4946",
        "cursor": {
          "ref": "c11e7e84-97d7-493e-8911-5a07c35feeb4",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c6bcd01f-1ab2-4a4d-bc7d-c7c96103d1b2"
        },
        "item": {
          "id": "9db32e56-dd5d-4b2c-bb1d-334e5e3e4946",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "99dd8aaa-e8b1-4a31-a2bf-310537a21d8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46202b58-863b-4c00-9d74-e71bc2ae098f",
        "cursor": {
          "ref": "0cb826de-da48-4335-9c3f-ae2b481c8b0f",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b608a212-90d2-4cdc-9af6-145ba1c5e082"
        },
        "item": {
          "id": "46202b58-863b-4c00-9d74-e71bc2ae098f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ea23c5a5-de81-4950-9ae2-c2b988972a53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d2527d-5b84-412c-be90-80e715e841a3",
        "cursor": {
          "ref": "fb6b0175-9af8-4532-a2e7-2fb66cd66372",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "41ed97c3-1de1-406b-b03c-678b042fc14e"
        },
        "item": {
          "id": "33d2527d-5b84-412c-be90-80e715e841a3",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "157105ab-e702-4ebd-8479-21740c0f20e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc49df4-e9ea-4966-82aa-c265a0ea6384",
        "cursor": {
          "ref": "4838cb2c-33e6-4e08-9ce9-e30cc4ff8042",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c852aa3f-fb69-4042-b55c-f7aa32492541"
        },
        "item": {
          "id": "0cc49df4-e9ea-4966-82aa-c265a0ea6384",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "292fa677-0e32-4dac-afdf-7bf72d826201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd17e86-2d43-4f3c-948b-21d9bbf0515e",
        "cursor": {
          "ref": "3cb7444d-73de-44fc-88f6-8b0b34da493c",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "31cf1e44-9582-4396-aa94-d00bb31a2204"
        },
        "item": {
          "id": "6bd17e86-2d43-4f3c-948b-21d9bbf0515e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "869b9fa9-be53-4606-8f86-0bd300597251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d82b13-01a6-43a0-a563-e3efe068dc3f",
        "cursor": {
          "ref": "21a2b1cb-a03d-4dae-8609-a6bbd959fc74",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "88e0e937-8736-4328-b34d-55310a461883"
        },
        "item": {
          "id": "c8d82b13-01a6-43a0-a563-e3efe068dc3f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a4bd5a1b-837a-44f3-b6db-d4e7d2cefb7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d5e0432-1f91-48b8-8875-42ff2e4c0889",
        "cursor": {
          "ref": "3ce35a62-9ce7-4576-b794-2f0980249ad4",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ad54f570-c83e-4335-81f5-caa100896bf6"
        },
        "item": {
          "id": "6d5e0432-1f91-48b8-8875-42ff2e4c0889",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a015ffc0-9643-470f-b97a-60fa6c371d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1dd9209-b159-468e-af70-ed96bdabd41c",
        "cursor": {
          "ref": "d1a43707-f3b6-484f-a912-309da12409e3",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2de1e3c1-1a75-48b3-858c-16d59bcd3727"
        },
        "item": {
          "id": "d1dd9209-b159-468e-af70-ed96bdabd41c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "3a41712c-c198-4dc2-966b-83503155c887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c111114-5c85-4181-b86c-15aafc7527a3",
        "cursor": {
          "ref": "04942d67-b05f-4f51-b564-c5d80fb52ff5",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5f84ad16-c1ae-4ee6-a15f-1692bb218618"
        },
        "item": {
          "id": "2c111114-5c85-4181-b86c-15aafc7527a3",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b8a8145d-c980-4cb8-a71f-ba1e78eafeb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e02c473-e1d8-49b6-b308-64cc212fdbfd",
        "cursor": {
          "ref": "5f10b856-7f43-49b1-ba35-ded455d70b42",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "92fa7a42-4642-4ea9-aee0-ed0349559126"
        },
        "item": {
          "id": "4e02c473-e1d8-49b6-b308-64cc212fdbfd",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "03e65f42-2d51-4d69-aad5-68221f8c16f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9f5c3e-788d-4596-87d4-1c9b8df521a0",
        "cursor": {
          "ref": "71e58aa0-f5de-419c-b75f-79ae0dd59568",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d0931368-58e0-4fa3-b0c0-789c03fde311"
        },
        "item": {
          "id": "db9f5c3e-788d-4596-87d4-1c9b8df521a0",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6869a654-ab1c-416e-b49e-456c1e50ef4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc5fbb4b-39ae-4955-8112-ddbf2295c95a",
        "cursor": {
          "ref": "7e3b26ac-ab97-4845-8fa2-0425fb91e4c2",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "30383605-5416-4b50-acb3-674385ea773d"
        },
        "item": {
          "id": "cc5fbb4b-39ae-4955-8112-ddbf2295c95a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "579c0411-a0f1-4ab4-9b88-8262fa7a9600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1349,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "0b58f2b2-3ebf-472d-8c8c-eaaf829a9f69",
        "cursor": {
          "ref": "bd055c69-6f98-40cc-82e3-c017b1674875",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9930a4c0-af44-4289-bfc6-25f36c5d2536"
        },
        "item": {
          "id": "0b58f2b2-3ebf-472d-8c8c-eaaf829a9f69",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "637aae73-490d-451e-ac89-d104333a38d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1350,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "b7a2af74-5d9a-4afc-af64-718e82e5d6bc",
        "cursor": {
          "ref": "a0574398-4ef7-4591-b645-7e2e3daa1987",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5b4cce3d-5c72-47b1-b183-2dba9dbdd731"
        },
        "item": {
          "id": "b7a2af74-5d9a-4afc-af64-718e82e5d6bc",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "1e92d68e-daf0-4025-9aba-8b90160d3a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "d5adcfc1-c251-4e8b-b9d6-753d0f8aff76",
        "cursor": {
          "ref": "9fd652ba-4a59-4851-8cab-cbd3f32ea1dc",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f2bb8343-5e83-4695-aba4-6618262b2a57"
        },
        "item": {
          "id": "d5adcfc1-c251-4e8b-b9d6-753d0f8aff76",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b363c439-bf69-4ecb-8fb2-a0d213d9ad37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 797,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "370257c2-b771-4359-8e89-c84628f50cb5",
        "cursor": {
          "ref": "1eef78c4-abfa-4ac9-a8dd-5f0659e702f5",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b40ced7b-a2fc-467e-b917-bc9b968551de"
        },
        "item": {
          "id": "370257c2-b771-4359-8e89-c84628f50cb5",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "48402149-3c8d-4879-bf2f-e9b66fcbeadc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "e6cd4444-e49e-43e0-b92e-0d282a2f41e9",
        "cursor": {
          "ref": "a4ef69c0-1121-4234-a7f9-ac0c33bc2367",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "186f4e5f-dd05-4ffa-a67b-26fb10b7ca26"
        },
        "item": {
          "id": "e6cd4444-e49e-43e0-b92e-0d282a2f41e9",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1878fbdd-4ee3-4047-be02-00a1b9b14a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c31828-6cef-4850-bfab-d853bbdda4e7",
        "cursor": {
          "ref": "c56c8b6e-5643-45d1-a02c-105206ad9d35",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d67bb69c-1eb9-49bb-9070-dbd5b4543341"
        },
        "item": {
          "id": "f0c31828-6cef-4850-bfab-d853bbdda4e7",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2ab0d647-3ae6-4f05-b832-d1367b0d538a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73ac8bf-5754-46a9-b218-c0480827de3a",
        "cursor": {
          "ref": "874991e7-54bc-48ee-93f6-fd29949f266d",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "199f6bf8-6770-476c-9980-e2845e06e53d"
        },
        "item": {
          "id": "a73ac8bf-5754-46a9-b218-c0480827de3a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "369c17b6-a04b-44c2-8bf6-b99b8e6af72a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "874c74d7-be7d-4381-8076-9a05729392a4",
        "cursor": {
          "ref": "36ef73e2-0dc3-462a-aa06-131a222085e7",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "860c3190-90b0-4e88-bfd0-f0180cf57f2b"
        },
        "item": {
          "id": "874c74d7-be7d-4381-8076-9a05729392a4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "cbc31cf8-db43-462c-bb6e-21cb36193892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c87eff2-4f3f-41b2-9121-479b584b496d",
        "cursor": {
          "ref": "fdb0a03b-10d6-44aa-bdfe-91ce182db7a0",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "bc1fadc4-a65b-4813-9652-0ba71e1cc4e6"
        },
        "item": {
          "id": "7c87eff2-4f3f-41b2-9121-479b584b496d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7207c9ef-f023-442f-906e-731faea473e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e08e8b-53bf-45c7-8c12-01f3aead36c7",
        "cursor": {
          "ref": "13d7e8e9-f781-4b24-a285-8a6f57304189",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "44c840ec-85dc-4e0b-80f5-b3e252ee4dc1"
        },
        "item": {
          "id": "46e08e8b-53bf-45c7-8c12-01f3aead36c7",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8bc8bb72-6675-4e95-8b73-d61278365b5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b8c109-c695-4f55-9b62-d34d508effbe",
        "cursor": {
          "ref": "07c55bad-f695-4da1-a942-60e29f60a5db",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dff2a1f7-f722-427f-a0b0-9a365b34e717"
        },
        "item": {
          "id": "e6b8c109-c695-4f55-9b62-d34d508effbe",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d8609338-7cee-4a79-87a6-45f7d864eb8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8350f7e5-ae04-4b86-9cf4-9818cc6c5f50",
        "cursor": {
          "ref": "ed6a9926-9050-4fad-a72d-4ba5ca387cc6",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ec95c63d-e7d3-44d9-8c60-8cb8f51fe7b0"
        },
        "item": {
          "id": "8350f7e5-ae04-4b86-9cf4-9818cc6c5f50",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "878364b9-10f3-42e3-8a9f-b5b64e7416e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e65420e9-f70c-496a-b0d0-9f4ccc0522fc",
        "cursor": {
          "ref": "5ec91cb5-aca9-497f-ad9f-003210862b63",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1b7c2978-b982-4941-aada-5bd4bccd7faf"
        },
        "item": {
          "id": "e65420e9-f70c-496a-b0d0-9f4ccc0522fc",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9dbede91-be23-4552-8576-1fb260da9199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a4e690f-36ed-4115-b390-0f0cab166cef",
        "cursor": {
          "ref": "5a18d5ea-123a-4bfa-bdb1-22cbd6badfdd",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "2a59c595-f480-4b48-ab69-7f08ef20371b"
        },
        "item": {
          "id": "1a4e690f-36ed-4115-b390-0f0cab166cef",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5132b7b7-4b63-4a64-8bc6-b8e41c2cbb14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c792fe-a6dc-4157-9f2d-5e732d89a543",
        "cursor": {
          "ref": "9a02f589-4795-4b5d-8bb6-b2d929255563",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e6d7d90a-a81e-48c7-b4bf-77a35e0271e1"
        },
        "item": {
          "id": "81c792fe-a6dc-4157-9f2d-5e732d89a543",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "251eee11-73f5-46cd-b563-ccf662175838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e45c03e-74fd-47d3-9625-dcccf5f61bdf",
        "cursor": {
          "ref": "eb5152b3-2a97-49d7-af44-26764752d722",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "39ef4c00-2d5a-4740-b266-6f846bf0e065"
        },
        "item": {
          "id": "2e45c03e-74fd-47d3-9625-dcccf5f61bdf",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1aea2c5a-da94-4056-837b-3b5da3a0afb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487c57bf-d68a-4954-8486-fd6725fd19da",
        "cursor": {
          "ref": "e3036fae-55c2-406d-be14-994deab5f3d5",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "57cdf308-23ac-4213-ad22-2cb7d8bebbf9"
        },
        "item": {
          "id": "487c57bf-d68a-4954-8486-fd6725fd19da",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9755ccb4-7021-4844-b746-f209ff0c1fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b17e79e-39de-46df-823d-a3c80e92284b",
        "cursor": {
          "ref": "75d58fb4-885a-4a38-8d95-1cbdbd732115",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "6ab1f2d8-3598-4eb4-801c-a72fe334b0e7"
        },
        "item": {
          "id": "5b17e79e-39de-46df-823d-a3c80e92284b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "593fd1f1-25cf-4ed3-8927-ceb8f116237f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6377825-04b9-4302-a174-f1f969c37916",
        "cursor": {
          "ref": "1ecff8c8-ef5e-4c96-8146-f4a26c965164",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "8100230d-5602-471e-9c4f-8d7826313a19"
        },
        "item": {
          "id": "a6377825-04b9-4302-a174-f1f969c37916",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "4fb04eb0-597a-44ba-9c06-7fffc06a2001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8916b4a-25cd-4b86-a50f-b0c324b98960",
        "cursor": {
          "ref": "1e8039a8-5201-48fc-9808-5ebba24c4387",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "b0437903-4085-4810-8ede-bc79246ac3a2"
        },
        "item": {
          "id": "a8916b4a-25cd-4b86-a50f-b0c324b98960",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d7b3f4b0-eb79-4775-baed-5cd5564c7cca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2ea62b-4820-4f7f-ae90-9c525ab60613",
        "cursor": {
          "ref": "091219cd-a2d6-4457-933b-01cf761758ed",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "2583658e-a7c7-490a-8474-626041c8f488"
        },
        "item": {
          "id": "0a2ea62b-4820-4f7f-ae90-9c525ab60613",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e3ab7837-30bb-46c2-8a4d-9fdb2c76381d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "996164b2-daba-4c40-956d-96a9c844b515",
        "cursor": {
          "ref": "9892be62-edd9-442e-ae71-18eb264c6b49",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "07cc940c-8841-4f8a-87f5-0e35afba9a8a"
        },
        "item": {
          "id": "996164b2-daba-4c40-956d-96a9c844b515",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c2ad22c1-4fd2-466c-8f03-f709283189a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9df0fdd-f00e-4131-8ad3-518daed98544",
        "cursor": {
          "ref": "b2f834b0-ca07-4268-9cce-5c6daa4e8e8c",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "20d02ec7-4176-48d0-9e46-dd4d17b510c6"
        },
        "item": {
          "id": "b9df0fdd-f00e-4131-8ad3-518daed98544",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "878ba41b-4c12-4d72-bff7-fd83b0371eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5b640f6-9618-48d7-b2f9-ed4d149ea706",
        "cursor": {
          "ref": "e06a5315-08d6-4f52-a06c-f86fe8facb1a",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "5776b2ab-3e08-40a4-98c2-16ed3cbfcf10"
        },
        "item": {
          "id": "d5b640f6-9618-48d7-b2f9-ed4d149ea706",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "88847b08-70fa-471d-9be3-a8407136a080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0632d7-5935-4a9d-8ec2-3e98b4310bb6",
        "cursor": {
          "ref": "135340ff-f6a7-40a2-9c71-d4c736c32095",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "4830562b-b380-488b-ab8d-4095bbf9fb33"
        },
        "item": {
          "id": "fc0632d7-5935-4a9d-8ec2-3e98b4310bb6",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9eebc449-3f91-4daf-b506-eb752f66df09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37192d1a-8fa6-4b3c-b9d4-4c4329f16084",
        "cursor": {
          "ref": "eb72a4c4-07fe-4d84-ade5-f24d57f830e7",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "3259ff5d-5b1c-444d-b278-4a4c20961b15"
        },
        "item": {
          "id": "37192d1a-8fa6-4b3c-b9d4-4c4329f16084",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "295a2112-5ccc-4727-9d33-c7154c9aa54f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac42f7b1-679b-4450-977b-8fae7aeb4523",
        "cursor": {
          "ref": "89290048-fbe4-4c9b-a082-72772193ff20",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "95a0b21f-0b51-46e1-99bc-30b361367a70"
        },
        "item": {
          "id": "ac42f7b1-679b-4450-977b-8fae7aeb4523",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "28ee2220-4bce-42eb-888e-36eaa696bba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9066b76-c0d7-44d6-823b-1d38f1801a5c",
        "cursor": {
          "ref": "2779d92d-2971-434d-b9d8-93bf31779be4",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "d2c4128a-ed20-403c-a54e-591a8cca6642"
        },
        "item": {
          "id": "c9066b76-c0d7-44d6-823b-1d38f1801a5c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9514e231-da2a-408b-8034-3c52bb74eb52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0d90d1-569d-4dd4-b51f-42530669e1dc",
        "cursor": {
          "ref": "8ebaab7a-07a5-4087-9aba-a7741a40688f",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "7fc6a64d-068e-4e1a-b2ca-68b12c205091"
        },
        "item": {
          "id": "3e0d90d1-569d-4dd4-b51f-42530669e1dc",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3a636673-c866-42a3-889e-440ae2558bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f7af33-b8cc-4091-80cb-d026daa11e96",
        "cursor": {
          "ref": "addf8854-149d-4368-80bd-1cc0df056b93",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "06eacd80-1a62-493a-b5bc-c2c7b75a0ea3"
        },
        "item": {
          "id": "60f7af33-b8cc-4091-80cb-d026daa11e96",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ebf7c445-c962-4e9e-ad92-c378df5943fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d51c166-6b52-46be-9732-39e864085504",
        "cursor": {
          "ref": "aa11d7c2-3d35-4290-a222-484f7a5e3580",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "50aad605-7892-4542-9415-2ebbbde103d1"
        },
        "item": {
          "id": "3d51c166-6b52-46be-9732-39e864085504",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "21583e26-389e-4d95-abe8-49b1731ecb8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc303a29-41e6-48bc-9e0e-639492a4db46",
        "cursor": {
          "ref": "167d7e3d-a98a-4624-83a8-2f799cdb85e2",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "d40875a6-2b25-4504-8eee-1a00217fcfd1"
        },
        "item": {
          "id": "dc303a29-41e6-48bc-9e0e-639492a4db46",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9b146222-4e5b-4eda-9cfa-345354d0bc1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "721bc347-3fba-4143-a8c2-35c3ade4fb23",
        "cursor": {
          "ref": "d6711161-303d-4439-b424-5184d90c72d0",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "96ca71f9-7eef-41de-8ef1-8377f4fbe812"
        },
        "item": {
          "id": "721bc347-3fba-4143-a8c2-35c3ade4fb23",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a0c47db5-9877-4b9c-af5a-3fbda5ccc2c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72249d74-3be9-4ab8-9e2e-b02c51b1f3c5",
        "cursor": {
          "ref": "94f39423-d2ac-420c-a87f-49d7afbe65f6",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "043620e6-e04f-45f5-b61a-229188f2d39d"
        },
        "item": {
          "id": "72249d74-3be9-4ab8-9e2e-b02c51b1f3c5",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "eb344a8d-4c69-48f0-a383-48bd2d16d2a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1706c1f4-01ae-48ad-910a-f551cb71f097",
        "cursor": {
          "ref": "84b99c3c-3100-4505-8b57-89f49f93a5f1",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "c4c3dbad-2dd2-4868-94d4-2c1c36e69c59"
        },
        "item": {
          "id": "1706c1f4-01ae-48ad-910a-f551cb71f097",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1fd1fe58-ae77-4fc1-b696-2f03d905252a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60851b6c-e0c9-44c8-a461-99daa88c59ac",
        "cursor": {
          "ref": "c6c78389-3737-4fcf-b37c-81393ee94511",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "d043aaa3-1d16-4960-ae58-b82206326824"
        },
        "item": {
          "id": "60851b6c-e0c9-44c8-a461-99daa88c59ac",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "905e18ae-c00c-48dc-8579-a7dfabb41bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab4587c-2df3-4c1a-b40f-d30ec4abdccf",
        "cursor": {
          "ref": "a6607dce-e44a-4b89-a978-d22284e6d39c",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "69741bfa-ee41-413e-8237-1e5457299941"
        },
        "item": {
          "id": "aab4587c-2df3-4c1a-b40f-d30ec4abdccf",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3b80dce5-1bae-4ed2-93a9-56db1909f1e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a553f60-1724-4cc2-9c06-b6ac4e1bc740",
        "cursor": {
          "ref": "2aa8f318-455a-42ce-9f5b-4b62898ef6a0",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "2b389211-18e9-4279-bb7d-f2fb7e07a3a2"
        },
        "item": {
          "id": "9a553f60-1724-4cc2-9c06-b6ac4e1bc740",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "eb3f0974-a870-4672-a967-1e9430d4001c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f8ce74-d45f-4589-9038-c35a6c776edb",
        "cursor": {
          "ref": "02c9ae2d-4b3e-46db-a6ba-c469af72cf31",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "bf489644-0960-44fc-8510-965a6ec03e6c"
        },
        "item": {
          "id": "84f8ce74-d45f-4589-9038-c35a6c776edb",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ec7f300e-cf48-47b9-89a0-046dd927b04e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b155707-b555-42e5-a428-758ab48374aa",
        "cursor": {
          "ref": "9d02c781-8cb0-4939-8c8b-303c58ee15ee",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "b00f743b-7606-47f9-8344-3c7f2098ec12"
        },
        "item": {
          "id": "3b155707-b555-42e5-a428-758ab48374aa",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "4eb1dabb-6920-41e3-8475-3251a4ec9285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1074cdb-617d-45a5-9b11-f2f9f92f3f39",
        "cursor": {
          "ref": "3ebf1606-3ab9-4150-841e-194997ff9915",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "ceaf02c1-bcb8-4b0e-a222-f7d0668984b0"
        },
        "item": {
          "id": "c1074cdb-617d-45a5-9b11-f2f9f92f3f39",
          "name": "credentials_verify"
        },
        "response": {
          "id": "772ecbd4-89de-4dff-9dc0-dcc965afff69",
          "status": "OK",
          "code": 200,
          "responseTime": 941,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "51bb18c8-3bf4-4f4a-8381-7b984181dde9",
        "cursor": {
          "ref": "04b0993d-01b5-4ee6-a4c5-7912c5a9466b",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "e5af08e3-fe7f-4bb3-85b0-1cb4a654c855"
        },
        "item": {
          "id": "51bb18c8-3bf4-4f4a-8381-7b984181dde9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4cc5cb9b-598d-425c-880a-48b071354e6f",
          "status": "OK",
          "code": 200,
          "responseTime": 782,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "181f1a9c-7f43-4ae6-afc8-e8a869755e19",
        "cursor": {
          "ref": "f7f544dc-5123-4f29-88cf-c36959b5231f",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "79283229-a42f-4155-9a95-2372978dc234"
        },
        "item": {
          "id": "181f1a9c-7f43-4ae6-afc8-e8a869755e19",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "181f1a9c-7f43-4ae6-afc8-e8a869755e19",
        "cursor": {
          "ref": "f7f544dc-5123-4f29-88cf-c36959b5231f",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "79283229-a42f-4155-9a95-2372978dc234"
        },
        "item": {
          "id": "181f1a9c-7f43-4ae6-afc8-e8a869755e19",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "7afa7187-7e38-4fc9-be05-0ba482af7878",
        "cursor": {
          "ref": "be6fe757-a3bf-455b-9e71-a1081bf93f4f",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "e32df092-7554-4fc4-acd4-930839b1cb75"
        },
        "item": {
          "id": "7afa7187-7e38-4fc9-be05-0ba482af7878",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:281)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "539c5c77-9346-48e5-908b-cf7c71feec0d",
        "cursor": {
          "ref": "27825f0c-baf4-4add-87d5-9ad2010252ef",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "eed5f8f2-b221-4bed-b6a5-b8ea3ebfad3c"
        },
        "item": {
          "id": "539c5c77-9346-48e5-908b-cf7c71feec0d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}