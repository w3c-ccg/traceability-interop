{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "effa1995-53e4-4a07-a254-492e3ce553c2",
        "name": "Clear Cache",
        "item": [
          {
            "id": "09b4abbc-e739-429c-8852-00c28f08d2fc",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9d640f62-21e9-48a3-8e2b-74eec9c11443",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3b7ac1f3-086e-4189-ba71-91e0563fb340"
                }
              }
            ]
          },
          {
            "id": "260d7737-9b65-48cf-8b05-b48be99004d1",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fa0aa4ec-6f48-4baf-8084-5e4e331f75f4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a0de71c6-e6d8-4d97-b32d-0de2f2079392"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d7731505-827d-4ca0-aeaa-b108bbfb3edb",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f3daced2-44ad-4034-a43e-efaafb96214a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "895a270a-0a99-4272-bdea-af6937d3f84b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8263ad67-1ee2-4e73-a087-da8faa65d419",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e031fecd-c38b-4243-9b02-64db51e74708"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8825596f-04ed-42ca-a639-c8d373e1d276",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7bdf59f7-0e33-4221-a8db-d8ffc43afb06"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "96b7adfe-6c6a-45e7-a5c8-3b230926e5b9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3f4258b7-9e26-4fd1-9d09-d1048d88003c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f7985763-92f3-4139-b528-0f09dd862eb4",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "18a0ecca-abbd-4270-a7fc-98f19552d7e2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3cdcf47d-6314-4024-984c-e1d9abdfd7ea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3282f2eb-5003-481f-bd12-cfaa56062178"
            }
          }
        ]
      },
      {
        "id": "6344c10a-63b2-4b17-94f7-4f75b866ce1a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7e616354-f103-492b-bff3-7095cd5938fe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "990d7728-f74e-428c-9361-a7a92c732bef",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ed549419-f485-4ce9-a25f-7f3169d08484",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d23b5167-91cf-4019-8453-1e65aa48c73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f465efe5-e3ed-4544-8963-df938bae67cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1da7402-d71c-443e-8741-f454c637c09a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32610d88-b866-4a91-9279-ea9193194bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec715710-3dfc-4d58-a96c-57b08ef21b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea526c3-8595-4f67-a537-18a7f40c7308",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a97aa0a9-90b2-4fc7-9c04-f2f2a98ef0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5a26fa0-eff2-4a95-b872-afa7ea478e0d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "98390620-7f2d-4e29-af73-5d4cb559f29c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0abd5184-3b95-4288-b4c4-f0306d3a5af4",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6892e429-8e1f-4771-8459-54d523db8d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3616b4ef-0b50-4733-94a1-3f0794d3afa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ac517a-8f1d-46a8-bd6a-c703bd2dacd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "006ad22c-b09d-49c7-9805-cdfb67d19781"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0f9ca9ad-4aec-430d-bdee-0fa668275de6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5ae5e3f5-a98d-4513-89dc-a51351e38c39",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "13217780-020e-4bd6-85a5-24c38b2607d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4562957d-614b-4d40-9d66-8dd92a4f0d75"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8c6a29a2-88bf-48bd-991c-51656a66c0a7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "129f0bf1-e235-4c22-8e31-43dd20892017"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "59431139-c35e-49c8-a631-67a312c5bb4e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "97607ca6-117b-4d68-9eab-48312d48952a"
            }
          }
        ]
      },
      {
        "id": "949cbaf5-7888-4c4f-b5b7-c696f9032c87",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f52f6c9a-a1fa-4479-8c1f-19b7ee291245",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9cc5ba28-83e9-49e4-abee-8d43447dc0ad",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4448c38c-1645-4071-8f11-1eacff064067",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c6ad2e-e59d-4d35-a80f-ea8bec37d654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a9f4c04-df19-4a5a-92fa-4f6792dcabb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f266b4-0a08-48a9-bdfe-f2cbc7902418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0070bbc8-172b-4dc5-9d24-271801516180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c46fe54c-2715-459b-8485-b9c45b16a470",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc892eb-a8bd-40fc-9a90-47521525956b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80aa5500-28f4-434a-93df-208ef11308dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c49f9fd1-1398-4336-a18b-4ad7f9480a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e76714d6-e3d2-4753-ab65-e520b010c7d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7032535-f6ab-4007-b30f-a0e68ddf36d8",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5f5471-31f7-406d-9a61-f0495acd98ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcc1cba2-4798-410b-ad81-91bc53e0deb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8e27917-fec6-4079-b92c-94bb69503004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95c5310c-d80b-4320-8838-c896b2558de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5105fc45-652c-4e03-8874-d27f9e479924",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c6480d-54f3-4658-99d0-13a16ff6d96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb367a3d-0047-4a72-9c06-50cd63b20185"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d6c4264-39b9-4426-8717-d99d662387d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93e81af1-0f3c-4ed8-800f-b6cd547eafdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d0b148-032e-417f-95ad-d27af67ab62e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1af7b53-2139-4271-a770-0bed7ed97a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b9ec706-e79a-4267-9405-33f9a6232b99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7470f90-32a9-4d6e-808e-e18747841174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "802bce44-0aba-4bbd-8d68-7db8aaaf25f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273c6e07-edc1-4a74-82cf-3e09c226f511",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98bdfab3-dd98-4746-aea9-a9c0c35321a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2d7e0c3-daab-485a-bcfb-14683f8cc751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b49e1f5-022a-4893-b50b-f233de66f81e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "455d4a18-01aa-489d-b878-0647facdafbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97cb244f-98e5-4ff8-acda-8a4049cf57e8",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd4e169c-5b51-4cf8-af74-3b45476185e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2bb696c-abf8-4210-9445-a89a050f7350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b584df-637c-4bc6-aa0c-ee1ab952b88f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "874a8037-8d44-4b74-b7f2-abfbc075aeee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "140d2ce5-3851-4937-9a80-6661841219ce",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b97779-c129-49f7-bed7-792258e86bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61ade904-0fba-476b-93f9-b0dec5325684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a024fb-0e1a-4e1e-998d-3460c51ae337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73d06981-19b1-487f-b4af-0e611fc20aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "380c9914-e41b-474d-84fc-8c5f367e29de",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a8ba3b-ff01-4188-97d0-2fe14d020fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d78d49f-de0d-4a1d-8cb7-3d5dc07b49f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b2da67a-8c7b-4c43-80cb-89f0eb8a39e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "338b4899-11de-45d8-b4b3-ab82df1863a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c864cb5-90c5-46ea-a774-4602fd403290",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a3d314-4430-4e67-93c1-74fe2394cd8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85eaa6d7-6ef6-4318-9822-a0773b9353c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a69e98-cb4c-4c00-9710-48da2d420211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59e5eee2-4a6f-4dd2-899b-2f01597aad79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0406fee2-c190-4e45-8fbd-95973dd818ba",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b56e82-4fb2-4992-b43d-1298b323c02f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15fe364c-c386-4f8f-b69e-e49fc3de6509"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2036a31d-9fc8-4879-977e-ab677ab78b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3c8d6d1-7100-4b93-9a29-38f994d34e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6123e4f6-0773-4c04-a504-b3c74bde2131",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcbb7def-62c1-4486-816c-294f67af05ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41a9c900-4293-4293-b7c8-9d56923e2b9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74212b58-9274-43be-b2b4-cc0610b52f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62a6f094-a0b1-402a-ae76-9139cb1b7b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb8fc29-8f12-433f-b15d-68e9701926d2",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8645cbc-a9fe-4aa4-ab46-1d6c80f474f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27480d35-7fe4-4080-b05c-298ce7a52c27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54352a05-f719-4493-88d2-b05934faaeec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a82d8d8-bdc6-4b18-b1da-6f4117243950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e394e75-7d56-4010-a358-471d423e9f85",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e788b777-c767-488c-8fd0-6fd73dd44539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e4da891-36ae-47a3-8f59-e4b6d9c37c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e411bb7d-3edc-4a09-9f16-bf5b90ad2b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97e8bfd0-f393-43ec-b1b3-1de4c387b934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18074e09-d024-4dbc-8b59-405f27779e86",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "520a1564-b5a5-4863-8b2e-5a9801cb1f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f446c79b-dff6-4289-afe3-85aa1b473611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67e0e78-1e29-4152-a7bb-2b6cb8bec88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27d81690-5729-48cc-b149-0c2876966df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea884d28-caef-4d1e-bac3-8615b992fd2f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3305b3fe-b781-4337-be10-0d0c9a065750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8eec2f6-6ad9-4042-9508-845c0284f934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79a143c-7cd9-4770-af85-05950d24d08f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42f19e71-6349-49b1-8e28-ad1f2e9a92c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5213d7-302b-41fd-92a1-f480957dc791",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae34b9a-a235-4b64-9c23-437802b0d117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "937a5177-a6da-4023-82ce-453e04f971f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1844d461-9b59-46da-8443-5adc33ce3eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "963e9ef0-23ca-456e-954b-4f6e3321838d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b134c0-a64e-44f4-bb63-63238fa9e83e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7d6c67-844e-40b2-8cac-7b4277fd13b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "390eeeed-8cbb-44fd-92b2-4f215a3d8ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5019fb59-de87-4116-9e39-22b37cf5d425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "041a4e9b-3153-440b-a3e7-0a11db6eb74d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e1fb221-3306-47c9-bc9c-d218c4d5ce09",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "951d5458-381c-449c-8f65-b0b66e968f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9892628a-8e0e-4a5a-8579-1f3638c2549c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af523c75-22cb-448a-92b5-1db2318f07f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dde8660b-2bf5-421a-8f43-e9a69f729fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e7881a-1a33-4430-9a7f-d0b38112bb8a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def65aa8-ea5a-4719-8f7a-02176c9d70ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9777138c-5a99-4fa6-ad35-841e7f2315c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58585cd3-0d9d-4b59-8b70-80b65c40776c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee3ed1f6-da9d-48b4-b0cb-e4923dfbf22a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9dc254-5225-4139-b1d6-361794313ecd",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "056a5380-fa4f-45e4-8abf-ce47d5433a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7291eaf9-4dfc-46fe-ac37-3ec0306fa76e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ccb2a8-0eb7-41d1-aab7-b068c83f12fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a21cac8-f2fb-420f-a897-43d0be593fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26497578-6409-47d0-a692-8a575046a9ef",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e969c75f-9e50-486e-a728-081482c21f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ae31b23-7f61-4c5e-a2bf-d567e5525327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e0eb3f-e5bc-4ca2-bfd0-93aee1f57ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dbae208e-96f0-4928-b93c-70bfc5c5d83f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4548321-3394-4949-bf72-971fba94b1c8",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98719160-6e3b-40b2-859c-e31658d76e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce6fc1ef-c794-4ea2-8ffe-7c36fc56449e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088150dc-f595-4311-84c8-7858faa63a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "61940f03-ae83-4636-b106-128b546a8cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a851faed-055f-404a-80be-5b2839f6ed6d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bebc9d67-1c88-4ded-a7ac-917fff95a619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df1ea62-efbd-4ae3-84eb-0b91d711769f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac3ac0e-b057-428b-a643-4c67e298028c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "951c0422-18c6-4d09-9775-2cf7eb01411b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d2d84e-46f0-419a-aad5-d0eac7e49889",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f53f8ce3-7218-4801-9805-52151f27f301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fabf28f3-fb17-458e-9a7a-6349b13f244f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a283bb-f9d7-466f-8827-1748ecffad47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b7a6f42-e870-4490-ad8e-86f7c8a84089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e704d4-3f82-4e54-9514-68f7da7904d5",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80973806-fb00-412c-8d48-f988f249348f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6ec2c6a-b53f-4b2f-82c6-d67cc9e4f123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d443f5-8deb-4749-85c4-0ab3e32805b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a3e15a6-f156-43ba-b3ec-287b64aada58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48fc4573-7ed3-495a-9275-146ea6fce0ec",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7afaaa-a497-43c0-b6a9-ddaa423fc824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13c131cb-ee1c-4478-b797-559cff9f3b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e239710-05e4-457f-a2e6-7e92c465b25d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "94499687-6617-447a-83e5-4f518971ef47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874d001e-ddf0-49a1-819f-e91f9030f6c2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7386844-3b6c-48b2-8b7e-093b72d0c859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8afc52cd-68e7-42ed-82a2-21386271b7e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27de60d1-7a3e-4d1b-917e-ee2b6c0a8471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d8fb073-5ac3-49d0-b013-a876734c6aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b642ce8f-9037-41ec-85c5-a98b2bfe47bf",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "646737a3-2251-4c1d-b278-bcea53c0ba82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c509538e-ff16-44d1-b7c2-a95f5655277b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc3d09d-924d-4501-95fc-d133ae6260a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "962c3417-0189-4e1b-9a6b-619c9eeb10ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3362d06-ab24-4242-88a6-8317c9deb2f4",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6737d503-6ee4-46a8-8806-924cdd83555c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c647b2ab-fc81-4ce5-9ac6-d2dad771d330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3edf0bc0-9e78-4144-ab8d-b618c3542964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "654f5c8b-c4b5-4e65-8822-b081c16d3beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9261e3fc-709c-4370-9296-6185a8f9cca3",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "985f1b26-33ff-45e8-8f9d-9eaaf20d6019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03a2c3be-b430-464f-9f1d-b53eecbca15b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65dbc66a-09f4-4685-9df1-5cea09d1d311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7fbc8d6-68aa-4d80-9903-304edadaec0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56acc63-fb73-4a04-82e7-52fe03517057",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34962ca2-5b61-4d70-a93c-48b993fe900f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d60246f2-eeab-425f-8d94-faca0193ca9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e26be2-ada5-4e34-97f8-dabbae29b343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a647d15-082b-4077-9e59-bc7f1f7261a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1972ec2f-a384-4e99-a71c-e55ff7867f10",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5845ad1a-c890-44fa-b269-cf98cdee8f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8f23498-57c8-4149-8c7f-309da4536b27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad64c5e0-6577-439e-8604-64bfab274c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c80b495e-324c-448d-a6aa-e9276c562e85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb80568-affa-40d2-965a-f9752a653c68",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e033dec8-0a2b-4ed8-8099-394e106f9ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bf5e5f5-fa07-4ae5-a119-533afabba936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c5164f-d5be-4cff-8f69-665f7bd07627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8aa9c1ab-dfcb-4913-98af-8c1d31665153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd10a51b-0262-46a8-a2d4-15131cb98e65",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3dde266-4f91-4bfc-9f70-4c5601b8feb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75ed5819-52f0-43fb-96e8-6f57ab9ca2f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc7f3f1-9474-4ad6-8142-b74f33378050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "332ec1a7-a034-481d-a829-5467c421c5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969c2627-7de4-4663-b1c1-e39445ad29fc",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe6df0e-92f9-4d9e-ab33-33ed51dad483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a52cb96-6ad6-484e-9176-5221df42fd71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44ed1b0-8afc-4b8c-a802-f105d250d315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59022fe2-c196-49df-b21c-76b76bcb2519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c43c5dc-3120-4bdd-a76e-5ac0d0456d1a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5847ca1f-5743-4e6d-bde6-39cd139c3825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "002a12b0-11b6-4ab8-a29a-f3417773697e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a85061-3c0a-442b-8d02-7b90fa673383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a932fcb-3e82-4a0b-8417-1dfef21faa59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15e7f64-2db0-4d9e-8d6d-6b9fbd05ca14",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e63f9de-3ca2-46a0-b723-b04ab735fc9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fff8030d-bd0f-428f-b744-7d11df066bad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e04bd2-f3df-4f98-b9d1-a7818eb80c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe145c38-fd67-48a9-93fc-bbd4dc01c03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1287c66-6bf7-47b6-a3bf-8e4d811dd71d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "681263da-7228-4fb5-b1af-02782feabb0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a1bbc5a-8a8c-4fd4-9995-fb107858ef0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ae1046-69b8-4321-8038-de554d009a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab3bdeb1-87bb-42d3-b418-5c3ec5bc96e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a21d7197-d461-4c49-ab67-8bc7bb7a2892",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cded8f81-5e7b-4966-868d-ea6317e5bfdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d611b53b-788d-4955-b323-c3b558690b91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "344de51a-d35b-4bc2-acbe-558d09067560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f5ea13f-f390-4ee8-ba9f-6004d9a8513b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0452d76-59d9-427d-9d27-f77ed9881820",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d57811c7-f1b1-4a9e-8a4f-028d04daf8a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd8bd03d-0f51-4e3a-90e9-e38330e49aaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846d17d3-034d-42a2-a4d2-69f617a80069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "60cf1ef3-ed44-4105-8f33-c1520ce2e498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3aff998-ba4d-4e7d-b965-9d8944c2f0d2",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7412618b-2223-405f-a8cd-625fa88f7a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "234f2381-da5c-4b77-b5e1-0df6c9156169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1ee673-669d-442f-9899-43120d9d7285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1553f6d5-80d6-4345-8037-65777178c079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1b5866-3935-4581-906a-350f8588a9ad",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2d468e-1faa-411c-8fa4-b2daae581ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9f25764-2211-469d-8958-bf7c1ce0df69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bcffc10-acb5-4e87-8563-6805ca76dbbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c734307-9381-4a8c-a33c-2acb97ae4893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3260628e-a6c8-4191-bc85-3a4f9cbe3725",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf9febf-1435-4641-93bb-653850355b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "595f86f9-389d-4741-abad-e60953c5c7e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72fb670e-6521-4012-aee7-bd911ab286b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "77ba258d-ebab-4f5e-af23-d4f8c8da0a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47e0b58-7bfd-4dc3-853f-0f6da5778031",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68aa0851-fad2-46c2-80ab-d61dfd1c715b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5447d491-768e-47b1-b1d2-34be6ea42bf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ac04a3-f318-4f15-b6cb-d985dacd9443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c868a493-a14e-4b38-9a31-0e891b5cfed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aae68b6-7aba-4efa-8fa7-36f329898275",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67daca40-3309-444f-aac4-579833817076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cee06278-c542-44dd-a8d1-44e0554e8988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95064298-809c-4c94-b41c-6b3a3d0877b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8780f29b-c464-4b48-bd4c-0dd66fab1c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9f3158-4529-447b-9ddf-217cd352ea3b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7fe05c-f57e-4757-9a9c-aa80dac739f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a2a958f-a725-4798-b49b-d4988d739abd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324d36df-c55b-43d7-83dc-a45aff096f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7d66174-3a80-4160-8886-a59b3334c2b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0bd1713-124e-4d2a-812b-b6d9fd5ae4eb",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec79fa3-febd-408a-8016-faa5871debf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f8aaed0-8db7-4d4c-b7a9-3f25844ce02f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf63829-bcce-4473-8a23-d1986601be99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5838362-8842-4a39-8441-bbd4f9353575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3fa5a6-0c0a-44be-a13c-0dd70b13b0f0",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e4bf26-5b00-488e-93e1-0caa710bf35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c84afd7-97aa-4638-90da-c8eabc48c948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d208c40-588f-42b8-88fb-108c32eccf1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7bd215f3-ee78-43b5-96f0-d362b1df7bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e82fd1-e0de-41a0-bc10-ae8476b3f401",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69747ce9-deb8-443d-913e-5936e4943d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28d18a9d-6833-40bc-a010-825a752e9500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad4585d-b6fb-4e90-a5c0-5f554b0b1a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1f56d5bc-4c85-448e-8bfc-3218de08168e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bcbe7e0-e160-44d4-aacd-4d04df79016c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad959d0-07b2-4d2b-b8cd-c02658101e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14ea7b8d-f683-4cfc-8552-be5376e14d63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7890592-8cd8-44c0-8137-dc4798971a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a33aec8-5fcc-431d-9aad-a84210cf862c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95506437-7812-4885-9fd9-8a80c2aea7c9",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2385108f-79a9-478c-a382-010cb64a563e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4d09c28-0ee0-4374-a1a1-3a9dc4975e7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93bd54f0-59ca-44f4-8267-a94857e24a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "991b47a4-5cb8-4c3c-a313-73f9c1d576c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fdd47bf-712c-4798-88be-ca9470762ab1",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd59e25-19ec-417d-bd11-5658d566db84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d513a94d-544b-4e79-8693-15c296ef94e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b9c5bc-6b9e-412e-8fa7-e1122e23a232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd7c8d49-3198-4968-a1b1-c8294e9d1145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282cb241-2e6b-4491-92ac-2c7e93008875",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b8c8482-a296-42b3-b0a0-fc5c8c780637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9aa7256-63c1-46e1-b1c1-a9f870e51cf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740b7dda-fd76-4e1e-b850-cbe91020233b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0623b9c-0a4e-481c-9659-36f677b742da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf15e7c-23ab-4707-ab4d-67014dfd3733",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ecf2b34-d8ec-424a-9960-ab0b9e695e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b481077-9dd1-49a5-a91f-0ffc596e386b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a31e4c-79f7-44dd-bb33-5f614d044996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b80d044-49c3-472e-a89f-880595e7b238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66366170-4101-4c6e-9cac-37432946b035",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4852de9f-809b-4406-bf47-5aa9fcdd0e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33241243-d01f-4aa0-a073-1655aef5afd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c29e7718-aef9-4b76-97dd-0a92557a8264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "aea1525f-6354-40b7-ac84-74fb927fa7c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac376cc5-8a66-41e9-b3ff-5691abce86cd",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb54b5ed-0745-4da0-a996-bf98987f1bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7f82100-67b0-431a-8dcf-555e6e75af0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c76754-f9ed-4b75-a114-62ed6603d484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cc9a03e-8367-4c27-9c61-ed4630a50aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "135bb3bd-0ce5-4601-a270-b8aaba8f9a68",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6445402-f503-4d4b-8b39-ec2d7ca5163a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2ac3bc4-4999-400e-a3ac-27f6351c3db1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bacc3ed-d612-493e-8a1a-bc63bff7f2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "20b81051-8e4b-4202-b7c4-0f7a702b632d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea17904-cdb9-4187-a764-d62f7c594f7a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d89962f3-4397-41b9-8138-40852432da29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ec0d82b-c7ad-4cbe-9235-dc4401e726ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7048f86-028e-4f60-8fb8-9b7a860f50de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ece55345-c2e0-4be4-8cc7-ab202e1dedfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77fb474-22dd-45db-8209-64773874e3a3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e63f80-6d0f-4952-bb4e-091f6a15c667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13505064-b7e3-4cc4-b688-8475ea44058d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f61b3e-2e56-474e-9c83-b71f16dda186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3558b02c-b2b9-4f8a-a6b5-c402c9541f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae36c6d-ae3f-4714-843c-9b5481831a88",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c65eaf-80ef-46f5-bc96-55d9e5589450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e08ef2b-614a-43ef-abb1-0b942534dc7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a91995-402c-4b4b-a430-2f95ef13c59e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c6be396-d8a6-45cc-a546-8e2c5e3a9d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8056c10d-63b2-4321-bc53-d7357bd5ead4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29e11f1e-3961-4dfe-bd3e-a0d51915ac9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "505a5553-899b-4d82-82f7-15269012fb80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63260d9d-7dec-4701-8146-e6c31f12b663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1decbf02-e151-457f-8492-822d6d3fcb3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38157edb-8c17-4147-a88d-7fafc461e5f3",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edafc612-a052-4b76-b4c2-3f0faf1e1caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93fc8cd8-1dca-4843-a3d3-8446e6579fab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c46b9b5-73b5-45fa-8e9d-2bcabb026901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "291ba113-3af6-44b4-b2b5-0de149ee6f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a3d904-20cb-4721-a883-824103119703",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37de9ec-4187-4c14-907a-dfdea79c57c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b39f11b-fb0e-43cc-994f-c8769032dd27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24fb4b82-1190-4446-9a4b-ea9c54b2b106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "57c35991-328a-4ab6-952b-aa42edbb2062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174240f7-fab4-4405-98e4-edf93bd57c5b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e76983-3f93-4d3c-b06c-b1f211258829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6065d47b-10ee-4979-a795-db8bced135e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "693b2534-c7b5-4b8a-b1d9-b58b33a56a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e04ea5df-e980-4e94-83df-543f7a86151d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd17ce8d-af12-4063-b0ca-c94dde7e6e6c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66b1145-77eb-4a68-a98c-4451e1ad126e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "983c3d90-de33-4b50-939d-64c636f3daf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaadae27-5019-4ba9-b491-324f55137d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f34f82a2-d928-44a6-89dd-a8ea1ae867f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4a4353-b764-4fc2-8c68-05388a9d5687",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b30cbd-a635-4b36-9fc9-3df66df4a466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8608a92b-fd3e-4377-88f6-80e02b17b2c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c14f9109-8b79-4717-bded-f28a57af347a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bbe834eb-e728-47da-908a-97861fad82cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c4b506-164a-424b-aa2c-37954de52bbb",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf8f2f5-3856-4f31-9490-a7474560424e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35feaf38-ae7b-4329-b0dc-18478995c3d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68bc55ea-00f1-45b0-81ba-b9e34a5266bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bbc2ad2-d129-404a-a4dd-85aaa77680ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6dfd71c-68ad-4a10-b70f-0ed9183f6508",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b6a009-8670-49d1-bbb8-a76cf1ea27f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96d0d0e0-986a-451b-ba83-d0fc534edab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df840106-4aff-40af-b319-9e14153f0d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e6dbfc7-52d1-4bea-a9e8-f19de0531a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "296a47f4-9efd-4f7a-af5b-d8b7330811b0",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68eb63e-27dd-4dee-a241-8e7a287b7748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1bbaa97-5494-417d-85a3-633c15a7c936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a2315d-1472-4991-b646-4fde0150ac0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7edbf9ba-0d1b-43ad-a559-9a7db501856c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d46194-f594-4493-824e-d0ee458948f9",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9cd46bd-6c8d-4767-a1ea-e0872558dc2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4d1bd45-4abd-4b93-be27-5defdca14a29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6af9a52-82af-4ece-a6ff-1c384a6f19a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b7d5208-df7f-48d7-b6f0-7846989c5751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1aab992-3c0a-4669-ac47-9b2cc4371fe7",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6428640f-07a1-4830-95b7-cc1a39020940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32f97a6f-88f0-4041-a5d3-bac94ebe2d80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1b631b-10c2-4e04-99d3-9a5824004539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "be8382e8-f90a-41af-8722-dc1709083ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a630ce-9c15-4f6b-ba0c-d8fbdbc786e7",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e54b76e4-c711-4de8-ad23-812f97a970bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c6bd244-7004-401e-aab9-1b99d74f828a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19a5b84-81a8-4bcc-a70d-043f22a1c70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bdbe334d-2c6c-4a3e-b00a-d071ac0e0f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8feecf4a-64cc-48f6-885a-a76253f31cfd",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7f64fb-5d7f-4fda-8b87-d03a0a4b1b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29f6bce2-7c4e-4fe0-bb53-6f1d495d9824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5a613b-9ff9-480c-8376-ab57a06b974f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a2b3ac9d-2783-41ec-8db2-eeafc7982d8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d14a74a-4438-4002-86c2-3be4531e1011",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f1cc29-aecc-45aa-b35c-7f623839264e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "197a99b1-da3b-4854-b305-3ddc6fb9cf32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94eabe23-b2c5-4083-90bd-be5f24f2ea8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6228465d-1a3c-44db-8082-b8287b1db3ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5c00147-4df6-459c-b827-aaf6f1e63860",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c27add-c015-484c-af02-a1809998907e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f09204ea-399c-4020-9918-0a508d1a9709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9871d3bc-98b9-4793-9358-158e82f6288c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c804ec-91a7-4fba-be69-9d91113827ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0b4133-b597-4964-b704-a18e647594c6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7a3709-5fb7-4bd4-a5cd-81675a354c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19552c4c-8d86-417d-a5c3-4e337412dfb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c04493-9414-45e2-b3b7-5705adf5bf55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a81459f8-f4b2-4c58-a03e-b167f1bf9e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5021958-97b4-40d8-b44b-01a43a2eed39",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f607958c-b2f2-4978-b2b4-6ecea55d5316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "011606d0-2530-403c-86f3-b7fb981c70a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f1d560-c66d-417e-bb4a-434308189706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b632301e-e56e-450b-8a1e-ab9b50b65b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f4fda6-0b88-4c08-8d46-fc63cbbd86de",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "636fc1bb-0c4d-41e0-8a35-b0b46093f466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71bedb82-d486-470c-8309-b32c8aec380b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac5f7eaa-fb17-49f9-a82a-262f5259804f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "135d79eb-2cbc-4c7a-9378-1c6f4508157c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1dd37cc-9f7b-4770-bf6a-6007d64e6474",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2d43cc-cfdf-4971-8320-b552eb18cb8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2632aece-4c87-4d92-b5cf-d12e65f3cfb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db719f9-9b27-4af7-805f-53f3ecef142a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c3f24e69-26af-4319-8f3e-09fbf9149910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a171e67-50f2-42bf-a32a-a29b347ea3fe",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "517a96fc-341b-4c31-9f67-2ba0cc135464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8407b921-2ae9-43d7-80cf-b9f9d7466975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356361e8-d717-49cb-97ca-488cfb41ff04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ed915e1-5d8f-4f15-8032-48f1440ef367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a8fe967-6b9d-4b0c-ae8b-17e57d8f4a13",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b77dca5a-528d-4a55-8a4a-c877ad94d986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa67b978-4872-4ae9-852a-501297966031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653acfa6-8467-4197-ae2f-db4b3388955a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "51ca38dd-6350-44f1-b433-b04996c09a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99011ac-9c45-4919-b45d-ed838c0b451a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a75bf8-99cc-4597-818c-c037ce2a2f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1404e7da-0d08-484d-b674-ab138cc3a18b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e723ef-4d51-43f3-8a4c-e75cb1f197a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a915ec7-ede3-47ce-89ef-40b7cfc9bf59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca25243d-522c-4bd8-affe-4625db934427",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "595767c3-084e-40f2-935d-1be75960d2ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d23bce7f-a853-4898-9c8d-0703d830aa62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300cd7a8-dd22-4d82-acbd-8e9ec0b492a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9605e8e2-af7b-4923-ab3d-1d0481e05231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c34f8ff-563e-4d5b-ba76-7dc56b6883a6",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e83493f-9dce-46a6-b985-d06b54511aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf51185d-a8b3-4cee-aa01-50049c107382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2aac0de-fc81-4789-934b-c5f7fc108e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e77c48a0-92ee-4ef2-8fa7-a3f036a83c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa5b5674-952e-4f02-8139-6880ba1a1940",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2ec33d-e219-48cb-ad2a-7d79d7c46d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2210d70e-b4f1-4159-9486-8395ce791a26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9498ee4d-252a-482e-b094-8e7f3fcfadde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9155d3d-3a90-475a-9658-75c6b76b1fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a4a250-7d53-4162-a9c2-a4a9cc4f97fd",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611afcf2-190a-4ff2-8009-5ca43821c0ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8484d34b-722f-46f8-b0af-7fef8df40518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1284795c-8b7b-4a79-a33c-a501a93159b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "42641790-f07b-49aa-8a67-9f066c2c791f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c85fdfdb-d887-478c-b807-0f6bb14a03af",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c0575f-0c87-43fb-8e0a-91ae963bba2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09a28041-e4ee-44f2-86b3-88bc2a8cff2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ff2e758-49a5-47af-9e43-a80cee93b6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "68b50f43-4e68-45a0-a1a0-bf4c68d83c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b9e08f-1dcb-4ff6-bec5-ecad2ae3e634",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ce4427-0155-4b17-808c-258c1d4f89f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e04c8f57-f076-48e1-957e-147ff835d4eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb7d359-8eca-4b60-94ba-7d937508b74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b595661-a702-48dd-9845-585d83872977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2eeaa7-806f-4351-b5f9-25ee38f0ea22",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2955d4fa-8e5c-43d7-95bc-12a70c3feaa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5fcbc70-1c39-4823-a833-16eadfdce3e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15ba3f9a-9370-400f-88ca-d45f0082e4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "78c598c6-d189-4db5-bff9-778f0a8f8dbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55fcca65-4abc-4fac-a051-56dc87eee15c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d54fe6-ec49-4ed7-84a0-ed9ab0af51da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1d32a13-fb9c-49bf-823d-c3263a3bd8da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e161f316-36b0-498e-85c5-da70f2b8a9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "19399ff5-1991-4b1b-a5d3-2f863acfe052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1711966c-4dcd-473c-a38b-63497eb20233",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd43f62-eac0-4859-9d34-9da4129ee1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4e7b13c5-a507-47fd-883a-bdc0d9242063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d77016-c62f-470e-b6cd-20c148e461c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4279be97-d9d4-4618-8741-be3498485dcd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e5d1ffe1-989e-4eeb-9981-43c2312170a7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d83bd3b6-74d8-45bd-af63-29d319b06712",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87bd17ef-e08d-4f69-9914-6d13b4a22807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43c18757-dd7e-4e88-8b18-af64219ed1d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd9164d-74f4-4b5b-a51b-1ae023d6fd91",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c40f85e-4a12-44b4-a796-c96855bffe39"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52f9e9b3-33eb-4173-922e-b58860cdc579",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8863c97d-685c-484b-b74f-30e82858a33a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e83c00cc-9d86-4ada-87f5-9bcd6977648c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0dfe13a-10c9-4054-965a-f8c6f4cfb0d9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "861f1b2f-0e94-4162-95f7-8ed404c80964",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1afcc4c0-283a-489e-ad6b-bc328d0f69d2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "34a5dc1d-ed0b-4039-bd8a-a453ac20e07e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2c5f2330-36a7-490b-aa22-deff089ef979"
                }
              }
            ]
          },
          {
            "id": "a93990bf-01a4-4095-b120-78377af389c9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dd472f5d-5150-4289-922c-c3df1a4c65ce",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "91938bcf-d6ec-4556-a11d-ff83088741ee",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97c4cc8-40fb-43d8-a7f3-cb2afb7f08b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "54dd9312-940f-44c6-a839-266bac9335b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142376cc-16f3-4322-ad6c-67c7482a983d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55e21f7f-b8da-4c61-b48a-2da1637a7243"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "943b8e75-7e26-43e6-bf42-2a9ed4fb98c9",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a526a39-a995-4996-919b-2beb2474e2f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e12097b6-f41a-4fb8-8672-c5be0c38a8fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6e3f32b-5e1d-4645-873a-1421abb36a13",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "76fe1549-4b33-4374-8b7a-44a00c70e9b3"
                    }
                  }
                ]
              },
              {
                "id": "436a22e3-5826-4204-9420-236a1503f17a",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "85fd8fc3-f191-4677-b988-262e4bbffb8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "26f91444-5387-47c7-a436-fd2d3e8f81f1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36800396-64f5-4563-b0b4-23366057f4d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "93559a2f-d85d-4a06-8a77-3496009d2a63"
                    }
                  }
                ]
              },
              {
                "id": "89c29ac8-7344-43fd-ad20-9decf2dd58a3",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a63b2831-c0fb-4fdc-9383-8b4c0303789d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fb5f6cee-c627-49fd-8098-2e03a9369252"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18d79e3c-c8f4-43ea-886c-873d232e3a10",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a92126b2-e728-4e60-9266-d167e07b2ed5"
                    }
                  }
                ]
              },
              {
                "id": "46d7d1d2-e4ae-4ae4-9d8f-862941b8f79f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f00c52b2-586e-4d7b-a78d-298972dbc3b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "86f950a1-5a11-41bd-8f0c-317898c7d4fe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de90bb8a-7cff-419a-89da-54b6b2a4a4bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "56f060d2-e537-4003-8c9b-51b70fc45659"
                    }
                  }
                ]
              },
              {
                "id": "466d22e5-dcce-4fcb-9d65-03edb0ec961a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a152bc97-5361-4afd-9604-f97c585cde59",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b2c49c56-80a3-4b34-b9ec-a2fdc2b0e29d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4da208d3-cc9b-4d77-abe7-036036241733",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e4791403-3d64-47a3-b3c9-2b4c68c4700c"
                    }
                  }
                ]
              },
              {
                "id": "39d0b7d5-c536-44a8-8483-b0d2aa0ee0e5",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "742fb01e-9a6e-40dd-80f0-72023ee00029",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aef0b202-5f2c-41c1-a4cd-f3eec5fc983d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b11cc00d-ddb2-4970-95ba-57eb8c49da9e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5325d104-8c3b-4730-93a5-dd7f6407bdb0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f71f9219-740c-461f-834e-c68f9ef93e93",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d8f6203f-56e7-4fbd-bee4-60ef990596e3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6fc7d207-06e6-4620-b70f-f19e23230b13",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "07a271ce-5291-463e-b680-488960813fe8"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c0bcef9f-c2e2-4c74-a476-b77a00cf9fdf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "973fac9d-ae9a-42da-b1f7-e171db561ebe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a2b5d0bb-faa5-42b5-b441-d9e2d6985d75",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9dfddba9-1843-4b1c-ad81-e30d25e3f304"
            }
          }
        ]
      },
      {
        "id": "960ccf55-7b78-4886-b6b7-e4499d70fd94",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e59f10fc-69cf-43a0-ac91-d956d2acbb4c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e892bd50-8ca6-496a-bccf-4c8c210ed7a2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3b72e856-e437-41a5-8559-ce15bd5b0ed7",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5c9772-251d-4bfa-9b6b-232858a758f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3230740c-bf5d-48ea-93f9-1ed9cef77dbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "845a750d-b743-4d6d-8c53-c981f05a24d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bed0c7a-3ae1-470c-a54e-6f0d9ff0db1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19e213b4-212a-4476-b793-ef6bc87cedc7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41c7ab3-1c51-4086-a3ae-781c391916e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5f3e1b3-b87f-40c7-bd25-6822776d8995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9662175-3c37-4c6b-a5e8-fd3bceb75ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "69031668-4e51-4158-b0f1-51f4c4c5f3fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4b256b-56ec-4c16-abae-cff8fbd45818",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3433e9-4b5f-4684-b865-81d83c3e9bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d06574f1-d9cf-45ca-8472-5f11f4546743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1586d9d5-2053-4a90-8233-da93aeef217c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcd2209e-9097-4e42-928d-afbd180662eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c303f1a4-e709-41be-a46c-2fad65e24aff",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc6e3130-ec5f-4a55-8d97-dacea5174dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccb28af7-db21-4f1c-a8e2-f1db4c3c9dc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ddc984-d55a-4c07-9d45-be907f716d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ab898a0-1d35-4b20-9fab-df7eeb5e2beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4da5e8-4185-43ff-982d-1124c0c964df",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc47985-adea-4149-a0da-b92888c6eb64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab06ac84-6ad1-4b5d-858b-ae2e4903b5dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a689d5-5cc8-4a5d-98c4-28d40152fd82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7f977e3-c263-4ea5-af85-0a864ac9db3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ab4c33-2b1c-46c9-b58a-bd444aad2867",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d4df38-487f-4ddc-9a2a-09dc8db4b10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3b09085-2339-4bca-a8b7-87e93ffcc4da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26572fd-373c-4f83-8c54-352898d61396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9c07960-e8e6-4daa-a344-6aedeb95d674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4edfd85-fcc9-4702-b3f0-3c045aeb04fd",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ac24a1-d790-4990-90ed-78d9fdbced6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b102e0d-baf3-4c87-a0a5-37ed82ac67e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44274ead-d1a0-4e3f-b871-fc99d2fba0a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "be6e1f84-e9e2-40c1-91a0-aa742f81b63a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e1cb48-f26a-40f2-8264-8cfed3036735",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5bd4fbb-e8e6-4e76-bc4b-22254c5f3c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "802e0d5e-d6dc-4b8a-9510-5d4363dd5e2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e31b71d-7062-4071-9176-fbb7c3811d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0c155f0-b265-4e7a-bd9f-e18764700075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e74a98-d72d-4e5d-b163-fa6876ff6f3f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed9b3c8e-eee2-4efd-97b9-4986970229ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7e80831-c34c-4b94-a297-eb2cfe4ca42c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f170e5d-8d94-4bea-a27d-2d0cd4cd2961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3ee9ce6-12d0-4e2c-bef0-8e63b4981862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b40900-0aae-4ccc-8ea3-d66f2fa738a9",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe22982-76ab-47c5-b91c-3c4fad8a45e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b68cf4ec-4f41-43d7-adea-0892afb8c6ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd7b03d0-008d-437d-975a-5ce1b1a940cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bc687b0-4203-4e95-a941-2ed36bd8643e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd36bb2-7b0b-4481-ad73-094c478d1e51",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf30f72-7b50-400d-9ccc-8ed942b39b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba16c3a2-2438-410c-b12d-299c0a701400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8900063-9056-4c2a-b471-e11850c05f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e688d83d-12ee-45b3-8a0c-1bd23408e24c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d9ace4-a152-48cd-8316-275138d86b77",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "413106b8-63ae-4248-a4d2-3b877d2fb37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bc93cfb-77bc-4a6f-ba97-781f33db4892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "decc7820-9a45-4184-ba0e-2c86814c4330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d32638c3-265d-4ec7-bcb9-c96012b34d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e021159-8599-426b-bb7a-56f740a3b159",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "621f9b66-dfcf-48ed-b393-27b181b8bee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "320b3094-1285-4c36-8655-4f8cea635513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21418bc7-c441-42bf-94d0-5474617124c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c60574b1-a222-442a-a8b8-7204d96fa3d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "956db239-3db8-412c-a2d8-a42702258dd3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f531b4-3e3f-4073-8b1e-f8f5d3055ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aa17e82-115f-4d42-8a13-0f331229e5a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4696a8b0-3f7c-4c9a-8d38-5fe47156c283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc161bf7-50b2-48d4-b761-dedda149968a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a1b1c3-768a-4110-8544-01f4682838da",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c4a0fc-cc63-45f3-9e90-4fe77c0ce080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2e80ef7-93ec-476f-a896-10e496e572ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "094cfa74-ae76-4808-a42f-e673811f1b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c66111b-d4a7-4122-b681-8c59b81834ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4e1d0d-47ef-4392-9a53-44038d6aecf3",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a3eb475-db19-47e3-8872-d9e55de5a379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "406305a0-6c82-4a3e-9e9b-3f3564106386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc7731fc-405e-431a-bd6c-dec22be934cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "18e3b164-5745-4a83-912d-99eec8083077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07d7435-92e4-4076-9703-a26c0c8767c2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea30835-0fb4-45e9-83fa-7d0cc8d8ae08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d923909-9915-457a-a3bc-5b7e979cf744"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49eccdd9-e437-4b05-83fd-4e855463dfa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ca743c4-82e4-4408-b5f0-7527c4adc39e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe11523-ca72-442e-8bb6-efe6527b0383",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd66652-5dd0-4cc1-882d-162f59f6caa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31221564-f2d6-422f-8144-3a75abb614a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "182e68ac-9b29-4623-95f9-87380732f545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1aa50b54-9109-42f7-92b2-be93c70f442d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0ca9553-fcff-48fe-9cc2-74f39fdc5919",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24cd3507-92ef-4850-84e1-f6d739b5cfc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "779d8b27-100e-4db4-b813-dc6a23096bcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb412ca-9c2d-4aae-8ad8-97bec85a7397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84d54a64-3467-44ca-b2e5-f7b4e1fc39ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f49821f-acc5-4d2d-ba20-5f897a0cfeea",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ccc128-5b7d-403a-bbf2-47d4b2898549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ced2f6cd-cca6-4419-b857-b5a14248c17a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2bd02e9-3196-46e0-a2db-5afab9398561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b52f1aee-9c4c-4f68-9a32-eb28c4b3b267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490c42e1-1af6-4ca7-b9e2-d27c5cdb68cf",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a65fef1-f160-4e40-a435-60e9f03c37d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25421c1d-a45f-4fd1-a195-c8ae2a9ed711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "361de99b-e010-455c-8162-36de9297f059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f74e60c3-355d-48fa-8aac-7fc1a25c23e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b52572-7799-4517-ba5f-81abbe679723",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fadac5fb-f347-4d52-b121-f78c29bbfb4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49bb1be6-e346-42fd-af2c-7f248514dc7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91de6df8-c813-48cc-9333-8ffec5a33f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d077c82-f505-4efb-bea1-0856d2906828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0fb0499-f412-45bc-b2e5-510425cc5cb2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d149fed0-c7de-4165-95e0-0e33a84a485b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0c4c285-dd8c-450b-bd54-f941c7202252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1392f355-038e-48ac-8826-6801ba3f2e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37d767d8-e7ce-402a-82e1-7201f57038c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a55db2d-75a9-45ba-8169-3f4289780e7a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4dd834-5038-4b80-92ca-bb80656a244f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f2dc111-3f9d-4cc2-b4e1-daac3c51db49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17fb2abd-2ec0-406d-a361-19a838f1b64f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa01db4f-0fe2-43d9-9d0c-819e3f7c1b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d67ee36-afe0-406b-abbd-33b1059a0eb4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "119cfc5f-a051-4d7e-af46-2eab8035ef5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c794db4-837c-4490-9214-44b5a19ef27a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a88eeef-4973-41ef-89e4-869d5a05d53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de5f1e8d-df0c-4b4a-8d4f-ac4b133dcb1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3b4573-d272-4a0b-8934-a3489a972a7e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a76a5e-cb59-46cd-b3ea-048053cdafb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0644254c-8629-4720-909f-6835cf4f1e32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5a917d-3b84-4576-abfc-fe01d48fa7db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2da1738f-4d43-4576-944e-077adf8fce90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e82471ad-6805-4790-90a6-121ddd43b016",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5b6a7b-594a-4a8e-9f5a-12d3bc507cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a92cde1d-b3be-433b-90f3-e2146d31f2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6cf4878-321b-49c5-88cf-c3b0aad5db89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a62539ec-6b51-45d7-a1a6-9b6659b1063f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80099e7d-c7d9-442f-905f-1a885c231881",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b14b64-8047-4ed0-9812-973497db5cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fd76270-c1d9-48c7-b07f-896bbad7c9ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c9f1806-0fe0-4d57-b198-1225367f47fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17b3f442-d318-4b97-bd3e-12d617184597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "453f4f74-78e5-48a9-b2d7-a4edfd7a6d3e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88630296-7303-4a3d-bc5a-c454d5c2cc7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c53b3ac4-0e1f-4122-8074-68d09f0329c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a2d7ea-513d-4f10-98be-cc75277ead96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb8c6973-e672-4fee-926c-1f4b72d399b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb9581e-6036-4ead-9de8-7d3aa1cba82e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87794dd8-54bf-413e-aa5e-ce7e4573414c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b3cb3d8-dc7a-40b7-bc35-c481eb2e7c84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26a4407e-dd67-4c6a-be12-3a17d89f81e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c98de132-1c60-4f86-8ff6-153752f947aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80661a76-1478-4646-b595-1152724efa0a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd13cdc5-45ed-45ac-99c9-19a5285535ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb57fd7-c439-488e-9afe-93ff34bb02c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ce8061-5fc7-451a-852b-ec25561f62c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c197e55-da07-4f64-930f-1dbd96819207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "135d376d-de09-45ac-9f63-8faddc514db0",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "504f8c6f-3000-47b9-893c-e3026c09c845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d38b2069-ea69-4fb3-a126-922ae3c82235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "868dc786-c566-4336-8c68-08c939794241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e721fe3-e57d-44c0-8a66-d492cc1277b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f39d550-6966-4a96-81e0-dac2e6c16564",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8632eccc-bd8a-4be8-a6ed-92855bf292c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "541237f2-d1cc-42e0-ae05-9bee0c7face8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55933ffd-5a36-4370-bd58-5c50e8e33309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e542f23b-e613-489f-b3fa-c1fc4e487d18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe4d5570-a81e-43c0-80cb-be2b14a442f0",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8705dd4e-a8bd-4b93-8e15-a165d0818813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b50841b8-f447-44a6-91f3-95dbfb25ea28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ef97d1-1625-48f4-a374-e36ac654b49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87aa78fe-b0b9-464b-83b4-bd4d4e318021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebbdd7a8-6b17-41c9-bc95-57385954b677",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc29d44-576c-4747-9287-aab58d941761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f638810-98f7-4756-b6a2-ca006e95790a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64affb98-ed67-42c3-96bd-0a6dacac25c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d45e8b0a-7bf4-49e3-be81-af0113e7660e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8988ef78-2dd1-467a-ac64-058b0b088f1e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32347d21-c134-42b2-8bc1-2b3177dc5ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c10a40e0-57c9-4754-89fc-dcd45e5d1f60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3bcc25a-3cd1-46f0-b305-60327e96f928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "334fb30b-44e7-4c18-88cf-c95458388c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d95026f-15d8-43bf-bda5-1021308ac479",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad74bf61-4091-4363-8854-6e70fc0edd91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0da8dca8-23ee-483a-af37-c9f98cabcada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb89005-2ddd-43b5-bf43-995da8b7b5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73016588-eb23-461f-ae0d-d29596235273"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "36013230-1b9a-4841-9caa-d70c0e1f4da1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f7834bfd-5302-4e15-aa88-d5a9f27799d7",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348895a4-b462-4fff-801f-d1c91a529233",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "01873dc0-a4b5-4b25-9dbf-3de6179c0023"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d37c59-405a-46d9-acf5-6508c8ca431e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "68b24fa1-63bc-47c4-a4f7-0790d1fdcb5e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8d0a3b3-8262-4eea-9933-95ca7e304c38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4f6150d-3bad-41c5-9925-c1c98e745f45"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "53ca01e3-367a-44eb-acaf-817b52466f54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "229b1ae4-2ecb-4ce2-8771-a7543a30ed08"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a14de4a-967e-4343-be77-2a0eed1b16fe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "656c67be-9a49-41c1-a6eb-6ca55a91de25"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf6194c9-28c8-4573-98fc-51380114c800",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9430dc53-a194-44b5-ad22-139fe78a8053"
            }
          }
        ]
      },
      {
        "id": "4d62283c-b82c-4c38-9d37-bcc7a76318fd",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3b559738-c3b2-4d1b-a791-61c3d33f5b97",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d0dfdbbd-c922-4be4-bb00-b8020fd8d312",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6ae85fc0-7088-4349-a94f-018aecf5da28",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da16bdbf-ba23-4600-ad8d-979ba0d8bd4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17545705-bb6e-4c66-a5ba-adf27577bb6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f050a4-4978-4769-bb7f-e235f3b1b6da",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "920f4dd4-3040-4cfa-a364-c06b2059b1f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54178c47-7a93-4725-aab9-5517d9b59728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dca3957-7336-4aba-86c8-d3017eb2c211",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "636a84f8-c5be-4236-af5e-c384c6840312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46ad399b-7037-4d94-9a2f-8fd5950e4aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ccbba51-82ca-4dae-ace2-e843746f0f62",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "909ae164-0f6c-4d14-8900-81aaddf545ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1810d018-c266-4f22-bac6-b9530ef06598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043634d4-8dde-4c85-9172-98f3057574f3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62f341f-56a2-447b-b9af-db2d9866cf77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54e5fc33-2ef3-40f1-b250-d655f8d969da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e28d11-3566-46ac-9336-5c4c900c42cd",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01935403-26e3-425f-8f70-a4ec0e62cd23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df326a07-88c3-4b1d-96af-9ed6a7a1d38b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d106ea2-9482-4462-8592-662aa56c0a8d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f79e61-bcc0-4a6f-8e30-b6b2e74acae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32a99892-b1e8-4631-8834-cf4422b55b97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f25c49-74e2-478e-af0e-67ee0d245436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4ad6f1a-9fac-41bb-b6e6-078732057d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4604a79c-099b-4e7b-92a8-515788303559",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "122c9d42-36a2-4c53-99e8-705980c70cea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fe2d1fe-175f-446c-8c35-25f31f7b4f37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28b9850-51a8-4c44-b615-6abecc3c6b60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bc1674a-bf06-4508-be1d-05c09bd5ab12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e806dc93-49aa-4b95-a77f-af02842fbc3b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a293787-b537-4100-bce6-76fc8d2adee7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "171e519c-38d0-48a4-92dd-c34fbe61d804"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b65daa5-ea32-434e-b592-ac1e459de43d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62976a6b-7412-4325-afa0-f694e6b4e2bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2d95aa-0ae6-4772-a976-436a21e9f58d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4ce523-bb59-4afb-b7c1-05928e8b0215",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb2d4cb5-968c-414b-85fa-bf969f9e4c8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "279d56fd-c117-4713-aca0-ab14a785439e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4144f94-69e4-4b43-bda0-cf491ceca941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4ffc0a-5697-4365-9489-d051687d91b9",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "089623ff-de4c-49e7-94cb-161692e4c363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23cec9f6-cb9e-4c26-93e3-fb38ed21ad04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4169eb38-a772-4a89-a853-69a6b70a70de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3d92ebd-cef7-47a8-b4e6-d22ac184b7a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02a0cf01-196f-49e7-bac7-4b02be5ebeeb",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b548a46-4a62-4bee-927e-e4fec6144ced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25814bd7-2159-433d-b8e6-c02d48719ed5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "151ca47a-81a6-4545-8d3d-d21c90e70d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dca9d6f2-b7ef-4c97-8806-8717b4ac0f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9cb775-a710-4bdd-9851-4ad29a206c0c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64dac505-55a7-4c7b-aa4d-b59aab956733",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54392e2a-a203-403e-85c6-39551ae4fa9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db29b2ee-74ac-4238-9239-1836a130a7aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e236d4d-c48d-4ad5-b939-1c947f549510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8963b4f3-2efa-4b7e-a83b-9e5e36917999",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5eda731-c711-4b39-ab47-1243d5cab37a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6d541e4-61dc-4338-b2d2-4b37babf676a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a75dda7-d7d0-49c9-9b15-4e40bbf570e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a56e710-eb94-4dfb-bfbb-be4af2760765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e98919c1-8de7-47d2-999d-25ad2aa13fde",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e15579d-5711-4509-b358-99fe8274ae5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf899c57-dd34-4e35-b84c-eb5ab4a0a21d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61170ce7-6836-49a1-a255-0fa0555154a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fbb2f58-028c-40cd-a371-fc71e4e556e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b9cb4da-5a75-483d-ae96-bdac1980bfa0",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89671545-311f-4fce-929b-ee2d3d4d05cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "792f8af2-796e-40f0-ac32-02d646fd283a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ea8b21-4915-4831-9161-a66492d72144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41dd09f7-51d0-4568-ae55-26b899037640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e25d84e3-14ef-44bc-9ac5-c1c00359b1ad",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f5ff52-aea7-4320-a3d8-85067b018770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5af3969b-faf6-4dc0-928e-9b2aad49665f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d73673e-bc0f-482d-a5d9-796d7e1f4e0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c2023a6-76d2-4a64-b260-cd4068881f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623d2a2a-904e-4e1e-8a07-3edad6137c57",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c00ea6e-a910-4a71-b22d-adaff733830f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f79a320-a33b-422f-9d4e-5250b7c27ebd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb90e22-ed0f-402a-bf32-ded969656ff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ab614a8-72f5-434d-9837-e74fdd41e0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516f7966-727e-4b1f-83b3-125fd8e3a0fd",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75a4a39-06c5-4141-afaf-5d54c655f856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "496ab569-cac0-4640-9976-6a154cd96289"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a5e415-9e3c-4a81-b670-c325a09fe8ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69dedf3a-e268-44d3-a80e-c5c451e02d64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce9b667-f4f5-4c3d-b96d-78eecc218e14",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ba72ab-e10a-4597-b29c-2103f6eedd1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4a68a42-35c7-4fa7-93b0-2fcd10e54360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "199d2f93-a37d-41c2-aae4-1052dcd61332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb9bb3c9-5931-4773-a4e1-47c039b840bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c2289f-dff2-4e75-acdf-35c994e1362d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8968bc-2464-41c3-9415-4d0c80e43d23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "618f007f-92d3-4251-a0a6-596415fcaff5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0e534e-ce07-4b29-a3f9-fee08c4ad29c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35e68f57-d01e-4853-824a-afd8f4b68571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ed497f-1804-42e3-b09c-0a632c9c86a4",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0148885-3c38-4141-b1b4-a5ac5c4332ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92684f9d-2e93-4721-b81d-733264d496af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "013f83a7-76e1-46cf-bcc6-f324338a0965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8af397df-5c18-40de-aba4-3d05ceaca41a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "335930b6-1b01-4a92-a02d-e61b85aac8f6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95043a6f-f462-4f84-a00c-d7d55a1dbfd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28466c1e-d34b-4f00-a2e1-b0b784dd6384"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7752f0d-118f-4bc9-9326-a9703f738ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95adc291-9977-468d-b51e-78336649a79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cfde988-0c0b-4f3e-9971-90e32b2d2c1c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8e07b3-297e-4107-955b-0900784c58e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b8029df-8081-4188-ac62-e379f949a164"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90999e2a-1f0e-4e75-8b00-7194ff8e0dcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a99fcfd-e92e-4062-8315-976f406a21c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f11a17-d7d6-466a-988c-2a1a6354639d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c69e97cd-aa3b-45cc-8aa6-21069c90fc3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8eb3a81c-6440-459d-b53c-87f5b86b6374"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10751598-51cf-4470-802b-1aa2564b852f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f773d14-61c6-4447-b436-5729deb9c226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8006e1cf-6650-4c1d-8738-1c9b2daf3e6c",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7e7be1-d121-4df8-8af3-ede862c35873",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3a00730-d6e0-4934-bc4e-a202ad29375b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47de91b4-afca-4a25-8c9b-0eaec6f776b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7586ac7a-9241-4b8f-ad94-808be61e408b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11736a03-6f35-4e73-ad90-69b07dfc8028",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef0a8bc-8f85-42dd-bba6-18d86312811b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "039d9f99-4a21-4a31-8308-06ebc65c9404"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79149eab-a090-4318-88c6-461cf9db4c37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76990fba-b99f-4746-a432-74b816eec62b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c764a0af-3548-47a0-aed9-e84d55088aee",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6127097-81bf-4a9d-b15b-206907a6d9a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccdde8cb-5eaa-43a7-aef1-9f915ac5737b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f7a745-cd0b-4657-a03e-6af86736505f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "552f4d3f-5aaf-457d-837c-6e1516ad90ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d21696-69bb-40d9-8c95-75d08d154fc2",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22397026-44f8-4e2f-9a92-a3d416be8add",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3e76397-f6df-48d6-89b2-ab887318574d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c1576f-0395-4afb-8b99-e4bcc7398dc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab5a4f94-c52c-4b5a-8ab8-e25ad7c441cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae3f2ad-f12d-472c-a004-b5625f991374",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9c6d4e-601e-4dd8-b0be-230595f37415",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4459952-57af-4444-ba43-a2c37dfb5151"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f895fb3-37e1-4575-8c35-9338570f3160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c75180-f805-4840-9588-77aee5f38247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "291f96cc-7544-437c-80c2-9542ed50065c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67026736-1a94-450e-b81b-89da5816c10f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd1e6748-6480-410d-9b0e-757a9d750b76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2aaa569-6a10-47b8-84c1-3e05639e84e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec2db4bb-8aa3-4acc-85dc-24f704063f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4899cabb-69ba-4f49-a2c6-d2c25dc371f3",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d00b019-33e0-4ffe-a1e1-b674efc6fc3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d84c80ea-534b-42ef-9db9-5f1d170ccff9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f469037c-5614-45d1-8df0-39b30c465c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "954e7578-037b-47e5-a696-d9458db65b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcac3733-5255-498e-a354-17942dbfb9b1",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c7322a7-742a-4e4a-8181-0c8d01c5d0af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "591931b1-f070-4b92-886f-4240ddb9d638"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b625765f-a823-4d41-a5be-f1600471e6c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8dd2e98-27cf-4a80-9a77-2f638e3daeaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ebe7917-7c3a-4e5d-b10d-8968b2225dcc",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644b65d4-475a-4eb2-b8bf-eecb6152fbfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "949c8398-ae11-4753-a0d0-86c1b2f384d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb911942-3505-4c7e-96bd-b9be4e7874b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bb94210-c3f1-4cd0-bea1-4b5c8099f605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1d3bcb-793a-4626-81ba-d4c35e0782e2",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af10a9a-2216-432b-bc1b-bd4ab1160dd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05fcfa77-4582-4428-9770-5fd02c79cb48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a550856-d463-4840-a6a6-ad5bc198d879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a058075e-9e15-4c2d-86c4-643b5519d2f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2697ba58-d54b-4cb5-9131-92d74ebb5160",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "036f92da-029b-4545-b0e2-15e24bf4bd4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "224ca09a-96e3-400e-8d07-7b11464a7389"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "429a3061-4271-4930-b9fe-59f93b937c09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "396aa34d-955f-4db4-9e94-b41307a2e2c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72822ef6-519f-4983-99d5-18cf8a446b69",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5fc382d-6d66-4f01-8695-34924d87bd39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "435da5d2-aab0-475d-bcee-58ad4aa6140f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bab4dc2-e6bd-492f-a706-63bcb0142653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47d45c6-f842-47b9-9cc1-1c2eccdbfda8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b0da84-c330-49ae-a524-0b0220673d84",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8bbd532-37b5-457a-9b6a-5da7e792f545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a0b0469-fe31-466f-822b-20f954ea82d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3dea712-54fe-452a-b23e-5f0492627fb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4391c19-b332-4a2d-91b1-49a8767ddc75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0f6a27-5c59-458c-ade2-91effab27560",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d496fa1-73a3-4eb2-9f5f-96978b50f1ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aea84ff4-0e86-4546-8b89-b8eabf9408b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed924bf2-24d7-49f1-b03a-f8256f791f4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d79f1459-07fb-423b-b403-8cea55abad88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32282aea-6727-4ca6-ae78-9150300fc9ea",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d17c38-cd72-4a5f-98d3-dd7bdfc724d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "221e7476-65ae-4c1e-8264-b804d398cbcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad394d78-b422-49c0-9887-621e44b89eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeff50ca-b9ca-4bfd-88f2-f5469ab99b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7262b42f-df7e-462b-8792-f8169020cedc",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4570a6c5-81f7-4cf4-93aa-74934f027697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd9d07e-0746-4316-9f09-5cbd06ac8281"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc6ac59-999b-4adc-a83c-d51bf4a766a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94ab1432-1412-4072-8dc0-843982bb926f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5f9a01-ae74-4303-8dac-cf7fcc4087ff",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611896a8-db0f-47fc-8529-9f596bf18c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8a8b7a1-73cb-42a3-9969-7131d3707031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f095f74-ca21-423c-9ea8-b9b27d1af188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e36e8093-e517-4c6b-a4cc-fe20dc692a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c820b7da-c24e-4625-9d71-608b5dafa666",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386f8a10-bd19-487c-8451-aba0799fc3e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23dc83cb-cfb7-4f87-a78d-042749f3242d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74308277-be1f-4915-b342-564040998aa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "454aea82-5850-4551-ae7e-6663cd434e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d77a153-5233-457d-a23a-dd2e0ca2119f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed3c9b7-d212-4640-92b7-a8db9c338d3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfca1d01-f1ce-4703-a452-059668822553"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46237ec-96b2-426f-bd99-37780f9cfa8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "753e64d1-5c82-44e5-8789-5970061548c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f03ff4e-49d8-4a89-98aa-41be03a947a4",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e71f13-9407-4978-a487-56d3415b4e9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "621d2b01-cde1-4325-aded-1c7659829b6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab25561-fd0b-45e1-835e-94ac07cb418b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2e9c54b-3b8e-4e44-b25b-494dd227ed52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51cce03e-ae0f-4575-b847-50ba3515a2e5",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f382fa71-83a0-440e-bcec-e91cef61e6da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4957d62-7010-4051-9ccf-8f085b0a7503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68084f8-9866-4554-938a-90c99028f0b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba053974-731e-40d0-af12-58f8de4e477c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7391a7a2-e9d6-4bd4-9934-291502c6776c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc493e49-ebf4-4300-a5e3-d77092982c13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c878f0dc-cb3b-406b-a31d-d4153ad30cfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb64011-3f3c-401b-92ff-817af8930a33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19022a53-2df5-4311-b2e9-7fa5c48b1643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c15d46-fda1-431f-954b-582d0603bb44",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "420c3dd7-4452-413d-ad54-bfdb53503f0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00c806b0-bb64-4cc0-b947-7f8949690a1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc83f0c-0d2f-43d2-b295-5bc48c1dd4e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb4e5c83-2368-44d1-87ca-7b7808c397d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c046d90d-1a63-400a-9bd6-077827d2afa9",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a499d9e1-2bfb-443d-9726-ce00839f63ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8e0b8f8-d1a9-45d5-adec-e5e06872b052"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9bf08dd-688c-41d4-88b3-71f9af524ab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79c8d8b9-e3dd-4833-95ec-e2fd84dc21d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b956fc-2e79-40eb-91be-0228007bdbe9",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc3e5b31-c208-4229-a12e-1ecb1d168018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "723518a1-6459-433d-a12e-fd38df9432d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2063a7-e4e3-4263-9d8f-23dd401a6373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee4514de-c46b-4065-97bb-8e9d9cebf08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715137c9-33a8-4375-ad39-f5685130254a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b86645f-471d-4a44-a34d-7d62e5044b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a038658-9636-4eb2-a014-977d488458b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e242af-e922-47bf-acae-ef44dfc09965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bd0a49f-a0e6-4d09-80e2-db96876f560f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80653894-ff12-4431-b909-39242033caf2",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d67ff2-cbc8-46a0-bf4f-1774b61668ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d5c5508-425f-48e1-b2bd-65558f16ca77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b38e1c-ed41-4bc6-8895-372c258607fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e9dd1b-b607-425f-821a-7b10ffa3be25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e0c226-f1c7-44e7-88dc-d5eacedca548",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0111ce0-ddc0-49b8-8a2f-00d3d9680eed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "130bb0f8-a909-4d9d-b6d6-bad694542e81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03fca4f-aa08-4a3b-96ba-d029f8e0659b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4e977f1-86a4-4c9e-980c-49b6500a0f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34137b11-ca54-45bb-a11e-ca3acd1c95b2",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f24bd5-dc10-45ea-8ffc-7d4cd2aa5da1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f4ac45b-f2a7-457b-a65a-76c48824440d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b52060b-e852-423a-ab8f-29eb49442f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2529c4ef-8e6a-4afe-9023-d61bf9d782fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ab4cbf-0dac-4535-ac10-0a0dc67ca97c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8470d228-7baa-4cc3-bc02-dd93063ce747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "459a5085-f54e-4e8c-bcb6-f7111c1ace0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de778033-9482-42be-900e-8103c8e37068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "982dab10-e4d1-4159-ab6b-2bc67c48d768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cceb862-34c9-4b21-860c-117c3c780ce4",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b67d43-62ed-4ebc-9b7d-a0e7bbdbb935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d27b7cae-e3c0-4412-a927-dbcc3934e6fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a8a92c-3b8f-4e36-9f7f-4b0f8d660016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cd069a5-3502-4e59-ae91-91dc567fde64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e10753-e4e2-4d8b-84e6-06ff2ee22bdd",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb58c213-789a-4ad2-893c-92748c2b7473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d534b0a3-5bdd-4703-9553-975edb825e83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53accf8c-ecf3-4c6e-a520-90192d3f02d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2863a4f-8868-49bf-97b3-9e2993edcba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d02a28-2adf-48c7-b942-23c09db73523",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a42602e-40b3-4487-8d4c-40ce7992c757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c52f6ad7-60b4-4204-a683-77e6415c99fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d383a3-b9b6-4edb-a8a0-69c30438c9f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20a4a1b5-1cd4-4f1f-a301-df7a91bb9338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385b5404-5eaf-4051-8e26-1e4ab33cc778",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8386b43f-5f83-4c94-8bd2-a129e7f176c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e068bc53-f64c-4bc5-9c5b-fdff198d3127"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71fb9a9-621b-4380-9f2d-3796d2bd0926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ddaf7f-3d91-4363-9c41-5e355e5f5729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "495f4c9a-d8b6-4cb9-ba9b-74f94de97810",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b28eae-2ba7-4e96-a011-d9c4f1f5e286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a23c7d-d6b4-4880-a5fa-9d5a3f59d098"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "015b1fec-eafc-4209-bee1-69f4c6e4d039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675f4dcd-5d75-4ef7-a0bb-2b0a67e9a6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b215eb5a-99d5-4633-8529-6cd1b20126f4",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32390286-3d98-48c7-a9db-fa862064e21e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "184ebc11-2d88-49c9-a68e-2b66300f80b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "151b330a-ebf5-49d1-b16a-9af82291fa1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "402b8862-d5b9-4371-ba97-515e5b101962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "138bc3ba-d6be-46a9-a8de-327ad7fb8b09",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7507e92e-8436-421b-82be-3a79b32ad287",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d8d5363-dd54-47bd-9915-2a88b5a8e3fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed78429a-612f-4109-8fa7-49d8709ba703",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a686fbed-2994-4ead-99d9-a8dfd240c454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7a2574-7ccf-41ad-848b-78a2077f49d5",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e5e630-7bad-4f33-ac19-fa69ba5a7e27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "334c5f57-1eab-436a-ab78-ea2b13e48280"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d71b35-776e-4a6d-8d7f-993d85eb2e5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46bb3e79-e08d-4a6e-ae08-e4a364d14188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f142250e-3d33-46a8-bbb6-270cfd9a293c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c75f00-dc9d-4a64-b166-5aba39dbdef8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b25d3cb4-5cb6-435f-821b-5c499904c461"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c5f5fa-18d5-4189-9761-d33d9ef0adf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96035af5-43b3-4974-8017-6a2fe0e052e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e22aa467-1114-4056-9dd4-6010b2abf031",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce36200-8f35-4444-8595-e19ddbaa587b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfea1159-cc42-4713-9dd2-c8c6444d1087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "069d8975-8d56-4b9d-9fcf-5ea5501c310a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55c65dee-805c-463d-b9dc-d245721cc298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c959b9-1d25-48d1-95f7-1a6cde7df1dc",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cde0d715-420b-45ed-9296-b0f07894c800",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4808c30-b9b8-45c9-8935-73a25de14251"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e367dcc-4883-4e23-bb90-76a17868b747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9314bec3-2513-43bf-a973-ad7369127fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d59324-b445-4c10-9784-e3a6331abada",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a3722c-7f69-4331-af68-9e53a88c8b85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3367978a-3f58-468d-8e60-7f8681bbe2d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2281be6a-15ba-4325-aaba-80dc956b5e1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61a1617c-191f-4330-874f-cd25a9e3103a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a47b50b0-c39b-489b-b72c-9a9785fa79ce",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d2f98d-8c59-4f7c-83db-7b98d0403b0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "158ff0a6-2819-41f5-9262-1f120162609f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59975dff-a25d-4b0a-95bf-649ebb5d08bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b804f92a-14d6-4dc6-8e37-9d988fed6edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e669289-3911-4661-ac8d-2cff21a5f1ca",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf74bd88-0f10-45cf-814a-8b98ab459bc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d5ba44f-4891-45bd-b2b3-a32d38b494d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4654895-a02e-4cbb-8f4b-87e9576179fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e05a98d6-6734-4b12-bc08-6155848194e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6598658c-14dd-4093-aeb3-3cce75fcd521",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ce3ce7-2f77-48a4-aa3c-12f578c43845",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49076322-1ff4-436e-8810-cf0539ab872e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4d7fda-94af-49f7-8b74-0521e17112ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cf7492c-27a2-4085-8598-c58e2b552f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa5cfee-df88-41b3-83dc-16848f3c9216",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9a159bc-764b-4a20-b85e-d57bf24ed62e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06a6ee63-7525-4a52-bb4b-fc79d897acf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b78f192-95a4-4995-88ed-2432273a2a62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "789c6037-cefa-4bc0-ae26-bd283b4c244d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de42ff1-a3e3-4104-8e0a-27cc4440653b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80395be6-37bf-44b1-989f-66d9252ec07f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffe8f042-e4db-476b-a42c-a9b65e6442d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2672420b-130c-4d88-b563-2561fd3d7da4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba89748b-db04-4789-b090-d2a0d1502887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdff4a68-d8e6-4255-be97-67ce1f2d73e5",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9df9f0f-632a-47f4-8713-4808491f1d2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f30f1bc-9328-4ecb-be92-8c488236a3f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd14e79d-4107-49cb-a9ac-2d63b9950afe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eda21414-e98e-4ab7-ae69-4374cc15bf9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b618b064-6518-4a11-b67a-ddb0a647962f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ef6da3-da4a-4bee-b24a-e3a7dd3cc1d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec5da76e-3f2b-4bd4-a779-c13ff9022cd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb814ae1-793a-4c00-9f09-b16239053edb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb99460c-f05c-481d-8c75-a86dcb6efa8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051d703c-54e5-421e-8411-fd23cf03bde3",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f5ccee-ca28-4b55-a6da-b2a9d1837952",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fb95317-2a7f-4afc-a8c3-8a84659833d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e538e29-3af6-48e7-916b-485708b33c33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e74d1b85-5309-4e4a-9045-da62e458ddb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8344cbb-6ef1-4eac-854d-0713d95d6c95",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a40614-3488-486a-90b1-2cc009f6e3a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1958f9a9-14d7-432b-bae4-a4751e75ab2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc864cd-c956-43ca-8365-f558e6e6908a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0db0ca4-3987-4a96-b52d-0d5336b0c6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f84cec-0327-4b21-8bc1-882a83127f78",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0322d3d9-fe99-4a38-8638-df594b9f4eea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0182f4d-a172-4726-95e9-09c8cb8fd99e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3a5204-2482-4b29-8444-88ac5da6cb69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8076b80-21eb-45ac-bdb6-1280adddb006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc9f750-bb8c-41af-a8e1-5a1717be30a5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a51d71-f595-4658-beaf-edcbe8d25668",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dc8fdef-5d37-4824-aa7a-b2f89d3c04a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd448f26-9578-4082-88e4-0d9370a07673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a9e10ac-716f-4889-b68a-eba5b7dba34e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68741ab1-ac7e-4bc2-9ac6-436a40a66135",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56b28db-256c-49b9-a106-7b9d6b1ec211",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db7c417f-75fd-4167-948f-a0d40ace6b5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd74bc8-2657-4a68-9b57-039a30ebe9fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bf6ad4d-4790-4805-a182-142fc4f9f4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64534f53-5db8-4c3a-b74b-b5796e208fd4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475453d3-1851-4508-b38e-3b32539e5ed7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da3be3f5-e2f4-4f9e-abea-ad3fa5c50299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00140211-fa7c-48ab-9fe9-7ed350259bd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "024ce9c9-ba51-41d5-947b-20ce62aa0acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c1d281-9211-4a61-b262-03dc17bfbbb7",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d2ab43-8005-49e3-94c3-c9076e3c9cbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "036944a6-222e-403a-8cdf-2d93a65ac786"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "814a270e-8002-4bf6-9c81-9f8b9c86f796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6215c05-67b0-459f-b933-08579bdb1e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06eae6c-8959-4c68-b29a-5fe0eea7346c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ed7ae8-39b9-4105-a346-ae2885486664",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb3cd33d-d756-4a6a-9a45-18c128e11da7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15656a7-d330-477b-810d-b6300fcc4587",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90843b99-0874-4ea5-8dbe-1cd3d091d3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1115cad-5643-4c0f-9097-96d231b7e763",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef14de9-343d-4544-9f1b-81fe7e0f89e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d212bd75-98a2-4722-9c2e-22b8bfa49baa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6092fced-bd30-44d6-b6ea-125dd42f7458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daeb65fa-31be-4c2d-beb3-d4c4bf79a615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a33b440-cb5d-4576-bf14-4febb4f17fc7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04fec141-4d7b-4a30-a365-9ef5ccc0cb0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5c7d553-ee2f-44f5-bfc4-0253d588fcdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08accc92-2383-4e51-b8bc-680307625244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afaad996-c992-420d-ae58-d01f49839b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d31761c2-3d1e-4cba-b7d6-1f1c1da4e3fb",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "148bd171-416b-4343-b318-a2eab45b35b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69cf980e-6671-4c6c-8a65-faf174b51e58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35856f8-4290-483d-a005-a6665b2d1b52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b55aba7f-280e-403e-be87-cd635dc4e1a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2109a47e-7b6a-42eb-a872-73d2999a7b75",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b6ffbaf-f1a7-48e3-9d9a-8cd1898b9f03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0275fa44-1fe9-41cd-ad88-919dfb7293b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38cda65b-6056-4d43-b898-ff99e09e8353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cb529fe-874e-4a23-9b96-956bff2a6e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7acf1167-8364-465f-9cbf-c5ac034cdfc7",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26719fad-c3a5-47ca-b0b2-e0f096acd8f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb093c3c-42da-4e32-ae30-534605609731"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6092db0f-0dea-4c41-b939-17e6089d34a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7b775c3-6805-48d8-80ad-1497e5a90819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1dc345-88b9-4f65-b998-92d413ca4895",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e630b769-f717-402a-a0b1-1b1941c1da58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca28fcf9-382f-49e8-895b-d3e417890e27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e8f77a-3f68-4bee-9868-20bb3eb6fd2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33573029-0b1e-415a-936a-283ea1aea158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2938adea-15f0-418c-b7af-3c06d95870d4",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1806c469-a393-4607-932c-8012a4a0df80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da8952ab-08bb-45f7-8e89-37656cf0225d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8c6b91-b610-4e95-92e4-d15594b9e7a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "380c53cd-c432-4b1f-8789-cbdc281b6694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7e1f95-a5c8-4282-8660-7fdc48096868",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07de7f29-32eb-4dbe-b013-06afe8994768",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d4565dc-ee57-477c-be76-26ebbcf4c0d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98498a0-a3cd-46ae-8eae-5850c9369e98",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5c887f3-3b78-4771-bf42-4acc4ceef656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3df000-320d-4df0-b181-25c406eed644",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1c8301e-31bb-4cbe-8987-fa1a6f9edb4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4a6ef87-5fc5-48b0-98a7-0f52099b131e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "040f56f8-52e1-4181-9f7a-734b2d51af09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8609966d-1964-439b-a94a-2e36960dbf54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5229ecf-787b-4d0c-a720-61ba934c1732",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de1b2af-4cee-4b3a-a0fa-2df7379b14fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b64e831-38fd-424d-a2c4-c685a158d13d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba58cb09-f258-480a-b356-ca656102a7d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23658c47-81fd-4843-8b05-b17e51951785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af7ded1-1f6c-4190-969e-66e76692ade0",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00476471-6e89-4f52-a813-593f809d68d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eedee82-5329-464f-a088-698722a275ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bfd1db0-abdb-439b-9e71-5e7bd5613ba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d175657e-9839-44b7-9532-e2795676adb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea9e1f5a-5b2d-4443-9a03-eabb9bc0934b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82755a03-b7aa-4079-9825-f945a3ad5346",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41792757-545f-40e1-aef2-d27ae930e2d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "644eece8-ad85-4ac7-b689-e7ddf1a0463a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7d6dae0-1c50-4b9b-b4e4-554096718889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea58f336-562e-4298-9c8d-5d31369fa831",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ea0da8-f653-445e-85da-bebdc355c860",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7176482-8c11-45eb-abcc-de0136ed72dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a273fec-f820-460b-83ba-d84c5266cf16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a22d5b1-6e97-4a40-9d54-baa5c621dd1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9617f6aa-4fb4-4e76-a60c-b0e4e581775b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40ac79f-99e0-4185-9f5f-675315ff516b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a932c3a-ff7e-4c6a-9810-da9c3d2dec87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb814ce-3ac3-473b-8fd3-96ed1d5c4501",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b25491d-aedb-4dc0-9d74-506f7fe2eb95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0f2fee-48be-4280-bf3f-dacdfd9047ca",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4557367c-2252-4f57-8412-8ec382fd5c72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6acbee5-5212-4aad-8f01-fbfa4e7e00a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad772399-65ae-432d-a1bb-c9fbb088ae29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6638b1ed-ffc5-4385-9dee-866c62df3649"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e34676bf-bf3f-4e3b-8ad9-834aa738e8db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "557aa35a-b925-4818-b60b-e6879b425652"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e83eb55-c118-4cf7-914e-67c6df9ed13d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "19a3b745-7719-4ac1-b756-e09c4bcab8c3"
                    }
                  }
                ]
              },
              {
                "id": "a7cd8700-bf41-4fd5-9ea6-a49bfeedf49a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dd53ebab-fc44-4821-b5f5-0363b4571838",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3869895-51ac-482c-bd22-032a74eee13a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "fc80b75b-539f-4f7f-8eb2-1d104e3562af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a39f788-b6c5-465b-8989-76f40750ca94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f7d0c29d-014b-42bf-8d57-a171d5478ab2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41312ff8-c4cd-4925-bbc3-e66f0169910f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f28721a9-6cb4-4e17-997d-cbc76ff8b067"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2070f61c-037b-4dcd-aa55-0581f3080cda",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1585bc86-ed58-4eaa-abc6-cabef44814c7"
                    }
                  }
                ]
              },
              {
                "id": "81d6134e-9441-481b-a7e9-32d29f034712",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "cbf77e38-23c7-4100-89f5-9cf33fb6a0ad",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a975ed1e-e90e-497b-899a-a27da416d0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e76543b0-fc09-4c4c-902f-31cf62f36297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603d2736-6cd7-4882-af91-d4ca09533cc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2333609f-9138-482b-9ef5-5ad69888fac9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7695af0e-6344-4bbc-8380-3da2a11f97ad",
            "name": "Positive Testing",
            "item": [
              {
                "id": "99cf73fb-3d56-4e5e-9462-825faa0bd270",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "89b6a192-7d1d-4eed-a000-f76eea40b18c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "dcfc1a73-b5aa-452a-9989-e5b62ec4f66e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57d2edd2-3af2-4ba3-97e8-2be9d8d6d214",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d8bf368-6731-4d6c-adf6-be5d09c74b75"
                    }
                  }
                ]
              },
              {
                "id": "88e8ea9e-3aaf-4bf2-94aa-aba2942e9156",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b8434ee-973d-4442-a68a-ad5fc3f6d090",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "142401db-0599-45d4-9f0e-3ca4f9876ebc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7dd1b922-3392-4f60-a753-3323a0cd1824",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b08892ec-e835-4421-ab32-551ddf1bc0b1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b0f2aaef-e698-46d8-993b-f12bc57f4aea",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a88b8892-cb86-47b6-956a-6f32a477501c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "58d2802c-f3f7-4319-b7bc-9decdee18110",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ba04f55-889a-4691-ba55-c60e6a37b174"
            }
          }
        ]
      },
      {
        "id": "20f5804f-8b47-455c-aaa6-cafe2cbede90",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "35c84709-c3a5-41d6-8979-ace09346a2ab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0031d007-95d6-4dc6-9e9d-51e4fae4ab5c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fb1e21c5-123b-4fe6-9c32-408aa3c962ff",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c9ff54-c82b-4eaa-bb0e-ae16b49985c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c0e99c04-e61f-441a-a494-66b6bc8543c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1633331f-e515-49bc-b9be-802bc319f5d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db27c910-89d1-4116-b730-5dafb20e2b54"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "855eb5bb-88bd-4747-b3a0-012586b0196a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0f0b15d-88ad-44ae-8f2d-b729067573c2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ffb102d-14b3-40b3-b3a3-f98e88643afa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f866ca25-ccc4-47ef-b409-5b9b286016c1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5cdda560-931e-416f-bbd9-fc88f4e6729c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a133be81-4099-4035-8b61-dc834735c68a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a476c095-d464-427d-bc7a-be0523c11900",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "af24b996-b777-448c-8b97-7ae89969960f"
            }
          }
        ]
      },
      {
        "id": "7cf2a3ba-d061-49fc-aeb1-56082d467305",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d9deb918-32b3-4dff-b815-9fc12259973f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5cb6a384-efef-4800-a835-1e3f07d256f1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "186fbedb-312f-4a7d-8f28-573738a5b7d9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72dd9168-6dbc-4eba-ac72-992b0c9d5db0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0aa43c94-25d6-4c50-83c1-84bf867eeab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99696592-0692-4330-a153-cfb2e5bec527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd383b19-266b-4899-848a-05fff95b60f1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5da02a83-0165-44cb-8819-6b0e5ae13e6b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ca1af57-e695-4c48-970d-b65c20aa0aac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "370c9354-abe5-4def-9735-3900f8026a73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84d2bbfe-67ba-4b60-8154-bee591e98717"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e59123d0-48ba-4eba-b782-96dfdf6258c0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eaa47144-3a9f-451e-8259-c3e55c53033c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93e8e111-0c02-498f-91cc-1cb716ae070c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ee910c33-fc3d-4536-b180-fced5e16a7ba"
            }
          }
        ]
      },
      {
        "id": "81032e9f-d8eb-45e3-9873-8ab0d43240f4",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c06e2933-3f03-4c0a-9ea9-93cc1e9eca77",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8a20e7a4-369a-46de-82c5-51daaf356b51",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6f31d308-7b70-4fbf-8126-095e7d6614e8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cf3b669-8472-40f4-91e4-6296eadf7fb5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a286c995-8a2a-4f2b-be81-f287d1e02d58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c62fbe-18fe-4704-9732-b7cbc9670813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df2152ac-fca5-4d8f-bf0e-fc7527001b44"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48067aa1-0a95-4265-9fee-202516b0bdec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5fd2d33-1e7e-4a86-99a6-821cd1ab4980"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "76eaef02-bddb-452d-b222-61de2bd58985",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55c6deb7-e222-4c7e-8777-22a577f4e522"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d590e14b-ba6d-4b4e-b460-6e8c8a918cfd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5c166b45-da06-4945-8f95-177bb60de5e0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea13f2de-efee-44d7-aeeb-51863e2889f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f4d7e68a-96a8-4f22-ad1e-b5d867d359ca"
            }
          }
        ]
      },
      {
        "id": "37fc8902-7bbd-42f8-a4cd-f804caa9b97d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f73623b6-3ced-4b5c-9977-9e3bae868a0d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ad1688ba-3cbc-4770-ab4f-4b29ae6f2a1a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4fece68d-8af1-470d-9639-8115bec2e42a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d1df7cc2-128f-486d-a37a-6fe44a7702ab",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6d6728a3-85b0-41e1-a596-0b21900d92ca",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 120.41269841269845,
      "responseMin": 5,
      "responseMax": 715,
      "responseSd": 80.11839154742898,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1717634242068,
      "completed": 1717634280739
    },
    "executions": [
      {
        "id": "09b4abbc-e739-429c-8852-00c28f08d2fc",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4de5bdb3-63e6-4d9a-8bd8-cfecd2671fbe",
          "httpRequestId": "60e5a3b5-8ae5-4ed4-bac4-60bad0a3b956"
        },
        "item": {
          "id": "09b4abbc-e739-429c-8852-00c28f08d2fc",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "6da2e640-ad9b-4c56-bbb0-89c0dc078964",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 0
        }
      },
      {
        "id": "260d7737-9b65-48cf-8b05-b48be99004d1",
        "cursor": {
          "ref": "a5c35ba2-12d4-4690-8a14-94de33d3cb6b",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "776a1858-e352-48eb-bc1e-a903a9b9cae3"
        },
        "item": {
          "id": "260d7737-9b65-48cf-8b05-b48be99004d1",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "895b95a7-8969-40a7-bb5b-5219f87ca67e",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "895a270a-0a99-4272-bdea-af6937d3f84b",
        "cursor": {
          "ref": "a48feae8-0cbb-4297-9a16-0efd521ef164",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "bef80df2-864f-4fcc-bcdd-8134698ad432"
        },
        "item": {
          "id": "895a270a-0a99-4272-bdea-af6937d3f84b",
          "name": "did_json"
        },
        "response": {
          "id": "db8362cd-dc5e-4110-9382-43acd3479a3b",
          "status": "OK",
          "code": 200,
          "responseTime": 258,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed549419-f485-4ce9-a25f-7f3169d08484",
        "cursor": {
          "ref": "968685fd-fa55-414b-b904-d70fbbc481f7",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a36b43c7-daa7-4c4b-a065-e2150409d4fe"
        },
        "item": {
          "id": "ed549419-f485-4ce9-a25f-7f3169d08484",
          "name": "did:invalid"
        },
        "response": {
          "id": "9e63cef2-f51b-4bbc-b0a3-2aa9c1516b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed549419-f485-4ce9-a25f-7f3169d08484",
        "cursor": {
          "ref": "968685fd-fa55-414b-b904-d70fbbc481f7",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a36b43c7-daa7-4c4b-a065-e2150409d4fe"
        },
        "item": {
          "id": "ed549419-f485-4ce9-a25f-7f3169d08484",
          "name": "did:invalid"
        },
        "response": {
          "id": "9e63cef2-f51b-4bbc-b0a3-2aa9c1516b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1da7402-d71c-443e-8741-f454c637c09a",
        "cursor": {
          "ref": "24e5898f-c6d4-4b2d-9ab4-260dd3a1b406",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c21d37fc-cc35-4eed-b4a8-b9e908d693fa"
        },
        "item": {
          "id": "c1da7402-d71c-443e-8741-f454c637c09a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "8c21b1ce-3b27-4441-8c4b-0f6f15a42844",
          "status": "Not Found",
          "code": 404,
          "responseTime": 407,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea526c3-8595-4f67-a537-18a7f40c7308",
        "cursor": {
          "ref": "90fb8f54-17be-46c1-a89b-7c3242544aca",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2532ebdb-42ec-4b59-9285-3c0576dfb6b8"
        },
        "item": {
          "id": "bea526c3-8595-4f67-a537-18a7f40c7308",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4e46b7b4-8827-41f0-b47d-cafb3c5e5f7d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 89,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0abd5184-3b95-4288-b4c4-f0306d3a5af4",
        "cursor": {
          "ref": "6e7662f7-61b0-4563-99a0-c4ebc93e5c0b",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "719df00f-21e9-49e1-ad21-585d3ac27645"
        },
        "item": {
          "id": "0abd5184-3b95-4288-b4c4-f0306d3a5af4",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "64f8c880-9e63-4d94-9b62-06c9273cdbce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae5e3f5-a98d-4513-89dc-a51351e38c39",
        "cursor": {
          "ref": "746bdedb-458b-48a9-8545-d9994dada894",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fce6af67-025a-4637-a058-13a027e4a888"
        },
        "item": {
          "id": "5ae5e3f5-a98d-4513-89dc-a51351e38c39",
          "name": "identifiers"
        },
        "response": {
          "id": "e3d76358-0ab1-4d66-85c9-5488413a9ce3",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4448c38c-1645-4071-8f11-1eacff064067",
        "cursor": {
          "ref": "1c1ba11f-071e-4a93-a940-63bd9892b04b",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7a3c9e1b-464c-4e8c-ba92-6070afa3018a"
        },
        "item": {
          "id": "4448c38c-1645-4071-8f11-1eacff064067",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e4d3ad5c-512d-4a03-ab67-6af63de7adcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c46fe54c-2715-459b-8485-b9c45b16a470",
        "cursor": {
          "ref": "990788f2-a187-4117-8ebd-48a1e47a831a",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "598060ad-4ea6-457b-be73-e88da7dc2d06"
        },
        "item": {
          "id": "c46fe54c-2715-459b-8485-b9c45b16a470",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "cb374d05-e06c-470f-95a4-afed70025666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7032535-f6ab-4007-b30f-a0e68ddf36d8",
        "cursor": {
          "ref": "67f27ae0-2894-49ec-8232-e45378c5c0a6",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5916ba2e-4c36-47d4-bf0c-1ede3b9c6cbd"
        },
        "item": {
          "id": "a7032535-f6ab-4007-b30f-a0e68ddf36d8",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "41b5e6f5-120b-459a-a669-e5e075aa48c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5105fc45-652c-4e03-8874-d27f9e479924",
        "cursor": {
          "ref": "2a80e591-0c28-4450-976f-6ccbe1c2181a",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b7d12e36-3e61-4dc6-9690-6b2ca5ee2d84"
        },
        "item": {
          "id": "5105fc45-652c-4e03-8874-d27f9e479924",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ed85ea18-05d2-4919-a3c4-6b02f6c275e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d0b148-032e-417f-95ad-d27af67ab62e",
        "cursor": {
          "ref": "a87cf901-7791-41d8-8a0a-0fd08372c8b3",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4ad139cb-eb24-4de1-a930-19197cb0ebff"
        },
        "item": {
          "id": "04d0b148-032e-417f-95ad-d27af67ab62e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d8611e71-2c29-4626-abdd-080f3927d033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273c6e07-edc1-4a74-82cf-3e09c226f511",
        "cursor": {
          "ref": "6929bab0-70b0-4965-bb88-9be14ea43ec6",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "94fbf9da-87f6-4150-a7af-7555a5936ad9"
        },
        "item": {
          "id": "273c6e07-edc1-4a74-82cf-3e09c226f511",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "cb84394b-15dc-41de-9941-42915b62e8f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97cb244f-98e5-4ff8-acda-8a4049cf57e8",
        "cursor": {
          "ref": "c70ed7b6-6451-4b3e-8cda-41ece823598c",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "be405195-e43b-44f7-a8b1-78cf0bde340f"
        },
        "item": {
          "id": "97cb244f-98e5-4ff8-acda-8a4049cf57e8",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ac3a4417-99c9-4e9b-a663-dae8d75a2542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "140d2ce5-3851-4937-9a80-6661841219ce",
        "cursor": {
          "ref": "8c44cc94-b6d0-4565-b3df-c174000bd13e",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3de114e1-f2b6-404d-bad3-053874b6b736"
        },
        "item": {
          "id": "140d2ce5-3851-4937-9a80-6661841219ce",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a4497f92-1b7d-465c-a9c6-0c2d163b1daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "380c9914-e41b-474d-84fc-8c5f367e29de",
        "cursor": {
          "ref": "cb1e1581-adc7-491e-bee5-8d64dff42058",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "314ba7e4-c551-415b-bb27-d1cfef02f235"
        },
        "item": {
          "id": "380c9914-e41b-474d-84fc-8c5f367e29de",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "bb397252-78c4-4d40-8fef-40800587d6a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c864cb5-90c5-46ea-a774-4602fd403290",
        "cursor": {
          "ref": "dfea5226-09aa-4f8f-b094-568374396524",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1d11ed8e-1ccf-43dc-ba42-439670b51b93"
        },
        "item": {
          "id": "8c864cb5-90c5-46ea-a774-4602fd403290",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f7c89f63-8f1b-404d-b873-ef7621764570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0406fee2-c190-4e45-8fbd-95973dd818ba",
        "cursor": {
          "ref": "f5dc67ab-9441-4467-abf4-1d7a051d8fa5",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9d982121-b6cc-4528-9091-ce2453dc7d30"
        },
        "item": {
          "id": "0406fee2-c190-4e45-8fbd-95973dd818ba",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "83b8dd79-9e9a-413c-aeee-d3a3d33bb298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6123e4f6-0773-4c04-a504-b3c74bde2131",
        "cursor": {
          "ref": "4996f12f-a0f1-4ae2-9ec1-d4da8b719b0f",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "56a2f0e2-0bf6-48ef-b854-2447d8a420f4"
        },
        "item": {
          "id": "6123e4f6-0773-4c04-a504-b3c74bde2131",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d4cb5e9b-aec9-4bd8-8da7-4dcda16c82c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbb8fc29-8f12-433f-b15d-68e9701926d2",
        "cursor": {
          "ref": "e64e33aa-c949-4ce3-8c57-e4d2d88d86ff",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8b422858-355a-473b-b8e5-f57c7409d9a3"
        },
        "item": {
          "id": "cbb8fc29-8f12-433f-b15d-68e9701926d2",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "499b3bd7-5ba4-4072-9000-6337cf0344c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e394e75-7d56-4010-a358-471d423e9f85",
        "cursor": {
          "ref": "deec2755-ce93-437f-a2c7-a1baa84f0bc1",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f0bcaa5f-e41f-4555-8c16-3e097fba96dc"
        },
        "item": {
          "id": "1e394e75-7d56-4010-a358-471d423e9f85",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "717b4df4-3bb4-4e7c-a3cc-363753e01703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18074e09-d024-4dbc-8b59-405f27779e86",
        "cursor": {
          "ref": "0889d046-ee91-4a06-b706-dc950e47ad59",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e6c0a535-1e98-4b09-8f3b-0d033aa08d4a"
        },
        "item": {
          "id": "18074e09-d024-4dbc-8b59-405f27779e86",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "0e02c2f0-4c26-492b-aee8-c790db7e4956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea884d28-caef-4d1e-bac3-8615b992fd2f",
        "cursor": {
          "ref": "16de9093-fd75-4a9e-ae55-cb9d16e777a2",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b8668b60-d693-4281-84be-4863bbd77273"
        },
        "item": {
          "id": "ea884d28-caef-4d1e-bac3-8615b992fd2f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3a93b2a4-1d0f-4df9-b683-18cf0405c5ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5213d7-302b-41fd-92a1-f480957dc791",
        "cursor": {
          "ref": "ecf7de98-117b-4b00-97d2-9ce0f80e43f2",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2466b6c0-2c75-43dd-9e7e-9fe1dc51d7f3"
        },
        "item": {
          "id": "2c5213d7-302b-41fd-92a1-f480957dc791",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9b5ca3fa-a991-421d-9212-e440618f1ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3b134c0-a64e-44f4-bb63-63238fa9e83e",
        "cursor": {
          "ref": "d90fc121-6a34-44b9-8d99-289a0457c77e",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "23ddc1b7-ef73-4317-9254-9ac75f35f280"
        },
        "item": {
          "id": "b3b134c0-a64e-44f4-bb63-63238fa9e83e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "59a2551f-8bbb-4d34-9a01-1b07f81e23d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e1fb221-3306-47c9-bc9c-d218c4d5ce09",
        "cursor": {
          "ref": "5ae5ee5f-1032-49cb-a4ea-965927b00767",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "eae92dea-27e1-4329-a90e-b7d00137af0b"
        },
        "item": {
          "id": "1e1fb221-3306-47c9-bc9c-d218c4d5ce09",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b7b8d7b4-f380-4360-9d9d-24bb530b82b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e7881a-1a33-4430-9a7f-d0b38112bb8a",
        "cursor": {
          "ref": "b03c5038-7c62-4b0d-8c2b-b41dfbc615cf",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9561eabc-fcca-4c65-899a-eebb2e6637f9"
        },
        "item": {
          "id": "44e7881a-1a33-4430-9a7f-d0b38112bb8a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "cc9fe1a6-631e-405a-95bf-da0ca5851a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9dc254-5225-4139-b1d6-361794313ecd",
        "cursor": {
          "ref": "8d375b53-737b-45db-a671-eba9eafb1293",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e8ea205c-872c-445a-8dbb-69140602b047"
        },
        "item": {
          "id": "9c9dc254-5225-4139-b1d6-361794313ecd",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "28fdd5b3-c768-43f9-af17-099c0fa1e86c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26497578-6409-47d0-a692-8a575046a9ef",
        "cursor": {
          "ref": "6feb33b2-3f57-4aaf-8095-8402f5195081",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "cd705e38-bed8-4082-a4a3-0883c97bdd2a"
        },
        "item": {
          "id": "26497578-6409-47d0-a692-8a575046a9ef",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "9e95d24d-ec85-4967-8880-7f426e5e6fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4548321-3394-4949-bf72-971fba94b1c8",
        "cursor": {
          "ref": "53d7ce33-ea18-4ea1-b87d-d3b590ef7647",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3665679a-9cc4-4c1b-b1f9-a577755b0ab2"
        },
        "item": {
          "id": "d4548321-3394-4949-bf72-971fba94b1c8",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3716152e-e717-42ee-afd3-5e2379871d08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a851faed-055f-404a-80be-5b2839f6ed6d",
        "cursor": {
          "ref": "b108b572-e70b-4310-a09e-7ac1f2c89b2a",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5f18386b-f1de-4b28-9b76-286e74e26496"
        },
        "item": {
          "id": "a851faed-055f-404a-80be-5b2839f6ed6d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7123b94a-bd37-48e3-aa65-32e761f29e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3d2d84e-46f0-419a-aad5-d0eac7e49889",
        "cursor": {
          "ref": "a1eecfbc-9694-486b-9774-e31927906ff3",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "da2004bd-3e46-42ff-b9f2-d4851a220f01"
        },
        "item": {
          "id": "e3d2d84e-46f0-419a-aad5-d0eac7e49889",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "92621c88-c674-4e49-8b35-aeffd7c0108a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e704d4-3f82-4e54-9514-68f7da7904d5",
        "cursor": {
          "ref": "d5d05ce0-d52b-4ed8-a11e-6eb995942f33",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "795f790a-a6ff-4f09-af98-7f38b815d2b1"
        },
        "item": {
          "id": "28e704d4-3f82-4e54-9514-68f7da7904d5",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b888436e-89a3-4205-adee-e62a3d8f8ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48fc4573-7ed3-495a-9275-146ea6fce0ec",
        "cursor": {
          "ref": "f9fcd4e1-7a5a-41ee-ab73-9ac025fdb3ba",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "28786bed-7ab3-4949-8d81-b1921811e185"
        },
        "item": {
          "id": "48fc4573-7ed3-495a-9275-146ea6fce0ec",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e9beb704-34f5-4c34-a803-9433020a5c3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "874d001e-ddf0-49a1-819f-e91f9030f6c2",
        "cursor": {
          "ref": "abbb1688-9404-4c48-b14e-4ce4b94d6579",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "44e6ac22-7836-49e8-9828-b2da5728fef6"
        },
        "item": {
          "id": "874d001e-ddf0-49a1-819f-e91f9030f6c2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "78eea068-9f66-4f15-8377-c92c72db7a01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b642ce8f-9037-41ec-85c5-a98b2bfe47bf",
        "cursor": {
          "ref": "e150592a-b591-4e7c-bb32-08886e1099c0",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c692fae2-6baf-4594-9e5a-12624805f358"
        },
        "item": {
          "id": "b642ce8f-9037-41ec-85c5-a98b2bfe47bf",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "590200d2-28a8-45b4-8da7-3b62fc5b9202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3362d06-ab24-4242-88a6-8317c9deb2f4",
        "cursor": {
          "ref": "b08530fe-8b8c-49bc-a9de-bbafc7581366",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d00b1b57-229e-40e8-b2c3-b51dcf3aab86"
        },
        "item": {
          "id": "e3362d06-ab24-4242-88a6-8317c9deb2f4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c82d7299-d356-4363-b409-5c2d673ceb12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9261e3fc-709c-4370-9296-6185a8f9cca3",
        "cursor": {
          "ref": "c629f40e-3682-4d7e-8ad8-8f76eb1e24bb",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "71d02ceb-0962-47ba-9956-ed5f9f2eefd0"
        },
        "item": {
          "id": "9261e3fc-709c-4370-9296-6185a8f9cca3",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "82cd0911-f549-4fc4-b462-48438d4f2a8a",
          "status": "Created",
          "code": 201,
          "responseTime": 715,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b56acc63-fb73-4a04-82e7-52fe03517057",
        "cursor": {
          "ref": "18920ff8-352d-47e2-a5cb-dce9bf4b40e6",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3184fc98-fc75-412e-a30d-12101736eccf"
        },
        "item": {
          "id": "b56acc63-fb73-4a04-82e7-52fe03517057",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7bf6da34-8709-481c-92ed-0337719faadc",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "1972ec2f-a384-4e99-a71c-e55ff7867f10",
        "cursor": {
          "ref": "64679548-67e9-4aad-9e51-8294332f8d8c",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "efabeec8-67fe-46b6-ad1b-ebfcb44678f3"
        },
        "item": {
          "id": "1972ec2f-a384-4e99-a71c-e55ff7867f10",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "35e5e845-2e52-4af6-a8db-4fa230ad245f",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "0eb80568-affa-40d2-965a-f9752a653c68",
        "cursor": {
          "ref": "22d9dd7d-11cb-49e9-8b8d-db26ba96e6d9",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f7c9c302-e5e5-4a25-b129-a237fed6bd7e"
        },
        "item": {
          "id": "0eb80568-affa-40d2-965a-f9752a653c68",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5cfacc52-fc0c-4044-8eb7-7090b7f9b145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd10a51b-0262-46a8-a2d4-15131cb98e65",
        "cursor": {
          "ref": "3895d197-320e-48b1-860d-de7e9c840b70",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6e8a2f6f-c4fd-47f0-b61c-1413883fd052"
        },
        "item": {
          "id": "fd10a51b-0262-46a8-a2d4-15131cb98e65",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "bde37e31-fea2-45f5-8ccb-475f5026aeee",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "969c2627-7de4-4663-b1c1-e39445ad29fc",
        "cursor": {
          "ref": "2363aff8-6000-4573-863b-4a63fe75ef85",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "747cccfc-bcf4-4337-a592-7482548f9cae"
        },
        "item": {
          "id": "969c2627-7de4-4663-b1c1-e39445ad29fc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "7c5bc4b4-ad4c-4eae-946c-8e76544af071",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "5c43c5dc-3120-4bdd-a76e-5ac0d0456d1a",
        "cursor": {
          "ref": "7d3a1a99-89c8-4645-a2a5-71f592cb5c1c",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e6dff5f1-f756-4f17-986b-7a4a9938c0c1"
        },
        "item": {
          "id": "5c43c5dc-3120-4bdd-a76e-5ac0d0456d1a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0a033e54-b9c5-451c-b606-19734ec7ddf2",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "b15e7f64-2db0-4d9e-8d6d-6b9fbd05ca14",
        "cursor": {
          "ref": "f756205a-9ef5-46ae-b30b-107ed0821a05",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e4062c79-1b34-4648-b329-1b4d1fd3adaa"
        },
        "item": {
          "id": "b15e7f64-2db0-4d9e-8d6d-6b9fbd05ca14",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b4192577-6e31-40ef-a623-d267ef99c346",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "d1287c66-6bf7-47b6-a3bf-8e4d811dd71d",
        "cursor": {
          "ref": "e5af2573-0025-44d1-89fa-f7c3ece00927",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a6673a4f-29da-45b5-93f5-f0031a57158d"
        },
        "item": {
          "id": "d1287c66-6bf7-47b6-a3bf-8e4d811dd71d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "08f8d059-2427-4acb-a130-71df1a821f5c",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a21d7197-d461-4c49-ab67-8bc7bb7a2892",
        "cursor": {
          "ref": "958bae65-81bc-45ad-bdb1-c369c936de0d",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5cf2ec22-e3eb-4f1c-90fa-b8b101a5e40e"
        },
        "item": {
          "id": "a21d7197-d461-4c49-ab67-8bc7bb7a2892",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f426056d-5c63-4a2f-9035-be99659abfd1",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e0452d76-59d9-427d-9d27-f77ed9881820",
        "cursor": {
          "ref": "a3a42dc8-87e6-43bd-b468-0febf1185eda",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "59af16a5-19e1-4f82-be4a-8a39875865b2"
        },
        "item": {
          "id": "e0452d76-59d9-427d-9d27-f77ed9881820",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c390ca99-e587-4c68-a29a-d80a5b1e95d8",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "e3aff998-ba4d-4e7d-b965-9d8944c2f0d2",
        "cursor": {
          "ref": "4ea4ddfc-2dbd-45e9-893d-0ca044982e80",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f39bdfd3-c7cf-4d53-b956-3b4fe5a8725f"
        },
        "item": {
          "id": "e3aff998-ba4d-4e7d-b965-9d8944c2f0d2",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "5f997320-4520-48bf-9e33-9dfecba418c8",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "dd1b5866-3935-4581-906a-350f8588a9ad",
        "cursor": {
          "ref": "bfe93bc2-e5f2-487f-9bab-5396d210df55",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2ea3b4c8-dba6-4b24-b16c-f66969a73f8e"
        },
        "item": {
          "id": "dd1b5866-3935-4581-906a-350f8588a9ad",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c78fe00d-9043-4ddb-8233-5e14da3bf83f",
          "status": "Created",
          "code": 201,
          "responseTime": 350,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3260628e-a6c8-4191-bc85-3a4f9cbe3725",
        "cursor": {
          "ref": "5c7f70d7-68ca-4ddf-9336-5f3e5b1818a2",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "9172cdfd-99d1-48df-b66b-f039994bbeb5"
        },
        "item": {
          "id": "3260628e-a6c8-4191-bc85-3a4f9cbe3725",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "197bce18-cfbf-4053-a0e3-1bcbcf6696a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c47e0b58-7bfd-4dc3-853f-0f6da5778031",
        "cursor": {
          "ref": "51289b8e-9936-476b-b020-5858c4532bc5",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e660066a-933c-4c1f-b7db-92d73da65bee"
        },
        "item": {
          "id": "c47e0b58-7bfd-4dc3-853f-0f6da5778031",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "656cf72e-eb19-48cc-a080-8bf87c34326f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aae68b6-7aba-4efa-8fa7-36f329898275",
        "cursor": {
          "ref": "7cafe754-d17e-4ec3-b862-8d0b75032a00",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "31e38d6b-3355-4dfe-b341-6a976270435d"
        },
        "item": {
          "id": "1aae68b6-7aba-4efa-8fa7-36f329898275",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6516c3ab-c2bd-40b0-813d-92bad2607868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c9f3158-4529-447b-9ddf-217cd352ea3b",
        "cursor": {
          "ref": "94f3b34a-b176-4ee4-a36c-236100425826",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1565d8b4-d1b8-4583-be29-5b7b82670239"
        },
        "item": {
          "id": "8c9f3158-4529-447b-9ddf-217cd352ea3b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "27224dd1-9b7d-4307-9bb3-092d6a5069dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0bd1713-124e-4d2a-812b-b6d9fd5ae4eb",
        "cursor": {
          "ref": "cf4e93d3-eb49-4a30-adfb-75f18363ed8a",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a1f44053-bc13-4167-b844-abecd1cf2c68"
        },
        "item": {
          "id": "c0bd1713-124e-4d2a-812b-b6d9fd5ae4eb",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ee538853-4896-4825-bd90-ba587b9d7d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d3fa5a6-0c0a-44be-a13c-0dd70b13b0f0",
        "cursor": {
          "ref": "8400b049-0cce-4960-9a6a-960bef16cded",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c0d674aa-3338-416a-b1b2-6a75bc5086b3"
        },
        "item": {
          "id": "9d3fa5a6-0c0a-44be-a13c-0dd70b13b0f0",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "23b429b5-ba1f-44c1-b3f3-9a487ade6bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e82fd1-e0de-41a0-bc10-ae8476b3f401",
        "cursor": {
          "ref": "1438a8fc-4b03-48a6-95d0-1ce761d25305",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "16da4391-7180-4fe8-9b6e-d643799dc584"
        },
        "item": {
          "id": "99e82fd1-e0de-41a0-bc10-ae8476b3f401",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5bb9b791-83bb-48ab-b0af-1f0b2d748c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bcbe7e0-e160-44d4-aacd-4d04df79016c",
        "cursor": {
          "ref": "15a97a2e-816d-45ab-8952-c4aee1a33618",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "12cf2df6-30c8-421a-b7e1-99e966ab2d32"
        },
        "item": {
          "id": "1bcbe7e0-e160-44d4-aacd-4d04df79016c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "be201aa1-1119-45f4-9ee0-e4aff6764b33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95506437-7812-4885-9fd9-8a80c2aea7c9",
        "cursor": {
          "ref": "723c97e6-5bf9-400f-b268-9e170c856e14",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "84d68dfd-483d-45b6-8c77-2a2459c85948"
        },
        "item": {
          "id": "95506437-7812-4885-9fd9-8a80c2aea7c9",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d72c3985-23c9-4dcf-9257-e46e8ff99a7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fdd47bf-712c-4798-88be-ca9470762ab1",
        "cursor": {
          "ref": "91fc0d7c-69be-4a2f-8119-dbece357f263",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "dc04bd2f-3b32-4803-a0b6-16a84a68a3bd"
        },
        "item": {
          "id": "9fdd47bf-712c-4798-88be-ca9470762ab1",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "28744c2d-6930-4130-86b3-07a0d7491813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "282cb241-2e6b-4491-92ac-2c7e93008875",
        "cursor": {
          "ref": "d8ae7b09-06d0-46b0-a79a-a2c34e13e8a9",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "02792311-3474-4408-abe8-80e16c77cb23"
        },
        "item": {
          "id": "282cb241-2e6b-4491-92ac-2c7e93008875",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f032fe06-f497-452c-ab45-2a9a00aa6c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf15e7c-23ab-4707-ab4d-67014dfd3733",
        "cursor": {
          "ref": "3933e292-d3d3-408f-8bae-4cb1d67f71dd",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d2ef03be-3925-4f38-bb85-47febc0135ac"
        },
        "item": {
          "id": "2bf15e7c-23ab-4707-ab4d-67014dfd3733",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a46674d0-8afc-40aa-85df-f9b6a3fae95d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66366170-4101-4c6e-9cac-37432946b035",
        "cursor": {
          "ref": "73db3bd1-1c95-49ed-afc5-d0397e61d800",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6c544fc0-be2b-46e7-8f83-b0dd8c722176"
        },
        "item": {
          "id": "66366170-4101-4c6e-9cac-37432946b035",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2c0a215e-92cd-4005-a5a6-1b062cf59a18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac376cc5-8a66-41e9-b3ff-5691abce86cd",
        "cursor": {
          "ref": "1acd9688-d87d-4736-bef8-51dfd486695c",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "fbec9dce-08e3-4742-882b-bc7eedb7ca95"
        },
        "item": {
          "id": "ac376cc5-8a66-41e9-b3ff-5691abce86cd",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "eaf37f61-3bd3-47f0-90eb-e84263f21f1b",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "135bb3bd-0ce5-4601-a270-b8aaba8f9a68",
        "cursor": {
          "ref": "2e60625f-952f-4e2e-9688-fea9a5cba2a5",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "dc79531a-139a-4653-8dc5-bbb9cfa88d3f"
        },
        "item": {
          "id": "135bb3bd-0ce5-4601-a270-b8aaba8f9a68",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "fb8f0410-61b2-4486-9134-a2532ce0132a",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "8ea17904-cdb9-4187-a764-d62f7c594f7a",
        "cursor": {
          "ref": "ef016c66-9617-4f04-b9f9-146c0067ba6d",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "87aed1b8-2fd4-416c-850f-198d7ed536e7"
        },
        "item": {
          "id": "8ea17904-cdb9-4187-a764-d62f7c594f7a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "edc62be4-4565-40a2-b7fe-970ca4481c50",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "a77fb474-22dd-45db-8209-64773874e3a3",
        "cursor": {
          "ref": "01c2ed02-a471-4e1f-9986-810265e107f1",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2a1a87c3-7590-46b6-8b47-bd824d0bbc24"
        },
        "item": {
          "id": "a77fb474-22dd-45db-8209-64773874e3a3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "98757595-2a3a-4421-9103-ea4b418b6ff6",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "5ae36c6d-ae3f-4714-843c-9b5481831a88",
        "cursor": {
          "ref": "d32e1273-8bf8-4400-862a-60054b14cf80",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "814442d7-6393-47e3-895b-e58ee6b71244"
        },
        "item": {
          "id": "5ae36c6d-ae3f-4714-843c-9b5481831a88",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6359ac3a-98e8-4bff-aa8c-80b20808550e",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "8056c10d-63b2-4321-bc53-d7357bd5ead4",
        "cursor": {
          "ref": "9e44f4d3-b032-4dcd-980c-520fcaff3b95",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "04565f20-6c6f-4cb6-9f87-5d94db9c092d"
        },
        "item": {
          "id": "8056c10d-63b2-4321-bc53-d7357bd5ead4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0161055f-436b-4c9e-90d3-5bd250b6b61a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38157edb-8c17-4147-a88d-7fafc461e5f3",
        "cursor": {
          "ref": "6fb21a0d-3bea-4545-9aaf-155c91257eee",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7e261be4-f1ec-40de-99b2-e658750dc1a4"
        },
        "item": {
          "id": "38157edb-8c17-4147-a88d-7fafc461e5f3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3fae7d47-79c9-4393-bcab-8128935f43c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a3d904-20cb-4721-a883-824103119703",
        "cursor": {
          "ref": "466d3179-1671-4351-874b-0273472b96ca",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "76a604dc-012c-4b1b-97e6-1426167af8a7"
        },
        "item": {
          "id": "a6a3d904-20cb-4721-a883-824103119703",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2f41616a-ee66-438c-819f-935cfde6ebe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "174240f7-fab4-4405-98e4-edf93bd57c5b",
        "cursor": {
          "ref": "c9a57281-90a6-4cb9-87a5-9aef1ac05b0e",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7a81f413-4e8e-4e9b-9b17-009e0d6c17d9"
        },
        "item": {
          "id": "174240f7-fab4-4405-98e4-edf93bd57c5b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b60e7f82-a557-4102-9477-4db9f3f69358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd17ce8d-af12-4063-b0ca-c94dde7e6e6c",
        "cursor": {
          "ref": "a03a4ae9-2455-4805-8e24-aaacdb1d8917",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d1876058-6821-45b2-89d4-f0551f6aad3d"
        },
        "item": {
          "id": "fd17ce8d-af12-4063-b0ca-c94dde7e6e6c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4719c1bd-252a-413b-aedf-be899807ff26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb4a4353-b764-4fc2-8c68-05388a9d5687",
        "cursor": {
          "ref": "53bae643-39d5-4b56-945c-521db7bbc9f0",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "67354c10-283f-4fdb-ac8d-b131c7fdd208"
        },
        "item": {
          "id": "bb4a4353-b764-4fc2-8c68-05388a9d5687",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d2c9e413-5257-431f-82ec-7c742408b182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c4b506-164a-424b-aa2c-37954de52bbb",
        "cursor": {
          "ref": "c03a7b56-5614-4fdd-b5e2-f318bcd2edf3",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c54d2363-5be6-4bfc-9904-4b03c711aea0"
        },
        "item": {
          "id": "05c4b506-164a-424b-aa2c-37954de52bbb",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a64825af-76c5-4494-b5d6-56c1fc8530f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6dfd71c-68ad-4a10-b70f-0ed9183f6508",
        "cursor": {
          "ref": "1ceb256c-2ce3-4d5e-bb9e-ecd4fe7cf15f",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "09521464-5d75-4511-ab5f-4f643de83467"
        },
        "item": {
          "id": "d6dfd71c-68ad-4a10-b70f-0ed9183f6508",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f0b5db8c-b9ff-43e9-bce7-04b1abe73293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "296a47f4-9efd-4f7a-af5b-d8b7330811b0",
        "cursor": {
          "ref": "b67f61d5-db41-4d53-b576-a96d22eb09fc",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b14b8dcd-2a00-4562-8ce3-df600234d149"
        },
        "item": {
          "id": "296a47f4-9efd-4f7a-af5b-d8b7330811b0",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "26f2092e-dde3-4a3e-acce-326853d6985b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5d46194-f594-4493-824e-d0ee458948f9",
        "cursor": {
          "ref": "2dbbdadc-6c9c-4d1e-b9c2-4a50eeea836b",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "8a05e97e-a042-43a3-8a02-0b7489bbae7e"
        },
        "item": {
          "id": "b5d46194-f594-4493-824e-d0ee458948f9",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "14ddd032-26aa-4c8c-a39a-49a2ea2ffa6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1aab992-3c0a-4669-ac47-9b2cc4371fe7",
        "cursor": {
          "ref": "c7c951d2-579c-461d-b6c9-59cca14037e7",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "69990c8d-5fe6-46e9-9920-8d3f86d4acff"
        },
        "item": {
          "id": "d1aab992-3c0a-4669-ac47-9b2cc4371fe7",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "47364c4f-f9a0-43bc-baae-9f031e983ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20a630ce-9c15-4f6b-ba0c-d8fbdbc786e7",
        "cursor": {
          "ref": "e86944e2-b6d2-420b-aab2-0e5f7ebccfaa",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7f0750e1-39be-40d6-80ec-84ca4fdeb223"
        },
        "item": {
          "id": "20a630ce-9c15-4f6b-ba0c-d8fbdbc786e7",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b6794155-f163-42ef-8dbd-46776c97d8d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8feecf4a-64cc-48f6-885a-a76253f31cfd",
        "cursor": {
          "ref": "d9bc9a98-d92b-41f8-8a2d-d4937dc1ab0a",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "59dda0f5-d40e-44bf-845c-335302b63dca"
        },
        "item": {
          "id": "8feecf4a-64cc-48f6-885a-a76253f31cfd",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0c7df4fb-182c-4d04-90bd-f75c39612cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d14a74a-4438-4002-86c2-3be4531e1011",
        "cursor": {
          "ref": "1a685281-bd80-4c62-9d0e-0d9aa4d065cc",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "89e60a66-724d-4085-9356-462aac2b3623"
        },
        "item": {
          "id": "5d14a74a-4438-4002-86c2-3be4531e1011",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e1ee7c50-22a9-49bd-9406-ea5970c03def",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5c00147-4df6-459c-b827-aaf6f1e63860",
        "cursor": {
          "ref": "336ed346-e5b6-4d77-8d3f-e23590a08801",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e09e8352-1981-497f-ac77-81d114093fd0"
        },
        "item": {
          "id": "e5c00147-4df6-459c-b827-aaf6f1e63860",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b0e03de2-f11c-4e75-8635-fd5a63ca1648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0b4133-b597-4964-b704-a18e647594c6",
        "cursor": {
          "ref": "139dd7f0-270d-4c3f-85f9-558cc500334a",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "3555c865-79f9-4e28-9631-aae3e5e473c4"
        },
        "item": {
          "id": "3d0b4133-b597-4964-b704-a18e647594c6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d201065c-8d4e-4058-9c1c-095de95df5e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5021958-97b4-40d8-b44b-01a43a2eed39",
        "cursor": {
          "ref": "327076d6-7bf9-425e-89c8-c82e854d36ce",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b55c32d0-115e-4f38-a932-ee9fa6c27a91"
        },
        "item": {
          "id": "b5021958-97b4-40d8-b44b-01a43a2eed39",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2887cac2-9525-4920-9aad-8d9f430ade4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f4fda6-0b88-4c08-8d46-fc63cbbd86de",
        "cursor": {
          "ref": "b0e209dd-0893-4fb3-9428-3330daeb3a41",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "5fedc569-ee82-41eb-9884-60fecc7b4e3c"
        },
        "item": {
          "id": "97f4fda6-0b88-4c08-8d46-fc63cbbd86de",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "93723664-5988-4ee8-a01f-c6d20d56a387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1dd37cc-9f7b-4770-bf6a-6007d64e6474",
        "cursor": {
          "ref": "ed739bff-5b28-4568-9ac5-4f8c03448d10",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e1d825df-dd76-41a2-a1ba-1931a91a199a"
        },
        "item": {
          "id": "c1dd37cc-9f7b-4770-bf6a-6007d64e6474",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5c2e7ac1-ef72-4ba2-aa86-141c069b733c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a171e67-50f2-42bf-a32a-a29b347ea3fe",
        "cursor": {
          "ref": "f70de3a4-fbc0-4c36-889c-95e2151fbb35",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "fe386f30-c4fe-490b-aa43-f2aadd397827"
        },
        "item": {
          "id": "5a171e67-50f2-42bf-a32a-a29b347ea3fe",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5fa28fb5-df10-448c-875f-65d08205f8e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a8fe967-6b9d-4b0c-ae8b-17e57d8f4a13",
        "cursor": {
          "ref": "5b8f7406-c923-4c72-9c81-e6b2616e8a86",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9f657ba6-bea5-423e-b594-35ba94de9eeb"
        },
        "item": {
          "id": "4a8fe967-6b9d-4b0c-ae8b-17e57d8f4a13",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7f1a19bc-bbdd-4a9a-96e2-d2bf9fe38afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99011ac-9c45-4919-b45d-ed838c0b451a",
        "cursor": {
          "ref": "55c92a60-4cf2-41ee-9d00-d977c21ef77e",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7ea60b6d-2ace-41e2-8214-a82f921670d5"
        },
        "item": {
          "id": "f99011ac-9c45-4919-b45d-ed838c0b451a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "639a7f1c-d96c-4cdd-bef4-0f0f40258754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca25243d-522c-4bd8-affe-4625db934427",
        "cursor": {
          "ref": "fefdedb3-1e53-467b-9279-412e54b93b63",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f3b272e2-70c8-40a9-b580-3598375ef3de"
        },
        "item": {
          "id": "ca25243d-522c-4bd8-affe-4625db934427",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0ef2c538-00a5-4ff4-88c9-ceee9a4493aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c34f8ff-563e-4d5b-ba76-7dc56b6883a6",
        "cursor": {
          "ref": "60cb34dd-da2b-4ae2-b6dd-5b263491e438",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "cbb274d9-c0c7-4c05-8970-7c59ecef3dc6"
        },
        "item": {
          "id": "1c34f8ff-563e-4d5b-ba76-7dc56b6883a6",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "fac0ac48-0367-4344-9e5a-02d6ebe64eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa5b5674-952e-4f02-8139-6880ba1a1940",
        "cursor": {
          "ref": "a88c206d-6b84-400f-a269-049d8ed38858",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "101aa2ae-a37c-43d9-b37d-3d7265bd22ba"
        },
        "item": {
          "id": "fa5b5674-952e-4f02-8139-6880ba1a1940",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2f908f2f-bad7-425e-a963-68b79c8a9500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a4a250-7d53-4162-a9c2-a4a9cc4f97fd",
        "cursor": {
          "ref": "f3630b2d-fab4-47bc-a519-e61a95813144",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9ef1b047-2841-4170-92c3-76cf52e922c5"
        },
        "item": {
          "id": "d7a4a250-7d53-4162-a9c2-a4a9cc4f97fd",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "62267575-792c-44c2-8856-feda6300e84e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c85fdfdb-d887-478c-b807-0f6bb14a03af",
        "cursor": {
          "ref": "ace0de56-ee9d-4e6f-ba26-b006c0c73d83",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f1bdf8d3-69ad-466f-be60-87fd0af43010"
        },
        "item": {
          "id": "c85fdfdb-d887-478c-b807-0f6bb14a03af",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "6a7aa598-a1d2-4759-9496-8d6b97257aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b9e08f-1dcb-4ff6-bec5-ecad2ae3e634",
        "cursor": {
          "ref": "3265b8af-6dd3-4d1d-af1e-a0d3d2073c9a",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4965de85-c030-420b-8059-b82d6a136428"
        },
        "item": {
          "id": "d1b9e08f-1dcb-4ff6-bec5-ecad2ae3e634",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "74880832-96ff-4251-8710-40e9c7d4a5ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2eeaa7-806f-4351-b5f9-25ee38f0ea22",
        "cursor": {
          "ref": "3da46198-6304-4f34-b35e-b6165e61745f",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2e407212-5038-4600-8f8a-1c6bca2ee506"
        },
        "item": {
          "id": "ca2eeaa7-806f-4351-b5f9-25ee38f0ea22",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "72c7bbb0-dfcb-4a82-bd80-ab23fec1c2c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55fcca65-4abc-4fac-a051-56dc87eee15c",
        "cursor": {
          "ref": "b3d8b938-358a-4987-938b-0adcbddc83ae",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "760332a6-94cf-4bb3-8b85-0315745cbde3"
        },
        "item": {
          "id": "55fcca65-4abc-4fac-a051-56dc87eee15c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "974b484a-e70f-4ca8-a749-49ad0144429c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1711966c-4dcd-473c-a38b-63497eb20233",
        "cursor": {
          "ref": "de89d788-d2df-485e-b507-af0cc4eb72f7",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0207834f-1df5-451b-a838-99d1a33e5fe3"
        },
        "item": {
          "id": "1711966c-4dcd-473c-a38b-63497eb20233",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2af451a9-918e-4db6-9ed4-8298c4926b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83bd3b6-74d8-45bd-af63-29d319b06712",
        "cursor": {
          "ref": "49ba77ca-4159-4634-9bc4-0d4243511f5e",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d4d1bc6c-47d5-4e63-b4e7-dab92cd46463"
        },
        "item": {
          "id": "d83bd3b6-74d8-45bd-af63-29d319b06712",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "630546b0-168d-406b-820e-01caaeb7882f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91938bcf-d6ec-4556-a11d-ff83088741ee",
        "cursor": {
          "ref": "12645b53-8a74-47b2-8bfa-ef3a97827a78",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "624b66ba-9537-4ba5-b867-987ec591c111"
        },
        "item": {
          "id": "91938bcf-d6ec-4556-a11d-ff83088741ee",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "ffd4873b-b9fd-4425-9f8b-5577c1927cde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "943b8e75-7e26-43e6-bf42-2a9ed4fb98c9",
        "cursor": {
          "ref": "88b57ed5-2785-4bab-b29e-8b271c7e6fc5",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b24133a1-7441-4e86-a802-83aeb3cfc407"
        },
        "item": {
          "id": "943b8e75-7e26-43e6-bf42-2a9ed4fb98c9",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f72a68af-119c-46f1-aea4-f91113a80006",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "436a22e3-5826-4204-9420-236a1503f17a",
        "cursor": {
          "ref": "d2563065-e7b6-427d-8509-0de2f6606678",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "07915d5c-ca25-4174-a594-0e7713fa350d"
        },
        "item": {
          "id": "436a22e3-5826-4204-9420-236a1503f17a",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "33c328ff-86c7-40fd-84ca-00d464a0c86f",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c29ac8-7344-43fd-ad20-9decf2dd58a3",
        "cursor": {
          "ref": "0c0ffa1c-0496-4e8f-b9cf-19795640b383",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f1af6d2f-961a-4715-b2c3-fea20c662ea0"
        },
        "item": {
          "id": "89c29ac8-7344-43fd-ad20-9decf2dd58a3",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8b62adcc-8b3b-4251-b668-96c37eeaeeee",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "46d7d1d2-e4ae-4ae4-9d8f-862941b8f79f",
        "cursor": {
          "ref": "9e72a973-8f19-4d39-842c-67da655bc53a",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "331e72c1-ca08-41fe-a23b-f8255be176ea"
        },
        "item": {
          "id": "46d7d1d2-e4ae-4ae4-9d8f-862941b8f79f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c254c5f7-9dbf-457a-a691-58f296794289",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "466d22e5-dcce-4fcb-9d65-03edb0ec961a",
        "cursor": {
          "ref": "29a100cd-dacf-4d44-bda3-4634e299ea11",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5cf60301-7768-46c6-9d9c-2a97432ccaa9"
        },
        "item": {
          "id": "466d22e5-dcce-4fcb-9d65-03edb0ec961a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f904f498-954e-484e-98fa-3b5b34981b08",
          "status": "Created",
          "code": 201,
          "responseTime": 351,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-06T00:37:41.674Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-06T00:37:41.674Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "39d0b7d5-c536-44a8-8483-b0d2aa0ee0e5",
        "cursor": {
          "ref": "3645db5c-448e-4881-ae82-de411cce8e8b",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f5530f1b-c1d7-47af-a933-0ab68e2d222e"
        },
        "item": {
          "id": "39d0b7d5-c536-44a8-8483-b0d2aa0ee0e5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c4e3d92c-a619-4d44-81f2-d8dd0aa7622d",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b72e856-e437-41a5-8559-ce15bd5b0ed7",
        "cursor": {
          "ref": "4dc76d88-492c-4ca4-95b4-434e3d38acb1",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "80a50937-1e52-44b2-b8a5-5aea79dbbc77"
        },
        "item": {
          "id": "3b72e856-e437-41a5-8559-ce15bd5b0ed7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "62310d4b-5bd2-4096-ad57-61797516800b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19e213b4-212a-4476-b793-ef6bc87cedc7",
        "cursor": {
          "ref": "d30184eb-beaa-4fbb-8e0f-18d8b9a98224",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2d8f9be0-cc16-4702-a8ad-07e25be1d3f4"
        },
        "item": {
          "id": "19e213b4-212a-4476-b793-ef6bc87cedc7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a7587b2a-06b2-4106-9d7d-7732c284e87d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4b256b-56ec-4c16-abae-cff8fbd45818",
        "cursor": {
          "ref": "0cc57ca3-be11-4b0a-bc11-df73d47ceedd",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9ca27768-c155-4757-aff0-8d9380787296"
        },
        "item": {
          "id": "0b4b256b-56ec-4c16-abae-cff8fbd45818",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e7f84e42-5438-4bcd-b67d-f5b1398796e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c303f1a4-e709-41be-a46c-2fad65e24aff",
        "cursor": {
          "ref": "a6de1241-5db4-4d24-964d-888c928ec55d",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "13a8a5a8-a707-45bf-a2bf-590a7259d6b7"
        },
        "item": {
          "id": "c303f1a4-e709-41be-a46c-2fad65e24aff",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "db6b6cbc-0d93-4d98-93dd-f58312eee7e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c4da5e8-4185-43ff-982d-1124c0c964df",
        "cursor": {
          "ref": "a3547e47-49aa-4774-ab1c-4115dcbb0253",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b1c954f3-1898-4442-8582-fca07a71ff19"
        },
        "item": {
          "id": "2c4da5e8-4185-43ff-982d-1124c0c964df",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "95c8c0cc-29af-48b2-9caf-61a6de15fd0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ab4c33-2b1c-46c9-b58a-bd444aad2867",
        "cursor": {
          "ref": "7c558943-c3ef-4a67-a10f-258390216e73",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5b0bfd41-c06a-4152-a3d7-6128dad35118"
        },
        "item": {
          "id": "44ab4c33-2b1c-46c9-b58a-bd444aad2867",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2c9f66a3-68f0-40ef-b67c-3fd68056e5d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4edfd85-fcc9-4702-b3f0-3c045aeb04fd",
        "cursor": {
          "ref": "e5d7db13-b346-40c0-982a-6bc9bbdd694a",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f31aa555-e94c-4fbc-b824-712c9578ddba"
        },
        "item": {
          "id": "f4edfd85-fcc9-4702-b3f0-3c045aeb04fd",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "156dc286-f5ef-45a4-b075-928ec22cf193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e1cb48-f26a-40f2-8264-8cfed3036735",
        "cursor": {
          "ref": "a5167104-3beb-4722-868b-5c112b64577a",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7d02a095-9f0f-4ea4-917d-ada65d17b9fe"
        },
        "item": {
          "id": "62e1cb48-f26a-40f2-8264-8cfed3036735",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b687e067-0cec-4362-89ac-3a2f64eb0a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e74a98-d72d-4e5d-b163-fa6876ff6f3f",
        "cursor": {
          "ref": "821557a3-6f34-4d5e-9a75-c3fc3dbfad9c",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b784fa7b-9f8e-4f6c-9f85-654ddf6313e4"
        },
        "item": {
          "id": "13e74a98-d72d-4e5d-b163-fa6876ff6f3f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "822f60af-299f-4bca-a608-7b469e0296c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b40900-0aae-4ccc-8ea3-d66f2fa738a9",
        "cursor": {
          "ref": "05819e31-ce2b-4558-9ff8-b7a08080cd59",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "06675c52-0a84-4b08-aabc-2b53b242d9ce"
        },
        "item": {
          "id": "16b40900-0aae-4ccc-8ea3-d66f2fa738a9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d2a250b6-7717-4c21-a393-2cd404ef898c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccd36bb2-7b0b-4481-ad73-094c478d1e51",
        "cursor": {
          "ref": "6f4ed7b3-c46a-4671-8fc4-d3713b5cddc0",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f6cbf619-671d-4518-b8df-05f5f0187b71"
        },
        "item": {
          "id": "ccd36bb2-7b0b-4481-ad73-094c478d1e51",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "02694030-d0fc-4ded-8210-ddfd2e720efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d9ace4-a152-48cd-8316-275138d86b77",
        "cursor": {
          "ref": "16c75a16-2178-4b20-92a7-4666b3056ec5",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0ddb7b18-a528-47e8-a8a4-3d8b6cf52134"
        },
        "item": {
          "id": "94d9ace4-a152-48cd-8316-275138d86b77",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ffae519c-8f63-416d-953e-01f9f4969c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e021159-8599-426b-bb7a-56f740a3b159",
        "cursor": {
          "ref": "556024a3-7011-4d0e-9228-7750c66a4bf4",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2ac94227-83f1-4a0e-9b81-015d51ab9af9"
        },
        "item": {
          "id": "9e021159-8599-426b-bb7a-56f740a3b159",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3f34ba6a-052e-47e3-ae35-c3c56baac313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "956db239-3db8-412c-a2d8-a42702258dd3",
        "cursor": {
          "ref": "72c8169b-a4ac-45c6-ad2b-becd667575c8",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7f73936d-5fc3-4545-812c-d60be263f21c"
        },
        "item": {
          "id": "956db239-3db8-412c-a2d8-a42702258dd3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "64696b56-4fc2-4f69-8ca0-6d1797dd2d3c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 115,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "81a1b1c3-768a-4110-8544-01f4682838da",
        "cursor": {
          "ref": "967f8ac9-3dd2-4441-9adf-7a463087a7d5",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fc50df67-2b8d-47a7-abe6-4c2135c2786d"
        },
        "item": {
          "id": "81a1b1c3-768a-4110-8544-01f4682838da",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "48d1a5c7-46d2-460c-82de-24ed1471059e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4e1d0d-47ef-4392-9a53-44038d6aecf3",
        "cursor": {
          "ref": "97f308df-5f85-43d2-b462-160685c74183",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3ed55384-9b29-4778-9160-a2b7bc7828a6"
        },
        "item": {
          "id": "bc4e1d0d-47ef-4392-9a53-44038d6aecf3",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4a33e62e-ba2f-496c-888d-f2c80cba2b6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d07d7435-92e4-4076-9703-a26c0c8767c2",
        "cursor": {
          "ref": "d6d31da5-28d5-4e9f-854c-483be76dcf3b",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a6775aea-452d-4c15-abbe-6b23cec4089c"
        },
        "item": {
          "id": "d07d7435-92e4-4076-9703-a26c0c8767c2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0726bd88-0438-47b1-a9d4-c938ee7732af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe11523-ca72-442e-8bb6-efe6527b0383",
        "cursor": {
          "ref": "d08819a0-1636-4497-b5c5-4245975583e8",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ddbff40b-2b39-4706-a764-aa2b40319051"
        },
        "item": {
          "id": "1fe11523-ca72-442e-8bb6-efe6527b0383",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "137d6536-9ae0-4efa-9f33-e6ec1d77a9c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0ca9553-fcff-48fe-9cc2-74f39fdc5919",
        "cursor": {
          "ref": "c92d79c6-4c71-4091-bac4-86ab070fd974",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "6891804c-0ded-4220-931c-0063a3e50d98"
        },
        "item": {
          "id": "d0ca9553-fcff-48fe-9cc2-74f39fdc5919",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e6947172-89ea-4a25-8f8b-8728544ff9f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f49821f-acc5-4d2d-ba20-5f897a0cfeea",
        "cursor": {
          "ref": "6907f672-d314-41bd-9bda-dcee35151000",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a29bff5a-ce52-4c92-bc71-092b823ed771"
        },
        "item": {
          "id": "1f49821f-acc5-4d2d-ba20-5f897a0cfeea",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3f899d36-2b6c-4412-8236-af387d398711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "490c42e1-1af6-4ca7-b9e2-d27c5cdb68cf",
        "cursor": {
          "ref": "685e5a13-1a99-48c2-93ec-032b78616ba7",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "78bafbc7-e37a-4479-ba71-e4d29ea4d067"
        },
        "item": {
          "id": "490c42e1-1af6-4ca7-b9e2-d27c5cdb68cf",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a258a084-ef9e-471d-82a7-b82ab1217970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b52572-7799-4517-ba5f-81abbe679723",
        "cursor": {
          "ref": "c40ee4eb-10af-4db4-88bf-3354cc8f1091",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a0a67655-92af-4729-8642-db04fadc64b8"
        },
        "item": {
          "id": "51b52572-7799-4517-ba5f-81abbe679723",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f398b461-b9f5-4b54-819b-fc1459177904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0fb0499-f412-45bc-b2e5-510425cc5cb2",
        "cursor": {
          "ref": "ef47f376-54b6-4c23-be22-e5f8b894bd6a",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "24658efc-bfd1-4616-a2a2-b30d6e77f770"
        },
        "item": {
          "id": "c0fb0499-f412-45bc-b2e5-510425cc5cb2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5090e15f-1688-48b2-88cc-a82c565c1de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a55db2d-75a9-45ba-8169-3f4289780e7a",
        "cursor": {
          "ref": "ce3b97a8-0d9f-49b8-842b-98f289011ab5",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "89992501-a091-4184-9228-f4f89b589dd3"
        },
        "item": {
          "id": "5a55db2d-75a9-45ba-8169-3f4289780e7a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "208ac1d1-6326-41e9-978c-b4f1b49b0a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d67ee36-afe0-406b-abbd-33b1059a0eb4",
        "cursor": {
          "ref": "df89ec2a-9650-4a34-8c4c-891e92b6a6f6",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0064a9a2-082e-4b10-9231-ca83c67f2980"
        },
        "item": {
          "id": "7d67ee36-afe0-406b-abbd-33b1059a0eb4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "de36b6b5-3985-4d7b-96ec-eb5d600e50d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f3b4573-d272-4a0b-8934-a3489a972a7e",
        "cursor": {
          "ref": "bfa283b0-85de-498f-8b73-8b7b8a0cbcb6",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f1c8da24-4435-47f7-8bfb-b1ecd3fea981"
        },
        "item": {
          "id": "0f3b4573-d272-4a0b-8934-a3489a972a7e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e7124974-5c35-48cd-9504-6ecca84b524f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e82471ad-6805-4790-90a6-121ddd43b016",
        "cursor": {
          "ref": "24293df1-bf21-41ef-bd86-6f616c561d65",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0e2c3bec-415a-4214-ae8f-a6e6d6a6ac4e"
        },
        "item": {
          "id": "e82471ad-6805-4790-90a6-121ddd43b016",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f8bd685e-2dab-4408-8dce-5434afbf312a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80099e7d-c7d9-442f-905f-1a885c231881",
        "cursor": {
          "ref": "c6540c93-587f-42c3-baf9-41bced35681b",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "141b9b00-1b6c-4446-b845-ce4d34e321f4"
        },
        "item": {
          "id": "80099e7d-c7d9-442f-905f-1a885c231881",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "49423bc9-82fa-4062-9e4b-11c86ed7cc00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "453f4f74-78e5-48a9-b2d7-a4edfd7a6d3e",
        "cursor": {
          "ref": "8323a129-18ea-42d6-9f46-18cec46a77c8",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "49e9358c-7d06-4d0c-ad2a-7fcab52c8a6b"
        },
        "item": {
          "id": "453f4f74-78e5-48a9-b2d7-a4edfd7a6d3e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7814c7e0-efa2-4795-b6af-a07300e3b9b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfb9581e-6036-4ead-9de8-7d3aa1cba82e",
        "cursor": {
          "ref": "25119a64-63b9-4dfe-82df-ba57d22e9838",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9d7e30ce-f146-4f85-a3bd-93d24e74b1f3"
        },
        "item": {
          "id": "bfb9581e-6036-4ead-9de8-7d3aa1cba82e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9360952a-e5a5-4823-9d0d-187ac27064be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80661a76-1478-4646-b595-1152724efa0a",
        "cursor": {
          "ref": "ab7015dd-3184-4712-ad37-3175d5a7b6ed",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1aa55bf3-b0a7-4480-bc3f-c444ade16e9a"
        },
        "item": {
          "id": "80661a76-1478-4646-b595-1152724efa0a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "153e4cd2-483f-4272-9a51-3c68698c3f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "135d376d-de09-45ac-9f63-8faddc514db0",
        "cursor": {
          "ref": "204faf65-1e87-4397-b125-ec506a537854",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0a9b452b-a0fb-4312-8b00-00e84ecf0fe7"
        },
        "item": {
          "id": "135d376d-de09-45ac-9f63-8faddc514db0",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "d888e4c9-eb16-48af-9ccd-ae544a4cc7fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f39d550-6966-4a96-81e0-dac2e6c16564",
        "cursor": {
          "ref": "27502b7a-0a4c-4531-a1d6-92603966bec9",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "db5288a0-b163-4d7b-bd25-008c6de7b956"
        },
        "item": {
          "id": "6f39d550-6966-4a96-81e0-dac2e6c16564",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "f100a751-40fc-4d90-a38c-85fd8d266e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe4d5570-a81e-43c0-80cb-be2b14a442f0",
        "cursor": {
          "ref": "ffee8d61-6781-474b-ac68-5ae2f1912a2f",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "01f074b9-2423-43f6-82fd-b564f6b0ee33"
        },
        "item": {
          "id": "fe4d5570-a81e-43c0-80cb-be2b14a442f0",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "df66e1fc-53a7-426d-a8c9-2a5025302c13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebbdd7a8-6b17-41c9-bc95-57385954b677",
        "cursor": {
          "ref": "df8e5c91-4c2f-414b-8123-9b25a57470e7",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "aed6ec09-fc65-4a8d-8765-67290d823178"
        },
        "item": {
          "id": "ebbdd7a8-6b17-41c9-bc95-57385954b677",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "4a53e883-a7f5-493d-95ab-e0ae75e05396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8988ef78-2dd1-467a-ac64-058b0b088f1e",
        "cursor": {
          "ref": "17697c4f-1265-4ba4-a4cf-14995d2c4d6f",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8e340362-4674-4fc9-8c45-f884897e98b8"
        },
        "item": {
          "id": "8988ef78-2dd1-467a-ac64-058b0b088f1e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "97c3ae2a-7c87-4b81-bacc-fdd2662e4700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d95026f-15d8-43bf-bda5-1021308ac479",
        "cursor": {
          "ref": "735aa089-ad61-48d6-a391-106cfa342cee",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4c5f7253-4ec2-4e22-99b1-1349c168fa03"
        },
        "item": {
          "id": "9d95026f-15d8-43bf-bda5-1021308ac479",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "4b9f7adf-5c8e-4c7c-8bf6-497e4e61b81c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7834bfd-5302-4e15-aa88-d5a9f27799d7",
        "cursor": {
          "ref": "048e22cd-308f-4030-b0ca-31e5c57e417a",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "368440ce-6334-4ee0-a973-41fb311d7b15"
        },
        "item": {
          "id": "f7834bfd-5302-4e15-aa88-d5a9f27799d7",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "53eff8e2-19b8-467d-9aaa-f8616a0c4266",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ae85fc0-7088-4349-a94f-018aecf5da28",
        "cursor": {
          "ref": "d1d97614-922d-46c6-980a-4e54dbaf22a3",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "3303753c-ae0f-446d-b702-45c1e6a6da3c"
        },
        "item": {
          "id": "6ae85fc0-7088-4349-a94f-018aecf5da28",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "69f1d9bb-f32d-46a4-a31d-fdaed7716825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f050a4-4978-4769-bb7f-e235f3b1b6da",
        "cursor": {
          "ref": "76319894-d0ca-45b2-ae7b-8eb2179261f2",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "929199e8-bced-4ac5-80a4-765801238d8a"
        },
        "item": {
          "id": "82f050a4-4978-4769-bb7f-e235f3b1b6da",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0c3bf920-4852-46e4-a864-bd99b323d93d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dca3957-7336-4aba-86c8-d3017eb2c211",
        "cursor": {
          "ref": "1cba7543-61ff-4ab9-aac2-b44e6e060e09",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "35c48c33-f4f5-47f0-a6e1-758340a86a9e"
        },
        "item": {
          "id": "1dca3957-7336-4aba-86c8-d3017eb2c211",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "403ab238-ead1-4786-a57b-4ff51056e68d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ccbba51-82ca-4dae-ace2-e843746f0f62",
        "cursor": {
          "ref": "f21bb3e4-ed46-474e-b5dc-6d0d6f284e05",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7b834106-7f1d-4ea0-b4e3-8b2fd2cc4c68"
        },
        "item": {
          "id": "5ccbba51-82ca-4dae-ace2-e843746f0f62",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "76cf6957-6e7d-43d2-a817-6c5761dbd4e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "043634d4-8dde-4c85-9172-98f3057574f3",
        "cursor": {
          "ref": "f1baa3cd-5e1a-4e87-b2ae-97f8dcbb43c3",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "aebb1f3a-8a59-4816-ac5d-7da86828a505"
        },
        "item": {
          "id": "043634d4-8dde-4c85-9172-98f3057574f3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "1b9cbc51-fe71-4a10-ae31-a459f162a459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e28d11-3566-46ac-9336-5c4c900c42cd",
        "cursor": {
          "ref": "745b1b46-3311-474b-bb1a-b6c899c52923",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "876b5fa4-1779-4311-ab0b-6c560968adbe"
        },
        "item": {
          "id": "96e28d11-3566-46ac-9336-5c4c900c42cd",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "98ec8be3-3b06-476c-8948-c25b439bf63d",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "0d106ea2-9482-4462-8592-662aa56c0a8d",
        "cursor": {
          "ref": "4d4f508c-33a5-437b-9de1-62c000bfe8ac",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ea0d7c0a-07e0-427c-beed-93be9393d677"
        },
        "item": {
          "id": "0d106ea2-9482-4462-8592-662aa56c0a8d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5d7e66c2-c72d-4b1e-b3de-80a80c585ec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4604a79c-099b-4e7b-92a8-515788303559",
        "cursor": {
          "ref": "fede7d1e-585d-4141-8bda-ccf1e611a067",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "bcf32202-193b-44eb-b081-584ad7149fc6"
        },
        "item": {
          "id": "4604a79c-099b-4e7b-92a8-515788303559",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a7679154-496a-43d7-aa88-8670c7d3232e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e806dc93-49aa-4b95-a77f-af02842fbc3b",
        "cursor": {
          "ref": "dec628bd-7e37-4abb-8aef-3de2c66da9ec",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f9d3cd73-78ce-4a58-b5f4-4458901ee748"
        },
        "item": {
          "id": "e806dc93-49aa-4b95-a77f-af02842fbc3b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d5ad7b13-4583-440e-a255-9785e2085586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2d95aa-0ae6-4772-a976-436a21e9f58d",
        "cursor": {
          "ref": "86e04687-ebed-4dfc-bc0f-5127d38ce603",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "409020da-a8ae-438c-bbff-5a382dccd7ac"
        },
        "item": {
          "id": "bc2d95aa-0ae6-4772-a976-436a21e9f58d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "95b62786-f26a-4b3a-8656-8a96abbe477d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4ffc0a-5697-4365-9489-d051687d91b9",
        "cursor": {
          "ref": "939b59ea-dd99-4b9b-bfa5-8d9f2a1a90a4",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e3184127-4740-4c16-937b-d78a0a76db39"
        },
        "item": {
          "id": "fb4ffc0a-5697-4365-9489-d051687d91b9",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b39dbc70-e9ef-4e67-a241-660f3786dfd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a0cf01-196f-49e7-bac7-4b02be5ebeeb",
        "cursor": {
          "ref": "319b3fa6-7e79-4930-932d-49ae160dfed8",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f6c776aa-e884-4077-87a7-b245a11bc957"
        },
        "item": {
          "id": "02a0cf01-196f-49e7-bac7-4b02be5ebeeb",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "4ddb475f-8f79-4919-860a-076bf0a3772f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9cb775-a710-4bdd-9851-4ad29a206c0c",
        "cursor": {
          "ref": "8801615a-0aa3-40ac-944c-73119c9b76fb",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b216840c-37d2-4072-ba2a-b34a41a15524"
        },
        "item": {
          "id": "de9cb775-a710-4bdd-9851-4ad29a206c0c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7c3898af-e9a2-49c2-9b16-d4f427c539ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8963b4f3-2efa-4b7e-a83b-9e5e36917999",
        "cursor": {
          "ref": "5c60207c-cd64-43f1-8925-12fc7515083d",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e007632d-5794-4f1b-9b46-8e0afe76d6e2"
        },
        "item": {
          "id": "8963b4f3-2efa-4b7e-a83b-9e5e36917999",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f41ab2ea-8694-44b2-86b3-1c44cdd3f606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e98919c1-8de7-47d2-999d-25ad2aa13fde",
        "cursor": {
          "ref": "5c7027eb-e857-4355-a514-7a1ab5e097d5",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3a1abc93-d9f6-4f7c-98ad-ed18511161d6"
        },
        "item": {
          "id": "e98919c1-8de7-47d2-999d-25ad2aa13fde",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "730d2dd4-9a79-4440-aa72-9b22b4751f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b9cb4da-5a75-483d-ae96-bdac1980bfa0",
        "cursor": {
          "ref": "b3e00a8a-e964-4728-9220-51b515271c61",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b3740c8b-994e-4d34-a883-955c316553c8"
        },
        "item": {
          "id": "8b9cb4da-5a75-483d-ae96-bdac1980bfa0",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "74693a81-0077-4ecd-b728-40bc2eff8452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e25d84e3-14ef-44bc-9ac5-c1c00359b1ad",
        "cursor": {
          "ref": "39bc126e-b767-4301-857f-94e921ae39a8",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1c9a55eb-af00-4d13-9b9b-1e4836c92500"
        },
        "item": {
          "id": "e25d84e3-14ef-44bc-9ac5-c1c00359b1ad",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "4bfbda44-3233-4933-8d6e-f403595f5573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623d2a2a-904e-4e1e-8a07-3edad6137c57",
        "cursor": {
          "ref": "aee2053a-bd2d-4fcb-a917-f69be26738a6",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a621228a-4ea7-442a-9987-4d99c7102504"
        },
        "item": {
          "id": "623d2a2a-904e-4e1e-8a07-3edad6137c57",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8797cd6d-014d-4c28-8451-cd0f1126e340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516f7966-727e-4b1f-83b3-125fd8e3a0fd",
        "cursor": {
          "ref": "401b7f13-b70d-4cfc-b8d0-aba27c8bf1b3",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "fd7378ab-019e-494f-9548-a5432c31c9ac"
        },
        "item": {
          "id": "516f7966-727e-4b1f-83b3-125fd8e3a0fd",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b15824fd-2563-4630-a709-6fc5b426a012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce9b667-f4f5-4c3d-b96d-78eecc218e14",
        "cursor": {
          "ref": "1f8c1094-09f7-446b-b33b-4e533910e76f",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "5e14de7b-7dc9-408f-88f6-9067319b07b4"
        },
        "item": {
          "id": "1ce9b667-f4f5-4c3d-b96d-78eecc218e14",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "503a543f-3d41-450a-8b2d-bc09cd30e4ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c2289f-dff2-4e75-acdf-35c994e1362d",
        "cursor": {
          "ref": "01e9ad14-e30b-499e-b90b-427cd2ec4967",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "9693915b-ed84-4215-b28a-4bf1ed940b45"
        },
        "item": {
          "id": "e2c2289f-dff2-4e75-acdf-35c994e1362d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c57d4882-68f0-46ba-b35b-e08705825894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ed497f-1804-42e3-b09c-0a632c9c86a4",
        "cursor": {
          "ref": "3164d479-880b-43d3-a924-6a130ba033fd",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e98088a8-2c63-45a9-a7d5-86bba55bb510"
        },
        "item": {
          "id": "62ed497f-1804-42e3-b09c-0a632c9c86a4",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "923d50a4-0311-4fcc-b7c0-e211173a6d75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "335930b6-1b01-4a92-a02d-e61b85aac8f6",
        "cursor": {
          "ref": "b90a515d-7af5-4bf2-a9d2-1d5c48101138",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "5545a4d1-a134-4cad-8649-db7522a90a94"
        },
        "item": {
          "id": "335930b6-1b01-4a92-a02d-e61b85aac8f6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c6d58c0f-111a-46fd-b0c4-1fc71e46a7ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cfde988-0c0b-4f3e-9971-90e32b2d2c1c",
        "cursor": {
          "ref": "d528b995-c26c-410b-b8c0-bd8af029307a",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7cc3c5fe-e590-4f9d-aed5-d4d34ba660de"
        },
        "item": {
          "id": "2cfde988-0c0b-4f3e-9971-90e32b2d2c1c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "bb540f46-749f-4de6-bb45-843d6522115f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f11a17-d7d6-466a-988c-2a1a6354639d",
        "cursor": {
          "ref": "a7848b64-6b27-4055-b9cf-e5ababaa4461",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "13bcbf43-56a6-4745-ab13-d8a15fbc2491"
        },
        "item": {
          "id": "e0f11a17-d7d6-466a-988c-2a1a6354639d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b9f90d84-d8c7-4c34-9995-018a42a2095b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8006e1cf-6650-4c1d-8738-1c9b2daf3e6c",
        "cursor": {
          "ref": "c4923563-c43d-459e-842d-90fe14184847",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "52ada96c-13e7-4faf-ba08-91c23ce2810a"
        },
        "item": {
          "id": "8006e1cf-6650-4c1d-8738-1c9b2daf3e6c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "366f5c74-b2af-4225-bbab-95e03eaf3dc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11736a03-6f35-4e73-ad90-69b07dfc8028",
        "cursor": {
          "ref": "33de2e6d-6556-4d69-b8fd-4aa98f84508b",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "db9b7bf2-ee46-4d6e-b0a4-60158f48363a"
        },
        "item": {
          "id": "11736a03-6f35-4e73-ad90-69b07dfc8028",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f0d5b23d-8902-4aed-8138-fd669d47d736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c764a0af-3548-47a0-aed9-e84d55088aee",
        "cursor": {
          "ref": "fddc4fa1-2512-4312-a8eb-c91bdd607698",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f56e0a12-5c17-4c5d-8548-f7c6e99e9d45"
        },
        "item": {
          "id": "c764a0af-3548-47a0-aed9-e84d55088aee",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "2f46ac15-28c9-4dc1-a711-ae61f8a6cc19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d21696-69bb-40d9-8c95-75d08d154fc2",
        "cursor": {
          "ref": "cf9d4c0e-cccf-48cd-8fe7-ba6930111d45",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0056f827-3e9c-4eb2-8010-a41b442df694"
        },
        "item": {
          "id": "a6d21696-69bb-40d9-8c95-75d08d154fc2",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9e381d6e-2aef-40be-ad14-b8bdd597cc83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ae3f2ad-f12d-472c-a004-b5625f991374",
        "cursor": {
          "ref": "e1db648f-4fee-485e-9589-b87bee64949f",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "7bf83f5f-4422-4bf5-a66c-b54afe98b2c6"
        },
        "item": {
          "id": "8ae3f2ad-f12d-472c-a004-b5625f991374",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "3582d850-44b3-439b-862b-3781ed9d0588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "291f96cc-7544-437c-80c2-9542ed50065c",
        "cursor": {
          "ref": "306eaf63-ec9d-4e6d-8d8b-b777be0b598f",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "cf1575da-13ed-4eff-b213-2d3f88979141"
        },
        "item": {
          "id": "291f96cc-7544-437c-80c2-9542ed50065c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1067ccf6-84af-4672-9ad6-5921bc60eafb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4899cabb-69ba-4f49-a2c6-d2c25dc371f3",
        "cursor": {
          "ref": "92b9b924-533d-4d3a-979c-e0c76f2b0e30",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b8500491-3273-4f04-ac24-2ecf9cf79edd"
        },
        "item": {
          "id": "4899cabb-69ba-4f49-a2c6-d2c25dc371f3",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c17b7aa8-5544-41e7-a61e-5917705b4956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcac3733-5255-498e-a354-17942dbfb9b1",
        "cursor": {
          "ref": "14766fae-79bc-4560-aa42-5a70bad0794f",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "38d54162-23ff-45c5-8255-5b729d623654"
        },
        "item": {
          "id": "bcac3733-5255-498e-a354-17942dbfb9b1",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "487386ed-b96d-4d8c-8133-7467e01d1cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ebe7917-7c3a-4e5d-b10d-8968b2225dcc",
        "cursor": {
          "ref": "cd4a2618-83ae-4123-9576-9e5c66783877",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7354c46b-f4ef-4dbc-b022-9819a417c4a8"
        },
        "item": {
          "id": "6ebe7917-7c3a-4e5d-b10d-8968b2225dcc",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "93590c33-ec8a-4f22-a396-da72ade635f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef1d3bcb-793a-4626-81ba-d4c35e0782e2",
        "cursor": {
          "ref": "0868c385-1a38-4b2f-99d8-645fda0dd6f3",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "70068cf1-6d2d-4e93-b3c8-a75f8242f9bc"
        },
        "item": {
          "id": "ef1d3bcb-793a-4626-81ba-d4c35e0782e2",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8c9d84af-d7b2-469e-991e-b5259d9e5619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2697ba58-d54b-4cb5-9131-92d74ebb5160",
        "cursor": {
          "ref": "aac20e73-a3ed-4a39-8e65-e4f14f99188c",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5df69539-82ca-46d5-9c22-c8749981f95f"
        },
        "item": {
          "id": "2697ba58-d54b-4cb5-9131-92d74ebb5160",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3080b7ed-4e11-485f-b938-4ed50aeadbff",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "72822ef6-519f-4983-99d5-18cf8a446b69",
        "cursor": {
          "ref": "0a679dd7-d09d-49a6-950b-b4ad7b7c6429",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9a9793b2-1dcb-48fd-b874-c859b7c71fb1"
        },
        "item": {
          "id": "72822ef6-519f-4983-99d5-18cf8a446b69",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "4e1aec70-8c6e-46b4-9965-8d838e26a27e",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "76b0da84-c330-49ae-a524-0b0220673d84",
        "cursor": {
          "ref": "5dff9545-b1cf-4feb-bcde-5e076b6878c4",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "04fc3224-e158-4f41-8114-29ad523d35c9"
        },
        "item": {
          "id": "76b0da84-c330-49ae-a524-0b0220673d84",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f1a577a3-4528-4dde-ba86-dcdb33baacfe",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "1b0f6a27-5c59-458c-ade2-91effab27560",
        "cursor": {
          "ref": "95b3e05a-48ce-49a5-82d0-02e9a00f7c26",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "37755c79-774c-40b3-92c3-a6403685b948"
        },
        "item": {
          "id": "1b0f6a27-5c59-458c-ade2-91effab27560",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5e4acf77-89d7-4435-ae6c-15d42bdfc186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32282aea-6727-4ca6-ae78-9150300fc9ea",
        "cursor": {
          "ref": "78466f50-f627-4745-9f3c-fc349442b402",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7a214766-bba4-4595-a50a-b8e8b5f6b303"
        },
        "item": {
          "id": "32282aea-6727-4ca6-ae78-9150300fc9ea",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "97109e4c-8db7-4bb2-a5e7-16979b8a532a",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "7262b42f-df7e-462b-8792-f8169020cedc",
        "cursor": {
          "ref": "36a1edab-2bdc-456b-93c9-f74de9108e14",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f551392a-0391-4924-947d-1602727a768c"
        },
        "item": {
          "id": "7262b42f-df7e-462b-8792-f8169020cedc",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "28422565-56d1-4309-b3e9-5f679e010f0f",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "da5f9a01-ae74-4303-8dac-cf7fcc4087ff",
        "cursor": {
          "ref": "056f0a7f-55f1-441e-aaaa-929352c5e5c4",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "55417920-8192-46af-b9f9-019c2af8008c"
        },
        "item": {
          "id": "da5f9a01-ae74-4303-8dac-cf7fcc4087ff",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f613ec55-1512-4400-aaee-bef2a01f3909",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "c820b7da-c24e-4625-9d71-608b5dafa666",
        "cursor": {
          "ref": "d03ee276-a6d3-4d03-be5b-64a5e3d6ee8a",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "61f30c0c-7909-48c9-89e7-5bd2f85c175a"
        },
        "item": {
          "id": "c820b7da-c24e-4625-9d71-608b5dafa666",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d1c152af-6183-4ce3-9448-dd44c91d5fa7",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "3d77a153-5233-457d-a23a-dd2e0ca2119f",
        "cursor": {
          "ref": "0630cdf4-6878-441a-b697-327149945b90",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b37a461d-5c4a-4122-b052-c1235678ed43"
        },
        "item": {
          "id": "3d77a153-5233-457d-a23a-dd2e0ca2119f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "54e39d87-8487-48d6-bc0d-cf240487a63b",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "8f03ff4e-49d8-4a89-98aa-41be03a947a4",
        "cursor": {
          "ref": "c2e6cb53-20c7-4b2e-9135-0e127c405ef3",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f2908199-32cb-403a-af87-c23c5bb28bd1"
        },
        "item": {
          "id": "8f03ff4e-49d8-4a89-98aa-41be03a947a4",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1a4bdda4-e52f-4b0f-9bd9-2539a31a0e8c",
          "status": "OK",
          "code": 200,
          "responseTime": 211,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "51cce03e-ae0f-4575-b847-50ba3515a2e5",
        "cursor": {
          "ref": "4d9d8347-ce75-4ca9-866a-518e50e1554a",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "37e6ae1c-8dd0-4bf3-9eff-7468f6cfc583"
        },
        "item": {
          "id": "51cce03e-ae0f-4575-b847-50ba3515a2e5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "fba1927d-65b6-4b6a-869a-90e771c57cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7391a7a2-e9d6-4bd4-9934-291502c6776c",
        "cursor": {
          "ref": "e0743a9c-1239-45fc-aacf-9d5214a1a90e",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8efdd305-68b4-4e55-a24b-f12d89aa0b15"
        },
        "item": {
          "id": "7391a7a2-e9d6-4bd4-9934-291502c6776c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "7d90a34b-0532-4ba8-b74f-15b20ae6160a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c15d46-fda1-431f-954b-582d0603bb44",
        "cursor": {
          "ref": "f67cb56e-c3ed-483a-b92d-2dd9ad555115",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2ba0f4dd-7961-40a2-8ae8-47f021e4efe8"
        },
        "item": {
          "id": "93c15d46-fda1-431f-954b-582d0603bb44",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "2c1f44d2-61c2-4c9c-a6a6-1f2f18909c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c046d90d-1a63-400a-9bd6-077827d2afa9",
        "cursor": {
          "ref": "8ed82491-f5af-43e5-aa81-fe511fa05941",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "664fee77-68f4-4b8c-8f0c-9b963d620de0"
        },
        "item": {
          "id": "c046d90d-1a63-400a-9bd6-077827d2afa9",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7cb474a7-0a56-4ae0-bbde-127d07496bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b956fc-2e79-40eb-91be-0228007bdbe9",
        "cursor": {
          "ref": "7094a535-d690-4fd2-9473-033cf3ec642e",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ec66849d-1805-443e-8747-e2c4cdceae93"
        },
        "item": {
          "id": "74b956fc-2e79-40eb-91be-0228007bdbe9",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "faa80bae-bbc6-4990-90e8-e8da63862d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715137c9-33a8-4375-ad39-f5685130254a",
        "cursor": {
          "ref": "9981b5af-724e-4545-a967-224a250d42a0",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "689339f1-f240-4eed-8ae1-976561837f86"
        },
        "item": {
          "id": "715137c9-33a8-4375-ad39-f5685130254a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "7c0ee2dd-4c46-4101-b59d-13d9986476fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80653894-ff12-4431-b909-39242033caf2",
        "cursor": {
          "ref": "41376ed4-ded4-4959-83ce-3839d15b75ef",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "18a755e8-c069-44ce-8463-82cf1277667c"
        },
        "item": {
          "id": "80653894-ff12-4431-b909-39242033caf2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1f06e820-f307-4a63-8f79-58d183855103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e0c226-f1c7-44e7-88dc-d5eacedca548",
        "cursor": {
          "ref": "ea0a2aa6-0f05-4e90-b267-52f29ae42288",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0a8cce70-4830-4425-8f68-54b7ed1bba70"
        },
        "item": {
          "id": "55e0c226-f1c7-44e7-88dc-d5eacedca548",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c55ffaec-f57f-4e19-a146-cf420d7483e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34137b11-ca54-45bb-a11e-ca3acd1c95b2",
        "cursor": {
          "ref": "4fd9cdd8-c31c-4446-a8f9-8c6d7be96c24",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8efc8aab-1a88-43d4-8216-ed8506a0d834"
        },
        "item": {
          "id": "34137b11-ca54-45bb-a11e-ca3acd1c95b2",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "23d9dc28-1ef2-4b39-a4c5-8f39dbe938a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ab4cbf-0dac-4535-ac10-0a0dc67ca97c",
        "cursor": {
          "ref": "89d2d280-ea74-42f4-a6f6-c03b204c3a6c",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a90d912f-e3a8-4826-a028-1a19d9054409"
        },
        "item": {
          "id": "87ab4cbf-0dac-4535-ac10-0a0dc67ca97c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ff3cc561-cc95-4475-8f62-c1ee9fe4cbba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cceb862-34c9-4b21-860c-117c3c780ce4",
        "cursor": {
          "ref": "16813a44-ab27-4251-add2-2ee9266f0b17",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "999f9c0b-16e7-400f-9d84-0d76ce966b02"
        },
        "item": {
          "id": "9cceb862-34c9-4b21-860c-117c3c780ce4",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "094ca881-112b-4591-b627-a86c0ae87343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79e10753-e4e2-4d8b-84e6-06ff2ee22bdd",
        "cursor": {
          "ref": "ee8abfff-0582-4778-8e31-f134c13bffec",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "68db6afb-8b96-48ee-a64e-d6e479b95005"
        },
        "item": {
          "id": "79e10753-e4e2-4d8b-84e6-06ff2ee22bdd",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2ef7d098-dd39-4fa5-bc7d-4bcd74810692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d02a28-2adf-48c7-b942-23c09db73523",
        "cursor": {
          "ref": "fa7b728c-7f09-4203-92a3-2e1d18f5f4b8",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "904cc47f-1ebb-481b-a01d-8affe918001f"
        },
        "item": {
          "id": "43d02a28-2adf-48c7-b942-23c09db73523",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "91318758-4935-4408-a1d6-abc63537a675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385b5404-5eaf-4051-8e26-1e4ab33cc778",
        "cursor": {
          "ref": "ec8fda7d-f41e-4792-9c8a-74bda86a37f3",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6d262020-1741-4011-bbe5-986fb65e51ae"
        },
        "item": {
          "id": "385b5404-5eaf-4051-8e26-1e4ab33cc778",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b98435bd-c955-459e-89d0-f27318693fc9",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "495f4c9a-d8b6-4cb9-ba9b-74f94de97810",
        "cursor": {
          "ref": "f54f28b9-ed89-4529-a11b-430712402daa",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "bda97f40-b648-4ce1-87a9-44810ff9a748"
        },
        "item": {
          "id": "495f4c9a-d8b6-4cb9-ba9b-74f94de97810",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6e5c1a89-6cb8-4720-b7db-ef9731cf8f71",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "b215eb5a-99d5-4633-8529-6cd1b20126f4",
        "cursor": {
          "ref": "53761a76-6571-48d7-b18b-66a5e4b5d5ea",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1127f08e-fc66-4f99-b6bc-666ee371df1d"
        },
        "item": {
          "id": "b215eb5a-99d5-4633-8529-6cd1b20126f4",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4fc4f46f-a197-43d0-87c8-bc11da7302ca",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "138bc3ba-d6be-46a9-a8de-327ad7fb8b09",
        "cursor": {
          "ref": "94b1e143-6ac0-4ac3-ac21-cf4fc2486cd4",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "96ebf01e-a7f1-40b2-aa25-c8fd83cfce94"
        },
        "item": {
          "id": "138bc3ba-d6be-46a9-a8de-327ad7fb8b09",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "527ec84c-47ab-4578-9b00-06a7c1e4e4b1",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "7f7a2574-7ccf-41ad-848b-78a2077f49d5",
        "cursor": {
          "ref": "162123c8-a305-43d3-a45c-cacd9010bb37",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "87ed7513-45c6-4c38-b224-557f1d826562"
        },
        "item": {
          "id": "7f7a2574-7ccf-41ad-848b-78a2077f49d5",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "65e75b47-f8d4-4cc5-b68c-25e728db2954",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "f142250e-3d33-46a8-bbb6-270cfd9a293c",
        "cursor": {
          "ref": "8af312fa-f5c6-4316-bed9-0249088aa212",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "bc2fa22e-5a68-48bd-b4c3-864f81efbc7c"
        },
        "item": {
          "id": "f142250e-3d33-46a8-bbb6-270cfd9a293c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f02da948-9d1c-442d-9550-e7b48f5abd08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e22aa467-1114-4056-9dd4-6010b2abf031",
        "cursor": {
          "ref": "39374959-5070-4be6-a0e0-d48ac1456cc3",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f1975434-ba65-41a9-9ec5-08bfc7c7d878"
        },
        "item": {
          "id": "e22aa467-1114-4056-9dd4-6010b2abf031",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "94ac50f0-0dd6-4ec9-afe1-11f4472113c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6c959b9-1d25-48d1-95f7-1a6cde7df1dc",
        "cursor": {
          "ref": "49dc4ec2-653c-4591-8848-848df396a2b7",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "29b6a851-3ead-49d2-946f-a9cfcda0afa6"
        },
        "item": {
          "id": "b6c959b9-1d25-48d1-95f7-1a6cde7df1dc",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b2e3c2e0-38ac-43fd-9e09-60c8873f0c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d59324-b445-4c10-9784-e3a6331abada",
        "cursor": {
          "ref": "68f6f6f4-fbbb-440c-b590-51378abbbfcd",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "43075f56-bd17-4211-8931-97e069289503"
        },
        "item": {
          "id": "06d59324-b445-4c10-9784-e3a6331abada",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4a64a943-3780-4aa2-adf1-c162f4db3569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a47b50b0-c39b-489b-b72c-9a9785fa79ce",
        "cursor": {
          "ref": "f50533db-cf2c-48d0-a8e0-21661f5f295a",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "fb0c2606-b11b-4068-b2f5-c1a83945fce1"
        },
        "item": {
          "id": "a47b50b0-c39b-489b-b72c-9a9785fa79ce",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ca807df3-b992-47d0-a43d-eedd9dda8eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e669289-3911-4661-ac8d-2cff21a5f1ca",
        "cursor": {
          "ref": "0e968d93-7161-454e-9192-d362901edcc0",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "3c50c503-18f5-4913-9460-80e05b968f3b"
        },
        "item": {
          "id": "2e669289-3911-4661-ac8d-2cff21a5f1ca",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "882b353a-18bd-4e8a-b11b-0c4597c9fe42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6598658c-14dd-4093-aeb3-3cce75fcd521",
        "cursor": {
          "ref": "c91a33ed-6dcf-4e3a-a3d9-19841af9a6df",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c01134ab-6001-4aec-8691-39104dddcaeb"
        },
        "item": {
          "id": "6598658c-14dd-4093-aeb3-3cce75fcd521",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "34dc66a1-e6d9-4ba7-b0d2-ce3b865b065a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa5cfee-df88-41b3-83dc-16848f3c9216",
        "cursor": {
          "ref": "2133bd88-f1a2-4eee-940e-3857a5bd51ea",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "14fcf762-d7c0-4b01-808e-179bf8ecfe62"
        },
        "item": {
          "id": "9fa5cfee-df88-41b3-83dc-16848f3c9216",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "740c61b2-6f18-4b00-af42-1aacb6975e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de42ff1-a3e3-4104-8e0a-27cc4440653b",
        "cursor": {
          "ref": "57a66204-512b-45be-81ff-6d89ac4f21e1",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "924a78a4-9f94-4eaf-b8ef-17feb0b76907"
        },
        "item": {
          "id": "2de42ff1-a3e3-4104-8e0a-27cc4440653b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c0771eff-e2bb-4244-a7d5-96b044a46ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdff4a68-d8e6-4255-be97-67ce1f2d73e5",
        "cursor": {
          "ref": "c5f1d874-aee6-4275-8547-8a57f0ae595b",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "025ae9a1-e4d9-4ea3-abcc-d53cea195e72"
        },
        "item": {
          "id": "bdff4a68-d8e6-4255-be97-67ce1f2d73e5",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "746b2d3f-48d5-47d7-92da-14c6e217463e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b618b064-6518-4a11-b67a-ddb0a647962f",
        "cursor": {
          "ref": "cd7601d0-e97b-4f70-9a48-5435a7635f13",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "90f3a411-2b4b-40cf-a736-87b2626452d9"
        },
        "item": {
          "id": "b618b064-6518-4a11-b67a-ddb0a647962f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e0865d3f-c2d0-4bea-a17f-a62a50e49e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051d703c-54e5-421e-8411-fd23cf03bde3",
        "cursor": {
          "ref": "1c3307c3-262a-4b2f-892b-b364c36a3303",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "154c4e5f-595a-4cd0-90a0-37e3c3ab0f1e"
        },
        "item": {
          "id": "051d703c-54e5-421e-8411-fd23cf03bde3",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c857ba84-765e-41d4-a980-d911ca07ec5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8344cbb-6ef1-4eac-854d-0713d95d6c95",
        "cursor": {
          "ref": "e76e7065-d1b4-4f0d-93a7-54aeb475e786",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "92129284-5656-4161-b082-e5faf7f24e04"
        },
        "item": {
          "id": "d8344cbb-6ef1-4eac-854d-0713d95d6c95",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "28e4c698-2c5d-4eb7-a2f7-970202e6d8d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f84cec-0327-4b21-8bc1-882a83127f78",
        "cursor": {
          "ref": "d29026a5-654e-4d0e-a0ce-d6db2d598c8a",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "fed2b11c-6c27-4ff5-96d8-2938942c8611"
        },
        "item": {
          "id": "c3f84cec-0327-4b21-8bc1-882a83127f78",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "8c9895a2-28ab-44cf-b013-096d9e2bf64a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc9f750-bb8c-41af-a8e1-5a1717be30a5",
        "cursor": {
          "ref": "771b2e91-7709-4432-b02d-afced374bc52",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c3784c10-4afd-4685-ade4-c2481dfda2c8"
        },
        "item": {
          "id": "4fc9f750-bb8c-41af-a8e1-5a1717be30a5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "8a235f56-43a2-4c8d-a7c0-bc861273866c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68741ab1-ac7e-4bc2-9ac6-436a40a66135",
        "cursor": {
          "ref": "8bf35b53-3662-4150-87db-847625be3f14",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3b9517c5-4dd8-496a-8588-dd0901c9a738"
        },
        "item": {
          "id": "68741ab1-ac7e-4bc2-9ac6-436a40a66135",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "98df2617-b22a-4dcb-892e-c2f9f48e56a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64534f53-5db8-4c3a-b74b-b5796e208fd4",
        "cursor": {
          "ref": "7cd5236b-122c-434c-9414-b7435d15d472",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3d7aceaa-29cf-4e94-9a0d-8fcbec2c733c"
        },
        "item": {
          "id": "64534f53-5db8-4c3a-b74b-b5796e208fd4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e5fedcbd-584d-4800-8627-3e90567a2a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c1d281-9211-4a61-b262-03dc17bfbbb7",
        "cursor": {
          "ref": "f91eecd0-8e1a-4f51-be57-4e5bc2d30fdb",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "119bfe13-9991-4c3f-bcab-2a615f67d5d2"
        },
        "item": {
          "id": "b8c1d281-9211-4a61-b262-03dc17bfbbb7",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7fe80adc-a2cb-4199-bd9b-57c6f1c3e51d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e06eae6c-8959-4c68-b29a-5fe0eea7346c",
        "cursor": {
          "ref": "1a072657-bd4d-455d-a417-7be3e65817bf",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3f158ebe-f4a0-465a-a49b-9470b375ff9f"
        },
        "item": {
          "id": "e06eae6c-8959-4c68-b29a-5fe0eea7346c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "86dee493-e4fe-477f-b064-b7442d5e5833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1115cad-5643-4c0f-9097-96d231b7e763",
        "cursor": {
          "ref": "ee7182d5-46c2-4690-8d72-1b81b503c719",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b2c82367-6e41-48af-a6fb-b0e5dff56f9e"
        },
        "item": {
          "id": "e1115cad-5643-4c0f-9097-96d231b7e763",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0c7175b0-92bc-4a8a-ae0b-8baeeef1e14e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a33b440-cb5d-4576-bf14-4febb4f17fc7",
        "cursor": {
          "ref": "ec8c87c9-fcdb-449e-8577-2d086a9be6b4",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8f75750b-dc2f-41ae-873d-3595013b587b"
        },
        "item": {
          "id": "4a33b440-cb5d-4576-bf14-4febb4f17fc7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f0c37ec3-3ff2-4067-9f3c-3b9fd57dcb82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d31761c2-3d1e-4cba-b7d6-1f1c1da4e3fb",
        "cursor": {
          "ref": "0fe3b857-ee59-4244-bfbd-62037f1fae04",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "bd75a4c4-0a58-4f0b-a45e-2077a1b38f61"
        },
        "item": {
          "id": "d31761c2-3d1e-4cba-b7d6-1f1c1da4e3fb",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c54944c3-57b8-4aec-8c24-bd98e1c6afa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2109a47e-7b6a-42eb-a872-73d2999a7b75",
        "cursor": {
          "ref": "2350a3e8-20e7-4d3d-8364-ad5cb92fb2b4",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1cc64640-f6f7-4bad-93a5-afbb0e9d7d23"
        },
        "item": {
          "id": "2109a47e-7b6a-42eb-a872-73d2999a7b75",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9898e9bf-3298-44b5-a22d-4a366d198361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7acf1167-8364-465f-9cbf-c5ac034cdfc7",
        "cursor": {
          "ref": "96b8846e-1769-46a1-af14-2b9fac9be81a",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "07e99fa7-7619-484c-9e1c-dc00ea432f7d"
        },
        "item": {
          "id": "7acf1167-8364-465f-9cbf-c5ac034cdfc7",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6301ba30-09b6-4da1-b55e-624787300369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1dc345-88b9-4f65-b998-92d413ca4895",
        "cursor": {
          "ref": "5958e5ea-c6bc-4727-8eff-83ed53a194a4",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "16410847-6f4f-4a0d-9c12-60718194b766"
        },
        "item": {
          "id": "9c1dc345-88b9-4f65-b998-92d413ca4895",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1792e137-4aa3-4667-9f18-1427fd399b0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2938adea-15f0-418c-b7af-3c06d95870d4",
        "cursor": {
          "ref": "a04e1d9a-2030-4693-80f2-a48d4e7ee79d",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ca57ec3e-112f-4484-8afe-87a88ac72ee5"
        },
        "item": {
          "id": "2938adea-15f0-418c-b7af-3c06d95870d4",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "750efb3c-7f76-4738-9598-1420363a6a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7e1f95-a5c8-4282-8660-7fdc48096868",
        "cursor": {
          "ref": "4e0707b2-0ad3-4267-9236-13859a2cdf72",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "eba550ac-21e7-4c96-8122-dc0b9851a6fa"
        },
        "item": {
          "id": "5d7e1f95-a5c8-4282-8660-7fdc48096868",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c6f70466-b364-42c5-99c5-0bae9f4f2ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3df000-320d-4df0-b181-25c406eed644",
        "cursor": {
          "ref": "11ad23c0-897a-4e39-bc57-7bc2339dab1c",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "cdb6dbc6-cf93-49ed-9fd7-00181e27fc87"
        },
        "item": {
          "id": "bb3df000-320d-4df0-b181-25c406eed644",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b36c101e-efb0-4e02-abc6-596a3598e28a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5229ecf-787b-4d0c-a720-61ba934c1732",
        "cursor": {
          "ref": "960c98c4-e0ea-43b1-9e29-bac5d611b4f2",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "517e4c5f-8866-42d7-8ebb-4e26b6e978ea"
        },
        "item": {
          "id": "c5229ecf-787b-4d0c-a720-61ba934c1732",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "868c36b0-16c2-4fec-9322-c3ca35acae10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af7ded1-1f6c-4190-969e-66e76692ade0",
        "cursor": {
          "ref": "13c25641-f229-4207-b104-96e2bf3b2a49",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b65af34e-4dd6-498b-b437-dab59d4000ed"
        },
        "item": {
          "id": "6af7ded1-1f6c-4190-969e-66e76692ade0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "492554f9-99af-4948-89f2-2acf1180a1d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea9e1f5a-5b2d-4443-9a03-eabb9bc0934b",
        "cursor": {
          "ref": "7dd2e102-766c-491a-bf74-ce3f3c6e5d49",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4918e0fc-c017-4fc3-91d0-eb594141f34f"
        },
        "item": {
          "id": "ea9e1f5a-5b2d-4443-9a03-eabb9bc0934b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c12b7cd8-8ac0-4230-ae8c-937b1398284d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea58f336-562e-4298-9c8d-5d31369fa831",
        "cursor": {
          "ref": "a923d30a-70c6-4547-8013-fd22c642be17",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ddbf8c15-8ff1-4267-96d9-6a3edb1a6b69"
        },
        "item": {
          "id": "ea58f336-562e-4298-9c8d-5d31369fa831",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e0cc49a0-7a62-4bb5-a9ce-accb197dbe2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9617f6aa-4fb4-4e76-a60c-b0e4e581775b",
        "cursor": {
          "ref": "6c5b53d8-cdb2-4699-9e34-aaaf2a1b6d7e",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "9ed172e8-127c-42f6-a96c-b30afbb7cf1d"
        },
        "item": {
          "id": "9617f6aa-4fb4-4e76-a60c-b0e4e581775b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4a8e3377-cee9-4e4e-86bd-2de26c7260ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0f2fee-48be-4280-bf3f-dacdfd9047ca",
        "cursor": {
          "ref": "8c9b788d-d4ae-4b00-912f-69484fe6342b",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c86290a2-08c8-42cb-ad1f-594224437871"
        },
        "item": {
          "id": "0b0f2fee-48be-4280-bf3f-dacdfd9047ca",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "314ad3ca-b654-4a17-aa60-e081d091e1c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd53ebab-fc44-4821-b5f5-0363b4571838",
        "cursor": {
          "ref": "e01c19e7-3cbb-4274-872d-b40b8f7b13ce",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8e45ecb1-982e-49f8-a095-d3c7c197b485"
        },
        "item": {
          "id": "dd53ebab-fc44-4821-b5f5-0363b4571838",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "03031a3e-3dd6-4cae-b1d0-77f69d6b96a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf77e38-23c7-4100-89f5-9cf33fb6a0ad",
        "cursor": {
          "ref": "72a2b57e-6740-44ed-9914-ea4768c3778c",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a79e5845-50b0-4c17-8ca9-4a6360812dc2"
        },
        "item": {
          "id": "cbf77e38-23c7-4100-89f5-9cf33fb6a0ad",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "12ac58d4-b742-415d-ae7e-92c31e1e9153",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "99cf73fb-3d56-4e5e-9462-825faa0bd270",
        "cursor": {
          "ref": "db0ab31b-f5bc-41be-ad39-052fdfc14c3d",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fde8e771-2916-4af1-9a50-3f6783c47262"
        },
        "item": {
          "id": "99cf73fb-3d56-4e5e-9462-825faa0bd270",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d92a5c74-6580-4d3f-9c92-55f78700566b",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "88e8ea9e-3aaf-4bf2-94aa-aba2942e9156",
        "cursor": {
          "ref": "1d6be51a-bdb1-45fe-8386-886cf5508c45",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6e95341c-345f-4479-b993-1b95bc9fd03f"
        },
        "item": {
          "id": "88e8ea9e-3aaf-4bf2-94aa-aba2942e9156",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "58889d00-37a3-42ba-a02c-507a045c501a",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1e21c5-123b-4fe6-9c32-408aa3c962ff",
        "cursor": {
          "ref": "cae3fe9c-b7cf-40c3-8e1d-c5bfe6f17459",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "910965e3-918e-4dca-b73d-d8b68e7b3fd1"
        },
        "item": {
          "id": "fb1e21c5-123b-4fe6-9c32-408aa3c962ff",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "56631b91-ad77-4b3d-97c6-cce288f73749",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1e21c5-123b-4fe6-9c32-408aa3c962ff",
        "cursor": {
          "ref": "cae3fe9c-b7cf-40c3-8e1d-c5bfe6f17459",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "910965e3-918e-4dca-b73d-d8b68e7b3fd1"
        },
        "item": {
          "id": "fb1e21c5-123b-4fe6-9c32-408aa3c962ff",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "56631b91-ad77-4b3d-97c6-cce288f73749",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "186fbedb-312f-4a7d-8f28-573738a5b7d9",
        "cursor": {
          "ref": "56012ae4-14a5-493c-a961-1a0243da0fd8",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "bc2253db-953c-446b-afd4-029decb1a74b"
        },
        "item": {
          "id": "186fbedb-312f-4a7d-8f28-573738a5b7d9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "cf78358a-f8e8-4d0b-9c89-9591e143674f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f31d308-7b70-4fbf-8126-095e7d6614e8",
        "cursor": {
          "ref": "d80b8a01-3b77-4d6e-8087-eb57a23187cc",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "619c9097-695f-4cbe-8e41-3a3582415595"
        },
        "item": {
          "id": "6f31d308-7b70-4fbf-8126-095e7d6614e8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "abc78352-ceb4-4003-adaa-e78a0067051d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}