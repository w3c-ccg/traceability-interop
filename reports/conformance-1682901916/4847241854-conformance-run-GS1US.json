{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6d320874-e8ca-4165-9264-010764a44f33",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b6b477fd-de7e-48ab-92ff-d8cc659f1385",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8f5b768e-76d7-4b6a-8057-5bf7705413a7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e3fe242f-82f0-41d0-bbf0-15841d430f61"
                }
              }
            ]
          },
          {
            "id": "8281365d-fa8e-4fcd-b61f-1c3ecb1d285b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dd9fb3d1-14a8-47d6-84f5-8587714b1a70",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "29e98538-b945-40dc-9067-1965b4cf2d74"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "938bd898-e00f-4591-9429-3bd3d85a7ec7",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "19bf272a-dfdd-4caa-bd50-0f736462a8ed",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8317802e-1c4d-46c3-aebb-1b7adbf1a81d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "06575f1d-422d-45c8-ac0c-0101e065f49c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "28341fe2-7df5-46cc-bfc3-0d985ee3f029"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a1c5ac29-4cee-4de2-8af3-a52247db766b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "544fb60d-db52-48ae-b6ff-672297d19b3f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3600970f-ef05-4c94-9b89-e1332b94925c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a2c970fc-bc6d-4994-8652-4f5b8b49b5df"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2ecac64-6c16-4c26-a2a7-e8b8f1907a91",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "e195ec3f-011b-437e-807f-3f4c2b960430"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5bfd567a-1bf3-432b-b42f-5ebcc7e871c8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d582ab5c-d0a9-48e4-9501-6b83ecfafd4d"
            }
          }
        ]
      },
      {
        "id": "96b58fa0-7bee-4c81-8fdc-03a7610ff9ae",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "91b8ca09-f4ae-43d3-93d9-f968ea4a3fbf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "951b619f-e602-47c4-bcdb-a714f917fce5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d34ef679-aea4-4944-bb43-09625a952a09",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b3dde1-39c6-46ae-8fe4-e58a3cbcfc46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ee1c647-2346-418c-a3fe-9f7c1b445c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de074be5-c138-459c-bcdd-94403f4bb949",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce813204-9097-4a3e-ad99-54219d629932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e544c2f7-1b35-4bab-8dca-cc259c9f16f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc44b7e-f725-40cb-b8d0-77221d5cf10c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a9c153-cb26-4476-9680-1495972f7ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b4b0066-3283-4323-b775-2e45c1b73f75"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2529793e-9ab4-4b8a-831f-4434f6e25133",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6b945cb5-fd04-4b1b-a515-f636e5358330",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15befa52-4cec-42f6-a80b-dfa9be732201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee7ce83a-6791-49c0-8d61-69e884d80bdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea47a78-ede1-463a-b649-f1ebda48f36d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ac93fcc-2e65-4f1c-959c-7c5edfdd1f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71093525-088f-4d22-9a16-9e387ad215a1",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "356e83d5-d086-4087-a57c-dec14d64f105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e1e5750-3e85-46c4-bf11-437e8a1c4c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce409211-79e9-4e51-b5f0-fd221d7e96d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "ea6f9a14-053f-410b-885c-c4224326481d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "87d4b419-70bd-4e3d-9611-7a51ff8047e5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f979f96c-2262-49b8-b513-f1bfb1fc7175",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "05a2786c-fb6e-484c-bdc2-e49694977159",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "8aee353a-5b66-4d88-903b-cb7ef8003900"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dfc3175e-5f42-4d84-81c5-3aaf49b809b0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "c674cf23-59f1-4a1e-b3cc-a94eaaa9256b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8cad3431-ba21-415e-b1cb-9fa0502142f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "defc0532-cfe9-4d2d-8717-225fd9101de6"
            }
          }
        ]
      },
      {
        "id": "e3201fe0-93b5-46b2-b8e0-d666a2da781a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ef641fb0-3127-4c14-b689-26b7aec32619",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1ae75379-a970-4ddb-ac1f-c4662221d578",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e844f73c-8f6f-498c-9e00-331184c6c0e6",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9889f840-bf9b-4ad7-b896-29afb4e9e5c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c719e3ce-8e60-4120-922a-c45b053763a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c776233-3a60-43b7-b6d1-6ae8eadbc097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "597cd203-a299-44b4-ac44-b00e9edbb6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98517a18-f834-4785-9a88-7540a8e85a8c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f28330-b3e1-4336-9e2d-2a56677f85fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34000611-1af7-4699-992b-410f01934a9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3887227-f709-443a-a8b4-d3c4bb749700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1f6bb05-f531-4448-8bda-0c240235ae86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8559eeb-ff7d-42e8-95f3-6b957c5d6fcf",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0badea9b-a157-443e-b411-cccbf239ad03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7c4083d-9f13-480d-86c1-f442dc234a25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ff4a6e-dd75-486b-8e90-64235cb44c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1f13420-af8c-49d7-ace1-382aceeb61ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8bc173-1010-4209-8990-e6bba30e4b4b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eba97875-b43f-47ab-afd0-04279381d75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a9b87bd-4764-4dff-a19a-8ed4d7db7352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a95106-991a-47b4-acbb-71f12d277ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6fb8114-c3c5-45cb-8d7d-d7d2809d9e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e04ff2-ebfe-41ab-85f7-c308d90cdc9c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5311e84a-29bc-44ed-b011-35f382e6dad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1766a3b-20cb-4559-928f-2f19bb5865ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d70ed7e-337f-4481-b82d-2b61ed4e9bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17f586f7-9471-4ddd-8cea-e9731ebaf11e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0c10ef-25e0-4c3f-889e-d5c76a02323b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "541f49d4-a676-492d-ae28-d29b9493a020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d070c56-55d1-4e42-835b-587efd3d1797"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e6a1e6-cf14-4496-b71f-a99db2437e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c29a7ec-9761-4b0c-aa8a-af6cd0e1bbb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6bbe41f-8852-4140-b066-755b076150cf",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc872baa-17ed-43d4-a54f-79c0d9ef92f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "810baeac-5f15-4892-88ad-21e98c5c1aa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37874464-9bd4-4f58-a075-69e420408693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e482e86b-77bd-44f4-8850-9984c56bbb41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6325a628-772c-43d4-a781-c5aab2542746",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e206bc5-8d06-4f6f-a052-b6c61aa0e407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f01231d-0cb4-4a78-b6ee-613969554821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ddd81b8-51c1-4c13-8f50-334b901e7caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4dd27c4c-7311-46d7-a3f9-b812ef061da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dce46b9-28a2-4073-be4b-89f216aab3c8",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "590032ee-036f-4812-a8fa-eadfb827406f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ce95182-cd87-47b3-a3df-9f5aefb5d01c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63bd080-55c0-4630-a93d-223deba468fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13b3fd14-f035-45cb-8929-e1d39a140ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d05c06-d190-4dd6-ad3b-9623368d07f5",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5171987-39db-4cf1-9b1a-f2fbb315f1fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f79f37f-08dc-44d0-8fb0-bf5a8b5a7e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4716267e-014c-4ae2-acd9-b136a259727b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe04efb6-c2d6-4f98-9a0f-b753a4646ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27923450-6154-4180-a69b-51782ec0e63a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8088aac5-5530-4fec-a0ff-1dedad399cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6ccce31-37a8-46e4-bee0-002fe99cb034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b75d90f-ae6b-4f56-80a5-d0ff6e3b6d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54c23d8d-a768-44b2-9e66-5292661e31f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e9c0060-6152-49a5-acee-060f4d3808e5",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61912c37-afdf-4328-8d8b-9c168fa6da4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f116136f-b6a7-405b-bc42-884a6851ddb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb354a1-44da-4f1c-80ce-f8d02cdb4941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5b0dd59-2be6-40e4-8c90-e99cb3ef767a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f7ee59-6c55-44d3-8c01-e2d344364fdf",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65519c0-5f2f-4a00-a325-f790000c1e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75edefb6-29fd-491d-bf73-8fec3fb04c43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "747e73b9-61f7-4e7d-b0f8-c853a8b51aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76f04b21-2933-498a-974c-2ab377e82808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b14c4142-c4b1-4b82-9881-2088f7518cd2",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23cbf6b6-ada1-4d91-b0ac-8d469acc92c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "080dc79f-c5b6-4054-bf52-213ba024d16c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78cc191e-ea4a-408b-ab22-00751ed9abd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1b4b17d-0709-42ed-8489-1363409535ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f1feb6-f115-48a7-b4ff-9df1a47bbd70",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3065ea-c1a4-4443-9629-16ceb3a56b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88945fc5-bda3-48a8-b6c9-870307899714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2bbc42-b56f-4009-951f-beaa0010829d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "295a2a9a-9162-45ea-ae66-30e9bad2797b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2378f2f2-6e7a-4d11-9d05-e7816a5c28c3",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39752af4-dc90-4f54-9361-94b54f6ea7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5c3fa07-bdcf-434f-ad5f-9252775a9262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afab48b8-f34c-41d7-b7a4-fe7a22c69021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8da7af8-5aae-45fb-90af-4017d571022f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69bc836-3fca-42a8-910c-f0412dd3bd87",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c01afe-232e-48b5-bb38-4ebde6bdbeb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e46ae725-745f-49f7-bdee-c812d4a4853e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce33c20-2798-4353-acfd-d52541f3e729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e1e1f68-e312-4a17-8882-67d241b5b3a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce7200e-3242-4550-b966-efda92bb2019",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f528b4dd-b0ff-4a74-9121-0a6e3cf67787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8427e69a-9920-4dba-ae88-75d8755f5241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d98c012-46df-4b7a-8ffe-04046e19c243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a357c58-f5b9-48cd-a438-86da150815c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ff6558-8fe3-4c63-ab68-0b978fb8a807",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c23fd2-d5f3-4272-a863-82215fe0c995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f84227f9-9d77-4212-b62c-b9498c59db62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c615ab-e28b-4810-8530-a10edd3b5910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "523bf6d4-e139-401b-b386-22052ea71a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02b8e33-ad5e-4524-9296-a8384d95492a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "450d2ca7-6a7c-43f5-8936-72a842a80d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d45b3faa-eb0d-44a3-9533-ccc6b49a2477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da753c2-71cc-4b3d-9230-61734a0b9cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86cf9849-3939-4a67-8850-3ab1a9453e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6992f13-3310-4480-b9db-390216bebe6c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f57d15a0-fdce-48eb-a554-d469d77e6c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d39bc5b8-d1f3-47ec-89cf-cc75be882536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a934079-3245-4b4e-871e-07aca4e3daca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf04468a-f5c2-46e8-a010-fbe660bbc5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1903d229-983d-44e3-a2ac-e9cb3a07e419",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1527d09-203f-4fe3-b8af-e78014c7e6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f7ed546-2fc0-41b3-bb3f-0fecc5021149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb61489-e039-4c95-820c-4e6b095a23fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6eb550d-86ac-42c4-8e0b-c0d9b8fac69a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0eaeb9f-b9a4-4efa-af18-75b3fc63c64e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd63fdb-802e-46a9-98a4-0d93357ab299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68d74953-2149-4756-8fc0-7d11bb859aa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beea691f-e8d7-450b-ac12-ebf36d92a8a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "03b9faad-8a4d-47b0-b69e-851a87a89029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933769c2-4ee3-4e2c-bb4e-4e39996f32e9",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81ea3a4-713e-4263-b1e7-9acf1657f629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cc84ab1-e5f1-4003-9427-5cf2fc24ccbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdaa08b7-fc83-4553-9f75-71abcea49140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c05d9a7a-c1ab-4741-b368-9ca0771e7f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adf2f304-c97a-4ac0-b5c9-32f63952abe0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efef37bf-2520-4e27-b970-8da159010598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f34d841e-5c60-470a-a9ba-ede92b2c4e72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb1968a7-0b86-4db7-aaf0-4ad6c3e9f969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "54be2ed1-4633-4386-a33a-f225f23b0345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "391f9b0a-988f-40a4-aac5-edd748f1945c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c975511d-da23-457f-be3b-e3b667dcc51c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e890ed63-9282-4540-9797-fedc15ad6cd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1bef946-2bb1-466b-beef-3283d29826ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ae8740-b8f9-44c6-9193-f40aa0d2e0d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c0cf19e-f242-4bf4-9a57-7e7e349e67e1",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b287435-0aad-4f7b-9f34-5d9d7c6404f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0520e8-93fd-40d8-a651-96ef03bcf587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5abd9810-ab92-4a77-9672-141f5aa91656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "04207e09-c53b-431e-9265-c9a5c84f3545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cddb036-2abd-40c7-b47c-dbdf5cce9f1d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0541d8ff-1799-4462-b37f-a5b0c4f102c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80b74308-0cb9-4a75-8431-9c9e490ed2ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ec1f3c6-01e6-429b-b9d4-7e5f5aac6cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cabedc6-e402-4280-a42c-c2330e8ba117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cca2fca-8341-4f1d-ba88-b2a4d157aa08",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1213de7-261c-49a5-9352-cfd35f4fb7ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d398e70-b759-4ac3-80ad-b30641b77c5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1ab6cc-597d-49d8-9092-19ef4589ea14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa01dfcf-5a52-49f1-9b06-380b13cf18e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d45d13-cd75-4ec3-8eb4-14e7a3d7e8c1",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d93db6-5936-4141-b78c-b34b14c0d44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9faa621-22d2-4d1e-bdfa-01bfdc8880f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc832a7-b60f-4183-a0b5-6c5df84b3d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "23364196-a9de-43f5-8a0f-301e0b2e033a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9a0ee4-2a6f-4795-9b91-3ea56df11187",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7077988b-e718-4849-8f47-0ebf2bda5efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e9f61e0-10ac-4648-89f1-d9ff14fb4536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e127212-273a-487f-81f0-be1f3918b8cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5d0187e-777e-4deb-a404-46550b9bbbde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16158645-bec4-457e-b853-f317bb16372b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12dece5-2213-40b1-b8ad-c33d8e82206d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bde65650-df9e-4117-a80c-ce680f4891b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f3615f2-60c8-4fb8-8339-a8d95bdfa529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "616e1b21-7849-4f55-b2bd-bc5c7af65c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac260e9-d067-4287-b47f-4e2b4b4f0146",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e9fd96-dfe8-4098-b3c5-fe293acf3375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "facfe86c-2e16-4dd3-8f59-50b6c38c9d19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf4001e-fcdf-4981-89f9-0803e99291a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd1c5907-010d-438f-a15d-248d74d9b416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8162dc-1ff3-400c-830f-443b0951ecb5",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e25c1e8-dfff-4e42-b715-b9a0bf95278a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77658011-93f9-4c12-8a13-2d49c60d3b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315ccc44-31da-44c8-8853-8c55bef11d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3fe2a86-22b5-47d7-8a19-1e44d5c32796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ef749c-67af-4375-afdb-89dd08f6c71e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ccdd23-ecac-4c9c-a751-d91e05927c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2a0650e-cd6e-4afe-9599-e4d5df6e855d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846b0acd-37ff-49c7-82c4-bef3201f2546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "534eb24c-701a-48f8-a8d3-9b75fef73894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "552b9e54-5775-4fa0-b83f-3b209a91bcd3",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "031a125d-bd66-4a73-9484-5d9e42fd6c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e8b22b7-70bd-4120-99fd-beab32b4660a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2deb1a9-23cc-4ff9-a5be-9bfb5b1be252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7262451b-d42e-48ba-895b-af127330610c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08461b3-71d7-484b-9ccb-f65c52f2d8e5",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d71f1aa-55e0-4778-891f-869624202c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87389a99-b399-434c-8a44-f320fde1592d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a377f9-b260-4051-a325-efb61a84440e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eabd1d63-c7b6-4b4a-a1e3-232f590a52fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2309b4-765d-4599-a82b-95fc35ec7d55",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6948b939-7bce-4030-9beb-1f752a6af242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c8e72c-b061-4adf-b7fd-74a736193a67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7de1e29-5ef3-43d5-ba0b-1e7b41ec0537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f055282-a658-4ed7-a44b-75e817d751a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7bec3e6-09a7-4eec-bbea-214cd1164803",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c566a16b-49f4-413d-b12b-62d2830c0eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2ede7e6-9322-43b2-a614-87cc2eba3325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a4f8cf6-1f03-402f-af23-d694cce1e8bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "690af868-568f-433d-887f-713f69021d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba12ae8-1efe-44b8-9317-7ea7bc4b111b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "068eff1e-0cbb-4ddb-a392-b31b419203d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9515d16-9ece-4bdd-8ece-98a9f347ab63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aef7901-7235-4da9-a6c4-89a89d1fec31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c92c6a7-45ca-4c51-a9a6-4eecbcce7390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ecc686-41a0-4cd7-b4c3-ad829e58fc0e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d81e0c4-98f1-4708-a772-88db3e95b07b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2805899-628a-47b0-a6c9-307e604f8f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654a9417-c14c-4a55-8be7-1366b4d818ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "37c130e7-cb41-44e2-8506-c7bcdec31fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9308bb3d-0fe9-4db4-84b9-f2fe0664567d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2654636-a6a6-41e6-92cc-d32ecc571963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0025df48-3bc1-478e-bf21-fb95d64e2862"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "184aede6-9d8c-4358-b8a3-60f356cc453a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "31b26cd3-7224-4ade-ba57-602e10601671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb98c2a-408e-41b8-bf0c-71196a6cdb0f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "893b9ede-b820-459a-8785-bcbf1e6e5f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b30dfe5-c7ce-4a24-bb33-c05507860538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25afc21-abdc-4775-b405-e576699bd711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca19eab1-0af0-483c-b207-8b6fb4e086af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78bd9d10-7816-4219-a50e-7a420ede7340",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f422dcc-ce50-4d9b-a0b3-a97957c86c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08872943-fd84-43ce-a860-8e8aaa9d6c79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caba74cf-a81b-4f03-9b67-8a390848558f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f03703ad-dee3-4f93-a8c9-f00374670c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b675e271-a489-49af-b64e-da458a9f3672",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7835ae90-1b68-44b7-b741-4ec362619309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac419d17-2a67-4ca6-b4e2-5f5a453e572f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca8a224a-0a3e-402b-a7e3-5ed8a993f0c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ffdb033-7e58-4e60-b875-b7d000916d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5076b388-51cc-47b8-afe4-ca21bf1cb2c8",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14b56aa-d88d-432c-a993-f08dc47e3832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a91d466-0b34-409d-9dc0-928696fcd39d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "203f1cdc-48ad-48e7-a713-91b22e771a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5edb0c2f-61b5-492b-9b9a-ce4eaf7b5539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a7d5df-2007-4d47-8758-25bf2fdb9516",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ba173ca-50e5-4dbb-84b4-428e639dcbbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1b8e601-ff8c-4e2b-9baf-71cb1228dcc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5881210-eea8-4dc1-b6b4-98e69b38c2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "05ec492b-334d-4e6e-81c6-482f82e5a32d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b7ff7ab-997d-4f00-9b5e-a5b3ba76b6e8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d741c1f-df2f-46b3-bac7-d94a7f1cdadd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6f8414e-d6bb-42d5-ab3d-89978c7f62bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c66a7f42-ed96-4b4b-a6e7-acdb952f9f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cc309f7-959b-452a-9ebe-1d26cdbcdba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73439806-9753-4122-ba9c-2327a843dbf8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc7a0e6-4030-40bf-9a13-f8d3cbbe02a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1e7bea3-85ee-4ff4-95e8-da69b094681d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714f304a-ddb5-4ff0-b521-7d11108aef2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "babe13ee-5149-4660-b38e-860ab18c5238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a6f49c1-8e33-4616-8843-a808de2d1e0d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14c73bb-9adc-41dc-b545-290275095a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27c77db3-4fa8-4548-b06f-b77110508b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09224ea-d835-41fd-8622-fdadda4e7148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e414592d-69d3-42b0-a870-b1b976656110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a01b28cf-e9dc-4b3c-85f2-2a8aba5c5ac4",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f064c540-f009-4f3f-b193-d198ca983aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe199760-11d2-4a01-b064-1448e04e5d8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c4e61a-74f4-4ba8-863d-ad3a7a37c9d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fbe9a57-abe3-49fd-be85-9cfe890d2e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e694f4-0c4a-47b7-8e2d-4d1b042d97bf",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd29f83-58a9-4316-a87d-02b8c1b5226b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "865cccac-3d77-49e2-87a3-08b1c282a99c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5db1728-1422-48cd-9fad-bbe2627c1967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c263d42-a6d9-4845-a28b-0ea264b0de25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195cb8d0-3eaf-4acb-ad93-99e3e8e087e0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6483ebc-8ecd-49e6-b40f-bcd9eb20f739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4a78433-0496-4e08-ac01-e239e0608281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c09d159-55cf-4ff1-9e89-5a854b3ed966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb9aa93f-c7d8-4f46-a618-7e6925e10bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c7b6a1-d3de-445c-a39c-356af138df5f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b2ba19-87bd-4c22-8da7-3d6f8eb579b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e73c80d-223c-4f90-97de-2ace01065ab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e1cf26-88a8-48e1-94c4-326fc15ff150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "51a0346f-25f4-48d5-828a-3e3a9dcaae96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f26276a9-561c-443a-bf51-1e23da8aa8fc",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f90e1cd-dee0-4613-9fc9-90903f4189b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "270c62e2-6a7e-425a-9dbd-cf9855ddc9f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be618e77-d649-49fc-8822-b3740108f838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75a1c9b9-4235-44ac-bff5-2adba60525cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c8b574d-d13e-403c-b85b-f0ee897ab528",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1828ae-c02a-4810-b966-c56d1cb01837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c36b563-c642-46cb-a718-e91596e45bdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae97844-f0e3-40dd-90d5-7399b7f3c28c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a07ec51d-9247-4ec9-bef3-b8ce421f96c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "406bb76c-7090-4ee5-b922-7ac8a0458ffb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5357bdba-0092-43c8-9ef8-cc783a73e323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78483366-a285-42ef-b5cf-bebd42ad921e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb26c0a6-00cf-4b9b-8ed3-fd71172a8661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea161edb-0aed-4071-9375-2392c1ffb089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f288b4-8067-4508-8a1e-c9b60f55c43d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1258bb1b-1741-4af1-a855-8f817c93989d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "478357fc-e7c0-49d0-b255-524b22e7fe63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b05c33-6277-4d04-8997-08d83789c15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "58b0a10e-9499-4327-baeb-6f4c15a0af65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a949c4b9-1459-41d8-80ac-cc9c90417055",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6acfb32-f98f-45f5-a5c8-c8d3116024ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b155eb33-b0cc-4dd2-a1a9-4ca4c72565a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3ebf1a-0af2-4789-a919-d65473b7cbd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a52dcc18-7040-4597-8e50-ee8f98092bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b47a889-bafa-4c3d-968e-76baef3a6b4c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54da5cb1-7efa-47cf-b964-087da3f7ee65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa985a57-2a50-4533-a45d-ef372f14d9b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dca04c1-fe8e-4e99-9dfc-667de4cc5210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "579f1df7-96c8-4d38-a004-1c0d9602a32b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050b14b9-a2a4-4f5b-a782-45437091ac77",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e1dfc72-b988-44c9-bba0-f5e89ccdf842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "149b6769-d554-4c77-b4e9-dc02974c3cb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a8c5c7-b2fc-42bc-b1c5-77b90c1fae8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2dce11e6-a45f-4bc6-b22f-2a8b7748ff14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8568c95f-ea64-4a12-b254-944e1cd47dff",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "191c12a3-cf08-4ed7-bf2d-b5a9a0aee941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fa8342d-30d2-45e3-a90e-64a459f79dc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd7df7b9-0602-4b0c-b24b-55764370f0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "89eb09b0-33a6-4b21-a6c1-00904d215455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3de989-d1e2-41f6-8074-3f472962f9b6",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87519605-422f-4520-b6cd-c08cbb88f731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65e6b1c4-01fe-4d1b-be72-4564e2b7b208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07dfb69f-16bf-4b02-8491-e3d162cbd1e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cade1388-dd60-49a8-83fc-0d2252302bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d669d8-c119-4f86-936d-21dc13544562",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee152f5a-89a0-4d10-a39b-f281a4ef6d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5395494-ebbe-440d-808e-ac000a9cef0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cff660b-cfc8-45fc-8087-0cb84289145e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "34505f60-1890-4f2b-822e-65da702ba4fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255ce7df-2936-4c43-bebc-d7a6275ee68b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6385d652-8580-4a08-b6fa-c96f6f9b0e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f7fdb94-09d3-4348-86b6-a8a9913a33ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43b530c2-d1ec-4fe1-b00c-2d7c8f301d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "72507114-7378-4fc4-8a96-2cad35219e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaed5b33-996a-44cc-8a25-b9324505b9eb",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37767fe-e764-4773-a294-5bbbb88ad132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18949160-5977-4a84-ab44-a2de8137e112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec698071-9849-41fe-ac4a-5fcf3eac5a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8878e404-ab5c-41bd-94d4-2d37fb54cec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac889f77-1e68-40d9-858f-cf19e457f6ea",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9adf4cb6-c2b8-44f2-a27d-84042102de75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa87bdb-e234-4a1e-b19c-0c85cd507887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae7e125-29ea-406b-a1a6-5ffeda5d796a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8ea01918-7334-4beb-9f9a-d8ffca150bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b26c1ce-6e0e-477f-a8a9-7cda1363d070",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9fd02e6-f538-4db2-b4d9-4d5272395967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c65922db-f3c6-42d8-9c90-45d8c576cd48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3747ec9b-c01e-44a7-b86b-0630a92771ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "17e7a166-00e6-40a0-b466-8e2627b8cdc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf21306a-6f0f-4296-b704-a233a01a4943",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20dbb316-6825-4462-9f85-893d811fa443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "863dfb3d-8650-44e8-ac6b-e1fbc59372da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2803fc3-0638-49a8-bc8c-e667030e1f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "83fd30c1-dfa4-43e0-801c-a9a7e6b37b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f0b129-b7dc-4c61-86ba-ab9c257a2d4e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa98334-c9ad-4d70-a5a6-7446a46d580f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36c7dba8-173b-4bc0-8738-31eafec436cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723a23bf-5448-4aa0-84fd-793650c17665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5dd185d3-f304-49e6-bc8d-cc644809cf4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b9a647-7ac7-4dbd-a5d3-69a7a0d3c855",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca15328-4e66-4bdd-b4f6-052c14092bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e96d7b0-4e38-4df5-b5b2-185003bc70b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5486ade0-d24b-4678-a98a-7ac6e2de6f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c1d237b-f644-4a14-a4fb-ee040755d5aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136d799f-4de1-4ba8-b8f1-78546c7d5573",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e792a3-d117-4965-aaee-823f647b22b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2110825b-0a41-4daf-b33e-63e8ee80e80e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff86188d-6db3-4948-b3b1-6212a125ca5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "234934ad-24db-4e6f-80a6-63b3d3185025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e63434-9a85-4b2e-bb02-d05fabb555ae",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8a147a-8669-4549-837d-2b20981ecad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2de8422f-4a41-4559-8d5f-2571a0384abc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee252840-c894-43e4-b8d3-8c18fa6310dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3de3a90-c8b9-4bfa-8da5-288580647c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99930ea3-44ea-44e3-a369-5004b027b61d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a0c4ea4-e210-494c-aba4-39a971addb4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1008ec4-8637-4e1c-9ffb-517bc89d3e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b04ea79-e7a9-49c3-a019-65994a7239ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f80a7f2d-b048-46e2-a8ea-a230413d76e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5541e687-fe0b-4cbd-8512-bd6c50d297eb",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38607e84-7554-49fe-94f0-d9ffe4b5eda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f156dbf2-24ab-4c5a-9bea-455fd55b264e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a451f63e-e63f-453a-ae53-7da50a8e8f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b932f30a-e58d-4aac-91dd-4cdbb7f5a87e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84559088-f5b8-478c-aeba-206a817fd4ad",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1accb326-f79a-4cb4-94d6-4dc915247649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a160fc6-5a2e-4b5d-9943-3fd58ee1ba2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c639fa5-1e43-488b-a24c-4b9a0fb0eee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "876b9f2f-4f3b-4b99-bd36-9f17a8ed09e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf98b03-4805-47ed-8747-c4ea901abc75",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89cbf15b-b3b9-48db-aa68-776310b5a934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c895381-461f-4a4d-8ac5-605e8ae9d1a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f0b0c5e-1720-45ed-8f56-f75718d2fea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "26bc4d91-2eb8-479c-adde-09086bdb97b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a798c9ed-0b53-4a66-aeb7-3875fd5df639",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49987ee-2bce-493e-8aa1-04c43870180e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd8208b4-3a26-470c-9174-d580894dfed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e8bece-85f3-4d5b-b3e5-5060a8014e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5da4fee8-643f-40ad-94e4-c62d8e294574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1072c8c3-5164-4a94-90ff-b30918011d6e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f26a19-7047-4f2d-a260-bcb8208a1834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beebf706-a3fe-454d-8cc3-e06d08bc76ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed59292-da62-4707-9c03-1262841932e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e71b3e8e-5144-4c11-afa5-badcf551c713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae975fc-68f2-44bd-a01b-53e50cbec0a8",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30a4a1d-4010-4e50-bfe7-9af8a44d97a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff00f90c-8254-4a72-a167-b3b57de75d0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9307c578-c47a-41a3-bc0c-edf1b4d1e2b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dde4de18-5ddb-42b4-9dd7-30bcc2240729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0459d7a9-308e-4ae2-83ac-46abb719e617",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d97b00a-f446-45a7-aad9-f90228b16ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1244653-c66f-4309-be0b-63556f32faac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a274cfac-c4bf-41e8-884a-2d4d6a0c6243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3ea9bbe-7699-4cef-b7b1-64cad8dce9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9370afd8-f6f7-44a3-b3d1-7328cc2aa128",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8521ac87-9570-4181-bb63-78c5a26ef59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fb034d4-6d65-418f-9fb9-0a5aa67bab5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f36e27-e7b9-4174-a1df-e67cc0213848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "559f1c5f-6aa6-4a1e-b0d1-a3562a1c64c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193eb978-b7d3-4513-ac04-fe64f1ab5725",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa070d6-f7b3-44e7-b0d9-451db8f9eeab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dce5d3de-d7bf-45fe-ade3-a591c9e49878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c82dae-d588-4bd2-a947-9afeb3b1bf15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f4deae3-bfd5-4964-9b94-e1b208039c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee17b21-f711-4670-9ea0-bb483de82d04",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77949876-27cf-4cb0-b465-6476d0688757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0119fa5d-87e4-4f05-86e4-b40263b71171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1da1dd-4449-438f-81ef-e89af99f79e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b3d37b2-31d3-499c-8f62-c49c1b94f954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057b447c-5ef0-4fda-969a-516e60b6d73e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26de8eeb-7fae-4303-87eb-ed42c25d2753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35ee8f1a-7fec-47cd-b700-158d253fb461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f3a2ec9-bcbb-452b-99c6-1accf2ea0f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "34c32802-94d4-4659-a5ec-88d46ab5c098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9d1a2e-b0fe-4f64-8c72-36bae342b3bf",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9612b6fd-f38f-4313-9104-3956b9678174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b67ee1b-ea46-42a9-8eec-63abc30b9214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2514d81-5fee-4657-937d-e4575d55ac75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b4bbdfb-7f27-4609-a205-f885614fa7f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8711725-d2a5-4332-b70d-7392a3bdec0d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f6ea3a0-2a54-4d60-904a-a8c02c5d62e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fbf4316-2f40-4724-9e67-2f87cc1829b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe448b73-5151-434d-821d-486bf8681bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "84d067a1-5224-45e3-a444-3e06be4cdfda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac805d8-08f4-4d41-be5b-17662f062425",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90465e38-2c86-4d17-a48b-c4cfdde8ad80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "699889a7-dd1a-4ff5-8d09-217b135a6177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd70f2d-049e-46bb-b29b-adf9354df450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "41d67f34-6d2b-41bb-8b23-d22985ffc10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb043b0-3e94-4259-95e0-c7685fcdec48",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1cd8eb2-32ed-411a-b20d-3f2a8483dcc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca3c32ca-8b6f-421d-8ef2-a34881e3d1c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63570128-7e44-4a9f-9aba-2019ef213807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ebe8f46-34bb-4666-a8b1-2f13aef12b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827e726d-43d9-45ef-96de-fe11450ff07c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43b5891-5f5f-4964-b87b-1c242dbc25d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fe636d0-7ff1-4ab9-890d-73761f770da0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94af701-4393-40f2-9968-26a8a1bc2e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "34865835-6184-4de8-9dab-dfe9ae4eaf76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a7d04a-0949-4e52-8a1f-e5bea3b8f7a3",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f29e790-5209-46d3-993f-1037e6075a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0cd0b02-344b-46ee-b02f-abccde13a717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b62f01-c0bc-4f46-a727-f2c7e2630577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "12e97d80-7245-432d-8ef6-b2b593bb060b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f08c563-34c0-447a-b239-f6c1e66e0688",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8e1950-d444-4198-9a1b-574d309834ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "098f9440-7430-41bf-a1ac-4000dbd76a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c5d5f31-efe0-4ec3-93fc-e68186acebb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f09e217-1c7a-48e3-8dcf-b5dbfa1430f8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "777fac53-2b8c-46e9-9220-020411885bec",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8c5421fe-5b01-46fc-9050-8f971130687d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39894d4e-7698-4417-b003-819b26a780b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ab00289-8363-4491-b2db-3979aa0ce930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e65450-4adb-4572-8c8e-2ec0c934ac72",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8ccd46b-5502-4e2d-ab6e-c925f4f42a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc00222-a172-4647-97e2-42741920bb32",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3367da-8ec8-4bb9-8459-5285d7f405bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a17c2fed-028a-487d-8294-2e6c028bf8d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b15ba207-af83-438c-bf61-c6e4342c8afd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3c222bd-488d-4076-b99d-4f93133e4721"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c28b8e8-d193-46e7-b0ab-f7bc4a8e1e20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e1f9c960-d29f-4561-b8f0-cdfac7b9a97d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "766baded-260b-4ad1-9730-4b426535492f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07353bbe-6502-4af3-ba1a-086d01bb56ac"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e35a7059-e498-466c-a88f-2b52272e3d6c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e59f1b25-3876-4057-9a13-29642c58c222"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d4c52ed7-5392-4e34-8797-b0a36e39d6d4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e76093ba-b430-4eb5-9e31-ce95b1c527b3"
                }
              }
            ]
          },
          {
            "id": "387d2091-e71a-481b-a6cf-ef202c4628d1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c4ca17f6-6b8d-4ea0-880f-bc36b4971211",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b36f02b-776c-4652-a631-bc75fb1ba385",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce036c39-0a6d-4079-b462-2e8dd9dbb4ba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4105ee79-a1c3-4f52-89c4-a17be35b3469",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0da157df-7a10-4181-b3ca-90c21691870d"
                    }
                  }
                ]
              },
              {
                "id": "e747c7ac-6ec7-4c0b-9375-588ffe75e495",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "22dd40ef-d693-4b8a-89bd-e9766a2567c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5f7a0c87-ecd4-4385-844f-52bc1e17859f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d952ac3-6293-4a9f-9d1d-ffd466e7cf36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1e50610d-1a9e-4d57-9b70-24ae046ea16a"
                    }
                  }
                ]
              },
              {
                "id": "5057efb1-a65d-4c64-bd9b-96584403f994",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "473e2a9a-6909-46f0-930a-e6d32e04e8a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "16183cfa-a9fc-409b-a42c-26d4412fea65"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d27b2ca5-42ce-47cb-a6ec-14b3357e40ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8bb6fa98-27d2-4bfe-8513-0a83118fafb5"
                    }
                  }
                ]
              },
              {
                "id": "bec86547-a894-4dc3-b7dd-62c6f78e8399",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0fa7289b-6e2c-4ccf-986a-23e2f048152d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f34c1c8f-16fa-453c-92e0-de79876c1f40"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81f792ce-bd57-46bd-bef9-b68e0ea67533",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c34bd7f5-e9ff-4cce-ad89-ad8ecbd24194"
                    }
                  }
                ]
              },
              {
                "id": "5bbc4e70-8f63-416d-a174-692f264d957d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b001947-7ba9-4ee8-8102-8c9be4758369",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f98623db-df7e-49b5-abf1-990826c3c685"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7c6c4ac-0901-4657-9203-26b162d46cd4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a17fd3e6-2d33-4732-b8aa-b989840127de"
                    }
                  }
                ]
              },
              {
                "id": "4f081b67-5927-4be6-b07e-04fafd1cf200",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eaba6490-07a5-4d6e-b1cd-dd53c879bc18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "14489c04-1911-406f-93dd-5f8b15462db9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9932262d-9607-42eb-98d9-a1db36e29123",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cf8aa2f2-f44b-4aef-8d5c-0a78a7fd767c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f0867d58-ecd4-4760-a436-c4dfd07f5e86",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d61e71f5-aebb-4c95-acb2-4491696ed6e7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5fe5d384-686b-4c5f-9579-576643cb4b09",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1a7c38c0-7733-428d-8b48-00b39cad5333"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dde618d7-5871-4162-a1d9-2496a7e046de",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f6b76466-2c07-4fa1-83f3-26edda1aae16"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ebd0958-e82e-41b1-ae5f-378d31c5d84d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "661a7725-3480-4d47-8ba7-5e35908139a5"
            }
          }
        ]
      },
      {
        "id": "57aef38b-663d-465c-8f53-4f98ad0b057d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d3129ffc-4d8b-4a84-be7b-d4b45bca2134",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a0fceea9-4a5d-4b44-bccd-4da595ea6ce1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8cc6789b-3144-4e3f-a980-eae14a8e527e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c19b1b9-1cd0-4306-99c6-50c0e7b9fed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc1c843d-2ed1-4c99-ad1d-bc4fa0f0bf4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a273a54-d9c7-433c-90c1-ed173c9ea39a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "91a529c3-1dee-4710-a39b-8c042c758f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676e58c6-5911-428b-b7e5-9f27458bbda2",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af775232-c5c0-4e2d-9119-e23c172dd32d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91abd074-332f-4164-b5c3-cf98505496c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178f970c-db9d-42f1-9ce2-ec7c614a85c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "23fa2eb7-e38b-4e88-ad0d-efcd8ed4a222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27f25973-d107-409f-82c1-1519914c5f5f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c373577-473e-4823-88dd-98eee91ead7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b66c99a-6ded-4de0-a4e0-b7dc7d39aee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c307d486-ece9-4eb7-9fe6-69f100e101e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bdf288a-eb57-4a2e-b761-5d7ec0370df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c717687-b03c-448a-812b-ec54d405c837",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3787534f-e115-4f77-9cd3-25db0c22aefa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9dec5eb-d5b5-475b-ac12-a3e186c04496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1856a5ea-094f-4269-b7b0-570ad80a0b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "58bd18e5-2879-421f-a4be-a7cbb89c4f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3afdde-4c12-479e-ab06-b9475f195c71",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ebf225-02d1-4900-88b0-87a4087d5457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44ac64ab-8634-4a8a-9551-9edc61d50d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3705fe3-4368-4d0f-bb8c-1527e142400c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0bf1f0b-b90e-4473-9775-10b81009f8bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ee6552-f3be-4e3b-8f65-0a7fdef3f9bb",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9c5f68-ca00-4210-a718-260611c341ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4d0dd29-d18a-47ec-a89d-a26ed1289874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "201ff2e1-aa3a-400f-8ca6-e8fe4008b9ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "51de764b-a1f0-4f19-b1ca-913bd9bf26f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13388fad-1c9f-4822-b8f7-97dc7ba249a2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6f4362-5073-46ed-aeca-1ad2f5af4e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e137a4-08c4-4663-9058-5e655e9c9d7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45669f99-ffc1-4e85-b592-e401dadeb78b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4e9818d-231e-4acf-a4ab-085b6f8712ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50dba35f-dd13-460b-8934-fd7c5de55d37",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d1745e-149a-4b00-b93d-2669f1524482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d9d4daa-0467-4159-9a1f-472108c086f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2675ab8-efc5-409e-88b6-b965898d9bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c5e9587-e6f7-4d12-ac59-c849150eb284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c149071-a411-4ba7-ae75-fe323601bb7e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "812b82b6-87ed-4101-8a97-273bc0c494e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74d30482-98db-4964-bd4d-7bfbd398e08e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb89f06-b1d8-4eb0-a168-5ef82b3d1ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5e5f57c-5dfb-4ad0-93b1-c6772cf860cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4551b9a-17c9-4c92-ac22-fc4d6362aa19",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54370b56-1dfe-41b9-9d11-143a95743708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a848406d-7d7c-490b-9eaa-e5aa523cfba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15ca54f3-a0bb-4904-a4a5-ea027390937a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3b5ebea-2fa7-4de6-98fb-273677664bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c6326ea-3f82-4dd7-a663-515b581b58b2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d6b35f7-f0a1-4796-8cae-0d12d7eafac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3f76003-1530-4a7a-be97-37a74d3bece2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6e0d0f-eacb-4c70-9117-0038b70b1cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6297c5b0-451d-4a64-9667-abb971914cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "badb1f32-5ea1-4f30-808c-23f5b6dc32cc",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbd4083-9317-4979-a546-dac28b182eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "933236be-89c7-4e14-9d4f-4ddaf61e3730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eacd8080-6242-4aab-9e8d-57d5cd75375f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a57f8b52-80ac-4b6e-92da-866846d15136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acac2596-01a7-4744-ab5e-cda5a86b3f3a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd96011e-524e-4563-b012-7dac37881e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48bccb43-d455-479b-96a7-9b8364ba5a34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbee396c-3992-4eb4-a71e-0b3c18bf9f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe42a0e2-551b-4069-83e9-d306be3fc29c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf18356c-c001-49a9-9ec5-98cec9695f40",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26bc4ba-4bab-434c-b22d-b079304dea2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dab87c38-44ce-482a-b529-cb7cdaa6e9fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fced0a6-1535-49b0-b5ae-e5dd86f53ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2db69cc-a0eb-4cec-8b58-9eb160105bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5627fdb-a483-401a-9902-04bbda77f60b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4043904-0915-45c3-a2c2-94b8cfbb3805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc430803-752b-4877-8c3c-677ff00a4449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad7612e8-11ca-45a3-b4e8-9fc930f929f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a5adaba-d085-4c2c-9b0a-cb67df6cf45d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b502fee-2207-4d71-9863-779aef7b9e23",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f696b8c-4f90-49dd-8197-c26185ad58fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ea8baab-05a1-4d6c-97f9-680d7539488a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a03d585-b730-408e-a442-e49fad003bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "23e93d0a-28de-4845-a300-6927a8cfb2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33145f43-bb65-40b5-8068-e05e6fb4868b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ffc3c5-9460-4c8e-8901-a52810415f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe2f8c28-7816-4ed1-af9e-13c6e6b90b9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc7651fc-3819-43af-acfa-bd9543b424c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b409935c-feff-4a77-b5e9-a253392e6e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a6b7ec-d962-47c9-9d16-cd26412c4177",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a63b88e8-982d-4dca-9403-7adbd5e75ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68c3451f-76b0-448d-8b92-a1ef6b61a8d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd4b176-5844-4f4d-b6df-1be346da2147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "95b557ad-f32e-4df7-8f9c-4c249bf6267a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b94dc4-9ac0-4c28-a1b3-bfceee72b137",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c98e055d-2cb5-4e4c-84a9-6b5b01f857d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67d84fa9-a8cc-4551-b2a4-fac703aee0ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a2c4469-10ea-44f5-8cae-da43e238a097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1fb3dc3-da30-41aa-8f69-16d6c622c5a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c68995-2155-4e5a-8309-01d368d38802",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d5e933c-c969-4481-99a3-1430acfbe147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7368a94f-e631-4b52-b43c-92e567e91afc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbcc9684-751b-4296-94e8-2cf2457c7913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82ce3dab-e912-43d3-957f-c4dcf0df9a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23cc5dc3-7a21-4298-ab34-d31a5987ed74",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ca8ec4-667d-4e1a-936e-a26093059e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abb7e205-979c-45b0-831f-30b62213dfd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320f4804-20d3-4ab4-9175-6ef2d0a2ab3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "837db4ef-4844-4578-bbe8-25a1c7d35870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba371e85-b037-47f0-9867-2dbc209fa57f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "790ec288-67f6-4b4d-b48f-945ef9c558d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "355d54d3-adaa-44b8-8ea0-e15bb5859cf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab02bac-0c21-4831-bdac-957525938fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "983ddb63-24c9-48eb-9aa1-052279339985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4330afeb-69e1-446c-8d5e-f9550e69136d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4ff30c-e5ed-4feb-8851-73605e1b4d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "025d7bbd-fb64-46a1-995f-1ab8613f5b41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19dc8767-aba8-467e-babb-adbda00c761f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b767216-8976-45d3-a1ed-154f15c3a6c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b49edb-e063-4e77-bf0c-e66fea5c9273",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e73b24a4-1e9c-420c-abc4-ec8dc2fc389b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec598b4d-991a-4fdd-9857-5d645dbac4f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a404a2b-213d-4ba3-a682-e23c4a79bc59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8adee31-2664-471d-b089-d46d2c60aabe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551366aa-6452-42ae-a7cb-dcd33ec3da0b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df29097-81e1-4313-a660-dcfc8720ed4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "418ba22b-5c83-48c7-9705-ad6f1b932d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56e2aba6-2a49-4c28-8ec3-519a337cf9d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6802fda8-6848-499f-a3c8-46388e85175b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bba5323-3b02-4d5f-b362-6e2c2e2d6455",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "449180b4-82c9-48d2-b38e-00f809a188b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "191f5b31-a93e-4882-baf3-3dc70edb5dfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a110c775-677c-4087-926b-e791fc3e616a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26649c1d-1260-41f9-8166-73ed73126f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "764a6e84-7b89-4845-921b-2fca065b7249",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09343db7-4e87-4020-be02-5ae7f4c74e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbbec0a2-66de-4524-a3e2-f981552bdb1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aace00d8-da1c-4c95-8b9c-51450755aae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "482b21d4-caf3-4c76-a076-3525251b55c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7604409a-7e65-4cce-8196-a34271dff15d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "157420c9-4230-40a1-9825-b53b3b6b8721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4322bd67-6bfc-421d-9fc4-b015e5950f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4114ea3f-e9a8-49a8-bdfd-55bf4e5192b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "113f91b0-3202-417c-8dfd-25dde3d7d5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f069e2-3823-46d8-9678-4f2cadde07f3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1899f9-09b3-4ac8-9dd2-028fc2f89f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64acfda5-a28b-4330-b189-af18962a9782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304f9696-c68a-459f-b324-ea948bff06cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f589bb9d-b52b-47e4-b120-2b278ace7b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "296d7841-5380-4e04-96cf-14467229dad3",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea4fe96d-43b8-4ab3-a26d-41ad0f6c7270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bc22504-5c35-470a-b20f-259f487a317b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d4dadb-8592-49f5-833d-1dbcdaa4e2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c921d4e5-759e-4b81-96db-6aeb6efa9996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daf11981-c630-4d59-80c0-81ec95f10733",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e21805b6-8273-428f-b3eb-373c417f0ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a672026-483a-4e9c-8855-f7ce45b22e6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988deefb-26a7-4d2d-9d80-efe6e6b4671e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "352eea98-aea7-408e-946c-f69e2618ed33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6716545c-57a7-4d06-bfcc-dd486efed856",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "465bd783-d929-4140-a062-35477205dee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a77f184a-d725-4c76-9028-fa545874b66f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2416ace4-9f6f-4b40-b397-3684e2e86d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89640cd5-198e-470d-bfcd-32ac8c5b4e45"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "270ada36-4882-4198-b6b3-0d46c22a5de9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2d15ddc8-9034-4ae7-bdb2-4d308e2b7c6f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f68a84f-c8e0-48f5-a986-8156c6f80aa2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b8d1e754-9c21-4b55-87ab-c90dacef3576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "745bfb5b-eca5-429a-a407-ebbd93cf4738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "61c11fed-0d3b-4aff-af18-91f18b100f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9858cd-ef2c-4803-a9b4-de5d4edf987a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d650b3ee-3024-4ccf-a8bb-1a52958b36e2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8dfdce50-b904-4690-bcb2-01e63699430b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91de607f-c279-462a-b5dd-105485421c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f98cee3-912f-4dcb-a99e-54d17439c0f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5aa13304-bd29-4e72-868d-4eda9046f57f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abec0dd9-2626-4bac-8c9d-b853d62444cb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa599102-8ac5-47b9-b2e4-d70d41ae91e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69fd9d0b-521c-432e-b936-284a11c0b0e3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "afce70db-b311-44e5-91a1-5d77455d977e",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "566ccd93-d7e3-42dd-ab62-2e93f98a2f4e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d8c67412-4c97-4783-b79e-3e95df86655c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "843bd7d1-ca15-4e19-aa77-7dd7df06c1f3"
            }
          }
        ]
      },
      {
        "id": "a2dc01c4-037d-435e-b179-c529a528ec29",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "427c1701-a22e-41a9-a861-b148916d8517",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4936245a-51bb-47a1-8b9c-6c93f0b48eb0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e4a9c3a3-a409-4a9b-acde-38fdf34b74f8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f575b4-42f4-4d04-8191-78d4d78fa3ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4506743c-6edc-46bf-afd1-55820b321168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8278ce4-c491-4354-857a-b0552cde8e80",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a327e734-1744-4b89-8519-639bacb2b34f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c2d033a-1fcd-4ee4-a0bd-d0dd7d5b20d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b435a1d-2aea-4617-9a30-f7285f2c7666",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe57c16-3c23-4f5d-a0bf-502f27a42d67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6baf86c6-d643-4e47-8542-875b96ab765c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c97ddd07-1282-4f82-bdc3-30f375ae2074",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8700f671-9e25-4044-8779-f2234d77eefb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cffdb773-8f3f-4f17-baed-22803e26fe60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a8f855-f529-47e8-8b5e-404dbaeb57c4",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0985496f-d2ea-456d-9fb5-461d21fb18ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44db9322-c285-4e08-aa45-9aa4be63de13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf138c0-2dba-4365-88a1-d1bcb16ea20b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38f5200-8bea-44ed-aba8-cd231ee44976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "629a223f-21e2-4359-84b8-8b3e8005e25e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6412a82-2bca-46fc-9db1-e15a860ea955",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6bbebc5-ab52-402b-8421-a7ef7fa7a961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "648072f4-eedf-42df-a759-2f45456055da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5423ed9e-c7ba-4169-94ff-f89b91c8131b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff5cb114-24ee-44f8-b6a2-9f2e0d06b3cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fe83c6a-f247-474c-9de7-b7cb1514e2dc",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6289c3e1-37eb-4e9a-bc5c-721f44bffa4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36887788-bb43-4b30-9dc4-e0703258824a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed5c36f-615b-4c90-87dd-ff022c85b48e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61235617-269d-42d9-93a7-4a9bdbbc1819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c488883-d9f4-4a46-ba3a-c9b6328c3e35",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb3096f-093b-467a-a1cd-1938c0c8451b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a6b9010-e8a4-4d3b-80b8-afde79bffaf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "521070e4-415f-4d7b-8cd4-706afbfbf87d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e865c712-3f15-4271-bf1b-bc7a91a09611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2191f60-55da-4622-bbf7-8a8b135fb17c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751308c4-5ed1-4acd-a33b-25bae78f1597",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "762653a5-c5f3-4056-8f53-552e4aeda7db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "431fa41b-ce11-49ce-907d-224308d6e57f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a4c69f9-77f5-40f4-9bd7-92acc38aa191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6baef3-e130-4e7d-af3d-4e1181c8b687",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef5b7c20-d887-4670-b032-fdfc9085cba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f36fab25-aba7-4c0c-b7e7-65603e522fbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1332bc76-6c6c-41b5-b5fe-0d31ea9fe622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bef8065-dfd0-4be4-bdb9-a777e7e0ea9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfac7ef1-d0e5-4dbc-a3d1-14492bff2d99",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76a638b-cdc7-47f7-81e3-5034855f999d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94e0e115-8375-4a71-a4f4-d8a6d975d146"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eecf2d6c-ac6d-4768-8a5e-bcb1537189d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba048eea-79ac-4964-8de4-86cfc22861fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add5716a-4ccc-4caa-9bd4-c8382609b05f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09e7af0-e1d9-41cb-8c4e-b28a085721b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ba4c2df-9ee3-4b68-ad5e-ba60d0273b63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde0f0c9-591e-4c46-90e5-a7f343bb31e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a94d140e-ce22-4c0c-85e3-4b3208f70ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb6e89d-5dc1-477b-9621-0650c4bbf32f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4159c6-888c-4eb8-86e2-852477bf5d1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "170fc55e-bdae-4950-a185-0b2e054535f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c92cff5-19ae-4c44-81a6-4d27b1fe6578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "121eaac3-0e37-4fc0-aa4d-dd811cac04aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0aa70b-6abf-411f-b390-6c07eb4e6cb6",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7606b2ee-0ab8-4124-adca-b25f881cf02e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dbd39a6-0af8-4fff-ae6d-67f354ebdef6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89afff2-f7dd-44a0-bdb9-1e8094a5152c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "108d5e39-59bb-442d-8c4e-5d6746d6f25e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a689b8-9be0-4a1d-bcb5-36174a2d21d6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70054eb-8325-4af2-8b09-bde71bbd3eb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f175bec3-7e04-452a-98ba-b3c950606621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57efc625-0655-47ea-8366-93f0e07d38c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b94b75ef-adf4-444f-bb71-4efeff695570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3b8a8c-80f2-4495-9cf2-b28b31cc8fb9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "115b30f9-0828-4b3f-8a3a-7e65d15fc759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb491fe2-5af3-4204-99f7-4510535cd2df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5252b9-e971-4a6d-8a41-523d1c7273e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8708e54f-3644-4f84-8373-522504f128c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7a230b-462f-44e2-935c-db6e1cf10c03",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0487fcc6-ec81-4ecb-bd53-848568bfecbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6c1ab90-8f41-451c-a36f-3c7c01fc0c64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dace897-1449-4477-8cb6-d2fd6b26aea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "719c6381-40b1-49c3-9a69-7f9cfad8b64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a8aa0c-05f7-4ccc-ba00-d86eef81a22d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf6d842-ccb9-4793-9b25-7ac790e550d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "506212cb-1bb3-4403-be32-73c727eda7d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb02d97-657e-48ee-be1d-1067f5c90a31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8882a94-ced9-4efc-b92e-b3d41609df58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c67f50f-1052-464b-9e53-1907fb86a5b4",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab222a4-5469-4854-8bf6-3e838f248f81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f01b12f5-4fc1-4cf6-ad18-dee6967369c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92969e80-b65d-4779-bf9b-728cc20825b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81db54d4-261f-40cb-9e64-23a4edfeb87a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53ab5ff-a066-48d9-9dd1-cbdcb6730794",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5e78c9-5e12-47f1-8155-02871e589973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76afb798-821f-4f30-9327-592eb86932a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd2c005-e651-4ee2-aefc-f6ec1bd8f3c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06cd05b9-be02-4c11-b141-ef52e2cdeb0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9db7851-6b62-4539-8181-c7978e34efc6",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79cae680-1180-465a-a816-8ab8ac024d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3ebfb32-40de-4efd-abd0-027074a89a00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca5bc44-7e90-4486-a5df-423af24e6e0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30bc9559-2226-4380-bcd8-5cf6b747dd21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92488c92-0050-45f9-b613-82e5edbc79ef",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82cf65a-4075-4728-a0bf-3467c12a0d6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31eaefbf-07a8-49db-a8fd-7083de1a074a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1138e8e9-132a-4484-b265-240174d6fe35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fd5dea3-bd3d-4fa3-acb5-450811d8faa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b4a19f-b7d4-4928-a4cc-ea8c87e9d91d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a739bfe-f54c-4d99-b5bc-32be424e5ba6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a705bd73-5190-4522-a435-d71e23edb05b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb6a152-9f28-44a9-9b35-8934b7363fa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a21f684c-97b2-4687-9b56-25f44ea09422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ec5763-b104-4f9a-8d02-f38ac3f15bfe",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd53b1c5-976b-416e-b1ab-467964c8a3c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b353eee-6a2d-41b3-9670-793001b04de5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59137e5f-7914-4f25-96aa-f7ab6bf6352a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4ae67dd-8444-4774-bf26-e2f34316ed25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152176d9-3682-46f1-907f-1ea03a90ab80",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd940b6-6c18-414c-9808-bd36002fdb41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52ccad14-46f5-4a2c-a70c-7a82844119a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f21f8361-f725-4370-8b4b-73fb856a9a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84f437bc-c602-4fee-b251-0ae481fee381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77268655-744c-489c-bcdd-4e28fa23199f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855bb527-54bf-4275-b566-8c7db5cb7f9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27d189d2-cc16-4c8c-82fd-3e3435a15d30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2deccda6-1975-41df-9a3e-a2a84cbf7398",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b98fc4da-5a74-47ef-b83d-175e8d7741fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d836ac41-8d88-4dea-a3fa-139a03a939a8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f58e56-a49b-48fd-b7d0-1c2f1398cdf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2674d7b4-ace3-4f22-9b47-1bc68e4fb4b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b3f087-95fb-4a37-86a0-b2ca5f57ee93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3d23caa-c5de-4270-b4dc-23b339a454f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0766390a-f3ec-45e4-a0f7-743040ee7482",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3657bf4-c2bc-443f-8fbf-56a62e1852c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "215a5968-a38a-466c-b8b6-a28713f42b20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "949007fe-4471-4420-a602-97dc474d4f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caa5ea44-94c6-414e-8431-1dae5c69bbea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6d1cdd-d606-413d-b5f0-6d7ac4565e6b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87c5ec1-4b22-4ce3-be2a-68077f7d79fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef5eeaa0-d6f3-4a44-9041-caf10ed23358"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e1acb0a-acbc-47e9-9dfe-746d0df5b1a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2deb900d-1531-4f89-91f8-23582f562e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00368a1a-7d2e-4cd1-ad31-6f685cf36166",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a549e688-2176-4181-8516-847a44e8f140",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "898bb749-8311-4ee0-9b21-2b53dae00558"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8856a0c3-6705-40a9-b5db-5e0860615df4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b1cd269-3952-4670-a965-edb27084ddf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f59591e-5b29-4a5b-b96c-418e5791bf4b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1bcf9c6-0a9f-4238-969f-0c6bcbd57655",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfe5abfc-db58-464c-a770-40cd9a99550c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "939e4710-5bb6-49c5-99ca-5538e6316599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96d563e9-9d7f-4362-8d9f-53bd723d87a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac54c9b6-8dea-4afb-a9d7-fb3bf582dde6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6f0a50-1569-4af4-845c-7cd8cd1c512f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e665b16-98f1-4c26-b116-fb0fac6e9dfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d11c684b-ded5-452a-8a3c-4bc9f8fbb0bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dd21e39-3ecf-44f0-84aa-08d7e3d69730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e115c4a5-d66c-4e4e-9fd9-ba956607d6fa",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a93537-06c8-4f7d-82a4-7c916b4bed5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56bcbf8b-1a49-4285-9a11-abb38b2dfb99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2e9d21-b202-479d-852a-d6ead0a36e9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "517bd9de-0302-4904-b007-2508de4898c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b59a64dd-6713-48ca-b6ab-8d46569a36ca",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e99c41db-039f-43e1-b9ed-8f35aa55cc42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01922e34-6440-4eea-88b6-1d1ffc0bb8d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e49073d-e162-49e1-bf49-72184e5d572c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "972747e4-ff23-46f2-951b-75e858a17fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1763d0c2-f21e-43cf-8ceb-d78197454a4c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afde348c-e560-46e1-8c45-7c8b80cc9446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1083bec8-aa1a-4d53-81a8-b186b0c88308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaaedb78-f86e-45c2-8f33-12104130391c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dd09c59-f23c-4216-86be-3b208a13c751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d84c70-4d6d-40ae-bc47-54df39a33041",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28be0475-bd9b-4ee5-a9cc-caa6a416bcd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c1b8f19-7d0f-4853-9c95-d722129696f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "620fe524-567d-4e7c-8d13-4bc3291b9e4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d712087-5c24-433b-950e-31d4d4bc6488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ce6fff-ff79-4616-b46e-05811c64089a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7a22ba-b495-4e32-9772-762adddc9f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62c65dd8-84fb-406b-8438-ed49823ff949"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "face64bf-11d3-4e71-9912-7f180e142cea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eeed051-2d38-4ee3-b9f3-bbb4ff742ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe956289-bf29-490d-ab35-14d7022f15a7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b023fab-fa22-4cfd-8ca7-1ae5804e572f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37a8fb61-015f-450f-90e5-e8732ad9e3c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8199599-d27d-4fc5-9821-641a23696c1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30a1b248-b7ec-4baa-810e-8a6aebbe2dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec1710e-1a02-4494-b3e4-6dc95fbe07fd",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daed2395-0c63-45fa-878c-dcd10ff2c2a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "708992c4-bb52-4c3d-9465-816749c245c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e746032-4b6d-44e8-b81f-e846a7f36787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "591566a3-bab9-44cd-904c-9e74611be0f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9598d96-ee08-4437-969b-563eae4cd57a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c5857a-f356-4158-8bb7-e3d3de45af68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3fd56ff-6bc9-475c-99ac-8824ca36c131"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b68c1a79-e9af-414b-a059-7ec3966870e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bf58055-a398-4264-96d0-3d39edaeb1ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b6850cf-aae4-465c-a401-bd0689059024",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611ace4a-1d32-482c-942c-e492b4f265c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1047d710-6bac-4842-84b0-fa6c6e5cac1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef6e0169-7c26-4d0b-9635-5b4328a880b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cfad966-bb0e-49ff-924f-ea23c177cd83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a467c04-d749-4050-9e3a-2e82f5a5bc11",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf86eae-15c4-4633-81c7-1a45eb374bf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c92daae-d714-4af5-a317-4451f0251df9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed8a582-096e-4d17-8ea5-6e255592abbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1138a472-2588-4c1d-82bb-e37ffe7c11f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec78279-2440-49db-bffc-5b7afa7f67d7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29aff918-e76b-4ba8-9b96-ae70e25117d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aae2fa9-8149-4e01-a746-f7edd6f07cd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1775626d-8dd3-4d91-bf49-01aa842a4ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d905f65-8a13-457a-9ea5-ed2830fec565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a06a27-5f73-478a-90e7-d1827dc70cff",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a368fb24-5faa-4065-9122-8f31d6f764f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ed28371-0cd8-4e53-b6a8-6b90dae12262"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4f8667-5aa7-48a7-8f78-6c933b3b4747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3f7c4ab-9d7a-48b1-9aaa-7de09f75e129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695c8725-fd9a-4370-81cc-4bf30eb23cd2",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e049f007-1c0f-425c-ba17-8f17f890cd78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "261e86c9-92dc-4222-b747-a431c366ee5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df50460-2634-49ac-86d9-192b81aefcb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27eba774-3221-4403-b79c-f40b67ea8bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa413fa-7468-491e-8723-b50c6207fff9",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e833faf-10cd-4c9d-9db3-4516aeb11041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "429e27ca-224d-4694-9f70-b0af2758e2a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2837ff7c-8e08-42db-9f7b-c380f29a70cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b3653b-86e6-4bf7-966c-f4ff84563693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82bc86c3-eb02-4d26-b51b-f432e2486b6d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b21b8b-d829-4fd7-994f-5ebd88b79773",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "290858f8-b920-426e-9f66-5ccb6fe33f5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2ad9786-2de1-4728-a046-a307d99b2793",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4335f5c6-88bf-4832-ad3a-b6000d72ab44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b484bd-3c3a-41e2-a09b-a0e20c61d871",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3cc91eb-5f91-427d-bbd2-f3ad3b34b1b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b9c147b-741e-4319-8dd7-0de26b9974c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e899e4-a501-43dd-af0f-1ad08fb59d2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05bbc87f-d03d-469d-aa43-99fe408118ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f3099e-abdd-42a4-a140-aa47ef475ffd",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbc9fa0-3f5e-4536-bb5f-5f18f510c9be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0340d8d-592d-4cbd-a201-1b92f285bc9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e22c9f43-52ba-4b30-9fa2-b542ecff35cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4c6af89-60a8-47ef-a4ff-f0f3f344fc2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2339eed-c28a-465a-82a9-2df67d83084f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12079f1-5237-4810-9081-f3d74cf7829c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cd43ed2-eb41-49cb-a387-239374aca093"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e10afa8-6f1c-4f61-90f8-0085e89ddac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd6c524d-f993-42a8-b1b7-7474eea8701a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab43e6e-05fb-4bb4-be9c-7d95e7ef429b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d56fbd5-d6a9-4422-9ded-5faedc08e149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d474ce3a-2367-4fce-b51e-cc490496582d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e54fd0b-4d66-457c-8880-4daa5b9565c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aad7cbbf-ad97-4350-a7f8-2a71eeffab93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1192ed-7912-4641-80af-444570416aa8",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd5af0fd-bacf-4461-9755-6c8270f23dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29db2664-2c61-43a7-bea0-776d6e3aa42a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a40b5e0-8c4f-4b41-8b68-40d005b3056a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37e84ec2-c935-4a22-aa1e-b077303385a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c9f880-11c8-4268-98f8-4f3b968e808b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b801bb-83e4-48c7-97d7-b1f0a068fa70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47c5acdc-15b7-4e51-8d70-4141cf89dae9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0959d47-23f2-49d2-a2e9-1139b6b672f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f745c63f-b5bf-437d-9fe9-ff4bbbd1f7ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772f55b8-3b76-4c9f-a9e1-1500cc8dcd71",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc3ee8e-6fbd-4481-be6b-a3b271eced6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9db1024-757d-4f9f-bb70-ac536c3182aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fde67e9-328a-43b1-8bf3-7a633e7dd66a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a4500d-4ba0-4b43-b065-4f858be6a7c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "082ca9b4-6794-46d8-9657-944ffbdc2101",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8e89c8-cdd2-4cb3-b2de-23849813971d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7931d05-2280-4501-bc95-805813b4b931"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "854cd826-1e95-474f-8a6b-870ce4ccb601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f33269b-49f3-4e91-93e7-d5c183f5cddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc2bd676-a9d5-45ca-9ce7-8d0551426cc6",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c166efdc-381b-4143-a491-551ba804ab16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "924dbd48-d727-4e4f-956c-3a13d438cbaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91560ac9-8ce8-4dd1-9b33-17d44aad0d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b1fc473-5f21-4665-b007-c12ed513d514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68c3be4-514e-439a-973c-960277345583",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6907952e-73fc-4bb3-b8f3-bac72b32c280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4e0b503-40ac-4190-a653-b4a2a950bba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d437c82-05ee-4996-b574-3b8f65c16d0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcc2a8b1-43db-43b4-a28b-3f27ecaeec20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec0fb3d3-e375-4f8a-b265-8d48af95c5a0",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0076682-d9c0-4b4a-9c60-54c8db594e5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67cef88a-1c97-48d0-abd5-15d1ad57ce05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56b509f-aab4-42c0-84fb-0f33a2173a59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c067ead-b01f-4cf7-bad7-0f410674fdf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2077b85e-dd55-4a92-8dc0-35b5a79de035",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8d0257-43f4-42f6-b732-92db9312e97b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2afe0ea-5ebd-4460-9cf9-729122c06afe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35bc9c2-9386-4292-b668-cc3b8bcb3865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc313f83-3853-42d1-a272-6d0dc154ef52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33caaae-643d-4c3c-979d-9032f62fa856",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b4bf7df-6690-47b2-ba3d-83ef475fa396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae897aaa-97d7-4aa4-9583-d88d40883b77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0afb5b-6c98-450a-bcd2-7ed7acd5fe4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98449c15-eba6-4e19-84ab-21e03fefd228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "350a5a7d-c72c-441a-9c3a-73300a58325e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b24764-8932-476e-b7e4-ba83106e0fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4d56082-ee50-4046-b7be-e61d16ea4af1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c80777a-db88-40f7-9b8f-6d6c06587695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4f70450-fef0-4216-83aa-dcafe68ceafb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa508f6b-c43b-41e5-9ded-20eca4c7b015",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08619597-2808-4bd1-81b0-3e0c6cc5bf84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a61bed80-0103-4859-8e7a-d79bc8179d55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94878fc-b3dd-43ef-b650-78fccb13004c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f28e5fa-b7a7-4db7-8e3e-86d6ea6d0ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "294a8b95-0c46-4079-9a10-a9144c4e4e48",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08058619-be3f-488a-9fee-fbb43ab181f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54ba26df-a6b8-474c-9a2b-6b9d95f2ef46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce66780b-84b1-4764-8020-0b60855c63dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bce64ba-155c-49d1-9a53-9aa870c2c8e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd4c760-5b7f-41dc-b00c-3d76f0469758",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "848e714c-cc15-4683-a2d6-7bd11f738cc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d4fb060-287e-41b6-8526-93b79d9dd959"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5b685c-4a7b-48a5-a815-8d92fc356862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04d5c573-6cde-4bd7-8de1-28c4f79bcc4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74108270-26f4-444f-92ad-61f131cdc7ad",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd7c4117-f3c6-495e-846c-18e324b3da62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01738f0c-13f2-462c-aa4c-66848e58f777"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "936e0ffa-8b6f-4918-9932-1b7673fb08d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19daf594-376a-46b8-bfe6-b9af2f95d080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a07aec6-5c25-43b0-9ce7-43fdee556bd5",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "010a8abd-a317-48f2-9ef7-75329b4b6c57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c56e015d-7fdc-4743-b8a2-32091c9c29c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a681dad3-44bc-4efa-98b3-b34672f30cf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bec04f5-4b9b-464f-a895-c7b9ece1f086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a747b5c-ca7b-4cfa-926c-92ce58b1c626",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef33c8aa-ff97-4378-a8c6-a0d9ab66ad32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "672cf5ef-f441-49be-b35b-01be8f7c7316"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a7b4435-ec39-4362-a923-84f285eb7daf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36e57eb3-6e2e-4aed-9772-2653f6e0d204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "803bf531-535e-4082-9477-a873cba3b301",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199f0520-5009-4e62-a27d-c078e5069f27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd3c42a8-f514-43c9-9a30-ac115d8e9c7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a569d57-439e-4837-b8f8-196ee618b5df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b575271-bcae-4b2f-8660-8b9967238913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1292285-8030-4cd3-81a5-d0d267c65319",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54934cd-0e04-463a-ab76-ede07277ea74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac8de52d-3333-468c-b7c1-97001dededc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6297a437-0768-4abd-aba6-e2e49e17d9d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e4e5d85-29c3-404e-9641-1121607e2190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14020d83-5918-405b-bab5-da50f4927cc0",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d70277-ca59-43cd-b890-f7bef248629c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ed2264f-84b8-438d-9560-63cd8dff3fc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bcbe48c-fc9d-4bb7-bb28-79e1e100a8a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e822ba7-fc75-453d-9682-e63dec1e3295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb8e43f-4f81-46d1-9b2e-0b7dba6e7b79",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9f9309a-9e63-462e-98ba-0c3e9a34e16f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d55081c4-fbbb-4f66-b232-04acc9ecc553"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d8a8c0-b88b-4ad4-9a17-4df8a513f229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a692739-24ec-45a0-9c0a-8b669379d7cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8bc7177-a055-4e45-a49e-4c1e8a34427c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0acf36-cff2-4613-8311-8631a0e59562",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2a0cf90-b6ff-4ec6-af2c-41b436333f00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89f63a2-3547-444c-9cde-1a5c06b04fa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c07500e0-e9ac-4dbe-a488-2cfc1360556d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c85ecd9-1d8d-4668-b265-8b96735f114c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb045f8-8f90-4ea8-9f21-95606465979e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bad1cc9-fdef-46c5-9fe4-a09d4fbdb8bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b45acd-bc02-4550-8e87-756a3d815d2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "446ceac0-df64-4fea-988f-d52843c2414d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac23d27-d90a-47d9-b168-2869a45d5f44",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a7380b-867f-4d27-a4ba-f9a2ea5fd10b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36e5c84c-9578-4273-9cd0-608a17388a0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f32ac1-63e4-469b-b7db-8af8ff713762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b17024ab-1b1f-4a8d-999b-939e9deaae28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83feafa7-d5f1-4dab-9082-c8b0157f033f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e3bd80-f55d-4bdb-9845-0418e2841092",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a26b774-58d3-4fdf-8f85-7ace0f04f622"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b51db8f-db14-49d4-b460-f008dd9e54c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "622344e9-53d6-4300-92e2-fa5b6e6589e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b422a5f9-cb53-4b70-924b-6a4bf8e6c108",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf3018b-1a2a-4a38-aca5-e785669fb255",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7be3e5da-b38c-4cfa-bb8d-11fe47de2629"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "313d8121-09da-48d2-b6c6-86b0495e4f0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b480b67-1577-4518-9303-79f98f9899d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88faf52a-9e68-4e65-bea1-b3626142460b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5853453-135d-44ef-b9f3-4ad5ce39c820",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10635418-95bf-4570-a158-fa28dd5ca81e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2892cee-3005-4c00-8660-46a830194741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a439a3df-b7fe-4def-8cc8-e7b888141858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcac31d0-3945-4976-adfc-fe7b23a69b8b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac282ad-ce62-4228-acf9-6a4d2f178817",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4b413fb-c05a-49a1-ba79-31c96cd3a550"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad661dd-f11b-46f8-8ffd-be6f75c3b408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "670108a7-2d6f-440d-b38a-6d333304465e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c50887c-1f20-44c1-9869-699c105ce981",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae0f803f-0b16-4476-a582-65fada2b7ccb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e28fc4be-bb39-44cc-91ea-2d448785ee85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe27763-3271-450f-96f2-e748ce17bb67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "748fe984-2c9a-41b6-9db8-d1f2e831bd2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22647c10-f4e3-4653-ab98-8bbf4bbcd31c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7312dca1-1e44-4e79-8cd4-5e4d37d50143",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61c9743f-0998-4061-8dd7-1c1431c89ebb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac60c5df-514f-4d49-b26d-bfd230d741d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c137795-cc00-4dac-a80c-680f999ad25f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d72a072-97e6-46de-835a-e0f793e4b2ae",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b852fa67-eea6-467d-a20c-0d748480e2cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61b109c5-42ce-4b21-a399-4be50e0a7dfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11338ddb-421d-41e4-a7cd-bacf82d9205b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f6fe37-9957-4a58-bf8e-97855016a5aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ab7693-062f-4476-9eb9-39a74a31a8e7",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d3f309-e9d1-444e-8ab0-e5c5698210bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25c209bc-477e-4462-a54f-279c3d4fadc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ba9807-9f19-4405-8d67-d112be5fe1c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d680807-1bd5-4e87-8d24-5e424721aed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5194d553-788a-43ce-b050-7c4d9b45b354",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c53021ff-f979-4fbd-9371-bc19e46d4ccb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d013e7c1-972e-4816-9cba-5c3754aca82a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b61fd8-753b-47d4-a62c-bdad1d04af33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edf9cdd0-3c29-46b6-9c60-824cfd1e0c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34392c2e-5892-4f47-88b8-285e5ac34f1b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9bb9bff-20f8-41b7-b8a4-560979405b7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08c587d5-63be-419f-954c-97bbacaa9a52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91402790-1610-4933-b926-32a9f04b462f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b46b82ed-6322-4436-86af-8be8ea4b228a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "220ca0a9-c171-4dd7-8318-eb5e8ac4604d",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a0d67c-f4b9-4ff7-a7a9-c3eba828f2e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ee151dc-3e10-4eba-9d46-48cdd1b61795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d923c7-858a-42ce-b769-cea95238f79c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "328e0dc9-55ed-4f5c-91cc-aaa50b4e44cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e22642d-8b22-4a08-a121-41d17e8127fc",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5e6777-ad0f-43d1-bad2-b39748d9fa19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a8aba96-7baa-404b-b37e-cb043063585a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb7539cc-ee5c-4b3f-b1e7-2a327f0631d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed00ff6b-14ac-4a5d-a939-9ef860f47c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d6f4af-5cb7-4758-add6-70edadd3456f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f708e62c-91d2-4949-947a-5defd5cf573b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "421daceb-d753-4996-9dd2-298b429f8bec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c6a203-0605-45f5-a0c3-06efd8bca99e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf7d28f1-5e47-4bef-be2f-b39511858055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e66049-a827-4c42-8392-74d552ffa6ef",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c833e2-9faa-492c-843f-2781a8bb6564",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28e2bbc2-1a47-4e50-91a2-f3437b2c3fbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "477395fa-b7ed-4f83-aa9e-12ab3cbf7e46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56640091-4539-4550-baf5-76dfd9a36869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "012b8520-ea52-41ff-a444-5275198e013c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b843d6-806a-42b4-a05d-ca04f01183c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9108dcd9-2d04-476d-aee0-3dcf39ae96c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f2cff5-b41e-4beb-b41e-785549fe0da2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c94f4ca0-eb2e-470c-97b5-3be04669d7c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e118f247-8729-4bb1-b4c9-b7545dc3df26",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a946fadf-9e4c-410a-8189-a83e927cf772",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7713fb9b-2fe9-499f-a753-30e9b58987e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be9c249-e329-4af0-acef-f134d28d9967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab46eb62-f7f8-44f6-baac-ebf618c75b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8546830a-a058-40ca-96e6-1aace565e356",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b2420a-990f-4fe6-bd09-c85b2f9c6cae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b40189c3-4f4a-4cbe-9752-7a35fe2f71bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d301918d-f1d7-4432-b353-ef04be81e01d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63b6c873-2c38-4479-8b1d-9a91169868e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba7900a-f650-44a2-a206-3614f58e03ba",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a767a8df-6ac2-446b-a4b8-9014f4a04ca6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c39a2234-47aa-4059-8dc6-d5b2c22b8208"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ceaf10-679e-4a23-afa6-0a44caf02e05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0c1f4a5-cf63-4621-b6ae-e99bf04f332d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58382123-6d9b-4ea9-8d88-b73489b25d5a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d472ae-4a99-4950-a84e-ba5e00883a96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1af9ab67-3f7b-49e7-9c55-45fd43e173ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b7769a-3726-4f29-a134-d30f6689c152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5503bb09-daf0-4662-9a73-39f5341bf721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae391161-5cd8-4e70-b4b4-344ad5cfb2bc",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4e34ecd-5fd6-48b0-b970-61c300f06e7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "029d5e5a-adf6-42f2-8ba9-303458d8cb70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca7fe57-1b68-4246-926f-fe5e49ccd94d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "056ea599-68c6-4b4b-be9c-30d4f2e0194c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589dbddd-abf2-4dd4-b9af-ac7f82155c14",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0a4b4d-7821-4355-aaad-5be7a0ab8970",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e3b958a-7108-4072-b3de-61f06b11ce36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b7be11c-ac6f-45fc-b5f2-18043aed268d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c9b650f-0ef4-4cb7-8fd4-e08961e4fcd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79c6802-4a90-4233-9a5d-f71d88e8902f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98dddbda-0f1b-42c3-96b2-f2296ca48b5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8e63a84-9218-431d-9c53-b7d7335ab75f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44be3734-2014-4477-9ba0-ee6a53dde998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6023b43-27ec-42f6-9ed5-db57261c2fce"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "101bf4f6-0689-41a8-b311-134820e7b635",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d02e1d98-c211-47f3-a183-d93f639f6d4f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "586e9634-ce0d-4b05-ab3b-ac9435790965",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d2397b1d-7235-4324-b8b3-1b2c390af705"
                    }
                  }
                ]
              },
              {
                "id": "8d605f93-617c-41f6-b5ce-53fec0b790de",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1000f6fa-ca67-414f-ae48-f861e9061c49",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3fa3f30-6304-4fa7-838c-00773c48f475",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5e13e73f-c081-45ae-9d78-41df307539cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0d989c-b3fb-450d-8667-16f70c5cb090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5179d94-054a-4f4f-827a-35945bb01f5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f4c3e6-7edd-4331-974f-248669655ff2",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "951f4641-edaa-4518-88e6-c3b1009412c7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4220d3fb-7cf9-4401-adc7-b62d2977cedd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2d7cd5-4070-4f34-a0a1-67c044d1bd9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23190423-a4b8-48a7-970d-d654806d4f2e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f3e1878-45aa-41af-a29b-cdd23ffa55ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ff6c44a-aa75-488b-abfb-b1f2fb48b338"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "221ab613-397c-4679-8ff1-98264aa56b4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "67f7cc50-2a42-42ef-899d-bb362001fc76"
                    }
                  }
                ]
              },
              {
                "id": "362552ca-326e-418a-881f-2c3a19a9932a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6d6b712f-c947-4165-b279-9f938c252057",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "908343c3-819a-42e7-9921-c80b5e50e24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "1952acf8-76d6-47dd-88bb-4730879f3a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ee16e5-a55e-490c-850e-9168cf8e005e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c7b7b3a-48ae-452d-99dc-2b83413e70d2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d8a25e8d-63e2-47f4-834e-c0d5ee876a60",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8b427ffd-48e4-43bd-b0ca-fe75ec4ba544",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "568961de-d452-43f6-abe8-53b874c57471",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "741bc912-8d0f-48ee-97c8-8a8bc3e95958"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "772bddf2-b0b4-4835-a1e5-8e4225eb0b90",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d593d18-587c-438c-aac5-d6e97385c883"
                    }
                  }
                ]
              },
              {
                "id": "031ec164-3389-4d8c-87d3-9a654c4f8501",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19ef1e7f-58f2-4f66-a861-fcf81a34d886",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7ab40d3e-6e25-46b3-b1fd-13f15c737be4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c977755c-a828-432e-b8fa-b542ea085d6c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f25a7ee-4527-449c-ac92-e20864bdcec8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d716116b-5cfe-4a3a-940d-81214905a263",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a50475ef-b7dd-4962-8a4d-9c7ab4f4a584"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f2960032-4c06-428d-99d6-168dc51bf773",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ba239510-a204-47ac-815a-7d9af9e887e0"
            }
          }
        ]
      },
      {
        "id": "cbb670dd-0ecc-4bae-b5d0-81e0812cda71",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "32ac5a68-f22e-4304-852c-0b81b3978e22",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2e4e9041-d870-4103-bfa0-3d628cfbd480",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d5779a77-acc5-4055-baed-c946de2de12c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "615e9304-0d6d-4578-b218-37b04575d421",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "452d09f5-53d5-4413-916f-d8aecbe8e6a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "717ca896-2713-4fbc-873d-3c7e556f02f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7e1ccca-501a-430b-a5c0-8ade820b09a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23f69bf4-5ce3-44a2-ab13-7b65724a71f9",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e52708-8191-449b-b3d3-5e643c25189c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bd17d08b-d1f9-49ed-93e5-8efbafe38f6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "706c8e84-ed34-4863-a376-27fa91198913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91545648-0422-4ae4-8221-9a9f0652659e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0777696d-b15f-4428-8b49-65431e2d35a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd9bc5a0-951b-4c10-9598-52b418706fee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a1300f5-ce5d-4250-8ee7-d7804aa71257",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da8d4737-3231-490e-9773-73a65a44e35d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d88a8d1-4f32-4545-98cf-0842a909e48f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c7f19abb-3fad-45d3-b2d3-c027e922e1c4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "be8dd2b6-56c4-46c1-8ce6-9748c77ee850",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b2fc0d7b-f07d-4f77-897d-3c062817e9e4"
            }
          }
        ]
      },
      {
        "id": "07634901-e642-407a-b9b5-faa9d13744b1",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d62a0df7-3d3b-4ab4-bd94-216c85af38ad",
            "name": "Negative Testing",
            "item": [
              {
                "id": "def3e032-d353-498a-85af-a43daa7e0036",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "62a5763f-253a-4342-b54c-022ae78e9329",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2943a67c-a2bf-42d2-b109-0553f52cc8d6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73748503-c6b8-416a-a6cb-28a215b04e22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be83b54c-fdf7-44f4-a1f0-05bf9e6af1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92c5a802-10a2-4d47-b677-71aaa36ecddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e8edf2-8145-4105-9692-6349488a373c",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81837ac4-bcaf-401e-a89a-9a1763d3cf91",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bd0e296c-dbab-467e-ae91-6ee07e345f2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce31cee-c092-4075-8956-cac56a1c6103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a5a5bff-2c94-4fa8-af6e-6d8671d249cd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2232ae9e-4b51-4f2e-ba3e-1e194e06ce1d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "695d6de9-770a-4200-8052-5f14bea108ab"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0beb3b7-5157-4c55-8098-57135aa944bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "467a9104-ecb6-4dd2-a987-b47cf4e2a420"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b3306c8-1f2b-434e-b202-4acbe00db670",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cb217585-b791-4016-b2f5-1670da6f795e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4fe35940-2f42-4e3e-bedd-67e3ebd7cca0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "28d44e56-6cfd-4d6d-8466-711dcb56ae1e"
            }
          }
        ]
      },
      {
        "id": "54605a02-210e-4789-ab48-e6079a84a35c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1e61073a-835d-4745-a273-dbea1e3ff72e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "06161ef6-c841-4add-b830-6a4b426edac0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bb53a9f7-a0d7-4367-8ade-31b8d0cccec9",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b61b707-ae1f-4c5c-ad48-f8a0cb7410f9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31c8e3c3-3db5-409c-8973-5d4f8c661630"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "444b84b0-9685-4e36-8c27-e80dde70a797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45b81858-19da-4f67-bc8b-33478421232a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0960ff-6907-4ba6-b260-fbbaa5fba17d",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4f16ae-7201-46ac-96a5-ee2d3e4f13de",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "32ac216c-f1c7-4ba2-85c2-274df92e261b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46f397f-fc87-47ee-8ab6-cb4edd920afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd7b735b-494e-4e7d-bfb0-dcd682011044"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57452202-3e6d-4685-a61b-56535ea32ccc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d99e86c-6ae7-4788-bb77-e3ba68671a95"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2de227f2-b5b4-4aa0-8a1d-c3d9c626635a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5e21f7f-49ee-4ca3-b525-4a95c4f1a461"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d42c6706-97a9-4f11-8662-397926dc8a4c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e527b6dc-cd4f-4b1d-835e-67ed420b8779"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5844f9a4-fed7-43c8-9938-0498c41e85eb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7c24a2c6-23ea-487c-873f-300851146c34"
            }
          }
        ]
      },
      {
        "id": "bedb10d8-29ab-42ca-98ba-08dc32a4ebb3",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "db216a71-8c53-4253-9397-3e86eff4304a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "beb3588c-565f-4015-87ff-769cea126e69",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4f71e3bf-b9b6-456e-9a17-c4438d263e75",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "05d787e3-68e0-442a-aabe-850419d75a83",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eec569c4-92ac-4771-91a8-02e6c2862091",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 298.5192307692308,
      "responseMin": 7,
      "responseMax": 6191,
      "responseSd": 821.316731052704,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1682901525916,
      "completed": 1682901615984
    },
    "executions": [
      {
        "id": "b6b477fd-de7e-48ab-92ff-d8cc659f1385",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c25cc42e-70b1-4141-83f5-1cb329e8fef7",
          "httpRequestId": "0c624be9-571e-45b0-95e5-4e674396d7a0"
        },
        "item": {
          "id": "b6b477fd-de7e-48ab-92ff-d8cc659f1385",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "529837da-cbb8-407d-a87a-7f21e52fb738",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "8281365d-fa8e-4fcd-b61f-1c3ecb1d285b",
        "cursor": {
          "ref": "a8031637-3adc-4f40-ad32-00ee5c466dbc",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "95f77b6e-de9d-4746-97bd-522b217575af"
        },
        "item": {
          "id": "8281365d-fa8e-4fcd-b61f-1c3ecb1d285b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8e5425e2-bb87-45de-a00b-b1ac9557c0b3",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "8317802e-1c4d-46c3-aebb-1b7adbf1a81d",
        "cursor": {
          "ref": "6e3219e0-d110-480c-8575-0bc135632ae8",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "13fad619-05d2-4e7d-aad4-2bcbad00fb4e"
        },
        "item": {
          "id": "8317802e-1c4d-46c3-aebb-1b7adbf1a81d",
          "name": "did_json"
        },
        "response": {
          "id": "82e7b56b-ac6f-4136-bede-c47288e8ec53",
          "status": "OK",
          "code": 200,
          "responseTime": 830,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d34ef679-aea4-4944-bb43-09625a952a09",
        "cursor": {
          "ref": "38dfed5e-8c3a-484c-b3b2-2b86e4e0db1b",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3cf588e0-bd13-4e22-8c9e-49d746015b29"
        },
        "item": {
          "id": "d34ef679-aea4-4944-bb43-09625a952a09",
          "name": "did:invalid"
        },
        "response": {
          "id": "0a15a055-e73e-44af-b87d-909d5643b9b0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 588,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "d34ef679-aea4-4944-bb43-09625a952a09",
        "cursor": {
          "ref": "38dfed5e-8c3a-484c-b3b2-2b86e4e0db1b",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3cf588e0-bd13-4e22-8c9e-49d746015b29"
        },
        "item": {
          "id": "d34ef679-aea4-4944-bb43-09625a952a09",
          "name": "did:invalid"
        },
        "response": {
          "id": "0a15a055-e73e-44af-b87d-909d5643b9b0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 588,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "de074be5-c138-459c-bcdd-94403f4bb949",
        "cursor": {
          "ref": "07629bb1-e960-49bb-92b8-f87116323f45",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "65749fd3-075d-459c-a0ea-387197f412ff"
        },
        "item": {
          "id": "de074be5-c138-459c-bcdd-94403f4bb949",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7dbab326-e5ef-4e8e-badf-519e9c3136fd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 106,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc44b7e-f725-40cb-b8d0-77221d5cf10c",
        "cursor": {
          "ref": "8d96ce52-351e-4eeb-a2bd-75c76bd5db1f",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "272243b1-bc22-498d-88bf-e28228a5c906"
        },
        "item": {
          "id": "4fc44b7e-f725-40cb-b8d0-77221d5cf10c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "adab8314-afa7-4a1a-99ff-24b1adf6ecfb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 72,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b945cb5-fd04-4b1b-a515-f636e5358330",
        "cursor": {
          "ref": "7b0e5da9-96f6-4373-b8ae-59750892419d",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "63526bec-c424-4ecd-b6ab-2fbbe1780e10"
        },
        "item": {
          "id": "6b945cb5-fd04-4b1b-a515-f636e5358330",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ace1e4a2-35a9-44e7-9010-1077ef0d4cd3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "71093525-088f-4d22-9a16-9e387ad215a1",
        "cursor": {
          "ref": "d85c36bc-b01e-4cd8-8677-ed35cef63f0d",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "01b6c1e6-dd06-4f06-9349-fe9cda590591"
        },
        "item": {
          "id": "71093525-088f-4d22-9a16-9e387ad215a1",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d0a5da63-fadf-49ea-bd5b-69fd3352b393",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "71093525-088f-4d22-9a16-9e387ad215a1",
        "cursor": {
          "ref": "d85c36bc-b01e-4cd8-8677-ed35cef63f0d",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "01b6c1e6-dd06-4f06-9349-fe9cda590591"
        },
        "item": {
          "id": "71093525-088f-4d22-9a16-9e387ad215a1",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d0a5da63-fadf-49ea-bd5b-69fd3352b393",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "f979f96c-2262-49b8-b513-f1bfb1fc7175",
        "cursor": {
          "ref": "662e060a-e495-4224-82a0-c28e7d327541",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "db291043-7846-41fb-813d-914c4091d9ac"
        },
        "item": {
          "id": "f979f96c-2262-49b8-b513-f1bfb1fc7175",
          "name": "identifiers"
        },
        "response": {
          "id": "da93f288-5ea3-4819-ae50-e6e80cd5e850",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e844f73c-8f6f-498c-9e00-331184c6c0e6",
        "cursor": {
          "ref": "49566f13-9a67-4bb8-b9cf-cc26c1ea8b6d",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ee17917a-b906-4cfc-a601-a58697b99758"
        },
        "item": {
          "id": "e844f73c-8f6f-498c-9e00-331184c6c0e6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "81cb3096-b17e-4c1b-92d4-822d355fe0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e844f73c-8f6f-498c-9e00-331184c6c0e6",
        "cursor": {
          "ref": "49566f13-9a67-4bb8-b9cf-cc26c1ea8b6d",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ee17917a-b906-4cfc-a601-a58697b99758"
        },
        "item": {
          "id": "e844f73c-8f6f-498c-9e00-331184c6c0e6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "81cb3096-b17e-4c1b-92d4-822d355fe0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98517a18-f834-4785-9a88-7540a8e85a8c",
        "cursor": {
          "ref": "572385c3-7e05-46b2-a0f5-fc2ca2d8b2ba",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7b0861b0-cdf2-459b-be7c-645e95489c73"
        },
        "item": {
          "id": "98517a18-f834-4785-9a88-7540a8e85a8c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f24ce63e-ecf5-468c-aec4-d1ed40d63e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8559eeb-ff7d-42e8-95f3-6b957c5d6fcf",
        "cursor": {
          "ref": "8689d371-4467-4189-9dcb-285bfe396efc",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "75139847-642a-4c4d-b3bf-6ba59f6bb18f"
        },
        "item": {
          "id": "d8559eeb-ff7d-42e8-95f3-6b957c5d6fcf",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "34df9626-6d7d-486d-a1fe-ccc715c33cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8bc173-1010-4209-8990-e6bba30e4b4b",
        "cursor": {
          "ref": "a2f069fe-6557-426d-a185-8d82e539b4b1",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "96963f31-fcac-4bd9-95ec-d56bab788a76"
        },
        "item": {
          "id": "ca8bc173-1010-4209-8990-e6bba30e4b4b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "dc6e62ae-0b7b-4d97-b733-49c77573fd40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e04ff2-ebfe-41ab-85f7-c308d90cdc9c",
        "cursor": {
          "ref": "238560f6-abca-42c0-9361-8a3d5047d5a7",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c723f718-1a0c-4492-ab50-da29ea592953"
        },
        "item": {
          "id": "68e04ff2-ebfe-41ab-85f7-c308d90cdc9c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "2712168c-82fa-4273-aa8c-3c379eaa8cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0c10ef-25e0-4c3f-889e-d5c76a02323b",
        "cursor": {
          "ref": "594a2124-7f0d-4a8d-8dbb-a14790e150a3",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "cbbcd94f-d0e9-473f-acec-52379da62f82"
        },
        "item": {
          "id": "ab0c10ef-25e0-4c3f-889e-d5c76a02323b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "6adffa88-6b65-4962-9592-9e3b419f8910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6bbe41f-8852-4140-b066-755b076150cf",
        "cursor": {
          "ref": "dfed31a3-bb92-4361-987f-beec48bd7ad7",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6518e80f-2d64-4881-8312-4715089ff217"
        },
        "item": {
          "id": "c6bbe41f-8852-4140-b066-755b076150cf",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7e2d113a-45a6-42ca-bfd1-cfd0f2e09876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6325a628-772c-43d4-a781-c5aab2542746",
        "cursor": {
          "ref": "9e0fdc35-4cf0-490d-b9fc-0e27ebcbb945",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ea9fea40-8db7-4fc3-82ce-b9bd321d1956"
        },
        "item": {
          "id": "6325a628-772c-43d4-a781-c5aab2542746",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0c16b8bc-7377-4624-a450-46432173e54f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dce46b9-28a2-4073-be4b-89f216aab3c8",
        "cursor": {
          "ref": "416b38c8-f74b-4268-a3b8-0a1c9d164bc6",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c02d9ee3-2a15-43ad-b63e-b2634f4d80b5"
        },
        "item": {
          "id": "0dce46b9-28a2-4073-be4b-89f216aab3c8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "675277bb-3001-4d8d-b824-22ea502e8ff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d05c06-d190-4dd6-ad3b-9623368d07f5",
        "cursor": {
          "ref": "7318b066-0160-4e69-b8c9-27af83416f3a",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3621eaf4-ff88-48e1-a16e-784c76c28949"
        },
        "item": {
          "id": "04d05c06-d190-4dd6-ad3b-9623368d07f5",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "70163fa8-c738-481f-a037-3ec655ec442d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27923450-6154-4180-a69b-51782ec0e63a",
        "cursor": {
          "ref": "5f2c920f-98fa-4959-8973-fedc2a7b38f3",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9489c704-38af-4866-898e-0dbde1283026"
        },
        "item": {
          "id": "27923450-6154-4180-a69b-51782ec0e63a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c7cd210e-a326-43ac-9153-1d4aaa4beb80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e9c0060-6152-49a5-acee-060f4d3808e5",
        "cursor": {
          "ref": "a154e934-e584-44e4-8d10-e9aef22b2d3c",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ad3609cc-dd5a-4d03-891f-ba1b8c47ddbb"
        },
        "item": {
          "id": "1e9c0060-6152-49a5-acee-060f4d3808e5",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "240d62cc-70d7-4db7-8fe6-ce8ffa7f32e3",
          "status": "Created",
          "code": 201,
          "responseTime": 701,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "39f7ee59-6c55-44d3-8c01-e2d344364fdf",
        "cursor": {
          "ref": "7a2f87da-d857-4fd5-b509-4d162b279a1f",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "2e24a9df-e5c6-44f9-95cf-4538be2403a0"
        },
        "item": {
          "id": "39f7ee59-6c55-44d3-8c01-e2d344364fdf",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a04734a5-ee4e-4392-b2e3-81825ce8b7a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b14c4142-c4b1-4b82-9881-2088f7518cd2",
        "cursor": {
          "ref": "f2ccae5c-58bd-445f-87c1-1291f117e25e",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "16aa22f4-df95-4393-b98c-7f0a8368cb0c"
        },
        "item": {
          "id": "b14c4142-c4b1-4b82-9881-2088f7518cd2",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3fd7eae6-1d35-4584-a198-6815bdf3cda4",
          "status": "Created",
          "code": 201,
          "responseTime": 5954,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "09f1feb6-f115-48a7-b4ff-9df1a47bbd70",
        "cursor": {
          "ref": "da1cf2b8-0c72-4d65-a06a-5bf01146b028",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c2637912-45a1-4fee-9c16-399990d67ae8"
        },
        "item": {
          "id": "09f1feb6-f115-48a7-b4ff-9df1a47bbd70",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b78ee62d-e547-4225-b6e1-028beb4ff73f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2378f2f2-6e7a-4d11-9d05-e7816a5c28c3",
        "cursor": {
          "ref": "960a47e3-dbd4-4f72-bafc-b551f551e612",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c72dd4f9-f889-44b7-9bca-6ea879de3783"
        },
        "item": {
          "id": "2378f2f2-6e7a-4d11-9d05-e7816a5c28c3",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ec3d3308-926e-4c07-8cf8-2edac2025185",
          "status": "Created",
          "code": 201,
          "responseTime": 6191,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "e69bc836-3fca-42a8-910c-f0412dd3bd87",
        "cursor": {
          "ref": "85728edf-09a3-4a8f-8b0e-54cf988fb725",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ac2137ff-0f66-47bb-bcc1-6f6204fb668a"
        },
        "item": {
          "id": "e69bc836-3fca-42a8-910c-f0412dd3bd87",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "14c55c1e-2f36-4dd9-8bcc-f12d525999fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce7200e-3242-4550-b966-efda92bb2019",
        "cursor": {
          "ref": "b5096e26-7486-409e-9a94-32157178c0e7",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a9b1a496-bcec-426f-956a-2f2a1f570636"
        },
        "item": {
          "id": "4ce7200e-3242-4550-b966-efda92bb2019",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "565ff675-1560-4000-89f8-c719b9a9ae3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ff6558-8fe3-4c63-ab68-0b978fb8a807",
        "cursor": {
          "ref": "874d7d55-4f09-4315-b1fd-7700e76ac30a",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9f1a106a-d64a-4cc4-ba55-c508fe89b5f7"
        },
        "item": {
          "id": "07ff6558-8fe3-4c63-ab68-0b978fb8a807",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "493417c6-be06-499b-a69c-e36f60dcb896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c02b8e33-ad5e-4524-9296-a8384d95492a",
        "cursor": {
          "ref": "47420f21-a486-460b-a8c4-45fbb6dc9577",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "dc0870b0-90cc-4c4e-a889-b79da2190cf7"
        },
        "item": {
          "id": "c02b8e33-ad5e-4524-9296-a8384d95492a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5192ec58-f219-4d45-a2b0-9653c8cea306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6992f13-3310-4480-b9db-390216bebe6c",
        "cursor": {
          "ref": "faca215e-0212-42d4-9764-130393bc3be4",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6e1ee67d-19cf-42b5-86bb-f7b25acde4fa"
        },
        "item": {
          "id": "d6992f13-3310-4480-b9db-390216bebe6c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "3f54eddc-87de-4a37-bdfa-3da135f81cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1903d229-983d-44e3-a2ac-e9cb3a07e419",
        "cursor": {
          "ref": "ea9ad5ab-dbc2-40ae-8304-4618a22af21c",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "1a4953c8-7a2f-4735-b4ed-fde601253626"
        },
        "item": {
          "id": "1903d229-983d-44e3-a2ac-e9cb3a07e419",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ca2e06cc-0f08-4a63-96bd-2c338da01e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0eaeb9f-b9a4-4efa-af18-75b3fc63c64e",
        "cursor": {
          "ref": "6b26004a-b355-489a-a5e1-821cf7eefce4",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c92626a6-6e43-4af7-8c3c-b055b03aa191"
        },
        "item": {
          "id": "c0eaeb9f-b9a4-4efa-af18-75b3fc63c64e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "476a39ad-f750-469e-9141-4e06288f45bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933769c2-4ee3-4e2c-bb4e-4e39996f32e9",
        "cursor": {
          "ref": "16f6f2d3-846e-4872-bbf5-d927371d9417",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "8a966c3a-2fb7-4398-853b-e56830f0b49e"
        },
        "item": {
          "id": "933769c2-4ee3-4e2c-bb4e-4e39996f32e9",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "291f0ce9-1239-4102-be05-a12e9bb988d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adf2f304-c97a-4ac0-b5c9-32f63952abe0",
        "cursor": {
          "ref": "0cdf1f1d-845c-44c0-9adb-012ae57f6574",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d094d843-d23b-46a7-ba36-d7836ec4f48e"
        },
        "item": {
          "id": "adf2f304-c97a-4ac0-b5c9-32f63952abe0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "97fac68f-736e-44a6-827f-31e87f2b5a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391f9b0a-988f-40a4-aac5-edd748f1945c",
        "cursor": {
          "ref": "9e59f254-d86b-4c6f-9fe3-6450d7978f16",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "395c558a-07ef-4bb0-a4d2-be981b14c27f"
        },
        "item": {
          "id": "391f9b0a-988f-40a4-aac5-edd748f1945c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ac73a552-91ad-490b-b747-049c2696ba8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c0cf19e-f242-4bf4-9a57-7e7e349e67e1",
        "cursor": {
          "ref": "537634f6-9ae2-4b58-a2ec-2d0a6c58a6e5",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "eae213e9-66d1-4769-88e0-36c823834b17"
        },
        "item": {
          "id": "5c0cf19e-f242-4bf4-9a57-7e7e349e67e1",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8dc9f69a-2839-4bc0-abb8-f8cfe4f961ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cddb036-2abd-40c7-b47c-dbdf5cce9f1d",
        "cursor": {
          "ref": "c5d1146b-6d18-4ab5-936f-98e587dc93a5",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "143eb96f-11a0-42ff-a0fe-59a137edf99e"
        },
        "item": {
          "id": "2cddb036-2abd-40c7-b47c-dbdf5cce9f1d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4ab9e803-95ac-4ec9-8625-7a84bc575054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cca2fca-8341-4f1d-ba88-b2a4d157aa08",
        "cursor": {
          "ref": "a89674dc-9338-41e7-9d0b-ac74cd434ed3",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7d7e4fb1-076e-43c7-9657-d9679d302443"
        },
        "item": {
          "id": "5cca2fca-8341-4f1d-ba88-b2a4d157aa08",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e5427594-0f4a-4a8b-a20e-58f4fc5f01be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09d45d13-cd75-4ec3-8eb4-14e7a3d7e8c1",
        "cursor": {
          "ref": "fa043a62-496b-4ba4-a9f6-8b0f76661e4e",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d5a0da46-8aef-4509-bd4d-09a1bff03227"
        },
        "item": {
          "id": "09d45d13-cd75-4ec3-8eb4-14e7a3d7e8c1",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ce8b74c6-1058-437d-97c6-97db73de730a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9a0ee4-2a6f-4795-9b91-3ea56df11187",
        "cursor": {
          "ref": "b2ccfaff-06a7-4489-8a62-472e38edba7b",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "da97b996-a536-41db-8b5f-787e01f0c407"
        },
        "item": {
          "id": "4f9a0ee4-2a6f-4795-9b91-3ea56df11187",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a41e92ca-fd53-4c72-8d74-35b8711ec3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16158645-bec4-457e-b853-f317bb16372b",
        "cursor": {
          "ref": "816c8c00-d102-4630-b1a7-cf97d8e84882",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5f5b1871-6013-4108-8dc9-ffbf2a9a1008"
        },
        "item": {
          "id": "16158645-bec4-457e-b853-f317bb16372b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c34099de-d91c-4a0f-bc5e-e065d4cca06b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac260e9-d067-4287-b47f-4e2b4b4f0146",
        "cursor": {
          "ref": "d7890c96-6788-43f5-9a74-2f5fad686dfb",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7d98805f-1a8e-4bea-9d36-e0762dfe62e2"
        },
        "item": {
          "id": "aac260e9-d067-4287-b47f-4e2b4b4f0146",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0340b142-1f75-42ce-b232-e314272a6831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8162dc-1ff3-400c-830f-443b0951ecb5",
        "cursor": {
          "ref": "780c5eff-07b6-4923-8ab4-e30490d471ec",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "74cdfbbb-9f16-40e8-9b60-c90cd6485a8d"
        },
        "item": {
          "id": "6f8162dc-1ff3-400c-830f-443b0951ecb5",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e2d40d41-ce7e-49f5-a9df-7d1be6740336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ef749c-67af-4375-afdb-89dd08f6c71e",
        "cursor": {
          "ref": "ff6d251e-509c-4d1e-a83f-668d14298a57",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c9d2e801-7d7e-4f9a-8155-8412e2e33d39"
        },
        "item": {
          "id": "c5ef749c-67af-4375-afdb-89dd08f6c71e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "03e9c4d4-17f6-4231-a61b-02871227b47c",
          "status": "Created",
          "code": 201,
          "responseTime": 2620,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "552b9e54-5775-4fa0-b83f-3b209a91bcd3",
        "cursor": {
          "ref": "183143f7-45f0-4622-955d-f2ec3c29d323",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "bbd66338-85be-400e-95ae-ed9797af0c6b"
        },
        "item": {
          "id": "552b9e54-5775-4fa0-b83f-3b209a91bcd3",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c835117e-e9c1-4dcd-b9e6-a50c87f91ca8",
          "status": "Created",
          "code": 201,
          "responseTime": 4145,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e08461b3-71d7-484b-9ccb-f65c52f2d8e5",
        "cursor": {
          "ref": "4b4c0a5e-0d50-4a18-a1ae-a14801b5f212",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "225144f5-2909-4b0b-b3de-6dbf08b0d2eb"
        },
        "item": {
          "id": "e08461b3-71d7-484b-9ccb-f65c52f2d8e5",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cefd3474-63cb-4ce1-8c05-42a380f3d3ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a2309b4-765d-4599-a82b-95fc35ec7d55",
        "cursor": {
          "ref": "6e0b4299-b9a9-4065-b304-a389cbc19611",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "954c5c20-eb9d-4483-8d64-77c7f0d433c9"
        },
        "item": {
          "id": "9a2309b4-765d-4599-a82b-95fc35ec7d55",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "432dd26f-9446-48a3-9fb0-eeaa71a8e906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7bec3e6-09a7-4eec-bbea-214cd1164803",
        "cursor": {
          "ref": "f78e2271-4251-43c3-8930-581c5059530b",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b62e8a67-f18e-4af6-8e5f-f6507a155d67"
        },
        "item": {
          "id": "f7bec3e6-09a7-4eec-bbea-214cd1164803",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e2c1d11e-7ed1-4d0b-9bd1-b53eb3cd4de4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba12ae8-1efe-44b8-9317-7ea7bc4b111b",
        "cursor": {
          "ref": "1f5ad396-9089-4918-a865-9df51479a24a",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "fd4814ed-c4ca-4edf-8516-351cea10119e"
        },
        "item": {
          "id": "cba12ae8-1efe-44b8-9317-7ea7bc4b111b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3d9078b1-e0cf-4661-9558-2c5ec0dfb28a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ecc686-41a0-4cd7-b4c3-ad829e58fc0e",
        "cursor": {
          "ref": "da827b34-0e9d-4113-b85f-84d97c435cd8",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "222adbd3-e088-4e3d-8c08-51fa2dcdf22f"
        },
        "item": {
          "id": "37ecc686-41a0-4cd7-b4c3-ad829e58fc0e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "62afe6d2-266c-498c-a94d-0eaeae9435f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9308bb3d-0fe9-4db4-84b9-f2fe0664567d",
        "cursor": {
          "ref": "82dbcf20-678e-4c01-98c3-4ddaeb770ed1",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6b285bae-2731-45ae-9778-60493d48b5c3"
        },
        "item": {
          "id": "9308bb3d-0fe9-4db4-84b9-f2fe0664567d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a23f086f-40c7-4643-a7b5-16ca11d620dc",
          "status": "Created",
          "code": 201,
          "responseTime": 2638,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "8fb98c2a-408e-41b8-bf0c-71196a6cdb0f",
        "cursor": {
          "ref": "39f900b2-7c4d-4c5d-8cf8-99483b870f7f",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "10f24d39-c0db-42fe-8cbb-196e3a3c72b7"
        },
        "item": {
          "id": "8fb98c2a-408e-41b8-bf0c-71196a6cdb0f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b1e0c8c6-c279-425e-be6c-c23c83b3b110",
          "status": "Created",
          "code": 201,
          "responseTime": 2959,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "78bd9d10-7816-4219-a50e-7a420ede7340",
        "cursor": {
          "ref": "f385a392-389f-4d7f-b04d-1a50ceaa3ae0",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c5fefd2b-3168-4bc1-8649-713d22fd9c50"
        },
        "item": {
          "id": "78bd9d10-7816-4219-a50e-7a420ede7340",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "895c4115-3e3b-4b1b-9c1c-2dfa1e764d00",
          "status": "Created",
          "code": 201,
          "responseTime": 2523,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "b675e271-a489-49af-b64e-da458a9f3672",
        "cursor": {
          "ref": "0f77098d-fa3d-4e81-9e6e-c0fa5289bd64",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e05f85a6-5ea5-4d2a-a796-44b5d4be5ce2"
        },
        "item": {
          "id": "b675e271-a489-49af-b64e-da458a9f3672",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e144f664-dc67-4884-bbfa-d3bd3d136e99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5076b388-51cc-47b8-afe4-ca21bf1cb2c8",
        "cursor": {
          "ref": "63f5d7a2-b1db-471e-b734-777156133520",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "78dc6852-fba3-4575-8420-9eea3344ed7b"
        },
        "item": {
          "id": "5076b388-51cc-47b8-afe4-ca21bf1cb2c8",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4a58bc78-66d7-4c6e-89c3-c6048a52432b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70a7d5df-2007-4d47-8758-25bf2fdb9516",
        "cursor": {
          "ref": "668de06a-eae5-4f6a-a9cd-a5c163e145f9",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "71a4b6d9-0327-4528-9378-1f1b1fd271eb"
        },
        "item": {
          "id": "70a7d5df-2007-4d47-8758-25bf2fdb9516",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "76f407b4-4f27-4ee3-b80b-a19da976ceff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b7ff7ab-997d-4f00-9b5e-a5b3ba76b6e8",
        "cursor": {
          "ref": "733774f4-6a58-433a-904a-fff783b6c785",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e7f66139-d43f-4670-9930-6c57be6f122a"
        },
        "item": {
          "id": "6b7ff7ab-997d-4f00-9b5e-a5b3ba76b6e8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "411a37ef-e240-49a1-b24f-5f539038f604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73439806-9753-4122-ba9c-2327a843dbf8",
        "cursor": {
          "ref": "23192fc9-4535-4270-8f3d-37678b247ae0",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f73f0515-ab81-4fc0-89e1-700c6f907fb8"
        },
        "item": {
          "id": "73439806-9753-4122-ba9c-2327a843dbf8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "69a4f10a-fef0-4869-8e5f-ec4f39ae41fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a6f49c1-8e33-4616-8843-a808de2d1e0d",
        "cursor": {
          "ref": "5c197b76-a77c-427f-b05c-c6bbd0262c25",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "cc25cad7-2e93-43b8-96ce-2a573ef9b381"
        },
        "item": {
          "id": "6a6f49c1-8e33-4616-8843-a808de2d1e0d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "28f2dd63-867b-4936-9792-d2d8eca99ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a01b28cf-e9dc-4b3c-85f2-2a8aba5c5ac4",
        "cursor": {
          "ref": "a34ac97d-f167-4f0e-aa32-0a8afef12bc7",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ebedb171-8b71-459c-bcfb-43dd2941311b"
        },
        "item": {
          "id": "a01b28cf-e9dc-4b3c-85f2-2a8aba5c5ac4",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "dbc9014d-a4ee-4535-a185-7583ae851529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e694f4-0c4a-47b7-8e2d-4d1b042d97bf",
        "cursor": {
          "ref": "e2505c10-a370-49f3-8235-2e017f1d511d",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0570602f-cfad-44c1-967f-49d50d619d48"
        },
        "item": {
          "id": "c2e694f4-0c4a-47b7-8e2d-4d1b042d97bf",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d3b70a0c-e2d4-4b30-8f3d-feff31aa2ac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "195cb8d0-3eaf-4acb-ad93-99e3e8e087e0",
        "cursor": {
          "ref": "c3c255fb-b85e-41ac-b09f-85606f24b1c1",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5dcd9d77-8647-4767-84bf-fdbfc1a0ea06"
        },
        "item": {
          "id": "195cb8d0-3eaf-4acb-ad93-99e3e8e087e0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4a5b3e93-9365-4e62-9232-f719f21b1448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c7b6a1-d3de-445c-a39c-356af138df5f",
        "cursor": {
          "ref": "25cf00a9-7fe9-4589-812f-fd956bb8990e",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "57863686-7332-46ed-a31a-15126c64528e"
        },
        "item": {
          "id": "b3c7b6a1-d3de-445c-a39c-356af138df5f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0b1a1e11-c225-4b31-9967-4adfb1222d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26276a9-561c-443a-bf51-1e23da8aa8fc",
        "cursor": {
          "ref": "827c00d4-d1a4-481e-97cf-bbf16e0009af",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ec342a8f-99d4-4a6d-b29e-0b25518b4fd3"
        },
        "item": {
          "id": "f26276a9-561c-443a-bf51-1e23da8aa8fc",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "68c3c468-da7b-445f-b344-7034403c5c8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c8b574d-d13e-403c-b85b-f0ee897ab528",
        "cursor": {
          "ref": "c11ccddc-843b-49e3-a6ee-443d25679144",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "84f8dda9-4b1e-4c84-8717-58aab7857000"
        },
        "item": {
          "id": "1c8b574d-d13e-403c-b85b-f0ee897ab528",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "541fd0d9-683c-4130-883d-7d4ff66dba4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "406bb76c-7090-4ee5-b922-7ac8a0458ffb",
        "cursor": {
          "ref": "e897d795-bf6d-43f1-a9c0-2e39724a0b6f",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0ad67c99-b21c-46a6-9a86-039e6ea5838e"
        },
        "item": {
          "id": "406bb76c-7090-4ee5-b922-7ac8a0458ffb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e8513bbf-20ae-4786-90b4-63af2ec22aeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f288b4-8067-4508-8a1e-c9b60f55c43d",
        "cursor": {
          "ref": "6d250514-f395-499f-825b-a2b60e8084fb",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "7103f5b0-b4ff-4ffd-a492-66b80b82ff3a"
        },
        "item": {
          "id": "47f288b4-8067-4508-8a1e-c9b60f55c43d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "fc0d8ae9-0c9a-492e-a585-f704e863b727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a949c4b9-1459-41d8-80ac-cc9c90417055",
        "cursor": {
          "ref": "77ad200b-c6cd-47b5-b5de-6206c6c5a046",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d0c39220-9d05-4bf9-9cf3-ea9fd85d59c6"
        },
        "item": {
          "id": "a949c4b9-1459-41d8-80ac-cc9c90417055",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "cc4a1588-9a6e-48f6-896f-1cb9f2c40028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b47a889-bafa-4c3d-968e-76baef3a6b4c",
        "cursor": {
          "ref": "63eabfa5-4d81-46ff-a55e-5fd6f403c41a",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "faa37f5e-0161-4fc3-b916-d32397d3eb01"
        },
        "item": {
          "id": "6b47a889-bafa-4c3d-968e-76baef3a6b4c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "45de4a06-93ab-4a6c-aa01-ee2b8a7ab80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "050b14b9-a2a4-4f5b-a782-45437091ac77",
        "cursor": {
          "ref": "b88b2aa4-6cf6-4f73-aace-f4000b228ce8",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0f577902-3182-4a0e-a611-97c673d5b2e6"
        },
        "item": {
          "id": "050b14b9-a2a4-4f5b-a782-45437091ac77",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8254c680-50fa-46c4-976e-b52b7f8f0692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8568c95f-ea64-4a12-b254-944e1cd47dff",
        "cursor": {
          "ref": "d9c064fb-f940-4999-b3f3-ba7aabdb6bc8",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "6965fd14-f4e9-4d12-b9ec-51a709674b5f"
        },
        "item": {
          "id": "8568c95f-ea64-4a12-b254-944e1cd47dff",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2ca19067-3ecb-4537-a615-9e3a14c1f013",
          "status": "Created",
          "code": 201,
          "responseTime": 2393,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "ab3de989-d1e2-41f6-8074-3f472962f9b6",
        "cursor": {
          "ref": "11181c22-77ac-42ef-90c2-0f557b2123a7",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e6c350d6-49f9-41d7-90bd-92d04926253b"
        },
        "item": {
          "id": "ab3de989-d1e2-41f6-8074-3f472962f9b6",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "eb398af9-3214-4763-94a4-09f4a93e3801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d669d8-c119-4f86-936d-21dc13544562",
        "cursor": {
          "ref": "19371468-1c74-455b-9302-7bc466f96303",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2e8eeb05-a1b8-4cfd-9bf4-72555e8a564d"
        },
        "item": {
          "id": "45d669d8-c119-4f86-936d-21dc13544562",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9fd15bcf-806d-421a-9c24-65485613e721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "255ce7df-2936-4c43-bebc-d7a6275ee68b",
        "cursor": {
          "ref": "2dacfa3c-7b9a-4909-a14f-298601e73f8d",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8c9f03d8-6b88-4409-ba3b-71c01118ff72"
        },
        "item": {
          "id": "255ce7df-2936-4c43-bebc-d7a6275ee68b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "fc3bddca-c5d2-4463-872d-5e32485cc585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaed5b33-996a-44cc-8a25-b9324505b9eb",
        "cursor": {
          "ref": "341f4b1b-d4a2-46f8-adb4-8734069aae11",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "cabeec16-a477-46de-811c-83de39377791"
        },
        "item": {
          "id": "eaed5b33-996a-44cc-8a25-b9324505b9eb",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f7939614-dfad-42ea-9744-659b512884f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac889f77-1e68-40d9-858f-cf19e457f6ea",
        "cursor": {
          "ref": "0543dcd1-121e-4041-9f5d-9eee9f7e9b9a",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2e2836d7-122c-4c49-8de6-ba5440aa5999"
        },
        "item": {
          "id": "ac889f77-1e68-40d9-858f-cf19e457f6ea",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7373562d-4846-4a3c-987f-d1fd8fc4756f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b26c1ce-6e0e-477f-a8a9-7cda1363d070",
        "cursor": {
          "ref": "2a6997bb-bec8-408e-bd3e-caf2a5bbc499",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3cfc29b7-cae0-40b0-92ef-4f94cb75061e"
        },
        "item": {
          "id": "5b26c1ce-6e0e-477f-a8a9-7cda1363d070",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2e455c56-ca1c-4213-9f56-89f921e6780e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf21306a-6f0f-4296-b704-a233a01a4943",
        "cursor": {
          "ref": "8da886af-a826-46e2-bbfd-316cc5dbcd64",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "433b803d-7665-4d93-a196-7979eed8b48d"
        },
        "item": {
          "id": "cf21306a-6f0f-4296-b704-a233a01a4943",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "185a6959-0dc6-4776-afdf-9a6ac9bbc279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f0b129-b7dc-4c61-86ba-ab9c257a2d4e",
        "cursor": {
          "ref": "17abd68f-126d-4850-bee2-72ea90163d88",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "336cf700-82b0-487b-9c83-848092bf2aba"
        },
        "item": {
          "id": "72f0b129-b7dc-4c61-86ba-ab9c257a2d4e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3f3912f9-f84f-4635-8427-b45039461d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 988,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b9a647-7ac7-4dbd-a5d3-69a7a0d3c855",
        "cursor": {
          "ref": "f94fa495-8c33-4699-8ab3-68c5437ce336",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b2372d9c-2255-4473-a224-b9b874f1c9de"
        },
        "item": {
          "id": "80b9a647-7ac7-4dbd-a5d3-69a7a0d3c855",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "55e9291c-fbaf-453d-bf5c-ddb1f2892e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136d799f-4de1-4ba8-b8f1-78546c7d5573",
        "cursor": {
          "ref": "93c05016-d96b-496d-8981-6c187cf1cb0c",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2494ac5d-fc34-47c8-abd7-47ae13fbbc8a"
        },
        "item": {
          "id": "136d799f-4de1-4ba8-b8f1-78546c7d5573",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5196fc55-7f8f-4c73-8352-f48e6e97ed0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e63434-9a85-4b2e-bb02-d05fabb555ae",
        "cursor": {
          "ref": "28af91ae-f69c-4ce9-a9eb-559a15eb238b",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "64f32435-e426-4021-bd8c-9b1d893a3cd4"
        },
        "item": {
          "id": "d3e63434-9a85-4b2e-bb02-d05fabb555ae",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f2ef00e5-aeac-45b8-9733-b163d89ced30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99930ea3-44ea-44e3-a369-5004b027b61d",
        "cursor": {
          "ref": "d5e43071-33c3-4b9d-b2db-539b7b2c7d54",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "93ec161f-9ce9-4807-a373-606e29755573"
        },
        "item": {
          "id": "99930ea3-44ea-44e3-a369-5004b027b61d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "05a1c32a-1f8e-491b-90b7-845eadaa5379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5541e687-fe0b-4cbd-8512-bd6c50d297eb",
        "cursor": {
          "ref": "f2a9dd59-010e-4e92-b7fd-07799aedbf41",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8a774a37-85d3-43b0-9024-cdbe34165ec6"
        },
        "item": {
          "id": "5541e687-fe0b-4cbd-8512-bd6c50d297eb",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "77ce7364-e313-4877-9aec-ebd6ce12027f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84559088-f5b8-478c-aeba-206a817fd4ad",
        "cursor": {
          "ref": "99029272-ee13-4254-879f-b5478b7af662",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c2249899-3d64-42ec-a069-e48910bd7098"
        },
        "item": {
          "id": "84559088-f5b8-478c-aeba-206a817fd4ad",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8d3b4985-e8ad-42e7-90b6-4e2ef89b0170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf98b03-4805-47ed-8747-c4ea901abc75",
        "cursor": {
          "ref": "ca9b190a-bc0e-4f51-b05a-da0c9dbd1f69",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "fbf58744-86ee-44b7-8318-215fa23e3ab8"
        },
        "item": {
          "id": "bbf98b03-4805-47ed-8747-c4ea901abc75",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "217cf321-597f-4fa8-981a-4116d107e1f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a798c9ed-0b53-4a66-aeb7-3875fd5df639",
        "cursor": {
          "ref": "3e1e1c77-daad-4508-9b67-23aee01271d5",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "1374b595-2ad9-4e28-9a61-6156160853a6"
        },
        "item": {
          "id": "a798c9ed-0b53-4a66-aeb7-3875fd5df639",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9c5b478a-d8cd-4187-974e-d148426fddbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1072c8c3-5164-4a94-90ff-b30918011d6e",
        "cursor": {
          "ref": "9044c3f9-27a9-483e-8c7c-7ab958ffeb16",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "7a422f15-e25a-4b4a-9f05-11ecf25309a7"
        },
        "item": {
          "id": "1072c8c3-5164-4a94-90ff-b30918011d6e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e85cb124-860e-4b20-997c-2787f42fda56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae975fc-68f2-44bd-a01b-53e50cbec0a8",
        "cursor": {
          "ref": "67e98ab1-9998-451b-9a08-c103317f6200",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1ed1f954-2f42-4ccc-b062-70caa3ac804a"
        },
        "item": {
          "id": "9ae975fc-68f2-44bd-a01b-53e50cbec0a8",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e2dd1088-5ec0-490b-a25b-142be02dd02e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0459d7a9-308e-4ae2-83ac-46abb719e617",
        "cursor": {
          "ref": "5872384d-80cb-42b8-92f7-cef83892df8f",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7f5d3f9f-3c42-4f1a-a420-e2119829bf5a"
        },
        "item": {
          "id": "0459d7a9-308e-4ae2-83ac-46abb719e617",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "7863e8d9-fae0-4e1c-8fcb-7f3fea135b82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9370afd8-f6f7-44a3-b3d1-7328cc2aa128",
        "cursor": {
          "ref": "6d7858fd-7727-4479-bd35-0bc9311d9c25",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "71f2ed19-1ea9-40f9-89ac-a40650a8bcaf"
        },
        "item": {
          "id": "9370afd8-f6f7-44a3-b3d1-7328cc2aa128",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "01026b25-cba0-4c40-af0a-feef8ba30478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193eb978-b7d3-4513-ac04-fe64f1ab5725",
        "cursor": {
          "ref": "cb7755e7-58d7-4809-aece-17c44383cbff",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "253eabb9-d34d-42f5-9437-89d02eec22b0"
        },
        "item": {
          "id": "193eb978-b7d3-4513-ac04-fe64f1ab5725",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ac3f645d-ff46-4df9-8327-f3e3ec2dd59b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee17b21-f711-4670-9ea0-bb483de82d04",
        "cursor": {
          "ref": "492dbe84-5ffd-4e23-9157-b41067fbf019",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7c81461c-bdc3-41e3-abda-69ab825f51ba"
        },
        "item": {
          "id": "6ee17b21-f711-4670-9ea0-bb483de82d04",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a9bc56af-a6e4-433d-9266-67b78462efa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "057b447c-5ef0-4fda-969a-516e60b6d73e",
        "cursor": {
          "ref": "92c3f745-b9f7-4ee2-be03-317a83ecd164",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "b3d92326-676b-4210-b36a-b6d4055fa0cd"
        },
        "item": {
          "id": "057b447c-5ef0-4fda-969a-516e60b6d73e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d82a6b3c-acbd-4f18-a4ba-cf0ba933e5f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9d1a2e-b0fe-4f64-8c72-36bae342b3bf",
        "cursor": {
          "ref": "14929f77-1dd2-4caf-98f6-5f68d8753f23",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "44c1bf85-9401-4c5c-beb4-dfa7c4c4ca27"
        },
        "item": {
          "id": "dd9d1a2e-b0fe-4f64-8c72-36bae342b3bf",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f6119658-e3e6-4ab7-b7bc-6e64e34caeb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8711725-d2a5-4332-b70d-7392a3bdec0d",
        "cursor": {
          "ref": "fde9cfc0-6cd3-4bd1-b4b8-eb252b38d4a4",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c8195f41-996a-4060-90e1-ed021939d87c"
        },
        "item": {
          "id": "d8711725-d2a5-4332-b70d-7392a3bdec0d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "27147508-3b32-4d71-b48a-52d460fe6130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac805d8-08f4-4d41-be5b-17662f062425",
        "cursor": {
          "ref": "9aa40f91-5383-40b8-9f28-9c9c9f5d89f8",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5e0c71e5-e3d1-441a-8bd9-0d801dc25424"
        },
        "item": {
          "id": "bac805d8-08f4-4d41-be5b-17662f062425",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "86a700f6-8f17-44ff-b89f-02b059c7118a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb043b0-3e94-4259-95e0-c7685fcdec48",
        "cursor": {
          "ref": "ec68eb5e-c374-4fe2-ade4-c7e7ec28699a",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "427e1ea0-b4e2-49cc-8293-e681f349dcf3"
        },
        "item": {
          "id": "2eb043b0-3e94-4259-95e0-c7685fcdec48",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0656fb22-1764-4538-9290-4868d2766bd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827e726d-43d9-45ef-96de-fe11450ff07c",
        "cursor": {
          "ref": "e3236fff-b48b-4f9c-b324-42f68e3193cf",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "708cb275-b62c-4a15-88db-1475bbd8d213"
        },
        "item": {
          "id": "827e726d-43d9-45ef-96de-fe11450ff07c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "aa7b2c8b-accb-4d73-b213-21c97ec58c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a7d04a-0949-4e52-8a1f-e5bea3b8f7a3",
        "cursor": {
          "ref": "527a932f-8ce4-4f34-a7f3-fd900bc90fb1",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e2c7904f-e481-4328-8e13-9b6f6b0de422"
        },
        "item": {
          "id": "f8a7d04a-0949-4e52-8a1f-e5bea3b8f7a3",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "82381af7-fd8d-459b-b8c3-e132dba29a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f08c563-34c0-447a-b239-f6c1e66e0688",
        "cursor": {
          "ref": "3866d2c2-4dfd-4ff6-b939-05f215a5a59b",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e39b63be-5e48-488a-ab27-a47f82de4674"
        },
        "item": {
          "id": "3f08c563-34c0-447a-b239-f6c1e66e0688",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "767291bd-ffd1-4e50-9359-552f5c28566d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c5421fe-5b01-46fc-9050-8f971130687d",
        "cursor": {
          "ref": "dddf1f99-7c3c-4d20-8c02-c77821110b52",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "725a87fe-831a-452c-b2e6-3cc3c01c42b4"
        },
        "item": {
          "id": "8c5421fe-5b01-46fc-9050-8f971130687d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c6744f5f-f80c-4008-95f4-02eb3e9d93df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "ebc00222-a172-4647-97e2-42741920bb32",
        "cursor": {
          "ref": "392dbfba-6c43-471d-95c8-2f52ed976fad",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "89f5dc8d-d234-49a5-bc2f-377230558fe6"
        },
        "item": {
          "id": "ebc00222-a172-4647-97e2-42741920bb32",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "8e2c8c74-cb43-49e7-a563-9b085d573587",
          "status": "Created",
          "code": 201,
          "responseTime": 3463,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "c4ca17f6-6b8d-4ea0-880f-bc36b4971211",
        "cursor": {
          "ref": "58e35efa-3eb9-4e34-9a44-5b3319af1d28",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "0d892e07-81f7-4b76-9bef-d7c217b40ac6"
        },
        "item": {
          "id": "c4ca17f6-6b8d-4ea0-880f-bc36b4971211",
          "name": "credentials_issue"
        },
        "response": {
          "id": "aaf243ed-0c3b-4bbd-bfc7-5ee53e5a34a9",
          "status": "Created",
          "code": 201,
          "responseTime": 2490,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e747c7ac-6ec7-4c0b-9375-588ffe75e495",
        "cursor": {
          "ref": "b1a7e4ed-cf7f-424d-a4f7-e24676328aad",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "276f5ef4-bafe-421d-88b7-37d24a1829d1"
        },
        "item": {
          "id": "e747c7ac-6ec7-4c0b-9375-588ffe75e495",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4aa67120-cd22-4050-a58b-68d5f6875859",
          "status": "Created",
          "code": 201,
          "responseTime": 2558,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5057efb1-a65d-4c64-bd9b-96584403f994",
        "cursor": {
          "ref": "93e1b330-57b3-4692-aa75-4c96f91ccbea",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b783c522-cb8c-4a88-9a85-d352b74aa80a"
        },
        "item": {
          "id": "5057efb1-a65d-4c64-bd9b-96584403f994",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "64a87361-14d8-47af-93be-175d5d06d53d",
          "status": "Created",
          "code": 201,
          "responseTime": 3373,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec86547-a894-4dc3-b7dd-62c6f78e8399",
        "cursor": {
          "ref": "8140108c-73ed-4ec8-8f24-cc07f144c5c4",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e5ec12a5-9c6c-47a1-8729-ee53e2198b54"
        },
        "item": {
          "id": "bec86547-a894-4dc3-b7dd-62c6f78e8399",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d483bd4e-52b2-41fa-9ba8-201050ae0568",
          "status": "Created",
          "code": 201,
          "responseTime": 2359,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bbc4e70-8f63-416d-a174-692f264d957d",
        "cursor": {
          "ref": "e068ce33-65ee-4941-b370-98f0d8c74890",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "3d493f9a-16e4-4efc-ad71-d4bff050ef6d"
        },
        "item": {
          "id": "5bbc4e70-8f63-416d-a174-692f264d957d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f2009b6c-015a-43fa-9446-ed3bf40474bb",
          "status": "Created",
          "code": 201,
          "responseTime": 2729,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-01T00:39:47Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-01T00:39:47Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "4f081b67-5927-4be6-b07e-04fafd1cf200",
        "cursor": {
          "ref": "1f7bcc72-c6fe-47ea-890d-647c344ac8b7",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "82dcb40a-18d1-48ef-8d31-617428ca7f03"
        },
        "item": {
          "id": "4f081b67-5927-4be6-b07e-04fafd1cf200",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f14b3084-4b27-4177-9fa2-5266c9c61820",
          "status": "Created",
          "code": 201,
          "responseTime": 2184,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc6789b-3144-4e3f-a980-eae14a8e527e",
        "cursor": {
          "ref": "77485b82-5387-4d04-b85a-350871dbc181",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "90b75ec2-7a08-4e81-9dd6-e45afb5bc282"
        },
        "item": {
          "id": "8cc6789b-3144-4e3f-a980-eae14a8e527e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5f686b71-2ae6-4ae7-84cc-57f6e3c54178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc6789b-3144-4e3f-a980-eae14a8e527e",
        "cursor": {
          "ref": "77485b82-5387-4d04-b85a-350871dbc181",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "90b75ec2-7a08-4e81-9dd6-e45afb5bc282"
        },
        "item": {
          "id": "8cc6789b-3144-4e3f-a980-eae14a8e527e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5f686b71-2ae6-4ae7-84cc-57f6e3c54178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "676e58c6-5911-428b-b7e5-9f27458bbda2",
        "cursor": {
          "ref": "632ebcca-55a8-4678-8518-eca91ff9b8f5",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "92838f8c-82d4-46fa-8f69-0f324990c759"
        },
        "item": {
          "id": "676e58c6-5911-428b-b7e5-9f27458bbda2",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1b8074ce-5470-464d-beb8-0bd65b2347f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27f25973-d107-409f-82c1-1519914c5f5f",
        "cursor": {
          "ref": "7af72845-71a7-4c8d-8e36-82a9488287ea",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "218e7642-1b35-43c6-a7b5-988ac05d3641"
        },
        "item": {
          "id": "27f25973-d107-409f-82c1-1519914c5f5f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "72f02b0e-e6f2-4be9-9a0c-4a25ebb76118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c717687-b03c-448a-812b-ec54d405c837",
        "cursor": {
          "ref": "b803017c-e1f8-4040-8fe0-e47edc5f3743",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "439c1d68-bf30-44cc-961d-5462080fec47"
        },
        "item": {
          "id": "0c717687-b03c-448a-812b-ec54d405c837",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3faac8b9-fb39-4946-9936-45cb11352945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3afdde-4c12-479e-ab06-b9475f195c71",
        "cursor": {
          "ref": "ad41a835-b7bc-4318-b4ab-f2be681a9564",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e5399975-281f-48fa-ac9f-ecdddd3ee2ea"
        },
        "item": {
          "id": "5c3afdde-4c12-479e-ab06-b9475f195c71",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e872cb4f-51bc-4bf7-886d-95bd5ef1005e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ee6552-f3be-4e3b-8f65-0a7fdef3f9bb",
        "cursor": {
          "ref": "7df5cade-3084-4a67-8e1a-f0e7faf0349e",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "06843008-5f40-4ed4-881b-6627c1cec81d"
        },
        "item": {
          "id": "10ee6552-f3be-4e3b-8f65-0a7fdef3f9bb",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8cb0b578-a03d-490e-8782-dfd710c6d55f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13388fad-1c9f-4822-b8f7-97dc7ba249a2",
        "cursor": {
          "ref": "f1db3b95-2593-4241-b6dc-9c512d7406b8",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f291b9f5-ea4c-411d-9158-3b2d50e05f1a"
        },
        "item": {
          "id": "13388fad-1c9f-4822-b8f7-97dc7ba249a2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2b0668b8-0337-406d-a35f-5adae7749a01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50dba35f-dd13-460b-8934-fd7c5de55d37",
        "cursor": {
          "ref": "7f693d08-4b54-4ea2-9848-a214516d8c1c",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "30511397-5b67-4c99-af03-dbbe08de9e7d"
        },
        "item": {
          "id": "50dba35f-dd13-460b-8934-fd7c5de55d37",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8beeda38-fa70-466e-8d0d-cecb89443713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c149071-a411-4ba7-ae75-fe323601bb7e",
        "cursor": {
          "ref": "fb32df3c-95a3-45c2-b340-2ddf54cc2a94",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c61107ad-59ea-400e-a9d2-ab736c78a558"
        },
        "item": {
          "id": "0c149071-a411-4ba7-ae75-fe323601bb7e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7493723a-9fe7-4613-81f4-52c1b8b31f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4551b9a-17c9-4c92-ac22-fc4d6362aa19",
        "cursor": {
          "ref": "c7e70262-f4fe-4d31-9ae1-e971238f8ea2",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f9585bfb-be4c-490d-85d6-f0c0ad483742"
        },
        "item": {
          "id": "e4551b9a-17c9-4c92-ac22-fc4d6362aa19",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4dc0192f-0026-492c-be9c-ee6948b046a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c6326ea-3f82-4dd7-a663-515b581b58b2",
        "cursor": {
          "ref": "2ca72fd2-e9e7-4439-947d-1a0883780dd3",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "727a3da4-abb2-4cfd-9948-894f55629846"
        },
        "item": {
          "id": "5c6326ea-3f82-4dd7-a663-515b581b58b2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "67c187cd-087c-4b4e-a3cf-5c2823fb6d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "badb1f32-5ea1-4f30-808c-23f5b6dc32cc",
        "cursor": {
          "ref": "92d580d4-6786-4156-ae7f-c1c9903628f6",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "0a08481c-afaf-4af9-b38e-928cad501d60"
        },
        "item": {
          "id": "badb1f32-5ea1-4f30-808c-23f5b6dc32cc",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3cd4a965-5b0c-4888-a238-feb909eeb476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acac2596-01a7-4744-ab5e-cda5a86b3f3a",
        "cursor": {
          "ref": "8e693299-70ab-4e85-9a7d-a986618d9bbc",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "25ce2464-e36c-4f27-b9dc-8e8bb30a96c3"
        },
        "item": {
          "id": "acac2596-01a7-4744-ab5e-cda5a86b3f3a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0b13170a-5c83-4073-b11b-14190c008214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf18356c-c001-49a9-9ec5-98cec9695f40",
        "cursor": {
          "ref": "d9d6884d-4ec1-4b5d-b6b4-d4da1a5acac5",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "49c85224-1121-43c2-a8f5-cdae7c7b592a"
        },
        "item": {
          "id": "cf18356c-c001-49a9-9ec5-98cec9695f40",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "37aa2202-c587-4e89-ac2d-3f8d922d2784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 647,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5627fdb-a483-401a-9902-04bbda77f60b",
        "cursor": {
          "ref": "29f42d9c-7e57-46cd-ba79-5dca983f6710",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6bc75d6d-671c-47d4-af2f-cf3653701625"
        },
        "item": {
          "id": "f5627fdb-a483-401a-9902-04bbda77f60b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1f8c7a04-1c36-44f8-a9a0-7e5fec0a6512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b502fee-2207-4d71-9863-779aef7b9e23",
        "cursor": {
          "ref": "02403f7d-1189-413b-a56a-6ddec2fe45ce",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9b5c0a3a-cfbb-4602-99f9-7109677f49c4"
        },
        "item": {
          "id": "5b502fee-2207-4d71-9863-779aef7b9e23",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c9b27a7c-1fb1-46a4-a67a-3f73024d076c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33145f43-bb65-40b5-8068-e05e6fb4868b",
        "cursor": {
          "ref": "7e98017f-f812-4e24-af93-b31171ac837a",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e1e6bb04-6772-41a0-9098-693562b2d664"
        },
        "item": {
          "id": "33145f43-bb65-40b5-8068-e05e6fb4868b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c34c6ee1-e0c3-4f15-acb0-51fa890ae88d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a6b7ec-d962-47c9-9d16-cd26412c4177",
        "cursor": {
          "ref": "d9a38af5-fc18-45f9-b630-5916d52ae0d2",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "87065b51-eb71-4e2a-8cba-7c627f5503b0"
        },
        "item": {
          "id": "40a6b7ec-d962-47c9-9d16-cd26412c4177",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3717ac7e-73e5-41ec-9bdc-32e2a394f17d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b94dc4-9ac0-4c28-a1b3-bfceee72b137",
        "cursor": {
          "ref": "0ae2ac44-1f00-47d6-8587-dec429ff0992",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "419c694d-238d-41df-81db-8ef1b1488867"
        },
        "item": {
          "id": "21b94dc4-9ac0-4c28-a1b3-bfceee72b137",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7e801c04-5a77-4524-a756-04edacdd8653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c68995-2155-4e5a-8309-01d368d38802",
        "cursor": {
          "ref": "2993732c-8129-43e2-a5ea-043290b492c5",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b50e3c71-97fa-4b7c-9952-93e562516ef3"
        },
        "item": {
          "id": "98c68995-2155-4e5a-8309-01d368d38802",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9016bcee-e500-4965-a760-2c7e04cc765f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23cc5dc3-7a21-4298-ab34-d31a5987ed74",
        "cursor": {
          "ref": "a485586f-abf1-4d9b-9cbe-24e5aa215e73",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a496d524-73be-4582-9f48-fa7c0ff12255"
        },
        "item": {
          "id": "23cc5dc3-7a21-4298-ab34-d31a5987ed74",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4de7adf3-cab4-4beb-b6df-708952f79796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba371e85-b037-47f0-9867-2dbc209fa57f",
        "cursor": {
          "ref": "8f6b4248-1f98-4657-8d2b-b725c2cadb73",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1cef7034-38b5-4c49-97e9-bb9260078c73"
        },
        "item": {
          "id": "ba371e85-b037-47f0-9867-2dbc209fa57f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1a3c5ae2-0507-4dd3-8fbf-f399ffd035eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4330afeb-69e1-446c-8d5e-f9550e69136d",
        "cursor": {
          "ref": "334d1cdc-687d-4192-932d-bd2cebc12db3",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "02cf4564-46db-461e-bff7-3299ef78b4d9"
        },
        "item": {
          "id": "4330afeb-69e1-446c-8d5e-f9550e69136d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a7fc695d-0c04-4f99-b74b-db4e596c93e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b49edb-e063-4e77-bf0c-e66fea5c9273",
        "cursor": {
          "ref": "278e6676-5bf6-473b-b077-7d275679e30e",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f2703ea0-b26c-4e18-a8f1-e72dc54c3476"
        },
        "item": {
          "id": "58b49edb-e063-4e77-bf0c-e66fea5c9273",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c9cdf3a2-414d-40cc-b73c-ef6aa062c7c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "551366aa-6452-42ae-a7cb-dcd33ec3da0b",
        "cursor": {
          "ref": "58553b4d-7a08-42ee-aa48-9daede41beb8",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "599c066a-370a-419d-923a-deb1cba3e71a"
        },
        "item": {
          "id": "551366aa-6452-42ae-a7cb-dcd33ec3da0b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5538d6ca-782b-4c4f-ab4d-c75ee204e53c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bba5323-3b02-4d5f-b362-6e2c2e2d6455",
        "cursor": {
          "ref": "fd50dd48-87e9-438b-9cb7-dd658263457b",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "cb2898e0-ba47-4e6f-8a93-11a226ef908c"
        },
        "item": {
          "id": "7bba5323-3b02-4d5f-b362-6e2c2e2d6455",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "49720c1e-0793-4014-bc03-2dec2f6cb0f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "764a6e84-7b89-4845-921b-2fca065b7249",
        "cursor": {
          "ref": "b35b11e7-f623-4faa-994d-864bd0c4eb3b",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "66b15a9f-6b3c-406c-b76a-745ba49e8446"
        },
        "item": {
          "id": "764a6e84-7b89-4845-921b-2fca065b7249",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f17a793b-a296-4112-a3ce-070b59942564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7604409a-7e65-4cce-8196-a34271dff15d",
        "cursor": {
          "ref": "e67acfda-332d-4484-83e0-12efe29c3e4a",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "4b55b956-006d-4e8d-9c76-3acdd8be1ae9"
        },
        "item": {
          "id": "7604409a-7e65-4cce-8196-a34271dff15d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "07b08158-a942-499d-ad0d-d7b8fe269c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f069e2-3823-46d8-9678-4f2cadde07f3",
        "cursor": {
          "ref": "85a4a15a-3723-4379-b522-6ac933c7ff53",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "badd0a78-e490-47e3-b19b-2f5f3e565709"
        },
        "item": {
          "id": "a1f069e2-3823-46d8-9678-4f2cadde07f3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3cd04729-3c76-488d-a01d-98e89ef3f2a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "296d7841-5380-4e04-96cf-14467229dad3",
        "cursor": {
          "ref": "5f0ccab7-d542-45eb-af46-c825d5a8aef9",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6c894edc-5a7f-4559-b846-2445a739e65d"
        },
        "item": {
          "id": "296d7841-5380-4e04-96cf-14467229dad3",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d3f85d26-c372-44c2-997f-026636ea6452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daf11981-c630-4d59-80c0-81ec95f10733",
        "cursor": {
          "ref": "eaf28f5f-59c3-4c1a-8f71-8c269633930a",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "fdd1b715-a443-482e-9077-3367466c744b"
        },
        "item": {
          "id": "daf11981-c630-4d59-80c0-81ec95f10733",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2eb3a716-b6f0-43fe-b203-f7dfa986b2e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6716545c-57a7-4d06-bfcc-dd486efed856",
        "cursor": {
          "ref": "df44aa3c-3385-4293-a120-7ff35054f5b4",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "aaa8af36-06bc-40ae-90ce-327660ed0ed2"
        },
        "item": {
          "id": "6716545c-57a7-4d06-bfcc-dd486efed856",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "0ba978ab-c653-4ab7-9d92-bbe280a2bf95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d15ddc8-9034-4ae7-bdb2-4d308e2b7c6f",
        "cursor": {
          "ref": "c393ffea-9886-4b4a-b4ba-d3886c5ba5b4",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6e80ea81-edcc-4f7b-a1ac-666b5c8374e7"
        },
        "item": {
          "id": "2d15ddc8-9034-4ae7-bdb2-4d308e2b7c6f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c558b365-dfd9-4f47-948f-7e511b36e03a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "0a9858cd-ef2c-4803-a9b4-de5d4edf987a",
        "cursor": {
          "ref": "f25e7d93-afb5-41b2-be1c-d99a2f199379",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2be9899c-8951-404b-b596-392a2481ee74"
        },
        "item": {
          "id": "0a9858cd-ef2c-4803-a9b4-de5d4edf987a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "621ebd0a-60ef-48bc-aa2b-b031a9a902b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "e4a9c3a3-a409-4a9b-acde-38fdf34b74f8",
        "cursor": {
          "ref": "128133af-dc7f-464e-b6bc-3ebe662ad9be",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "30ba446f-2eb2-478f-839f-54607e711d25"
        },
        "item": {
          "id": "e4a9c3a3-a409-4a9b-acde-38fdf34b74f8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b8155310-9b75-45c5-8916-51f9faa08ce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a9c3a3-a409-4a9b-acde-38fdf34b74f8",
        "cursor": {
          "ref": "128133af-dc7f-464e-b6bc-3ebe662ad9be",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "30ba446f-2eb2-478f-839f-54607e711d25"
        },
        "item": {
          "id": "e4a9c3a3-a409-4a9b-acde-38fdf34b74f8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b8155310-9b75-45c5-8916-51f9faa08ce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8278ce4-c491-4354-857a-b0552cde8e80",
        "cursor": {
          "ref": "8b81f57b-4cac-41e6-abb7-11cd7e5c6d7e",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1440a8f5-e31a-487f-8f10-f393378c8ffb"
        },
        "item": {
          "id": "a8278ce4-c491-4354-857a-b0552cde8e80",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1da0637f-c43e-47d9-8b6e-830eda5c02fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b435a1d-2aea-4617-9a30-f7285f2c7666",
        "cursor": {
          "ref": "48503d32-f092-496b-bce7-a9c7a30d9d09",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "de5cb473-0079-44d6-a2be-d994cdf8bf7e"
        },
        "item": {
          "id": "7b435a1d-2aea-4617-9a30-f7285f2c7666",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d8613809-495d-4fbc-a345-486cacc88be3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c97ddd07-1282-4f82-bdc3-30f375ae2074",
        "cursor": {
          "ref": "962df873-3d7c-4b51-ba14-4ac10c9ba7d6",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4fc21cff-f8a3-4d6c-96ce-de882d8951e3"
        },
        "item": {
          "id": "c97ddd07-1282-4f82-bdc3-30f375ae2074",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "72d5f233-f90a-456b-959f-334a90314d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a8f855-f529-47e8-8b5e-404dbaeb57c4",
        "cursor": {
          "ref": "89d3d9d9-ef16-4cd9-965f-30dd41e74bb2",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "37f01b9b-5734-49c2-bbb0-c866e8f497ba"
        },
        "item": {
          "id": "a3a8f855-f529-47e8-8b5e-404dbaeb57c4",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "91a3d358-6ec5-4d69-9f9a-505ea53e293f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf138c0-2dba-4365-88a1-d1bcb16ea20b",
        "cursor": {
          "ref": "24175e9c-8b60-4a2e-a3c6-d6ca84de690b",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8ae8ddc8-f12f-4de9-b810-6acb2b411e7d"
        },
        "item": {
          "id": "5bf138c0-2dba-4365-88a1-d1bcb16ea20b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "233ec599-1156-4a45-8680-369703347241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6412a82-2bca-46fc-9db1-e15a860ea955",
        "cursor": {
          "ref": "2e298bee-d128-4f80-98fa-7378d4b03acc",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "44b2db17-163f-4f3f-951b-b173099a0ec2"
        },
        "item": {
          "id": "d6412a82-2bca-46fc-9db1-e15a860ea955",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "33205e64-5459-4467-8fea-ff74da656779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fe83c6a-f247-474c-9de7-b7cb1514e2dc",
        "cursor": {
          "ref": "80a83c8b-9371-42c0-9240-e2a38f5f44a7",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5d3f4c1e-cf74-4517-b8bc-1ca0e26f2950"
        },
        "item": {
          "id": "5fe83c6a-f247-474c-9de7-b7cb1514e2dc",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e11548f2-aa50-49f6-bbaf-b7eb9ef879c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c488883-d9f4-4a46-ba3a-c9b6328c3e35",
        "cursor": {
          "ref": "6e25ee86-ba0f-4c29-b913-61dddcf6ba79",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5eda1dff-0279-40f5-8c5b-3cf1b656ff5f"
        },
        "item": {
          "id": "3c488883-d9f4-4a46-ba3a-c9b6328c3e35",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ae5fec12-360a-4fe9-89c0-35c93f8c77da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2191f60-55da-4622-bbf7-8a8b135fb17c",
        "cursor": {
          "ref": "2c30a953-92ea-4015-9ae8-8b90e9a7c787",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ba55b9b9-6478-4215-83f2-e88f3e104bcc"
        },
        "item": {
          "id": "f2191f60-55da-4622-bbf7-8a8b135fb17c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5836099a-b4f8-487f-9c52-b884c4e1b84f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6baef3-e130-4e7d-af3d-4e1181c8b687",
        "cursor": {
          "ref": "c1ef7a66-6248-4012-abbe-c5ba8ecf1bfd",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2875a3a5-4eb3-420e-a79e-1cccc4960af2"
        },
        "item": {
          "id": "3f6baef3-e130-4e7d-af3d-4e1181c8b687",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "115018ed-a52e-48f2-be5e-0837eb72631b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfac7ef1-d0e5-4dbc-a3d1-14492bff2d99",
        "cursor": {
          "ref": "1137388b-3186-4abf-895d-09f8f60af42a",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4a722c9a-8f9a-4e26-9216-9ef66b76eb32"
        },
        "item": {
          "id": "bfac7ef1-d0e5-4dbc-a3d1-14492bff2d99",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a777062e-0928-4433-8bc5-72379740f97b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add5716a-4ccc-4caa-9bd4-c8382609b05f",
        "cursor": {
          "ref": "a3f3eb35-2fbb-4d84-9419-46ad07942109",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1cca23e0-0b27-4107-bd3a-76716dd9cae8"
        },
        "item": {
          "id": "add5716a-4ccc-4caa-9bd4-c8382609b05f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d38d96bb-5f04-49c9-9213-d91d62d71445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb6e89d-5dc1-477b-9621-0650c4bbf32f",
        "cursor": {
          "ref": "b833f4ce-f25c-42ff-ad59-55aff4e3f7b1",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "34f24940-536d-40f1-98ef-71e10a71d069"
        },
        "item": {
          "id": "5bb6e89d-5dc1-477b-9621-0650c4bbf32f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "96dec3d4-5ecf-4f89-944c-6d5437f14b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f0aa70b-6abf-411f-b390-6c07eb4e6cb6",
        "cursor": {
          "ref": "6ccb3e30-f001-49db-91f5-0a5508107123",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "44336673-08e0-4d56-904f-a6cd5f465cc7"
        },
        "item": {
          "id": "0f0aa70b-6abf-411f-b390-6c07eb4e6cb6",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "bd819819-c22a-4b1c-9f36-f7780f3fe796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a689b8-9be0-4a1d-bcb5-36174a2d21d6",
        "cursor": {
          "ref": "b7b8582f-7e83-40dc-8077-b11bdb493c61",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "3de1cf62-dc85-4050-b40a-280173446e28"
        },
        "item": {
          "id": "c8a689b8-9be0-4a1d-bcb5-36174a2d21d6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "faf1b13f-f309-4dd8-acc0-af4d97605ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3b8a8c-80f2-4495-9cf2-b28b31cc8fb9",
        "cursor": {
          "ref": "6d87c178-d72e-4eae-9788-217101f890f5",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7eaf63c4-dd71-4cec-ae5d-3206b57c9ced"
        },
        "item": {
          "id": "ff3b8a8c-80f2-4495-9cf2-b28b31cc8fb9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b26ccf11-4771-469d-8eae-89c4eebeb5e8",
          "status": "OK",
          "code": 200,
          "responseTime": 233,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "3c7a230b-462f-44e2-935c-db6e1cf10c03",
        "cursor": {
          "ref": "ddb7ee2e-8493-44bf-8ccf-c30df610fd59",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "fe0a2776-3e05-4631-9898-78531eae0f93"
        },
        "item": {
          "id": "3c7a230b-462f-44e2-935c-db6e1cf10c03",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4eddd2af-add7-45fe-904e-1b3ad67978d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a8aa0c-05f7-4ccc-ba00-d86eef81a22d",
        "cursor": {
          "ref": "53e30bf2-0421-4269-b0f5-f2b1b1afb11d",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "fd67c8d4-48cd-4fd7-a53b-8719b6b9ac99"
        },
        "item": {
          "id": "00a8aa0c-05f7-4ccc-ba00-d86eef81a22d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "854d4ac9-d193-4833-8552-1a17d86ce967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c67f50f-1052-464b-9e53-1907fb86a5b4",
        "cursor": {
          "ref": "3864d8ad-5193-4baa-8f24-aa63aa614f9c",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c7f3cb35-366b-46c2-9042-4df3bdef0eb5"
        },
        "item": {
          "id": "8c67f50f-1052-464b-9e53-1907fb86a5b4",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b5067f9a-104f-40a8-941a-a8a122478dca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f53ab5ff-a066-48d9-9dd1-cbdcb6730794",
        "cursor": {
          "ref": "66223f4d-21b9-40f6-a5d3-be039d2cab41",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "00604f39-506e-413b-9944-0285e51a99eb"
        },
        "item": {
          "id": "f53ab5ff-a066-48d9-9dd1-cbdcb6730794",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "130716f2-dcf1-4b54-8028-2641ac060d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9db7851-6b62-4539-8181-c7978e34efc6",
        "cursor": {
          "ref": "1b44e068-6f59-4d10-a669-8fd81581f17e",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "86bd825b-5750-4138-a018-7946854eeba6"
        },
        "item": {
          "id": "a9db7851-6b62-4539-8181-c7978e34efc6",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c64489ed-4768-42d9-bc83-dd3be69d1d85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92488c92-0050-45f9-b613-82e5edbc79ef",
        "cursor": {
          "ref": "aae9e867-01c5-49a5-9a54-56b5a6559e85",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7d124730-639d-4509-b262-3f0ec584318e"
        },
        "item": {
          "id": "92488c92-0050-45f9-b613-82e5edbc79ef",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5e3b73ee-c15d-4100-af0d-bcca5bb729d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7b4a19f-b7d4-4928-a4cc-ea8c87e9d91d",
        "cursor": {
          "ref": "f1129324-bd71-467b-a531-b28af3931e33",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "40d42037-0455-48ac-97fa-0d328452cf59"
        },
        "item": {
          "id": "a7b4a19f-b7d4-4928-a4cc-ea8c87e9d91d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9fbfb3e3-635c-460b-8a72-d989f7a9fc60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ec5763-b104-4f9a-8d02-f38ac3f15bfe",
        "cursor": {
          "ref": "72744452-cc6a-409b-a3b7-2cd22548b8ae",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "42e1f1b0-a13c-4af5-bd9c-8cfffee8b0c8"
        },
        "item": {
          "id": "12ec5763-b104-4f9a-8d02-f38ac3f15bfe",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a5c364f3-59bf-4268-af81-481f8f48b8de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152176d9-3682-46f1-907f-1ea03a90ab80",
        "cursor": {
          "ref": "1e2bac63-7985-4908-8d65-8aa3c59d8ef2",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "77cfab8e-e42e-4b95-8bd4-e8cbfe374982"
        },
        "item": {
          "id": "152176d9-3682-46f1-907f-1ea03a90ab80",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ef70a4ff-aefc-4c0a-b1f9-41f908f81693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77268655-744c-489c-bcdd-4e28fa23199f",
        "cursor": {
          "ref": "0863ebcf-12ea-444c-a30c-602149a24181",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a9e96c35-209d-4c37-b129-fd4d6b5229c2"
        },
        "item": {
          "id": "77268655-744c-489c-bcdd-4e28fa23199f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3625878b-ba9d-4b60-a8c2-c4f9782d6f49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d836ac41-8d88-4dea-a3fa-139a03a939a8",
        "cursor": {
          "ref": "6bb4313c-0b92-496d-a3b4-bfed15092a6a",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7d865853-7512-43c8-a788-20e80b5f55c7"
        },
        "item": {
          "id": "d836ac41-8d88-4dea-a3fa-139a03a939a8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c8e29424-b093-47c7-9186-a92603526d0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0766390a-f3ec-45e4-a0f7-743040ee7482",
        "cursor": {
          "ref": "bdc96836-93e7-4c62-91f6-a27a558411ef",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "bc4e994a-a9e2-43cc-8ea4-4efb58a66879"
        },
        "item": {
          "id": "0766390a-f3ec-45e4-a0f7-743040ee7482",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9dcfe2ee-fec3-4983-beff-8fe8b723c2d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6d1cdd-d606-413d-b5f0-6d7ac4565e6b",
        "cursor": {
          "ref": "bc25fc0f-e02f-4eff-a182-a750c1c85cf7",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "877c7357-ac7b-4b28-92ba-18cde7e7502e"
        },
        "item": {
          "id": "2c6d1cdd-d606-413d-b5f0-6d7ac4565e6b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "359296f1-d7c2-4709-9986-cc387cea7c3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00368a1a-7d2e-4cd1-ad31-6f685cf36166",
        "cursor": {
          "ref": "679654fa-e5fb-4ec8-a637-8919cf651c3f",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "11eb5848-292b-4064-8b29-6366cc756c7f"
        },
        "item": {
          "id": "00368a1a-7d2e-4cd1-ad31-6f685cf36166",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9fde3037-bd06-4a0a-90ce-abdada4fc47f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f59591e-5b29-4a5b-b96c-418e5791bf4b",
        "cursor": {
          "ref": "a397aa03-4fa8-445c-a083-fd005b56d463",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8ba9deee-325b-4e96-989b-fedf1180cd5e"
        },
        "item": {
          "id": "2f59591e-5b29-4a5b-b96c-418e5791bf4b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "931300d7-1098-4bab-be82-3b72b007f454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac54c9b6-8dea-4afb-a9d7-fb3bf582dde6",
        "cursor": {
          "ref": "11d332c7-6d99-4aa4-9362-f2222db071f0",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "7ef583f1-99fa-4e40-9daf-94a009198850"
        },
        "item": {
          "id": "ac54c9b6-8dea-4afb-a9d7-fb3bf582dde6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "17e01c6a-2f78-4a07-b47d-46bea202364e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e115c4a5-d66c-4e4e-9fd9-ba956607d6fa",
        "cursor": {
          "ref": "ebcb93a8-5e03-4f9c-b06c-fc54deea98ae",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "729a905c-b67b-45cf-9c8d-b62cc19b3671"
        },
        "item": {
          "id": "e115c4a5-d66c-4e4e-9fd9-ba956607d6fa",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "83bb9a4f-d234-4187-be58-dc038cef46d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b59a64dd-6713-48ca-b6ab-8d46569a36ca",
        "cursor": {
          "ref": "0b61baec-a953-46dc-b97b-b80e93ec2681",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "1957805c-15a2-487c-8a6d-3358994077eb"
        },
        "item": {
          "id": "b59a64dd-6713-48ca-b6ab-8d46569a36ca",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "da3dca9a-dced-4f64-8753-f997cb81ca7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1763d0c2-f21e-43cf-8ceb-d78197454a4c",
        "cursor": {
          "ref": "f60a3656-4d11-4741-8a00-cff2eb5056ab",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "232ee76c-d63c-43cf-9e39-a80dc2c88566"
        },
        "item": {
          "id": "1763d0c2-f21e-43cf-8ceb-d78197454a4c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f7978fd0-f9b4-4df7-be17-51c5becb92a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d84c70-4d6d-40ae-bc47-54df39a33041",
        "cursor": {
          "ref": "88a10981-4248-4bc5-b803-10ed558f1094",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "be3eb868-357f-413f-b924-85b1cf9a839a"
        },
        "item": {
          "id": "36d84c70-4d6d-40ae-bc47-54df39a33041",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "175afca6-e109-4ae2-a4d5-11d7c7acc850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86ce6fff-ff79-4616-b46e-05811c64089a",
        "cursor": {
          "ref": "44a4c202-6c47-4f7e-a509-a973eba8704f",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f0a55554-890c-4f3b-9e25-b057118c1cdb"
        },
        "item": {
          "id": "86ce6fff-ff79-4616-b46e-05811c64089a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c8756870-5346-4080-9f37-732a05112193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe956289-bf29-490d-ab35-14d7022f15a7",
        "cursor": {
          "ref": "f36bb69b-4825-4357-a311-4704a257df4f",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "8e895606-b466-4a1e-b7db-af692c74617d"
        },
        "item": {
          "id": "fe956289-bf29-490d-ab35-14d7022f15a7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "68ff516c-461b-4acf-9382-2922505379fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec1710e-1a02-4494-b3e4-6dc95fbe07fd",
        "cursor": {
          "ref": "121ae77a-0d3c-4a52-9cd6-2ab79e4c08e7",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e74291cc-b667-4ec3-907e-d38ae303dcf0"
        },
        "item": {
          "id": "cec1710e-1a02-4494-b3e4-6dc95fbe07fd",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7d5e41af-1163-41d1-bbcd-47f42a74063a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9598d96-ee08-4437-969b-563eae4cd57a",
        "cursor": {
          "ref": "5be1e203-f045-425e-a547-d10bea8efa65",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "97f028ed-9858-4aa1-9ba1-308ebcd55767"
        },
        "item": {
          "id": "b9598d96-ee08-4437-969b-563eae4cd57a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1ef4dc2c-ff15-4685-ae2c-32942924dc2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b6850cf-aae4-465c-a401-bd0689059024",
        "cursor": {
          "ref": "0131c8c4-9ce2-47da-8eca-3c34e75e8381",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "55d21d3c-cf5d-4496-a0e9-28a027cde4ce"
        },
        "item": {
          "id": "1b6850cf-aae4-465c-a401-bd0689059024",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4c4699c9-a706-441e-8fca-f66eadc67dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a467c04-d749-4050-9e3a-2e82f5a5bc11",
        "cursor": {
          "ref": "052b41e4-49ff-408c-ad46-bc0de875fe1a",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "78de00d5-7ddf-4076-a924-4fa59cbf8e77"
        },
        "item": {
          "id": "7a467c04-d749-4050-9e3a-2e82f5a5bc11",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b8c2d2f0-e28b-42f6-9b4d-f577c2b479ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec78279-2440-49db-bffc-5b7afa7f67d7",
        "cursor": {
          "ref": "45ec2df3-8cbd-4309-8fee-717d60aba3a4",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "50301668-9f6b-48cf-ae8f-16e89bb2900e"
        },
        "item": {
          "id": "4ec78279-2440-49db-bffc-5b7afa7f67d7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "68325909-6354-4875-a42c-437b0bc119ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a06a27-5f73-478a-90e7-d1827dc70cff",
        "cursor": {
          "ref": "1cdce5f9-e7ba-4028-aab0-aa572b3e61e6",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ac69a36d-706e-4102-b12e-220a2235da23"
        },
        "item": {
          "id": "87a06a27-5f73-478a-90e7-d1827dc70cff",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3ad0c89e-b443-413e-ad5c-a98d3b447cee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695c8725-fd9a-4370-81cc-4bf30eb23cd2",
        "cursor": {
          "ref": "85ed5732-77d1-4862-b925-368034a26a4e",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "247e7cc1-40f5-4f56-bf67-491b7db08d8c"
        },
        "item": {
          "id": "695c8725-fd9a-4370-81cc-4bf30eb23cd2",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f9385ad8-34be-4797-ba88-46e3c6be1cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa413fa-7468-491e-8723-b50c6207fff9",
        "cursor": {
          "ref": "b6a319e2-247a-4235-adf0-2267584e4215",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "696a54eb-16bc-4006-b7c1-c3461018afcf"
        },
        "item": {
          "id": "7aa413fa-7468-491e-8723-b50c6207fff9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ddc3d6e2-6fa7-4b24-b21b-8dc2f42bc64c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82bc86c3-eb02-4d26-b51b-f432e2486b6d",
        "cursor": {
          "ref": "8343a094-35ed-4ce9-8632-9b7a804b8e9d",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5581f07a-1b1c-474c-bebe-5c6a4bc8e16c"
        },
        "item": {
          "id": "82bc86c3-eb02-4d26-b51b-f432e2486b6d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a4be3663-b238-44e2-b0ca-2f1645ec2a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b484bd-3c3a-41e2-a09b-a0e20c61d871",
        "cursor": {
          "ref": "9a98053f-f807-40f0-b8f2-91f69f5860d1",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "107439e6-be6d-4026-a5d3-e71b241bf7c2"
        },
        "item": {
          "id": "65b484bd-3c3a-41e2-a09b-a0e20c61d871",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "387615a1-014d-4dc6-8ac4-0cc45184dfa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f3099e-abdd-42a4-a140-aa47ef475ffd",
        "cursor": {
          "ref": "79e534f4-404e-42cd-9238-87e6bbfa3fb7",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a860d102-a593-4660-ad18-b81a6f561549"
        },
        "item": {
          "id": "b9f3099e-abdd-42a4-a140-aa47ef475ffd",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0e0b2e88-d5e9-4db5-9926-534166b088bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2339eed-c28a-465a-82a9-2df67d83084f",
        "cursor": {
          "ref": "b73a2458-71d4-438d-bb23-0a4f53bffdc4",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "234dd2a2-17cb-440c-9f5a-a35f29ca5b61"
        },
        "item": {
          "id": "a2339eed-c28a-465a-82a9-2df67d83084f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "05356943-e4a8-4988-b3cf-bf072426b4a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab43e6e-05fb-4bb4-be9c-7d95e7ef429b",
        "cursor": {
          "ref": "05b5eefd-2c9b-491b-9305-b07812fb9f1a",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "071d9bd2-30a8-4216-b698-b1172c511108"
        },
        "item": {
          "id": "bab43e6e-05fb-4bb4-be9c-7d95e7ef429b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "3f9dcd3e-8fb8-4795-aac1-448f8dcaab28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1192ed-7912-4641-80af-444570416aa8",
        "cursor": {
          "ref": "57fd4d6a-0cf3-40a1-b81e-7ee94ab59766",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c87ddca8-f570-4e34-ac64-29ce51ead0c3"
        },
        "item": {
          "id": "df1192ed-7912-4641-80af-444570416aa8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ef03be48-f114-42e1-ae1c-a0499d1db524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45c9f880-11c8-4268-98f8-4f3b968e808b",
        "cursor": {
          "ref": "341dc8e9-3236-437c-92ec-a13f8c08fccb",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "badf026b-cce5-4407-8167-8d048db80f74"
        },
        "item": {
          "id": "45c9f880-11c8-4268-98f8-4f3b968e808b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e2ad3656-6bbe-448f-aafc-b99c1eb6a205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772f55b8-3b76-4c9f-a9e1-1500cc8dcd71",
        "cursor": {
          "ref": "d48f2165-6ebc-4015-9a4e-79cd06f27fed",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "51fdd2c1-3a70-4d4f-b1fd-88a1a16d4e38"
        },
        "item": {
          "id": "772f55b8-3b76-4c9f-a9e1-1500cc8dcd71",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4c5d483b-4762-41ad-a440-8ba30395ef10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "082ca9b4-6794-46d8-9657-944ffbdc2101",
        "cursor": {
          "ref": "2693e67b-0cdf-48a8-86fb-8a210321f4ca",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "7f770e45-2a6f-4aac-b843-9314f63dadff"
        },
        "item": {
          "id": "082ca9b4-6794-46d8-9657-944ffbdc2101",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6a1de1b5-3ca5-4dab-9dd1-b5cc5c4e7d8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc2bd676-a9d5-45ca-9ce7-8d0551426cc6",
        "cursor": {
          "ref": "917b0c3b-6cc5-44a7-8b7e-7304c533d3ea",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "910dc980-368c-4857-ae17-79fef1cf851a"
        },
        "item": {
          "id": "dc2bd676-a9d5-45ca-9ce7-8d0551426cc6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b9032080-6ef8-487b-8bf6-7eaa84237fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b68c3be4-514e-439a-973c-960277345583",
        "cursor": {
          "ref": "76c7b468-8c1d-4381-828a-cd7d2f0fb5e1",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a1013b2e-140d-4d66-824d-54fb7754018d"
        },
        "item": {
          "id": "b68c3be4-514e-439a-973c-960277345583",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1a368c16-6401-4739-9e63-8f41c8b1555c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec0fb3d3-e375-4f8a-b265-8d48af95c5a0",
        "cursor": {
          "ref": "f7652d37-d1d9-4baa-beb9-590fea864a7f",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5f6b5a48-ade3-4ca7-9a3a-00fe83246cb2"
        },
        "item": {
          "id": "ec0fb3d3-e375-4f8a-b265-8d48af95c5a0",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ad09deb2-0358-4f4f-a428-e7af50fb6883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2077b85e-dd55-4a92-8dc0-35b5a79de035",
        "cursor": {
          "ref": "db0f8a65-2078-4d1c-bfc9-8a352987f27a",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "faa9ee4f-563f-4551-a3c5-f4d66d51b607"
        },
        "item": {
          "id": "2077b85e-dd55-4a92-8dc0-35b5a79de035",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "537e1765-008d-4f73-bb1f-58cb11a12fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a33caaae-643d-4c3c-979d-9032f62fa856",
        "cursor": {
          "ref": "e6856f84-345f-4f5b-bb51-4c545d6fe357",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "16a50130-5831-4741-8c6b-a0fdde818517"
        },
        "item": {
          "id": "a33caaae-643d-4c3c-979d-9032f62fa856",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f6573549-0a69-480e-9345-3457eb26fd73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "350a5a7d-c72c-441a-9c3a-73300a58325e",
        "cursor": {
          "ref": "4671fad2-7f7a-44c3-88ed-d80cee9a73e1",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "16ae1284-9b2f-447a-acef-86f8fc06cb7a"
        },
        "item": {
          "id": "350a5a7d-c72c-441a-9c3a-73300a58325e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "93250d90-f254-4d70-9340-b7d93d9dced2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa508f6b-c43b-41e5-9ded-20eca4c7b015",
        "cursor": {
          "ref": "596b2d1f-f1e8-4086-b32f-d9199663682f",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4dc5ad92-2877-434d-b550-c45e9894801a"
        },
        "item": {
          "id": "fa508f6b-c43b-41e5-9ded-20eca4c7b015",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ef9c05d5-ea93-4733-b884-aa558a84006d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "294a8b95-0c46-4079-9a10-a9144c4e4e48",
        "cursor": {
          "ref": "65f7a10b-a390-4efd-8d0e-c834eb3db012",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7f89f78b-0c16-40f3-b424-b3217727fd40"
        },
        "item": {
          "id": "294a8b95-0c46-4079-9a10-a9144c4e4e48",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "63eb510d-d0c5-4b83-abbd-1aa4b7298d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd4c760-5b7f-41dc-b00c-3d76f0469758",
        "cursor": {
          "ref": "e82b59d6-6b20-4a71-ba9c-be6405d16c53",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3b231107-69eb-4344-9262-938b99385b37"
        },
        "item": {
          "id": "8fd4c760-5b7f-41dc-b00c-3d76f0469758",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "eb488781-89b1-4785-9772-d35d05e56790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74108270-26f4-444f-92ad-61f131cdc7ad",
        "cursor": {
          "ref": "40d4de23-66eb-42bc-a0d4-5b149f1ff047",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b043c22a-21b6-4e24-9b2e-56adfaa2061a"
        },
        "item": {
          "id": "74108270-26f4-444f-92ad-61f131cdc7ad",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b3f06a4d-6ce1-40fe-8350-7ecb7f986c4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a07aec6-5c25-43b0-9ce7-43fdee556bd5",
        "cursor": {
          "ref": "055a5a49-cb37-43f1-8135-184f94b8b284",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "71fed92d-9c1d-4d7c-9a51-0944d5a2dcbf"
        },
        "item": {
          "id": "2a07aec6-5c25-43b0-9ce7-43fdee556bd5",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "88a7dba7-4fcc-4908-b888-1175785a18b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a747b5c-ca7b-4cfa-926c-92ce58b1c626",
        "cursor": {
          "ref": "de4108d0-1ba2-4812-aff8-b61f9b7b95fc",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "4f69bf9d-0874-4c49-a11c-013df620836c"
        },
        "item": {
          "id": "2a747b5c-ca7b-4cfa-926c-92ce58b1c626",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "893e55c6-c5c9-4333-aef2-8e4ac663a30d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "803bf531-535e-4082-9477-a873cba3b301",
        "cursor": {
          "ref": "7e38bc9a-0735-4e47-ab22-b418b22f6ca9",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "576d2735-d2fd-4d45-b9b3-6c59dd5fb392"
        },
        "item": {
          "id": "803bf531-535e-4082-9477-a873cba3b301",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8f5c5751-f693-4107-8968-a63ce119b90f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1292285-8030-4cd3-81a5-d0d267c65319",
        "cursor": {
          "ref": "2bd06e65-3570-42e0-8729-d7271685d3a4",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9bd9a860-4759-43ac-841b-beb7771517d9"
        },
        "item": {
          "id": "c1292285-8030-4cd3-81a5-d0d267c65319",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f5a02d9a-ce60-4c38-bda7-b70b4c299c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14020d83-5918-405b-bab5-da50f4927cc0",
        "cursor": {
          "ref": "6b1cc747-5007-427b-9f14-e25c3d2a7597",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "2273c1af-7926-4f9f-88a5-7d26d228fffc"
        },
        "item": {
          "id": "14020d83-5918-405b-bab5-da50f4927cc0",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b0e99b71-40d9-4b15-8e68-1e8dba1fb076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb8e43f-4f81-46d1-9b2e-0b7dba6e7b79",
        "cursor": {
          "ref": "6ecd6c57-773a-4372-bac6-9b4a1ddf938c",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "5cf2ace3-6888-4c26-b9bd-425d88fcc590"
        },
        "item": {
          "id": "7eb8e43f-4f81-46d1-9b2e-0b7dba6e7b79",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9badce0e-2d87-40bb-9c98-8bf755706ff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8bc7177-a055-4e45-a49e-4c1e8a34427c",
        "cursor": {
          "ref": "64ea4968-f660-4ee5-ac2e-a8f3b3cf1ae0",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f8964d6e-6b79-4d0a-9e37-837f168391f5"
        },
        "item": {
          "id": "e8bc7177-a055-4e45-a49e-4c1e8a34427c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8cab2d93-147a-456f-bc33-d2d1c0f0601f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c85ecd9-1d8d-4668-b265-8b96735f114c",
        "cursor": {
          "ref": "02dbb17f-b77c-448f-b14f-e66fd1c7299e",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a70cf4f7-7667-46fa-ae35-6c5342bb85ea"
        },
        "item": {
          "id": "4c85ecd9-1d8d-4668-b265-8b96735f114c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e28e7f90-c588-48b5-9dfa-b24f08186c2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac23d27-d90a-47d9-b168-2869a45d5f44",
        "cursor": {
          "ref": "496fd391-5239-4123-acff-533c44040a88",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0688bc27-e541-4259-af7d-d4d82f0eeaa8"
        },
        "item": {
          "id": "fac23d27-d90a-47d9-b168-2869a45d5f44",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "50f77262-81e9-43b2-8ce8-3fc663a90eed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83feafa7-d5f1-4dab-9082-c8b0157f033f",
        "cursor": {
          "ref": "916e8a30-0072-454c-8cb2-86ae75b43bd7",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b69ad542-acb8-41b9-bc43-c71f7838b4b3"
        },
        "item": {
          "id": "83feafa7-d5f1-4dab-9082-c8b0157f033f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b8af1e2c-f703-40e9-901c-113ff0a18542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b422a5f9-cb53-4b70-924b-6a4bf8e6c108",
        "cursor": {
          "ref": "c0f0a803-66db-4e9c-aa50-08f5e975959e",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "37e3e107-97f2-4352-a1f8-c72fc19f5323"
        },
        "item": {
          "id": "b422a5f9-cb53-4b70-924b-6a4bf8e6c108",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b0758a09-bc4b-4c03-a428-6493b5140a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88faf52a-9e68-4e65-bea1-b3626142460b",
        "cursor": {
          "ref": "16c999a0-460a-45d0-a72f-2597e7f1333b",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4ff7da46-e06f-410b-9792-b99dfb82c512"
        },
        "item": {
          "id": "88faf52a-9e68-4e65-bea1-b3626142460b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "df125e37-7673-42bc-b072-9be4331f44c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcac31d0-3945-4976-adfc-fe7b23a69b8b",
        "cursor": {
          "ref": "5745b425-13cb-41fd-a736-6e25017cc251",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8ac94e2a-011f-4396-b989-6f33c162ee07"
        },
        "item": {
          "id": "dcac31d0-3945-4976-adfc-fe7b23a69b8b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a8a79f2b-eb2a-4e63-ae40-a57315e4f473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c50887c-1f20-44c1-9869-699c105ce981",
        "cursor": {
          "ref": "083f15aa-bf5f-4e9f-bd9a-343e23b06efb",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ac078e75-4df5-41c5-a41f-5b735849d353"
        },
        "item": {
          "id": "8c50887c-1f20-44c1-9869-699c105ce981",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7d905305-f52b-4f02-9e27-9d0ab738abae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22647c10-f4e3-4653-ab98-8bbf4bbcd31c",
        "cursor": {
          "ref": "94cfbe13-8a1a-494d-9dbe-0fb6736a7c1c",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "6f450cc5-acf8-461c-9cbe-842096415097"
        },
        "item": {
          "id": "22647c10-f4e3-4653-ab98-8bbf4bbcd31c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "5ee8dc6d-3d2c-44de-92f8-89dcba381740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d72a072-97e6-46de-835a-e0f793e4b2ae",
        "cursor": {
          "ref": "1fce8634-fa02-4395-91dd-dc8f27a0d8d5",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b3bd43ef-f782-493b-a1e7-7446b460465f"
        },
        "item": {
          "id": "7d72a072-97e6-46de-835a-e0f793e4b2ae",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "763f487d-2f0e-449a-88a0-b7655d38ea5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ab7693-062f-4476-9eb9-39a74a31a8e7",
        "cursor": {
          "ref": "c46956ec-a64c-4124-8229-bb94b7e12bfd",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e1b94a09-09a5-48fb-b94e-a15609771d62"
        },
        "item": {
          "id": "94ab7693-062f-4476-9eb9-39a74a31a8e7",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7d9eacc3-972f-43bf-b232-a4b2ea65b2c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5194d553-788a-43ce-b050-7c4d9b45b354",
        "cursor": {
          "ref": "0b43ab9e-bade-416a-97fb-f5a7684c7b06",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a7b08096-2bdc-4a7f-a81c-0d3b1324fdf8"
        },
        "item": {
          "id": "5194d553-788a-43ce-b050-7c4d9b45b354",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "d7130e5d-096c-4527-a382-390d27f876cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34392c2e-5892-4f47-88b8-285e5ac34f1b",
        "cursor": {
          "ref": "c1e85abc-d1cf-4499-add8-d52a8f754251",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "bee8d4df-0220-4636-b84e-cc03b2acc301"
        },
        "item": {
          "id": "34392c2e-5892-4f47-88b8-285e5ac34f1b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c672f6f8-a384-40d9-bba8-62aa3ad8f55c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "220ca0a9-c171-4dd7-8318-eb5e8ac4604d",
        "cursor": {
          "ref": "e832c7f3-3945-4852-aef7-bba895625e19",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "43c6b8f5-50f7-49fd-9577-10ede565e78d"
        },
        "item": {
          "id": "220ca0a9-c171-4dd7-8318-eb5e8ac4604d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "fa5d9252-637c-4c5a-a2c6-74812ca351c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e22642d-8b22-4a08-a121-41d17e8127fc",
        "cursor": {
          "ref": "349aed00-37a0-4fde-ae10-73342a43a5fb",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a19ad88e-d934-45c4-a223-416f314376b4"
        },
        "item": {
          "id": "1e22642d-8b22-4a08-a121-41d17e8127fc",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f8f06983-2f5d-4f92-b2e4-e7f79e13764e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d6f4af-5cb7-4758-add6-70edadd3456f",
        "cursor": {
          "ref": "9aebc461-7ca5-4061-9dfa-fa650e3cb0f5",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "9c7ee71c-25e7-4824-8a13-e9e26d795426"
        },
        "item": {
          "id": "d9d6f4af-5cb7-4758-add6-70edadd3456f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "e563c763-18ed-4dcf-b6d3-d1a747daa082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e66049-a827-4c42-8392-74d552ffa6ef",
        "cursor": {
          "ref": "ee635338-1f66-4cce-b69b-09aaeb1e455a",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "dc219aa1-355d-4a1a-8277-74c8f4a0175f"
        },
        "item": {
          "id": "f2e66049-a827-4c42-8392-74d552ffa6ef",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6506b06e-696c-403d-8abe-1b79ff153d6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "012b8520-ea52-41ff-a444-5275198e013c",
        "cursor": {
          "ref": "5658b5cb-75fe-4854-b820-b44cdbb7d438",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "3cc9601d-79bb-466d-99c5-a146261081a5"
        },
        "item": {
          "id": "012b8520-ea52-41ff-a444-5275198e013c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b7f8cb3b-e454-4044-a1c4-994810bdf7fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e118f247-8729-4bb1-b4c9-b7545dc3df26",
        "cursor": {
          "ref": "f01df1ba-298e-45cf-9067-b74d6b3cb0fa",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7a2c9fe2-3cc2-4f72-9a0a-34b432a6fd7a"
        },
        "item": {
          "id": "e118f247-8729-4bb1-b4c9-b7545dc3df26",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "cef66245-60ab-4592-b843-9e6439fe5a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8546830a-a058-40ca-96e6-1aace565e356",
        "cursor": {
          "ref": "f7945eb2-dc67-40c7-b39d-b1fad7dd497f",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "23dd1f72-5783-4ce5-b27f-d6c61fca4787"
        },
        "item": {
          "id": "8546830a-a058-40ca-96e6-1aace565e356",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "23753b87-3067-4bc2-b964-e2cf2080b6ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ba7900a-f650-44a2-a206-3614f58e03ba",
        "cursor": {
          "ref": "5f37fb2c-b8ac-4f4f-ac24-8a92be14a3ed",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d1c1c109-1fe1-45fe-8169-2922de4c101d"
        },
        "item": {
          "id": "2ba7900a-f650-44a2-a206-3614f58e03ba",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7a946717-49da-4e96-be19-a177883d5cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58382123-6d9b-4ea9-8d88-b73489b25d5a",
        "cursor": {
          "ref": "298e526a-9f08-4483-8c22-76e2795afb04",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a446166e-0242-4087-ad0b-43c42615ffa0"
        },
        "item": {
          "id": "58382123-6d9b-4ea9-8d88-b73489b25d5a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "a1826346-4942-4813-9fc6-70c7cf13cd57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae391161-5cd8-4e70-b4b4-344ad5cfb2bc",
        "cursor": {
          "ref": "ebfab01a-46fa-46f0-b095-d148bfbf156e",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bdf6cd4f-ab16-4a0e-b683-83269ac74330"
        },
        "item": {
          "id": "ae391161-5cd8-4e70-b4b4-344ad5cfb2bc",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d9f57736-ed53-4ab4-acab-61b800abe8bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "589dbddd-abf2-4dd4-b9af-ac7f82155c14",
        "cursor": {
          "ref": "31bebde8-f6e1-4b47-87e5-5475c96bac3e",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c53b03c3-6113-4ba6-8a5a-d16073b5378b"
        },
        "item": {
          "id": "589dbddd-abf2-4dd4-b9af-ac7f82155c14",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "357492c6-5545-4571-abf5-ced8eb7f1fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79c6802-4a90-4233-9a5d-f71d88e8902f",
        "cursor": {
          "ref": "7ac0a2fb-db00-47b6-81ab-a12513d48638",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c3c86258-617d-4c49-93ac-487758a3224b"
        },
        "item": {
          "id": "a79c6802-4a90-4233-9a5d-f71d88e8902f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "41d98be2-5e0b-4097-b1df-00a63513b084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1000f6fa-ca67-414f-ae48-f861e9061c49",
        "cursor": {
          "ref": "8e779d23-5740-457d-90ab-0e657039e5bc",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "86b99f0f-e5d9-4460-b402-027f2c326316"
        },
        "item": {
          "id": "1000f6fa-ca67-414f-ae48-f861e9061c49",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "31b1c88c-cd9a-4594-823b-71e61d28868c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "01f4c3e6-7edd-4331-974f-248669655ff2",
        "cursor": {
          "ref": "a04d1359-a870-4e07-ad01-8d96b91b0e4f",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a89cd784-2d04-458e-8886-258b929594f6"
        },
        "item": {
          "id": "01f4c3e6-7edd-4331-974f-248669655ff2",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "68a6aa86-59d5-4824-a1b3-aa840a436400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "6d6b712f-c947-4165-b279-9f938c252057",
        "cursor": {
          "ref": "4e2264b6-64ac-412b-8585-26a8afae9be4",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c3a4e89a-b507-42a1-9817-39389a063f31"
        },
        "item": {
          "id": "6d6b712f-c947-4165-b279-9f938c252057",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "95641cde-2138-49c1-97c8-c82369dfcd94",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b427ffd-48e4-43bd-b0ca-fe75ec4ba544",
        "cursor": {
          "ref": "a59d0698-d5ab-4103-a2e1-a0105e56825e",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7e811b6d-9f1f-416e-81f2-214bcb50f805"
        },
        "item": {
          "id": "8b427ffd-48e4-43bd-b0ca-fe75ec4ba544",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b637b29c-c839-40fd-9f5a-3b332c21d8ad",
          "status": "OK",
          "code": 200,
          "responseTime": 2198,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "031ec164-3389-4d8c-87d3-9a654c4f8501",
        "cursor": {
          "ref": "a1116c52-c6fd-4f78-9bbf-37e71a4cda84",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8184d0b5-7c61-4e3d-b2ff-627813f61a5d"
        },
        "item": {
          "id": "031ec164-3389-4d8c-87d3-9a654c4f8501",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "fc663c31-25bc-4175-afca-8b87f143308d",
          "status": "OK",
          "code": 200,
          "responseTime": 2516,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5779a77-acc5-4055-baed-c946de2de12c",
        "cursor": {
          "ref": "55cfadd6-3ecc-41f4-9afe-deae271cc336",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "feadf62a-b8c3-4075-a3b8-fbe285e6bb16"
        },
        "item": {
          "id": "d5779a77-acc5-4055-baed-c946de2de12c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "54c9dc8c-87e8-4cba-ab81-e4e35829a88a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "d5779a77-acc5-4055-baed-c946de2de12c",
        "cursor": {
          "ref": "55cfadd6-3ecc-41f4-9afe-deae271cc336",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "feadf62a-b8c3-4075-a3b8-fbe285e6bb16"
        },
        "item": {
          "id": "d5779a77-acc5-4055-baed-c946de2de12c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "54c9dc8c-87e8-4cba-ab81-e4e35829a88a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "d5779a77-acc5-4055-baed-c946de2de12c",
        "cursor": {
          "ref": "55cfadd6-3ecc-41f4-9afe-deae271cc336",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "feadf62a-b8c3-4075-a3b8-fbe285e6bb16"
        },
        "item": {
          "id": "d5779a77-acc5-4055-baed-c946de2de12c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "54c9dc8c-87e8-4cba-ab81-e4e35829a88a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "23f69bf4-5ce3-44a2-ab13-7b65724a71f9",
        "cursor": {
          "ref": "c0d35b1d-6dd4-40d4-b525-c9e2d82e7b45",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "bb7a0ac4-d345-487b-9d6b-47a691a1a06f"
        },
        "item": {
          "id": "23f69bf4-5ce3-44a2-ab13-7b65724a71f9",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "f6259baf-b858-4186-9dec-347ad80f4f52",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "62a5763f-253a-4342-b54c-022ae78e9329",
        "cursor": {
          "ref": "a9d8539d-30a1-4194-a7e0-cec97d8ec717",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6cbe6139-69d0-4dda-a119-0b8328d79972"
        },
        "item": {
          "id": "62a5763f-253a-4342-b54c-022ae78e9329",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b161c70a-b3ec-44ea-9e1d-9e372849b3bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "62a5763f-253a-4342-b54c-022ae78e9329",
        "cursor": {
          "ref": "a9d8539d-30a1-4194-a7e0-cec97d8ec717",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6cbe6139-69d0-4dda-a119-0b8328d79972"
        },
        "item": {
          "id": "62a5763f-253a-4342-b54c-022ae78e9329",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b161c70a-b3ec-44ea-9e1d-9e372849b3bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "99e8edf2-8145-4105-9692-6349488a373c",
        "cursor": {
          "ref": "c8390075-2a3a-469a-8384-6e505bc68beb",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "1563f666-8817-4856-9dfb-8eeb1c4777c3"
        },
        "item": {
          "id": "99e8edf2-8145-4105-9692-6349488a373c",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "d28bd071-9cd1-45cc-bdd3-dfce3a07b4e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 160,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "bb53a9f7-a0d7-4367-8ade-31b8d0cccec9",
        "cursor": {
          "ref": "7f106564-7aa5-414e-8961-e73b5130d7d5",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e90d0154-2c33-4e29-887c-e2a3b6121d49"
        },
        "item": {
          "id": "bb53a9f7-a0d7-4367-8ade-31b8d0cccec9",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1e9f43a9-3245-4417-806a-e363af3794aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "bb53a9f7-a0d7-4367-8ade-31b8d0cccec9",
        "cursor": {
          "ref": "7f106564-7aa5-414e-8961-e73b5130d7d5",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e90d0154-2c33-4e29-887c-e2a3b6121d49"
        },
        "item": {
          "id": "bb53a9f7-a0d7-4367-8ade-31b8d0cccec9",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1e9f43a9-3245-4417-806a-e363af3794aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "8b0960ff-6907-4ba6-b260-fbbaa5fba17d",
        "cursor": {
          "ref": "4a910db2-975b-4228-8e69-8ab6f844acc6",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5b6fb23c-f6d7-469b-820e-5e0f69262258"
        },
        "item": {
          "id": "8b0960ff-6907-4ba6-b260-fbbaa5fba17d",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "462d8867-23ce-4630-805b-f249c12a1253",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 82,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}