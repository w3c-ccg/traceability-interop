{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "82192446-b6f8-4d79-9ead-f395d0ce97cd",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a378e4b0-38ca-4273-8001-6a7e04c4570b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f7f7a8ef-846c-4ef9-a554-b95ba6dd0622",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8d7b1ad0-93a3-4bd3-a259-ca2eba2a60f5"
                }
              }
            ]
          },
          {
            "id": "d0f1307f-50a5-4086-ba44-937926a6b38d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "31adc616-2877-411f-ad32-ca6c7f043165",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "749e7ae8-b262-4523-baa4-0e8c59c02c0c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8f868526-47f1-4480-933c-5760e342308e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f7b87a2b-c995-4cb1-8d8a-446814d0281d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d9d15838-87c5-4e92-b0ad-1cf0e6b2598f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2dea206a-fecc-424c-ad88-715f34f150d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "11901d53-9c43-4d41-b394-15d584e77462"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3f3dd30a-fcb6-44cb-bf90-b5a819ee206b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "25a44e51-b713-4b00-bcd9-a82ba3020509"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6da2766b-ab58-4b6e-a6fa-4de64387fa4d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4f9ddeac-8417-4953-84be-803be8e8eb82"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c2ec8365-6fcc-430c-8ce0-7763f9bd2823",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9151bbaf-1fc7-497a-ba39-bb6793cef740"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f1e6626e-9421-41dd-b842-0499fda56a51",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e45f4a43-4815-4c6d-a21d-8206b6c3e7f8"
            }
          }
        ]
      },
      {
        "id": "833b03cb-b18a-4df5-a514-cb814b967272",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9a022211-c8b5-463c-9fd6-9ceb7d079776",
            "name": "Negative Testing",
            "item": [
              {
                "id": "91aa693a-f5ee-4895-8f46-b717ef736582",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1bc89d2a-944a-43de-88e5-6b3a8d86173a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d140980e-c39b-4e43-a785-74fbf6c5a81f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "007be613-971e-470b-9596-302583ba66a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636d9045-c3e8-40a2-9514-907ed16b89d4",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4844190a-32d4-4702-8702-6b5028b15f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72e93351-b5f4-45a0-9d96-49cfc81f0e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88811fef-51ac-41c0-bab4-2f38a442eebb",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69aa60c-a8ab-4e02-8768-d171ed28fee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49dcce52-80e8-4281-b205-f18ebc7c63da"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "14f1595b-fcff-4133-89cb-5d157ec9e9ff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fd429736-45ae-438e-ad83-e375105adcba",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d439f59-c42c-44d6-a263-cd232f00f811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5717bb48-5a24-441b-895d-536f0a906033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f5e2ce-18f9-4784-bb42-a031263d3a90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "713daaf1-5213-453e-9a98-51908a35b286"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bb48d99f-d5b5-449f-97d7-e09fc28d3702",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a360bcd9-6574-4067-a85b-7c950d6b638a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "46c2bf17-fb39-471c-8c0e-cf75c20e208d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "8e37d525-40bf-4ead-becf-9baf6985dc82"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "af13f6df-a273-4f6a-8a4e-84ff2e59935f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "f1ecd34e-3fd6-4bac-ac9c-85b562c64e75"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "14941ea5-0c51-4e87-a6ba-1db8e37faec3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b764af91-9af3-4000-a16b-25151ae26d28"
            }
          }
        ]
      },
      {
        "id": "62e75e9d-12f0-42df-9419-fd4f0ef8772c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1caeb4ab-f2a2-496e-978f-a95f63e797ff",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1949aaf0-aa44-4fd1-bf68-3c76014d1959",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7f5e3b43-acaa-4c6f-b622-bd6a927b8116",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2021c7b4-4e8a-4945-bbb1-89c329b7b329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5919d2b8-61c8-4723-8e51-3c5daecd46c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb790e73-8080-4d2e-a862-d9bec0804938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c590268a-f920-4715-a648-77e959beb6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e35467d-61d2-4225-a4b9-557b2a8a7460",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a8adc22-2ad2-417e-80bc-af7610f4266f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49053def-64ea-46bd-bff6-99434e038e62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4670122-b4dd-424f-87d9-8c8c58eb99e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e52aaf2-6ce6-40e3-84f5-2dab1a132df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a95a48-8c4d-46df-b80c-f13a74259244",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d64524-ad63-4c25-87a6-3826e5457ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96d29a99-8c2a-4d77-bdd9-30276cb437ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3dcdf5a-4bf6-477e-bf41-b2334c30c92a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86e786c0-1398-46e0-90c2-84f6874671d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71fc1c8e-9115-44ff-a384-e10ecb6f4e3a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "199fdfff-5ce3-4164-b3e3-39dd46fe8fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2386a2a2-ae6c-4c1e-8d53-5ab2cac2c2e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b563bb0-ca91-4be9-9366-7b4682b500a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7307c684-e9c4-41fd-9e7f-65f925f0fc7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd699e6-f395-468f-ab4f-a0b63b4bde1e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e90542c-b5ac-47e4-b659-2562d98bb26d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4ba6a75-d23c-44f6-ac17-05f14da12da9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b64fd62-6548-4177-bf02-71289bd85dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c6ad3cf-f765-4c37-a4a4-d6534550039b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1341b09d-258b-45ca-a49c-995b4ba30f21",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92dfc125-9b9d-4800-88e6-1c262b15b04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdc0295b-ce00-4ec4-97d5-632442de534e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb3401a-bf6d-4f00-bc3a-d38112c8c419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57bdc4e9-c161-4216-acfb-c218408fbd70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf12d57-c9c7-4438-a2eb-045f49375e0e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "271a6231-f8c7-4d00-8f46-4d83b3afb762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "235d7053-6606-42ad-b60d-c2cd0c9382c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0cea36d-6576-4abb-822b-e698360e2fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86f75ebb-d9ba-40b8-98c3-96c1bae173f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f47a78-88fa-40d7-bc15-25e60c0deaea",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31054208-27fd-48eb-871a-0c141210b129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38fcec71-e702-49eb-a702-ffa204a2d019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc790caa-0eae-4903-84aa-7b1462df41ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "604bda9d-1fb3-471a-8e1d-ed3a705f4a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30dce7e6-25f1-42af-8e16-cdb0506aa323",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "188594bf-5fff-4519-85bb-98a9524c6ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b7f9fc6-6e3f-4353-b88b-dca586b2f3c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded887bc-bf38-4bcc-b33a-4f21c176b30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2375f60a-4ccb-4795-a497-8d6f7dd2a359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b2cde3e-da88-44b4-afb5-60b59b06da38",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82d9f9a-1fda-4be8-b4f3-c9d3ccfed0a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f13310b-4a3c-4dda-8ac0-7da251126d60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9308148c-1b00-43f9-8a97-866513fe71c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c0b9143-1a45-4362-a3f8-c8c44da2aaa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ef29c3-bc60-43dc-b431-12f79230af43",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e40a582-25f3-4060-b8be-8040a9f824da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "614e47f8-77d1-42ec-a3ed-3ac651c656d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c5486e-da83-432f-86a9-a2c68bad78dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8f7c0ea-c846-44e4-95de-0845ab2dc3aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "668e4c97-929a-4f19-adcf-678a84822226",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9acbbbf4-d309-42ed-b6c2-0fe24fd8e6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab92aefa-8c74-49db-8e3d-6cdb248881c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13f76fc-37e7-480d-ba68-f8b397c4f4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41c97ef5-a3b9-45d3-bc3f-7177e896bf26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5006a521-44c0-44d0-aab7-e446309869b0",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "564a183a-e306-4837-856c-28b05fc9e176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc4b5548-5897-4505-8c1d-b6ffd9108f89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f1186a-5c9c-436c-823d-f93f74e0f016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "696264b7-bf4a-4c2b-aba4-2d73be8627df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23cbfca-d736-4a3e-82fe-bc6ad98621cf",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "591dbdfa-fa82-4bd4-ba2a-7c2c07179ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5214c369-d9e4-43a3-99e1-03517da85071"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed02322-f742-41ed-9f3a-a602a6ddafca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31aabc04-e378-4292-8636-e6eac91e6d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9807e61f-e37c-4118-9c9e-3c70bf53c712",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55be3421-c58a-41f5-b3d7-ae24e26d2a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f1bb82-a43b-4dea-b09c-76e386572361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3725949f-6931-4bd9-819d-682dcf1cd5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0686a81b-a453-4c9a-9a6c-087458b6ec70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09a41d3-2e6b-4f3d-9c6f-0175aebac3b4",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e0f6d0-7297-4004-8bd0-97ef5e3c8c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04682a96-6d42-4f6b-a2b4-23a6c30ea981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04be31fa-b6bd-4a82-a8cc-0592d2217a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55b3da61-63d4-4b06-9efa-93b92bac3861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9c0108-72b0-4154-987f-74b51568a0ac",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bdb4d33-90a8-405f-9832-eb30001dbee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce6d5248-f074-4550-8d25-22212f56d3c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2672deae-f80e-4256-b545-e9363da80a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "584a8373-c65b-4b7b-8f62-70c500e84086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfaf8421-0457-4c0b-9f6d-0f10106104f5",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "153e20d6-ecc7-4c56-a5e5-8ef53be9a30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "730fee84-de52-4cc5-9486-ad09532d6246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51befd92-b52c-4298-ae18-094498b47b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "053f1f6f-25bc-4a8e-8b47-b413391ca283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02aa78b6-1f32-4cc8-ab17-98a73ea466c2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca87518f-a0e6-4c68-9215-3bfa47df3924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cfc4aad-ba91-489a-9d75-77c4c45bf944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f82772f3-70b1-4166-914a-cf52fbc93d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f62cbbc-83d4-459d-b14b-083efac6d91c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d80e9b3-04a8-42a8-a146-446c550944d1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e788c8-2032-437b-a570-8cea7709a857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02ae87db-da4a-4d7f-a58f-dd5daa6460e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a72a1d8-4a0b-477a-a25d-52537d83bacd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c27fe449-c687-4a8d-9264-dc92b3247e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8dff4b-168b-4611-b7a6-d68e471e5810",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "622464f3-30f7-4a02-9fd6-bcb5d7119a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0244f4e1-fcc3-4c99-891f-9f0de860473f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8683d1-7248-43c8-bf84-0234ff810ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "06a69550-eb4e-4767-bead-99854ce5f752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a6c69f-ee36-4f7b-a2dc-d3c303477a08",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b379a17a-c959-4b59-99c3-672021f7254e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ad080be-5b71-4af4-ba08-f9be272e32ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa5a840-cbd6-4444-85d5-f31b3c92afb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "86b1d21a-1244-4590-a88e-936d99e92f9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "332a7546-2bcc-4c07-a0f2-c658f0a12395",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9e2f4c-0ade-419b-9168-ebf0811fe9c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebaddae8-7d4d-46e3-9a2a-e8505be73efd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc54bc11-3a44-4079-b59a-9a6fd1379829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "31796f9b-856f-4669-bfb2-00a64d28008f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2267beb8-25c4-4429-bd2f-329a1fea3231",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdda9d06-6107-479f-a1b1-04b05d0cd9ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12807eab-1c5c-46fd-a971-59cf41add64a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca57e5ea-da07-4472-a9e0-9deef53debb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "079c5fad-f02c-45d7-a769-474645e393eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f68afdf-9c17-49c0-b247-4f5b16457dc5",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3001e2e8-20e2-4c5a-ab37-b68cbf75311d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e8c7f0a-7bd3-45b3-97f4-6fe077e6c5d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e527f966-cb25-47fd-922c-10e3019df12a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e5f4ebf-c1a6-492c-b499-c90657c6e430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9f626e-01fc-47ea-9229-c2a8b22039f2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "945d4665-6813-4b05-9315-f3fce6ee2957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08620c89-d991-47a8-8a30-a2099ea9c0bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fdfcf06-d98a-4c53-ae96-a25e48a7065a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad1e6df8-6747-4779-8b86-b007817e73ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4583ca28-7f31-42da-83f3-801086530dc9",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62256f6f-50f4-4a03-a51b-ac4304b1fb97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfb86217-67ce-4d13-8af2-0804db4b59ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257b003d-163b-47af-9ae0-309d8256e5ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "13af74b8-ed21-4a62-9480-e76e9f25e946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddf3e3e3-42a4-4013-9e15-07813d5b8c88",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63a1ca5-48e3-45bb-8c7a-65145f735b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58bcd30c-703a-430a-92b5-7908b8d6806f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ffdcb2b-c00b-44c0-a2cb-5c8e575e1a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "10f85dc9-b9c2-4d8b-b31d-a6a6f70bd1c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c00419-39c1-43bf-8a1b-ecffc9ad04cc",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ae0175-772d-4f9d-b8f0-a8973a8447a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc51b11b-b025-4f10-a359-3d01a6f68eb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27691440-66dd-42cb-a58b-8a8496a1f6d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6986c36-bedd-42da-bab0-1446683969ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832525b5-ce73-41f0-824c-b6df73d2020f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24afc482-1559-4add-9eeb-efd0712a38ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ffe1f5-64ac-43f6-aab5-9257b86eedf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad65748-a47b-458a-8ec8-3b1c628105b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "80d404e3-ce36-464c-b815-40f996ed23f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18539e9-3c45-48f2-8130-93b50b58fba1",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6589a6-de7c-49fb-882f-3a5ed00202c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "101b5304-07d9-4c69-9314-c64719ee38db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f8cca6-56e3-4b4d-82ff-e31c61da6b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d444f96-6e76-45a9-be0b-b3e437f0bf79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184d3537-527e-4a7f-bb97-b0169d25d79b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ab290c-33bf-4fe1-8614-a5803f455c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c01d814b-3ecc-4ae9-a375-bc6837a5e699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9853b8-0b4d-4fd7-be06-5596902bfcae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b91ef209-bc99-4261-ba5a-67931c7cf429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1276fc97-7cd7-4dd3-9d8a-bd904ce3beb9",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "177c913d-a26a-4d61-8579-5232d7e0139d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb784f5-1164-45f2-ab21-7c4dc527d74c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cba01d7-fe02-49f5-9aef-74899966cd89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3310d3a5-2ffa-45d6-b35e-42e671af0efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00573eb0-5363-4411-87fc-d0991d22673c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a203bc8-016d-4d81-9b6e-e5dac5e7c6ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c7fb893-be92-44a1-b5ef-820138ddeae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3cc18da-5be3-467a-afc8-eba75ec74abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "97012a73-43e9-496e-a0f6-dd43ba20fc77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f96556-193e-41d2-be80-6e1bc3c4e76e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0097416c-9681-4f5e-8728-979aac5cdbc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be4b07ce-a0de-4705-ba45-03a248e6a973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7355d4d2-c3eb-4045-b3f7-2169227ccbc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "6ae4aaf3-df96-4197-9ef7-c285a8ff38f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee62f99-27a6-464e-b56d-2a111260bcfd",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "953e2fa3-fd1e-4b0d-a3b6-681830a0de92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c5f5183-af10-4281-a59a-d809352a3537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6836aba6-0cef-4937-9e0c-7a2ba5cc038d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8ce03dc4-c589-4655-9e65-59d897d05f02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "052fd87f-075e-4af0-8399-d08ac2b10284",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af014ca8-638a-434a-8b36-606fa0b1f84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4192da7d-f984-4abc-bbd6-9dafd7d06a07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46dd2b82-fc60-4093-8fee-29da40bd4d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7933d20b-f22f-4874-926d-f9485b8ba7e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7c9abe-3b55-4970-af98-5492d352c248",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ff10b6c-04ac-4d0d-966e-7b30be7cce66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dace0a84-ed3c-4322-92c1-20d00db6d3be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5aba9a2-ba4b-4290-b5f9-dacd2c02b29e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ed0b5bf-db49-4bdb-9eb7-dacbdaf58bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25288d7a-36ad-42b9-bcfc-64fe3cf872b5",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77944000-d427-4ebe-b929-1240fcbf3007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b03240ae-0a00-418a-977a-8127a510bd51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c073ab-5a8b-47f2-b560-c8a181adaddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "03240f4a-4d1e-4c68-bffc-90290e722588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4b2c8ed-c830-4a2c-9e8c-3886c92b9e53",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fac3f4b-dff6-4e4f-afaf-d4594be9c1d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d48023af-3016-44f2-9d18-ff98bac401cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4c0f1a-f75f-4061-887c-d6ae74aee613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "10093033-0e3f-424a-8f3c-299d37324aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3909c57b-b642-4f69-85d5-2a54be3af16e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4371cbae-1a9c-4621-bb26-f2640ac769e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08209895-dbb1-4b24-a184-6eb7b993a47f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4672b5db-5325-44f2-b4c5-960670e343a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "17b6242d-1bcb-4166-b23d-d2ffd426ee90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d00bb7f-4e65-42f7-96b5-efe7ce87f50c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac5328c8-8ab0-4919-ab59-603743f08314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59462718-2b9e-44c4-b9d3-052e47122577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c6ff5c-b9d4-4deb-9d06-05de31e56b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "de88eec4-9ef0-4bf8-b2d6-8dd45fc8b465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f2586e-9106-4a51-ade1-9cfa89f91501",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f1859b7-508a-4b33-98a4-ebdbb05a8582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ddde942-86c7-4bb1-89e4-bf17779730fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631347f0-4d0a-4ca9-b46b-a747ad267a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3406c724-3bd1-44a7-86ad-b517a35ea807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3460e6-1bad-480b-b4ea-0c7acd945fd0",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc8f0037-2467-4709-9461-72a07956e05f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "011d3068-ec7e-4bfe-bdbc-f112f50a6628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42ee26c-fd45-48c5-bc88-5c7cf98c8f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8c71953-7879-4c11-b192-114a069f7499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b365596-93ef-406a-9893-cb53d552e327",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1499e342-c2ad-4b9c-8f8e-1a1904c3387f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "674ec980-3b49-4d5f-b4fc-23be821f6267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ee2811-e475-4980-962c-de9d4fecbdcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b21dbb5e-1e66-419d-9245-f9d6d00f81d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e547b21c-83f0-41cb-853c-1d32c6a71e7b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c813f03-f28b-4019-8c9f-385b288bfe47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4b0a74f-9062-463f-91aa-681ad88cc5dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b97373-6565-4288-8006-66b3422cd404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4440de09-07be-4a31-90f6-9cdbcb72eb78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88598190-293b-4a1a-bc09-22f2ca2de74f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b29afae-c84f-48f2-8b9a-128e98784c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32eacb6c-9b70-4dd6-b65a-cb4cad6f6132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7e1489-4ebc-4876-b20c-8d2a10f5b8ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "218a2a4c-851e-483e-ac18-f58a2c8cc776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9595f296-b125-430f-96ed-b5597ad2e359",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cedc0024-6d0e-4d90-8de7-9c55ef1ce476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59a8e01b-09b5-4517-be7e-cdb3623f202c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef0c4a9-6256-4cf6-9891-afb1e8a25291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "56284062-2f32-42d0-b75e-75602e23dbe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b03297-e320-43f2-8360-25979bf724e5",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656b77be-c2dc-4251-8908-9a47cf95246c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f80ff008-2814-462a-9c6e-9e7653dca641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8551dbbe-58d5-4a3d-824e-6e3dd3c1d711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eefbb38e-caf4-4209-8b3b-d13f6e38bbac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df85256-adfd-46ed-b6a1-291402a6480b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "598a5842-ee4f-4fd5-8b27-75646e683591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "947eb808-4ad3-4c54-a78b-6763b0efb36d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2995bbe-74c0-4436-9d50-b9395d28a1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "91202c3a-3751-4113-a0af-6a8ed009807f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70952fe8-11ba-4a1d-a7ef-c5a6c9e57990",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d89d143c-7486-47da-83ab-179b40e1179b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a7c1c6-36c7-4e39-9eab-96bb49404ee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7896052f-2669-43fc-af59-9ccb7ac01b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f94ed393-480c-4262-ab04-20e4d71f9642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d955cd35-443c-478d-a876-b3bb2006bb2e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e18d1e-8d95-4a0a-a3c0-9f33bbe436b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e565b43c-56a1-4089-a0cd-f064f5334f5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d775d0a8-edf3-4add-99d9-5213d81fbb60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d43d6a1-8742-492f-be1d-66fc0fdcbf5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b24ccd-ff01-4f89-9a16-bf9affc3d2a1",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7891706f-d244-48f7-8a43-c67ff46bb734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cf06bab-d264-4ab1-b614-a208acbbf162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a5c05e-8d96-4b3e-8ee0-8ce4d874e9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2797e98a-18e2-4f18-8bfa-f6a658e77c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77800f15-8051-46ed-abe9-7067f9b7e93c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c7069f-8d9e-41e3-b90f-72523e5d3742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db3cd257-9113-4a0d-af74-17c70946c347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4111ae-dc63-4b1b-81f7-67b5c47f85c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "04b188f6-c5a0-4ea7-93d4-d9d68648b5bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75cc3bf1-08ed-460a-9215-86d50b990d3a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "272fa5a4-ca0d-4ea0-82b3-c8b1786312cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fabd95ec-a0e7-48ae-8f34-cb233c7c7c6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc855bc-8d20-49ff-803e-9324c8b113c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42b5893c-b036-42af-a135-18af7c38367a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a53884ec-6b95-4b99-951e-d8519444827c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "818bcb50-c2f5-4d4c-80b6-39e53db2bc7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a9bd278-73c7-4498-8dc0-a0f88773100d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967b9836-3eb7-4e0e-9b6a-80d34b81ab5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b4a69eb1-0d05-4d06-b18d-3d43b2a17cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b2ca71b-c6e3-44c1-8c1a-3aa2874739fc",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "257a84de-fa2a-4948-be0d-933f1709dbfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c25e927-3a61-4229-b024-b65e9f1cc592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6e7c70-8d8b-4d5e-b080-5aac4eabb110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3b19f13-184e-4fc5-838a-c011ebc4feae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4870c06-3a0d-4c62-915a-787a7f76f9e7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0fd160a-ded0-45d8-a778-9bc7edfdb35b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e705858e-e366-4fc0-b27d-4e1c8e7bdea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110e3006-910c-41b0-9792-724a62723697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "540381c5-037c-4c93-9b2b-7f5a879e8448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68ba682-fe04-4349-bbef-78fb9ea48f48",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b71c8a99-93d8-466f-bc75-a7440dbcc005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08ac2511-fe0f-4d2c-9481-cca2c3d24374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f483fe-1ad4-4757-ac23-a03218410317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0492647-8118-42f2-89cf-302c4e4879b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ad5c5a-1ae5-43ce-b4d0-bbefb30c409a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b802db-7941-4233-baa2-fc963748043a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad5235ef-dcbf-44e3-9ad4-1b17a7345b7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f6b00d8-2902-48d3-827c-525a52c87308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9eb3986-5902-4200-ae48-3281ac4b1162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c067b1-96bd-4ff8-b8cd-405f960ebee2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0628dd09-e19f-45a2-9f58-a5cc37a21091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "428962a7-e517-428b-923e-c529c930ba3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d324d574-eee7-4aa4-b086-084ad6726b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9588c4a1-f83d-48b8-85ff-612bd3f3585e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc5a6b4-1e66-44fb-8afe-293cf6ca8cbc",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c83311e-9b03-4052-9ff3-551b904da509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d1d4b90-4376-4c2d-b4e2-eb590580122b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2edd8a3-03f7-4f37-a3a7-b87e50bbd843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd7b0ed1-77a3-48c9-ab42-627ebd1fd221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "179fd68c-da3c-4644-9ec7-ae1cc0779884",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07701ec6-5361-4882-b8e5-83e4721e77fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "474e8ff1-46af-44bf-845d-75c785b675e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ead191e5-2f54-403c-8471-ff666d673b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "acaa69b7-1a7d-4203-b315-3b84f9b7d0f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b5896ed-0881-4dfb-b985-5572c617381b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "823021a6-a921-4e1e-83b8-3d385ed56c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c068fb12-bae6-4d1e-993a-1cf0739b0aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b48320-b17c-4887-8f9d-d43a47254fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e0e004f-7176-48e3-b2c1-1b5be5d042c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c20507f-ba0e-4751-98cc-14ed4713ebb2",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f4f849-cbc2-4963-99d9-265911fa4702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d16b8845-c10b-4bbf-bc8f-3fffd12d9214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "880f74f2-abbd-41bb-b3cd-759fbdcd1848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d50ef10-4caa-4ca7-a5ae-3bbcb3f0e94f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9bb2928-0bd1-401e-89ce-a32b4c8804f2",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48380b88-9de9-46b9-a394-eddf9aea2901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4735ca18-e0b9-4c1d-871d-27bd6b48fb9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4294a1-95ab-4eeb-b3f7-ff9aa09f11ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbc90242-36e3-47e4-af63-99d565f19f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b74262a5-eef5-41d5-8be5-01cc01cd508f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9cf7e8-329d-49df-bb74-161e67a1a7ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdbd3c6a-7710-42ac-a029-62546c16c661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3921d314-6c25-4ef1-b7ef-51f36f7397e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d583cef3-31b1-43cc-9d8e-5f460bc82955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4605b94e-055a-40bf-b07f-a3eb08d33a3a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09d2f6d-b2ce-48f2-9673-ca4cc666c434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0b2d82c-3b51-4646-9182-e1d13dec902e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8874e0-a582-4f91-a03e-6626e55a83ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5a6caa8-f4f5-4cbb-827e-ef884c9c68ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6273de-d99d-4789-9169-d45ff2787562",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "427690f4-ec91-4610-937b-0c5a30077cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "358dd6fb-e604-455b-9ffe-bda17548edfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9da816-d24d-4139-b502-cd5196dbabcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fcb5263-59d4-41f4-abc8-145d62003390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50be7038-6d81-49eb-b3b6-cbf4b914841f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d4582e-32bb-44fd-9329-eda482065884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c787b6a-7acc-4bc2-9c5e-767ec7712a6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aaa068d-76cd-4287-bacf-1a0b0098fbfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2985f4f-c832-4e36-addd-49cea8fbac5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdfc151c-75ff-4f09-a4b5-076283198fe5",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c11e828-f726-4adf-8ad3-ed624531341a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8270f75f-4abc-4285-8c70-0e52cf954762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "378d0ecc-722c-49d9-a74b-ad29475d19d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "99bfb1a3-a627-411a-b302-a97b89a9c0a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4271216-00f4-4b4b-924d-308733e93b33",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc1de28-8500-4c09-890f-6597f2107ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74fde39e-351b-4ce5-9701-9f9b6c5a8777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d672894-a6be-4e96-8220-4df6a6fac130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "35d14025-7124-418a-b45c-b948a951eb63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f7e5acb-6f3e-47b0-8ec4-df35b417ac00",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "952b87e6-629b-4083-b5ba-83a16229e938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "559ae837-b116-4f8c-a7d7-8f0689367e95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7562c52-8a4d-4e3e-85b3-295252a685a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "23db94bd-d585-41c0-8dfd-fd420df9bb40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00bff1d1-d6e9-4194-9263-450988952df1",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dba8712-ca08-47d5-a17a-b43a2fa6f5a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aace4d28-9162-46d0-b1d9-09a3c83e4d25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc115b19-fe8f-49c7-9003-6a401e8b123f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "67083c5b-13ad-415a-8521-b793186b7efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc09cb12-56ec-441b-9bd8-46290ff67660",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33377824-7677-4e80-bcbf-1e78b91a6e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eccd673-c6b2-4f60-8104-95a206bb8f88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e374c9-ab29-4239-9ec7-c38e477346b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fcffd5b-0404-4d76-97e0-5b49ece5e1b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "424c1991-ca6e-4171-ad94-4c57ccea394e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ecba988-840f-42a6-92a2-8f3940b2b3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0dd0874-94a3-4c81-ab77-c8e4dddb8a95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ce391c-0da3-4ef3-97ae-3b3da2da087c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a2c98e0-3860-460e-a460-32029ca3d1a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a566376-d4a9-4f4b-abc0-eb2f7ff7c7fb",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b0bffc5-5c5d-4e46-8a0e-9681e5502f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "506f04db-0682-4241-a216-23ac264af68e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6621d3d-235e-4997-9797-264f98e8739f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "33360983-186a-4cd9-b3c4-0e0683b2f51e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81de3cdc-763b-45a7-a549-a7922a2fb4e0",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51e469c-56c5-430f-9aab-ccddd4c01ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26bd9b32-c1b3-4630-b4dc-e0535b922d98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be454ba-1a0f-4096-bd8e-0fc3019608b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f8c698b-e7e6-467a-8bd4-aa84f576b0ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9708d43-daa3-48cd-9d25-d1473c2b595d",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3c4d23-bcf3-487f-9952-ea59cc7b988e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8c7e624-84d5-4d78-bb64-e2538b2010fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da393caf-a4cd-4010-aead-9942a276f5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "001be258-bafa-44a7-8895-ccf892a8a645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aff4216-dd93-492d-8c47-03d51b7cab7b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "936404b0-b5dd-4642-a6a9-2de2c6835dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5e85189-2af5-4f3d-ad1a-4a6fb9d67ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10eb25b4-8f35-49ef-bc57-92d48713e412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4faaf46d-b579-4746-87c1-c9680580a43a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0072b6b6-7f89-4e16-b485-cc88d6050a4c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9113c082-422b-47ba-9137-f9938f378c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3bb6b36-63d2-453d-b51c-922a107fe19d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8404f844-cda2-4e5b-8794-a6903f4ac808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9aa8eb57-a444-46c3-a5f5-de42cdb6df52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f9c9fe-90fd-475e-8531-a45897a4f44f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "828fe3f4-e205-4da0-9b47-d657f34104ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe4b67e0-957d-4b49-9f9a-78bd462aa4b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd9c32b-ba8f-4eb3-96e0-280db8f364af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "77df0455-50b5-4c3b-8167-5c5518d68192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cfd9e4e-e61e-4b10-92b4-48c73e191910",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8068666-2d2d-4429-9252-a1c79ef5ba6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a38e86a-a277-4834-ac73-75dbcabf8a1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465be71e-af32-46b6-adef-321d4aa7469d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5bb8406-2950-410f-9f43-70de92d22572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b82065ee-2ad8-4774-8c50-b861a59e0da8",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ef11a9-ed1a-4c95-9dda-9cebe950903b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd6e54e3-28b4-47b5-9293-0a676689cb98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "606a9aa3-9946-44b1-a4c3-20fd5c6e9cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "248adc45-890c-42e6-b0cb-afede63401d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a2753a-41e7-4975-a783-6c80244b61b9",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a48426-33ff-4f42-a710-851c6cdc34aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9596a6f4-ce3f-4c37-87f6-d749dce98ec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599a69aa-7b6e-4b26-a8a5-280e17cd271b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dba8419d-5981-431a-b344-1c0a89dd95cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183624fb-dfc9-41ef-a641-7ef1ee6e0552",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3bb051-be02-4bfc-a613-abb6d185827a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62da4576-ecb1-4e09-87ae-887fb49104ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbbd543-b4f2-4aee-9452-ae40da58c304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd343ce0-ca81-4fa5-8317-11256b7882ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21de49cd-0a89-4dca-b703-f15d937213b1",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "179427b0-a5e5-4bc7-a02e-3965aed0d221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a1e23b5-2323-453b-8b4d-4ee991d22e09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0077236-66dd-4d05-a7ea-92f8a107ca92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "77bb9e3d-fc08-4ae4-94b3-21a519215347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c92e5680-4355-4f9d-9ab5-39661c4f19b7",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c10477fa-a267-401a-a8cf-d533991b5004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59ff7013-a911-4fae-8505-b1007d88b7d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1631ee2a-4631-41e5-93f2-ac08e374a4bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d37a3e84-d41e-43ae-9255-85b13d0f796a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f139d14d-a211-453e-89d6-8ca5e0229df2",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a7bb9c-379d-4114-9f98-f2284c0efc44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e519f5-aa9b-4485-8cee-1bde5674c4ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7701bdaa-6113-455a-b2ca-b476399aec5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "25b0a258-efd3-4935-8631-391e359e450d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc65b58-128e-4bb4-aa69-0fe171abc7ee",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0783988f-c501-4e23-a111-4485f5bb5705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5598f13f-a52d-45f6-b778-129069a4f037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85acc579-38ca-4c2b-9389-43accdea6d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "90f36669-da99-4079-b313-5229e53b177d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368f2463-215f-4ed5-8534-e629ea2a2b9d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "275ad586-f58a-4737-9eb7-a51d6aac7efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9d8d17c-4f3e-49a0-8b67-7e4035d9dddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a93bbf-0ea9-4420-bb76-f6ea154d95c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6c9c0a2-799d-4927-a9a7-77a0fe76fce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "622db1f3-f1e3-4074-8a30-ba53c0980d23",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90b3126-4410-4ec7-b1f2-3abddb8a154c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c6424d1a-a2a4-4524-947e-5ade44040c70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87856e3b-20c8-4cb6-9acf-d2dbaffb9e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e131706-3662-4ebc-b2aa-a23ef284e102"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9802e5da-8d0d-4a8f-a647-c23e6749f7a3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a3adf91b-5720-4f11-b113-dd7ad0ce87ec",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2412ec13-3e29-4e07-abad-2d57a0bd0fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "97ad95f1-1781-43b5-b14b-2d5075c2db2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd07866c-7ec5-469a-8625-8d92dd2ad484",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73d9d412-5cfb-4986-918e-992185053850"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e7997d3-4f85-48df-a80c-cf233e64e514",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7fac0716-5f04-4a5f-97ac-d101388593f9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aee93711-f9d3-46e3-8332-560c664a8812",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ab91c87-837a-4e34-8a25-efe024e2466f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2802d68f-30e0-4c28-b5a3-acdf802d759c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9e6a77b5-d845-4c7a-8d5d-7fc694891cf4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4a41d07f-efc5-4af2-8658-fc210c3625cb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "59eb0109-d27c-47d1-8694-e19ea666017d"
                }
              }
            ]
          },
          {
            "id": "1e571f8f-a7c2-4298-8696-33af8633124d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f0c32e84-e832-479f-beb9-aaed80dcd8dd",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "ec94a48e-db48-4f6b-b0e4-bb67d86e1c37",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d44a346-cb83-42cf-9dd6-7545f2a44b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "dc9c2212-cff1-4f7e-8475-112f1e505f14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735c9dc9-88f0-4aca-925a-f8b2e6780ce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28f3e19e-44dd-4384-8efe-10e436b116d0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6d705cf9-cf82-4448-b147-cf67f8a6935c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ddc6a210-ff97-47fd-bdbd-c78de693802b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "560cb5fa-09ce-4e5e-9d47-523178e429e4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90814304-0767-4b2c-a30e-80d5b1f461ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "df3dc612-129f-459f-8d03-0dc3a2b25cd3"
                    }
                  }
                ]
              },
              {
                "id": "379664a5-62fa-486c-bff4-7598a9a9bd0f",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e70a2974-19dd-4a08-8721-d663c8e1c732",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9201a50e-32c9-4de2-8751-0721b8bc09a6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f9b056c8-a7b3-4f1e-854c-8bc118bee467",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7ee65357-0031-4627-b131-49f898e5928c"
                    }
                  }
                ]
              },
              {
                "id": "53774aff-529c-494e-938f-c1c1ebe23bdc",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a72ee2d-5613-4ac1-a56e-fab13a8ee1bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "53efa6c7-802c-451d-9db8-431c2353283c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5242427-9e01-494b-8ef3-8a878097cef7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "73225532-2ea7-4dcf-9914-ce16e9d4276c"
                    }
                  }
                ]
              },
              {
                "id": "00941e31-d6d5-4803-b3fb-1ea39fbab8df",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6dc3a845-8e5a-4c70-a156-a88f6a0ad627",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "50dd90f6-1e06-4f28-bb7a-eccc4da2685c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8db62e74-739a-4c17-81e1-675110033e47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2d758fa9-69a2-4dca-b7f5-8a256b0a546d"
                    }
                  }
                ]
              },
              {
                "id": "70251fea-4133-4164-8a22-6ce8a57fd848",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "76ea4ea5-fd7b-4b15-8b2d-5fcd9396a8f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a8c5b3db-1ef5-4acb-94c7-7bc6cfd5852e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df7b4047-3ac3-44c1-8849-e7888b6bf7cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "3ccde69e-a23e-4ecc-b73e-4d20c520a262"
                    }
                  }
                ]
              },
              {
                "id": "be0b826b-48f8-4b1f-9849-fa053a256463",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f081c3ed-153e-4427-b241-eb42bb6d982c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d69ba51e-d4a5-49e6-8a18-1d6d1e0046fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47f8b78a-30d2-4002-8588-d2d41bc9b6e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c4d9d927-982f-41a9-b53f-fd0d1c77e91a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "767e36cc-8758-4641-bdb7-d85136f62fd3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c96cde2-af68-40a2-b96e-ccb4d252e4c1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a90e3a1f-0101-4760-a330-1677514265e8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ea1b598a-0942-44da-83a0-20839207a948"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "463136ae-9a8d-4d83-bad8-fd04b66cceab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e14b2795-9fea-413b-9417-dc0f8729670f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7169b3f0-288e-441c-9d70-f0e9e8d751bc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd5af371-baab-4f4c-bd78-0e419d1c04eb"
            }
          }
        ]
      },
      {
        "id": "147e1c33-ec9b-4f8c-bd7d-d807277b5439",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "bb0107f5-9e39-4527-93d2-93d36426c7f7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8d9c22e7-15ae-4c6c-b8be-6d1d3dff9913",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b8d64775-43b2-4572-9953-700aef00dcdd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceecd031-dee6-4811-9e36-a2322d57a442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceeade9d-a9cc-415f-861a-3755a14f31a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d8f62a-5a4f-4200-9787-08849efe4525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fda8b44-f9d7-4390-aff3-de1ebc6ac7d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ffa23ad-09ad-497f-8d27-d66d7c53aca4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f10f055-b1b7-4323-bbb4-c63dd091a160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33315812-745b-48cb-92a2-c078cd2b2aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb782ea-6100-483a-a8de-ea987b5318ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4bc3a7b-6853-416e-be72-1bff1600a8d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9850a75-2c15-4216-8778-50b595599ffe",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4d41de-79ec-4b8d-9a98-2cb6a1832462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "173306ad-d7b8-47ae-869d-08fc863e46e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ae61d8-d72d-4376-b564-92a52e0a7dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c92c95f5-0dd8-40aa-ada1-8fdff8e67190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1585373d-bcf5-4690-875a-beefc044beda",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d2c2c3-f1f3-44e3-9591-1a818aea8a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3acd2c01-a329-46f1-99c2-9360aec22be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1086eb-fe1d-4399-b26b-9e1afecf6723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "41e0b3ee-b687-4da7-ad89-d354bee34569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6070a48-121e-4c59-9f74-18f7861fc901",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d4ef07-485c-44c2-9c26-1990621e7502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f10277b-90f4-445f-95eb-74f980c8f976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e794b4-4cb6-442d-bff1-04fc9d34ebda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "33af09b5-e710-456f-9321-f05349e9a3b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec1bc36-6656-4374-bee3-54dd0b483ba3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1591f37-4a92-450b-be24-f83afcc564d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f7080e9-09dc-4aaf-a55e-5102b2aedfe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4f52567-e32a-4b8e-8d74-b38d7bb3334d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "33be5323-0459-4d96-80ba-8958a048a3f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ae147d-60a5-4bbb-a225-d314f6eb3442",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7d0e4b-d931-45b0-b183-13b3d369f740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb3e3c89-9def-43ec-b35e-e7b1963c7656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8100775c-5c7c-4ddc-9242-1cb45b739489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6203fffa-16fe-45ae-b57d-bf1eaf536a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0883e8f7-bbde-4a20-8470-184df9ee84da",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90cc697-7661-43fa-aeb5-e88228bdf0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04967ca4-b30d-45e6-9846-b34bc8d2b99f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67914337-097c-42c0-96f3-be35099c3689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c9df09d-f3a7-4820-ab59-81b0a62763ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95335721-4ceb-4a2a-b563-7f7256434f7f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f014fa2-cb2e-4a96-8b98-2ebae7668cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f8112f-e861-4719-8988-4d45ad36f196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d823ee-eab0-4168-b482-a616ad00a9fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4ae518a-0dd3-4c5d-ae8a-f5e9b51ebe18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1675a94-4621-4232-be56-7e09db404dca",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e818420e-828d-40ee-a589-f27a26c1e1ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81003e2c-1175-4e4c-85a1-efe5c36a7196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16c880a-fd0b-4506-acf8-85e0904b177f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3597d1b-0e2a-4337-b9b0-ac76d3bf0b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce05fd54-1f4a-4dca-8023-97dfc36c385e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a63cb33-2acb-4732-b8d2-4535fc73087e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2f4e8a2-e910-4efb-b3c1-a7f346a1453c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2519d2ac-ba1d-4300-8844-f814e95eb0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "20009ae0-4b75-4b5b-91a9-99378c3f15af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a494126a-2c5b-43b8-9d42-dfbb94c6d329",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c186b8-0a16-46c7-8438-190c54d0cb7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ca3714a-d474-497b-a19c-f2c08a891145"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92368590-60db-4b16-ac49-8b2989af96f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7498de82-8f7d-44b3-8958-d665a480d2d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b7aa178-5db5-4545-aced-0865cd39612e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58468f4-c114-4389-ac61-497ccfae7f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3e1f6eb-3292-4e66-b3f9-28dc55a78af5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be2ca96-c0d5-4cbc-afd2-fb4a0bb4a924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b33cef56-9989-497a-9a83-4b7454a721e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228d26f5-7b2e-4a2d-93b5-c955e9389f61",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d9e9a80-5be1-4ee7-8392-06f2734f1fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69469e8e-eb68-47b0-b554-1c98aad298d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "542bceb0-4314-44df-9de5-4c9671092da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6098e679-5f17-42f8-8e1c-6c9b983edb87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce7d7ccc-dfbe-43fa-b6e8-727ea9c59469",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "805425b8-f664-4295-b03e-af5c93fbcd0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78729e78-67eb-4cf8-968f-546770ef4d6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c1b9a0-bd67-4c6c-9ae8-cfb59247abfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b01e8cdf-b808-4fe7-a360-dd43518eba2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e315a223-b634-41b8-9af8-b3c7c6bbf3fd",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b927e2e-9a29-4abe-9a1c-94b11da7e989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a02eb48-ee92-4a38-8a16-c8a4dc706f5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "694fe879-7469-44e1-9979-c27b2166edb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dcc489e-a03f-4de9-b63f-7c6b1963db27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0af86b8-da14-4c0e-bcfd-916324df957a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68cdfa81-62c5-4b7c-a5d4-f0ea34533a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baf733bc-a881-424e-8f4c-f9f29326b1e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceedf2b2-9288-4432-9a04-0aad5d7d8483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e50eb10-428a-4c8a-a6e6-fb90339f2d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64579381-2a87-4456-b3c7-6fb8d6b9d13b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17321896-0c3b-4d4a-97c6-38fdacf2ae83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea190d5c-bdb5-41d7-b516-168f347b9cb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d8874d-ebd6-4978-9502-5fcc66f37f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f177e34-6b52-4e93-91c7-a0af8cbb86ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4740548-2e64-418b-93ec-f374fbcf7098",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3e3732-0fb4-4a75-9779-7bd68afe45a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27b8f58a-1c90-4032-8c79-b2b84df5aec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cfa1264-3a95-429a-bcc0-217feb532302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b4f52a0-2ae9-487b-8924-5f269970caf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5497530-1003-4e16-a498-27017a0bd555",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43602210-ca21-4dff-b5ba-21ca2af62eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e7c92f5-45ac-4834-951a-8af8dc78a5bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae560a6-b0bc-4579-984f-283fe34e139f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66730178-0be6-4575-a8f4-9835f7100b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717925aa-0bcb-4e73-9d57-99c9c0f6b0f1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c60862-d2fa-4a99-8ee9-2b8c614f8bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "004c338e-41b1-4a1e-b1b7-8bcbecf64c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d282c76-19e2-4484-bce0-425d66cb6543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca2542c4-4edb-4ea1-b587-c3f8d4785fa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dabe5959-121f-4800-994a-3e9ed89fc1d8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c4fa6c-d666-4f25-ba37-79fa4592a436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e359f9a9-5890-4ba4-aa41-003eee368961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d708a735-1970-472b-8afa-6de3b10a7952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0b337d5-5e40-4155-b048-8bcbcdce4e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f68e58-eca7-49c6-a9dd-a6b6b4783a14",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1067e477-46a1-4396-92a7-75657bed9a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "189d600a-318d-49af-b771-68001fdc821e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fc01cc0-33d6-40a3-ac92-27afedb0bc9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b9c9748-bacc-4a91-9433-ab13b62471da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc5e64c-23e6-440a-860b-9241d144fed7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c94aba2-e5dc-4911-b6fa-c1f1891d22a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7ece717-411e-4fff-8f89-a2141d7aaef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2d14af-6174-4068-85de-a0fa0518eca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79806821-fc72-407a-b84c-06a2f26275d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6686ab0e-738f-403e-a6cb-bec7760289d6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c0a6b5-1476-4d84-8b61-ca656057d5e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92ab5606-2218-4723-834e-6cb56d334abf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa24e4b-d70d-449f-a132-f99e30df0b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a7ba64d-e6e3-40bf-bfca-5195f69f5cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4f51ed-22a8-4271-aafd-a5bc0e4892ca",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "166dbfd8-fffd-4472-9f3d-b79da88a0312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c511fd7b-30cb-48e1-9dec-8fddfd51465b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b006dae-3d11-4299-bcd8-42e6f2a86552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f088dce2-fe2a-4469-9b8f-8ad119de7b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe7758db-73a2-45c6-8fd0-71738ca147b9",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d11a16-c7e5-4dac-926c-ccfa5d5d8a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cf54d75-7c1b-4afb-a24e-f3350e690c8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32181f8c-1514-457e-98a7-97937fdea2f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1e5ac68-5c05-47d9-8ccf-ff1e0064da16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc52f7b2-16c7-423f-be0e-b98fd888f017",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81564086-c53b-4d3b-8275-900e9925cf9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e9c5420-1731-43c7-9f45-8a21292791e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8670e2f7-5413-4cc2-90ca-c6388e2e667e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ed60c83-d2be-45a6-9713-4ccea255e6c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a4e758-1950-4510-a6aa-258b2b0e4753",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de03027-2823-4f67-ba0c-3102d4f442b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d29a262e-1181-44ec-be4b-99144cdb358a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54758eac-1007-4c25-9464-3dabee469b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ed9f848-2178-4e83-ba2c-7d7aebdd5a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a585b5-70e5-4b55-baea-3c099ecea401",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "487ef6cb-f68d-4df6-8b86-e20554108f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1a0435b-6964-4b8e-9f05-f8973b78ff2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d089e73e-faeb-4818-87ba-4bc7aed7e838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "387a7311-22a5-4e13-9a7d-26d3ca9852ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb555e6-d9b3-4db7-8e17-6dd74952f163",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a5ae61-7f16-4406-a184-fd3b291cd705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7334bd66-6ede-486f-b796-5912c7a9ecaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b36f038-5a13-4793-918e-180e7c499d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3914089-f704-4979-8f45-0cbc0a879413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f6be9c-20b3-4a8f-ad39-b5883c6c6781",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa4c71a-3401-4828-95d9-a63136b24176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43176e72-122c-42ca-b8bd-90a3c766300f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed237804-f756-428a-8dca-104554ef0a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9593b506-b3b6-418b-9b67-b789be4ebe83"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "59a074ab-8062-44d3-aedd-4f48bf206655",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "735c6edf-6ebc-46e1-bf94-9ab1dc11d3c2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03a82b2-d9d2-44e2-b2e6-8f437a572471",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f0778629-5497-4a97-a130-a15574baf6c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a685b8c-ad83-4524-8939-59e051bac3c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c2605c0-6a15-4b78-bf5e-a01c17b894c4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4393baa9-1a4f-4a80-8489-4e5b6c0749a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13f8e2fe-29af-430f-8d78-8e1bb2aec744"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f40b6a87-eac8-45f9-b44b-7ba79c9ca43d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "314a12bf-74b6-4d95-9e7c-1f2e0937a6aa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f0cc0fbf-5905-4117-af51-45dbba7cf2c6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c7a506ee-994b-4911-8f9e-a2d16a08daaa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c530879-cb6e-47fc-8cd3-276c88ae26e9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2233a96a-8a9f-48b4-a2f1-b80094ca7fcc"
            }
          }
        ]
      },
      {
        "id": "1c099a34-f5dd-46e0-a12c-5c6816bfffd3",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "4ef6d8f5-df99-402c-940e-59622e6d5df9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8e81e86a-a3f8-4779-8475-c259717caa20",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7e8a9102-d745-4082-867f-1aec28e07ee4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "582a8c1c-1a2e-444e-8738-716864c4ace6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b04d32b-26c6-4fbd-a123-db6dd819d3ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c637a1ac-e987-4b73-9786-467d40a197be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cf627c0-4ce2-4b91-a340-5e952eb60d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace9cd0d-83dc-4ae0-bd72-f5b0e76d9b3c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8762ff4-7d5e-4896-b911-4b0dbc191253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "677bc4d0-d92b-4220-9f70-52b15ec855e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ebef9fd-089c-4a7f-9788-ab85f665c1b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "abcef6ee-b5bf-427f-a585-26b6f6193c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bce2756-4391-43e9-aa14-27d490988548",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "559f2c5c-d9fe-4f74-b1be-94082edd5dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be62504-ee87-4177-9992-c2ada0807c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1950c0f4-870a-4fef-bd5b-35b9ca24a5be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "627c3311-8c5e-4f6a-98ef-2dc672c50d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b352a3c-de5b-4695-bac7-8149511b68b3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a0a884-f47c-404d-9abd-0dc3dd2187f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68d67f14-3da4-4706-90dd-4425be7a44e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "404644f5-2572-4a77-967d-b7886ae18b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ab2dccb-b6cc-4489-8113-f844fab55a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d57c3cc-a216-481b-806d-f6dba3044555",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98756b89-9d4e-4a67-bf90-88bf65e766ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19d4dafc-be67-48d3-8019-4270782927e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba4bae29-b732-4ca0-b758-54e4388d2605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c9a339e-c842-4a35-bbe2-a5d9a1a5deb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de6e561b-5c22-4f44-b8c9-0d69d6cbcf0f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c69a7c-9483-40cf-931f-24379eb30775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39739bfc-995d-459a-9595-b3ac54978f4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a997f6d5-96ff-482f-bece-dfe106d8e231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "def283fe-a6e1-441e-8c7f-b2926c7c450f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "463e1c78-0058-4348-88ab-fe1b5d4c5ca4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c79f3e-cd72-4748-a375-920a895de9ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c06b5f48-e3c0-4832-b859-dee840de309b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e55039-927b-4933-9b48-8fe47e5e041f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e55c0db-8d8e-4217-812a-9756562280fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3a7d6e-e6bd-4e34-bc71-f751c4f531e0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f8a541f-0b7b-4d1e-87be-f2b13a798da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "178484bd-9e1a-4e7f-801a-279d652ce668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e2a354-5291-47c6-b638-c2ef492b4da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc2ed803-77eb-4372-b039-b36bfe0454c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107ec20f-7e9f-475d-a720-5f69bb6ccf06",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "677cf16d-5b59-4991-8ca1-2254d334c390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05b6a9ef-871b-4d6e-b7e3-1b29321284c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5437783f-791c-4f94-ada8-500e898b02cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8052e8af-9265-4de1-881d-64990e5f525e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3518453b-6430-4a81-b027-e177973a43bf",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9a4520-697a-44a5-a134-373cc87489c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f83347ab-1e06-43b1-9e36-c01576ad3bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "080ee420-84c4-4b6a-8a59-bed026fdfb68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2cadf7e-2543-42fe-af9f-e3f82a910a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c57c7d-3ed4-40a2-b764-bc697fcb88ed",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "472674b8-e64a-496b-8142-7a445ecc1600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2895b970-7136-4e25-a39f-a14270c44a5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ef3571-bc54-4fae-94f8-f36df1193b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2a9bb412-d567-49b6-8b3f-887103549829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff4e7502-f97b-4d37-8118-f57a081dc58c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b106e2-f599-4ff2-a5de-3eb45e80c508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a07d1c3-bff6-4207-ab53-c83c1a74e6bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cdefdea-6f61-4bbc-899a-ba975530c0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c08039cc-9b19-480a-b4b1-96a0c8301183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba10200-6c64-4c07-88e0-fa0d63587db6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77fce644-23e4-42e4-b956-553625739272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52279834-c8b0-4fd1-a9b4-511e258d049f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c98ab0-1b96-4dcb-b074-86a9f8d3ac70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dda6ee15-4ba2-4bce-a977-818dae3a36d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e15d921-9e8c-43c1-aac1-769144f63231",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "881d21b9-00b9-41c4-ba98-a88a84b54ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60fd99b5-e292-44bd-88bd-bb25b160b0a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ce62a0-4e30-4654-9c07-438d3bfd5fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "72ddf850-f44f-48bc-a52c-4b201cc37284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "705bd15b-5310-4054-8979-20f70a858fae",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5596ce42-45f4-40aa-add0-edc42318e4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d106e1fc-3bfb-4653-8e16-c6309b4e7a0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0afd8f1-99c5-45fd-8b83-df452d9ac147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c74742b6-4b98-4a12-83af-68a6df2bcc67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632e9795-3ac2-4927-a230-39bcea67d758",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37ebec2-cd62-402e-acbd-97108d745385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae6bb114-586a-486b-8f6b-95de4dec9b9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5e9cd0-2189-4a22-91c7-5e3d31d60eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "904ed1a1-f44c-4030-bb61-753b7649689a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a186c052-ecbd-4a41-9039-ed38964c20a8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a61145-f9e5-4d4f-b4d2-74ae2a0ae6ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09978eef-d81d-4bf1-93b6-4ac6585fef7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e845703-5d46-4be9-b802-3507174a2792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "345dcaea-27e9-473f-99d3-9aa6a6155a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03d69747-7387-44ad-b396-4bab220055a6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d8b213-4800-4f52-9459-9f370a52e703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbf0f249-c8f3-45ad-b7c3-9dd6f4f22627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343b3929-8216-476f-971c-deef47bb21e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "496a1980-93c2-4886-af6f-9c1f93a015e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714a0c03-073b-4936-bd0b-fc2b97a9d3e6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56d43f8-d50b-4683-a7c4-42df89d9803e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc8cd61-c657-4387-b134-a0d2f0314d4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9116dc92-541b-407b-931c-59a611ff0011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "acff13d6-521b-4417-915f-1dbfb0ff6d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2d0601-7aba-4747-9804-ad3b5fa1c85b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "509dec2f-a092-4611-8934-ac9cb1cbae0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bae259d-c5f8-45d4-a952-76db8555d08b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d3df1fb-3253-45eb-8887-f3a5cf3e7aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a4df025-85df-46a0-a784-36a539275473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed08de6-66c7-4f11-be3e-2d69416e5b5a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0971f85f-25ee-45cc-8105-ea4852b0b45b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "993e0286-f554-4f50-8bdf-512212e24b0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aff6847-401b-4b9f-b3ea-129ac24cb413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06348a9f-1592-45d4-a09c-46d57b7a8abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6bfefac-2210-4825-9c33-fd35335d1bcd",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e758d51a-6a3e-46af-8176-eb0642b669bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e94719f0-5327-40b1-9ae1-8f5734666b39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1cbb38-0b53-45ba-8c6a-37f7ab5444a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27e86ad8-1c6c-41d0-8042-f09d3f2c7113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20eb29d8-15dc-488d-a993-2627bb29eb2f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1e9dc1-056a-446e-8a89-9dfc77fa562f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9016511-a55e-4a28-95e6-5e29df89c4cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b90551c-26fb-4c66-9868-3201a6ffa2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c0f9482-c47a-4086-bef5-4a62ca18ac53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17df629-42c0-4adb-8aa8-d245e6f93c44",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "614e4bf6-987d-4e97-95f2-8700f37d41c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c524d8f-89c9-4d41-8f47-9da3cbb3fc8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec999c4-7cf8-415c-9666-8071b0d25449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29ab1d8c-e419-4307-8c21-c6e2bcd929e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b458eaf3-9cab-475d-8772-4ec31b3d324e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c39a6f-8dad-4baf-a45e-73623afd0913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0401d575-cf39-446e-a364-25a6bceb82c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767bab62-4ed8-422a-86fc-2a04aa00ab91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "428d3961-09a4-401a-a242-c91b5eca0740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12901d68-7a84-4fce-8d14-80d6382d878d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09045532-a8e2-4d5f-98ec-0e3298ff9389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51ea36ec-0f61-4ca6-8dd7-ab25a07449eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc50497-cfe8-4a5a-ba2e-1ba37ba82e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b92a45d-4e6c-4f74-af4d-9e05a84a66f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e086833c-47fc-4d54-b612-e3318e1155d3",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d4722ea-25ff-4942-8c4b-1f4f0db03c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e53e9539-e157-403c-b583-0107ba292a22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de22f274-6327-468b-aadf-1577757e0347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22cfff6c-d91d-4242-993d-e20d6bc4a00d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15724bf-aed6-4d9b-b40f-ca6610cd7140",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "630dde49-24ec-4f05-b299-c24df16d9a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd706c15-5faf-4ca5-8a21-c4dc461a5df7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c2f5d7-8e41-42e5-82c5-b9db1b7ee9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba2a3ddf-8e19-4bc0-a3da-6f5ec9d89279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e22a34d9-8192-4fde-bdd9-8a95bdb34515",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d66fc4-fc9a-423a-88e2-d3307dbe149f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20b263c5-fe5f-4a88-ade0-49b6f48adb0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eecbc013-f88c-4e59-84c2-61ee7733a168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9f416c7-c877-4b5c-b680-823ec62b9d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b966d0ad-2dce-4ce7-af49-a50b727e1c82",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f880dc6d-60da-4582-b64a-1e2e7c958ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "704a35d8-7d4a-498d-9295-f08a0d118aa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e76b4f1c-5957-43d3-b42a-834b0474c368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8841ff9-89b6-4c84-acca-ff8d26742a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61187256-e259-4920-a47f-db22932f29ae",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac68e06-d9ba-4ebf-8b32-628a44a3ce84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d155d95-21cd-4f83-9b22-4d003530453f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4fdcfe-e307-4b0f-89b8-30b9c3b35b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c65dc096-5ee4-4cc1-978b-0be17a3a1207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c01ed9f-ce37-40b5-8e5f-b48e5b5254f0",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bd74530-ec56-475c-9105-4b33e4686bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca85ed60-82bd-46fd-ab79-27599db5b9dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "109b67c1-16a7-4379-a930-eb923093271a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b84a8767-05fb-4d91-8c47-b02c47f75f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e0b749-5df2-426e-a6f5-2b6d7938819b",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd8059c1-e794-4b0d-ac3b-58c4474d7099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7495b773-a6d9-40ab-9b91-e14d1a7c03d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142a6449-2e12-4007-bbf5-1c805163fb58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4e343c0-b585-4146-85e7-26cc5a0c50d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e207e1b4-2d31-4e60-8df8-d8eb8f432bcf",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6043a99-2c5f-444a-b9a0-1b1fbe9fbf37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8e07f51-d7ad-4a5e-a5c7-470b56a019cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "932ac34f-2bab-48ef-b8d0-753a02bbdce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc153e0f-98c5-4a0d-b65b-27fd520c0022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82bf56f8-c81a-40c4-afce-e4e5b97f43f1",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e802153a-594c-42b7-a0fb-d207de74985d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "667df32b-53c5-4ab6-8001-104138b70e13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0be8de2-dfe9-4288-9d86-b6cbc3ed8477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d7f0b34-658c-4e62-ae46-6e59d6ad9886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1bc9af-d19b-453e-9b9e-4ca9afefea7e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd21a771-b96d-4ad9-bfed-82c8641b1d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2eb741b-5eda-4460-90ef-1c5f2f8e6657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c76ceb50-51aa-485c-972d-1f9a7d43231d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b58c8d07-61a2-4ce1-ae95-a40172bdaf98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4a0cc2-c6f1-4109-8843-846daad4eae6",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c8a9f94-06af-4374-aeb9-e8d1619fcab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3884ccb-9c0e-4b3a-92e8-75a318cacda2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96e2d31-cf80-4aa1-a826-f9fa0b352d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46456571-e72e-4475-9e67-cb9992dc37ba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "eac9a5db-09f2-489e-ada4-a63ee65131ae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d814cd24-a088-41c4-835a-d40955eb1f47",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a1699da-554f-4302-9512-d1177eb0c167",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6323b811-0673-4b09-8e4d-4830f6bf60fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "710365e9-ab1c-4e70-9237-84684e6e21bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ae9aa2f-706a-41e3-beca-1730fa0e5df3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7811744-f9f4-4e06-a9c7-5bbd1c9eb4eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e6348a7-e27d-404a-b9ac-90f776e394c1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4890f587-f17c-40d4-a907-fb775515f08b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "070643bb-a3f6-4c88-b20b-9c4998676c1f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d56e39b-c3ff-402e-9ade-93411b69f20a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "37cfce6c-bffc-40c9-b855-edd60179c1b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "42385b14-d001-46b5-9142-e0b7f14b3ff1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7ea777e1-22ff-4717-bbe7-d3b4fac16b92"
            }
          }
        ]
      },
      {
        "id": "225cd192-7beb-4844-bb83-c6b96029f1f9",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2461a56a-c937-4006-954c-2f55c57edae2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "828e9c07-fab3-40f4-9c95-b116d1b22974",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "08adb9b5-4aca-4021-a010-f1e5972783c2",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce46845c-b24a-462f-96da-8fe6f5f8fa49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c356c70-b655-400b-89cc-9bb2b6722fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d70d57f0-90a7-4705-9ef6-1a11b72f9913",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac5492f4-6250-44aa-bf62-4d86c46c0482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "778451b1-5980-4990-863d-8f1aa8c42da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863dc011-d922-43d4-8226-b137abcd8939",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96265640-05a3-4ca2-8de2-79a25f211722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a4112f1-035f-4ea1-8073-9186bc16edd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d5ccd8-2d6b-48cd-9e48-9d5997f9071d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99617367-3bc3-4804-b933-1fa6969ee73f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0654cee2-7c56-4636-8fe4-2c1c1499767c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5cac68f-4be9-4591-8872-736c9f134007",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cb29aa4-b408-48e4-9543-e06b43f43bf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6800859-cf9e-4c5d-a6a4-ee83f3855e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c00cf18-f6e6-4e3c-9a1e-1bb593815eea",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a47ada0d-b820-418f-906b-ed1c82b91a15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9b91776-06ba-4a5b-9dab-73372458b26a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c06f172-174e-42a0-9230-4c6f976baa63",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f3bdbd-556c-4946-81d8-20f19ae7183c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6194a0c0-9b35-4814-a8ce-a5743ae71aa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c95453f-2364-46ba-9a04-9d6ccc212037",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e75a3a7c-5eb5-4685-8d96-bf93f44d919c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f87d57b-319d-41ad-b1c2-fde08d9a65e6",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6a3de0-07fe-4036-b226-4e26dbb549d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d808f4ed-0f33-41d9-bc75-77094fface35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0def080e-dde3-4563-854a-cead08edb5b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c311c26-0397-4e1d-ae4e-f408b0940a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb07df86-b6a9-4b72-ad58-7c039d99143c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde47498-d4bf-4d5d-a2f3-80e3ca17e0ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6184f84d-a7b9-4df2-82e7-8ad15776c296"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3525ef75-63b6-4c56-92b4-3e75bafdd782",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21c5e364-98b6-4e6b-aad7-9e69af97a223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68fff075-6e9b-4473-8cbb-67a86bcdc51e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852aa1ef-93a9-4916-a327-af6d33382a32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16384683-36ae-4180-ae8c-6842d191084d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84350789-453d-466d-9674-020a68cbe8e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21da6d91-c405-4959-a820-327f06c61535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8391e696-47fa-4828-baf1-a65c6b532f49",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e32af5-a8a4-4be0-b172-50af1a2fa088",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b041d374-7d78-43a2-8f89-6fcc0d56a51c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5edc5bb-1bc9-4a48-b2c3-2e10d132591f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d43f67cb-3996-4761-9bf2-2270ef3477a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22677c35-6cf1-48c2-8e1f-3440ca5a1b57",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f6c466b-56f8-49c0-a792-5204099760a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf234d36-c4ba-47a4-84ba-5be8dc2a97ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a3d0ba-5a9e-4424-87e8-f19f5d93950a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "847742e0-5c12-41ee-a84c-f35284d7bf0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03507c7a-cec8-4504-a139-271905db230c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae414e7a-ed75-40c9-9721-3de9654076d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1fee80c-230e-4410-ae74-8a19b44388a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7c6d17-7711-4a4b-9d0a-67dc969653f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb657ece-2c5f-4fda-9809-bc8bbf084436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd762f7f-6370-422e-97cf-fcce3df93864",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b92bd8-2ef9-4d72-8387-c9ddc3293e60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "336d85f4-0b5f-41c7-a911-2405586f5818"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35835130-52b3-49dd-938a-f9fc5c448f67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "726ce8c0-6fc1-4975-9ebe-5a69e10ed6dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8df9378-d55e-4049-a19c-8493a6d96450",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07bcb3f9-7912-4dc8-a37a-d1ba2c63bed5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24f4c807-f6de-42e5-8bfd-bdaa4878937f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1394cb7e-a909-4f1e-b844-0c7f591adf36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdd286a2-ac6c-41fc-9d9d-e7c9f7163061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95386ea7-864e-4fa9-a8f1-64e4c6622a1c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70da6893-f25c-4d3c-ae89-93ace0725a2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af70629a-0a4b-4b1f-8bf0-053f375afa9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec8ef4b-3094-49e2-bbe5-1c5f047ec7eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac17d556-b303-4cc9-a08f-ff4d7666abcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef57bd1-5499-4062-a219-25e638f899e8",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd6c47a-ece9-4f06-9ec9-e30ab6614807",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e738c37-790a-4f31-805e-33a1c5e26c6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "252be0c7-d447-436e-b644-f27dfae2e334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "089eaa09-8810-4ee9-8cce-b06359f1dd8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4d7e2da-7bb9-48e7-8956-5fea749d43e3",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15290822-afef-485a-b896-e94ad9cc0f4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dda8756-94b1-4ade-87a1-a10e6d71b646"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "128b9464-35f2-4853-8257-837f0bec39ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17b4ae2d-95aa-4bbf-87b4-b7f019cd697d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01cae6cd-83e9-4756-8cfa-3f0a451c89f6",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d28d7a-19eb-40c5-b765-12909829b7fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "807a3dfb-4de0-4a75-81b9-7113025ec662"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "414e0d3a-68e9-4182-94d8-ef8ac572c18c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "176346b8-2a73-456e-b5cd-d0c7a64dc34e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f15fa1-7f3f-4322-848a-bcb441c28613",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623752a3-6f0f-4dbb-81f4-e26a74df345a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70b8a7cd-2d5b-451a-83d0-d47ef3276fac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d242efc-0b5f-4471-b9f0-84ab2baa2b6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f43dc8-10ce-4721-8f2d-8957fe2d4cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16fdc0c-1cec-4491-9b5c-b394ad375456",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6797836-3bc6-47c6-9f1e-7b162f94f3c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fb44f76-e6d0-4841-b9c6-d942e2abdca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db809316-f68e-486a-a647-92d04381f090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feee0929-b56f-4415-bc84-1f85c080a249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a6dc834-fced-49e7-bf57-4716c243b3b9",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d8b6ec-1aa0-42a7-b5a4-b891ff19af89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bac558c-ee80-4f2b-8359-4367e3732796"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1097dc05-0195-40c6-b988-a50d31f24a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31a50d0f-2add-4cb5-ad48-62d5e6b9f191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0828890-9b40-4b3d-b1c2-799da5478555",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c2d932-cb8d-4f6e-a917-98a320ef0fbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d3ab4fb-6391-4c75-9ced-e192ff9b25cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e505d1-986b-4128-93fd-8b88dd620dbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7d3795f-f8ac-4e5d-b60d-9dd235584bc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521c6e76-28de-42b8-9376-668aeab743b2",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1419be71-d6f6-43eb-82ce-24128aae34f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9796a52f-5ef5-4e67-8048-8094cbb47433"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "992951d6-ac4d-4aba-a57f-37ac13eba576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b91e3d6b-918e-4e0b-9a9d-9e79fbb99a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73dac712-bcfb-4253-b2e3-7c73d5f6608b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82cc314e-3f4c-4d98-87a3-9e48e7df593f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1504b4ff-c857-4803-9498-b66fa24fb9d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b9fdbc1-4486-471d-aa43-bad4f42547ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea2ed7f1-9228-4c66-8ef5-f4e1cadb0dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1bfde6-9c99-48d3-95bf-0183ee068da6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4c16bc-1938-4c53-ac0c-a562922b1524",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39c9330e-fbef-472d-b516-72c5a1312c4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ef210f-5c03-42ea-875c-cd88ad36b469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b38fad37-2412-4727-960f-4aee6cbc585d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f941f0c-64b4-4348-a2a4-6dfe05074abf",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "034c6ebe-9952-4f5e-bf34-74c007c42dc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43de5cb8-995a-4493-89dc-c0b439d69065"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "336282b6-a689-4f66-9ee7-5b9e3e1534b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c84af0-bb87-44c1-a08d-7d78a38be031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd371655-c818-4dcd-afea-8106e06f29f1",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "632db20d-8b8b-48a0-b06d-9c724dbbb66f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc49e5cf-75f4-45c5-9f69-d02ec42086aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4060031-5327-494b-9b45-adaa1105f393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0871c7cf-78e6-4be7-9d29-0c34a85fbc97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348156b4-5dee-454e-8570-594b7b19f7e3",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0750ff9-af51-46e8-9c07-11c7d0014421",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef5653d3-574b-4718-950e-4e9062094bb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bffad587-11ea-459f-9a91-67d60e134d9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3af83f14-3444-4340-92bc-359761f3deec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6594f8be-8b7e-4eb0-b1db-e782518c457a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e98930d-cdc1-4457-8f53-15a4dbb47f7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1faa648-1bc2-4f0c-94b2-58ed55b7fc48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84b0b6d-2299-4677-a7a0-f7e11507ecec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f798c5-fae1-4930-b525-bc48ebc7c680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6d15e5-a740-4eac-a7a0-c8b0dd60aff9",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ca1691-983b-4880-b29b-e7fb2ae9b3fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec1d72df-06ff-40e1-a91f-8df5ffa4f2b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66662ef-096b-4abd-9a0d-aac21da54381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32fa01a1-7852-4db1-ad86-e7ba634fc909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0eaca79-fafe-4428-9bac-bcfc16f33630",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635755d4-75e3-48b9-aa16-4858be3e0bc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13efc839-9169-40fc-ab07-53a3dab29479"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b897d861-2e7f-44da-aa32-60e962ffc79c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faf6a9f7-2612-4719-ab98-be33c1b4dd23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "416261ae-c574-4d7c-8a2d-1e16fd6bfaa3",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63bc8bf1-1e1a-4b55-a03c-d88b0d2d07e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3b1857d-b957-4996-9761-363c203d842e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1745222e-eac0-4275-8e2b-be378371b6a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "865d788e-e730-4153-a311-0375e4bdbf40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a8f906-d2f1-4b25-9875-a55b61f53cf8",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e36e71-cc1a-45b8-b31b-64827b4c4f8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a02c9ab-766f-4c57-836e-d6a80ff02ee1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb78fcb4-5b09-4d1d-91c6-5648b3af0d37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0ea4a1f-8ad7-4c87-8f0a-643dc2fce412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5dabb4-2f40-4e8e-b8e1-eaaa7ce913c1",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0517f6d3-ac45-4338-ab2f-52492bd7f099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7723c06-5a20-4a62-91c2-b1020c5746eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "920b01b8-cc36-478c-80dd-d32c72daaedf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c99d752-2afd-450c-ad5b-085bf2eca96c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f09ea383-dcae-4df2-a535-ac68b0c87820",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def229de-7185-4b81-8e01-7a23434ab4df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e02a5ae-5b8a-4a00-828f-020aa99f6a29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d7d295-92c3-4bff-84a5-eaa9e1c32a35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3b7d4f5-041c-41a8-b50e-5cec635c9039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad76afa-1d33-4ad0-96c2-48e3ae4d13a2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b78005-ef25-411d-bde3-963d6a517fc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c63334a7-a37b-40b9-ba7c-6d89e0b59c2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f579bf68-83f5-430a-9a2f-318378847553",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ebc5c74-6542-466b-a2f2-c7e96d549135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e839e03-561d-4761-bfc7-7172c8699a4a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebad97d1-50b5-41c3-9104-55d95e3afee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b04f6c6-83b1-4fad-ae1a-1ec589291139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8ab66c1-011f-4ca2-867d-f5316785b062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d04522d6-5789-4934-a70e-1038e09b4978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44731912-c854-4cf5-a13e-0662a2c4b7e0",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d77bf7ca-9862-43ad-819b-134dec16b147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c4b3511-61ed-4ecf-bfa2-2d99340c4e3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bd1e403-8959-4795-b29c-5a95445fb738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d170233d-9c3d-4435-beee-6ec7e5a3b7da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9be8f8d-0cbd-45c7-bfb3-4c60d2f0d667",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fea2189-946a-49b6-9779-5ab15eb7921f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb2c171-162d-4b76-9f44-edb38099d69f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8211cad-f3ce-45e7-b3a3-90c0198729bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b007c4bf-3408-4f19-a960-ceee96e53f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49ddabc1-39cc-481a-93d3-ff8a4ad2684d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9877cdbb-99a9-425b-a1d9-684ed8434c85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d36c02c-35ec-4de8-96b8-96e34ef17ef7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcbcb508-7772-4c59-ad13-f0e3bf7094cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e742ea1e-1857-4a4f-9883-d913cb84054e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df33ff2-2e39-4ce7-9301-3de241cb390e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b00256-da11-4ae2-a620-71f2b1a66b36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ffeb61-3fee-4094-9ef5-41e9b3112fe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d01b1e5-c0ca-4021-92d4-09f9741b2837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2a9d9a3-e566-422f-b6ee-cd5be1bce29c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b58cc2-443c-4422-b148-32f6b521e4a3",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62fe6379-2f13-42d1-b3b0-7659be442d1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b161210-ff6e-42ef-b470-cd1dfc41333d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18b8190-4cfd-4775-9bf6-8c190bcc6f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57780fc9-183f-4d84-8c5e-3516048f4a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c740d5-4f85-4604-afbe-fdda6d4a8770",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f7e9a2-9057-46a5-b856-44f7586c2bfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45431dbc-6357-4756-9a83-e9e9d08d46f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e92e1bd3-a2be-4763-aa1c-b54967f1566c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee54d872-5fa2-40de-a324-022ff78c0240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a1a440-a744-45f1-9af3-e79069e303da",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8095fb0f-72c5-4964-92fd-63bf4f95c9eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fbcac2a-9fcc-40b6-a523-25e0f5888683"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "343922b0-d5b2-4147-a63c-e6f1e0bc95e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51b47aaf-163a-4428-82eb-4a47e7ad195d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9040967-464b-403a-b49e-08892c84e2f1",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5a0879-1381-419c-a538-0ddea2564b2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b9024a3-74a7-43b6-ac1c-3f78848c4dbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2339475-08a6-439e-951a-7d76b903332f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0ebfbb9-cf0c-4dbb-9a6e-b0bc7f1fac0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909a1360-6f08-443a-9a6b-c473e5e371b3",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90dc8a53-aa0c-47e0-a670-007c4db514df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f96f30c-8624-4578-a4e6-6d3d17aa8d42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "141c1972-34b3-48ba-bb1f-068559426e02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac41d465-f72a-48d2-9a13-6c8cc686ccf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f0e3fc2-50bd-4aef-8126-c6b07cd24999",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4261e134-f36e-467e-908c-57b220f452d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b915a6a-1bb6-48b0-89dd-cf5885c42542"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e03959-ef88-43ee-a47d-84982a470454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2bb08bf-bbfc-4d7e-b016-e609ee981ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7ff114-1ec8-4ac3-8beb-e87c0e1e78aa",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc8c580-83b2-434e-9f35-e66cce6a4769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1094693a-655f-45d7-900a-34300b7fc59c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8024924b-ce70-4c0d-96b9-fa279d7f8d66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e35c99c-c2e9-4f90-b563-7937b9aef32f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d300d20e-b549-47e4-a826-33f9dd24d994",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce5386cc-eab4-45fd-9612-428c1e88d9d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5e239e8-b6e7-4cda-8467-47c5fc5e09e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ed68b3-eac0-4115-90ff-729864064845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81b0a4f6-b69f-4440-8b97-295b2a0c9e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f93436-e1de-4334-94d9-f27afc29c3a7",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd6d7e5-ace9-4c49-875a-09be8951aa79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f04a7ea0-6138-4083-b0f3-ebd98c25102a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c72878-5a70-47f5-95d6-9405e607f5e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "047af4d6-75b5-4dda-88b5-dd976b9dcee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7a681c-1ece-4b56-88ec-d0f5c4719745",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8078a748-c28a-44bd-a02a-f2a700fea6b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623300a1-df1e-4d64-8cdc-203e95cd2379"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d121a0-84d7-4b9d-b043-3e861ff5d5a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5500fcf5-261b-4ae4-93af-ce6cf4ff493b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ba82a5-74c6-47ae-b274-087ec68f7cab",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec292fea-e0af-4ed9-adb1-fcb282df445b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "691f4b64-1dd8-49b2-a9e1-5c28dcca7ac7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d1f5d2-88fe-4e58-ba7f-988cc19003d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de7b30f6-de03-4799-b44d-b0894d4a88eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3fdfc55-1aa7-4837-9af4-9c7454f111d5",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d905cb5-ba81-4e34-9505-a065cdc67d80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f198bd80-7cfd-4736-873f-e80b039b4c0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5f1045-d186-4d65-9bf0-5cf2b13b12ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe53af8a-1f88-4c36-bb29-090d0e9a300b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9273dc45-f141-4bae-ae93-fdc17eb9b0e5",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750e8de2-6c16-4940-862d-ee87091ef4af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cf935d7-fe7a-4896-ad6a-0a24f95c4d5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd7e374-4c38-49cd-b796-267934334f3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9b3199a-e121-42da-83b8-20d4ebf87422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a8cefd-4c1a-4b42-baec-333eb99c822d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a859f6a4-b34c-4fdf-9440-035d4bbea6a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4dac2ed-af96-40db-8b86-49435d62ff5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2660aa-6227-41ca-a4e8-541d82ec5393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e7b5ceb-847a-4649-9edd-f1d64997098f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef963f3-fd97-4234-b17f-a1dcfb4d3902",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebbc2d21-d10d-4828-8242-90abf4999c0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7224995c-1abd-4144-9a00-f491b480fa24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ed6c9d-6620-4313-b5ae-d02c88346a48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66861d7b-9e57-4f61-b86e-29b90dc5d640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e21d6e-9bf8-4ab4-acf5-ff8e196a4ff0",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2295e8de-de6f-48fc-985c-e2cb35623eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "809385fe-b8bc-473d-854c-e798f4e6cd3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ec1aef-3d95-48ae-bef6-abf396713738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edc9bdef-57da-43d5-8c79-398ebe43d7b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98446f7-f285-4742-b918-d4f311ef54b6",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb017b0-27f3-41e3-a820-af0a39684dce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2de34a79-453a-4355-b9d0-10c7b4f7783c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66714b4f-0adc-4e49-a942-f877ab1ce159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c044097f-5ac8-4d8b-ad14-556b48f206cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4350fa-66b0-4a4f-8930-9dbe6e08f02a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c64f702-a260-41ae-a7eb-cdecd5365dc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcc273da-a996-48d0-b87d-a42957189e24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "163e0dbc-e705-4900-a36c-1c103583943b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a0cdd6e-9843-4a87-872d-299fcc8981f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56024daf-8898-4a59-86e4-ebadf06a1814",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b51dcd-be44-493c-aba9-c8490c456fb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad6ff14a-549e-498e-b3df-a6e28149faa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa88280-a1c3-4c5e-80d5-f61d59d615fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94a300a2-8c6c-4403-8cf1-b9f1592e568e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa8aded-974e-4267-84a6-bba5a7178650",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15bbd16f-ef30-4d42-a472-a224ac5c7cca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db88bd34-6d1a-4ff1-8a7a-9246ca27f4ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7dca2e-f342-4bba-8fae-6f0999f7fe8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b700249b-539f-48fe-a6ee-a952b6e450ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1948d96-22c2-46ae-ac49-a4148d374791",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afac899b-a54b-481c-9981-e5e038afe4ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec96cdfb-b990-42db-8840-0b69ce9b5fdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb270b3-4aa2-4673-aaa9-a511a7f56320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b370c39-09e3-45a2-962e-08dfe006dc88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa24d378-1672-4765-a9f9-5a0862f9d6ef",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "248b84e5-6d22-478a-bc80-0a42dea939bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8d6b180-80a5-4c96-bda9-2da05a73d993"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "142afb2f-47a1-48c3-a12a-af6c50d96f99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bcd14ed-2806-4d15-ac6f-0bac42ce41ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a663af57-0ed2-4ec5-b584-bdd55c7d3e54",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d9881ca-d2e9-43c8-b820-0c497e25906b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f7c14f6-b58b-478b-baae-21a463343d18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "426f9769-e744-4ae4-8b19-db2324b7510a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d23b7178-0388-4f9c-9145-d524bfadc6df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32421ca4-0cef-47c4-8f65-264956c4cc6a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25846bbb-9ceb-4174-8bc4-af93bdb651e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e24f1afe-a572-4955-b77f-57b1b666ab34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe75ae9-418e-48ea-9af4-c45335e475dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6370434-d0c9-48f5-9f73-2f2b6e246c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fabb821-3d9c-42c8-acf9-3557d8146887",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f0ae0a-82f1-4a33-8722-34074c30f61a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b4716c2-1bd5-411a-9059-4ed60ac30982"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc282637-042f-4d67-b033-e2f16ea72f4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67d1b6d3-2ae8-4deb-b766-4fca1769d00f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c86d3e-263a-46a0-bd1a-d97e9233f1a8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12960741-1918-43a2-8f4f-1e4558ba072e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd864d4c-115b-4a92-9400-485262c088bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5f5bde-2ea8-442c-9f27-53e60f025815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d84e7b5-4f98-4b3a-bf39-a1bb535407c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752e28cc-d708-454a-9c54-2b759897b956",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "577cd712-b316-4548-8469-c02a04cfebd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7200a76-1e3c-4f22-9cd3-b4e45d4a2791"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0887e0f6-f254-41a3-96c7-4349d3d450ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2f2ec9a-36af-4dd7-931d-3514b797bf2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e54893-4ce3-4db6-88fe-c443d20e64e2",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae9457c9-39e7-4e7d-8c4f-bb1b2f925b36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34f640ed-f6cf-4d6c-8b1c-ee08d88a63bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad55489-846e-44c3-8f31-afa928257918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5bfb0a6-54c4-4735-b3c2-f09b3103215f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43749db-9466-4371-b308-2be5a24c583e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b81a55-ab43-4b61-b22f-90418c3ab5ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0f2cf01-116e-44e1-b9ed-2bcb296f5f4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c64e1d6-eb07-47ac-99ad-9e7d6c9ef749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f60ccf-f64b-45e3-99eb-f4dc516352ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f9ca526-f0ff-4c46-a163-3c07e091e385",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c6f82f-1917-40b2-af87-e4458eaa5980",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62ce95fd-0068-4902-8079-496d5947adb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "257eb497-fa10-43df-a673-11ed7ab495fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eaabb0b-256e-4c91-a8e5-6ea0eac6adb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "531a1a7f-49b8-4d98-a436-494af43ffe8c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8f5902-1282-4e70-808a-1cfbd29dcab0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d81879e1-fccc-4ebc-b5d9-b1ee20eb32d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b319825-f357-449b-9039-e0a13b4e429b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff12f1e5-00c6-4a18-97e1-60113a068d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d67e856b-16f3-4efb-a8ae-3ea2a9b6735b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761b8243-77a5-46b3-86fe-d7496d1054ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3ab2f72-14c5-4902-8fc1-61fe6702e726"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08fec627-d72f-4b5d-96af-fa687b57e259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64349ee9-ddcf-4750-a689-9c90431145b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf8e8f6-a3ad-4010-ad8a-5d56593bcbb6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ddff99-5294-4c14-9a3b-fb855d19b43a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a2ee98b-62d7-4239-9bc2-35256779d6d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bcfd79b-2e4d-461d-9995-022d5048cc3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b8b833-64ae-4b13-86c4-529e5dbc2c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e4fd266-3d8d-4849-9b1e-0a57168422e1",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99fa2deb-818b-4584-88aa-3b98c88d878c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fce9aa0c-b45e-4a7a-b377-2e79e2d4bfdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a636d8e3-927c-4b1a-9f24-c15eccc3acc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a422cf21-c7d5-441d-87ca-1c316e12575b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17175f1-aba9-43c4-86b6-6001d06298f9",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5eb1194-8d87-47cb-8ab7-9fb47e9e8f58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41bf6162-bfca-428f-b84c-3dee56ad4bf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da77f42-bfc9-4cbd-bd29-07717ff4e8ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8c364d9-d58c-43cf-ae95-498ac72d2299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc9ba1a0-675b-4be2-9ca0-b3f1427e0395",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17bceae8-6223-4bb8-96c9-87354c2d726e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ebd4518-4fa9-4674-9b53-9087af4a2e78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33aa8cc3-bd06-4f3b-99e0-fa36a6862a26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a40198c0-9ee6-49e7-b797-b2035e25bd66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9137f256-aac7-443b-913b-3a7884cbc7cb",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "200ab138-17f9-41f7-ad4b-e689cea75d5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6edf2546-ead4-4ee5-a618-41c7e0ced006"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e860e282-13f8-4fb0-9cc9-d300819c1df6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbba4cb9-ae12-4240-896d-02f3a9dc433f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6d95dc-07eb-4dfd-ae79-acad8d778217",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7706f8ce-6257-4c88-8905-e6b95dcb5dc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68433b5c-2042-4ce9-aa7d-c118fa458641"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc6b7d2-62e0-44d1-9d23-b8836675e51b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c610d136-9cd7-4898-801f-c6c1687f1f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4588f7da-da1a-459e-92bb-7080320d5af7",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a67c4d3-870b-4bc8-be62-91c1c57ac178",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a302cd0e-3ad3-4bd7-aa19-2076f4a226a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f61f3b19-f333-434f-8531-31628c1b80e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f708f556-e6c7-4cb8-8f6b-1ab250228fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e61b75-6d43-416c-990b-bc9e02e5638f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b6021c-2da5-4729-a121-084ffdaa5fbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96cc5379-d289-4344-be87-cfb4eec58cf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "043dc384-4658-4aae-bfb6-c87a395d74b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "479a2fe0-9a4f-4bae-9fa2-8bfdb8301d61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adec69aa-b07e-4c46-aa3d-604b01d04657",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc298d14-f3e0-4c6d-b955-6818f680755f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8234a39-29d7-45a6-8b52-fc2f3db21d05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2337405f-dcec-4762-a99b-a3ac45b9dbb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec07a6e8-43fd-45b6-9c8c-33b35c46a140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107617b3-fe99-418d-9e0e-834037597223",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68935bca-5cf9-47d6-bff9-945428601986",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7eca5818-c00d-4653-b954-f52c9a23d935"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "081a237b-c032-4dda-9bb3-4d6855c9c4fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5615f1ef-25cc-4ab0-8924-1dcd440a494c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a5eb8f-4b4a-47de-8058-748ec2c7d0f4",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc945153-c54f-4dc3-b0b0-eb1d1192d514",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0429a68-4f8a-422e-83d4-ec2393a7c2a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "625df7ef-fd72-4fb6-bf9c-af44b356eab6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "731acb8d-d93e-4018-93af-5342685034d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2078d268-d79a-4713-9ab0-0dc5f09b4645",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7764c8-3f88-4f7f-82a9-7c30239ec717",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de0c9f2f-e15e-40d5-97d3-8b723fd38505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62486714-0623-4339-b5dd-9d2ad0c1dba1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ddb1613-0614-4379-8238-82ec007df40d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aafc00aa-b218-4d31-b813-4946cebb7bfa",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114766e9-45ba-41fc-9fac-4ecd1de1affc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33b95d2a-5ea6-4fbc-8433-e1347e0a83c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a7bfe4-216c-4fb2-8cc3-a546d9562168",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce691308-0be8-4f3a-8972-1960fb732535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db45e8c-29f2-46e8-93c1-3ad1c2f3f7a5",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf7ec8a-3872-4f2d-b11a-20fb938a0222",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bfe93e0-4bef-4cee-834a-aee0c7c37232"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da333d0e-8f22-4213-af66-0c2031036108",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97100df6-5bec-41ee-8a5e-96903c780a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6312973b-3c5f-49c3-901c-b4179d946928",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45fe0239-81e6-4fa4-9c6a-443af59311b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ba20196-99df-42be-bc75-ca5945ece763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1716da52-7228-4add-b4f4-077daac2c9d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6026063b-30bc-4750-9d27-e0eee1176683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a29601ff-46bf-4319-a664-1a7473a8595b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e21375-b131-4715-bc52-fb9aa8360bfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cb04ed8-f814-49e6-9d7c-02bb716062b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5809f37b-3dca-4018-bf88-54100ce9ba2d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfa6b7a6-9589-4a4a-8e5e-fc510616c35d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ff11c2-4dfc-497c-96ab-7e7d996809b9",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54617bcf-b2d0-487e-8aa1-abf953bfe81e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f260a5be-73a8-4d41-a877-b298856161d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2258080a-f195-46bb-80fa-5a11ec4e8de5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c73844b-538e-4537-8add-a71fa63f6280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e22e3f6-5b1b-4dde-b18b-17b518156370",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36224b16-0904-476c-946d-8884bb9c44a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6c133f6-995d-4809-a93f-15f7d74bc062"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8fa10c-74e9-4f9f-ae20-3cc4574e38e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a66032c-bea9-47f4-a236-3e5b4f126725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d95d45-16ba-41ec-9ff9-3f9cb7a2a1e5",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34dc1d8a-dd82-49b6-9837-92d427c95d7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9d9c25a-4772-47e6-a1cc-a92ceaf74429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4504a9db-eba4-40ab-a623-bf3d6d87efb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e5f3968-ba0c-42dc-92e2-ef3322f60ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ec050b-a882-432e-936a-1dd34b9db019",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b79faa3-ccdf-4d47-b482-4a2a7d67e69f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a78efe4c-482d-4abe-a769-08f2453f894b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81af9e72-01d0-4dab-ba82-1cd49e365ff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b60a1af3-b40a-4ad9-9329-3b37e7d4b50c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3272a027-0ee9-4b39-a35e-79b5efa9be73",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e4d64f0-6aed-4517-835a-7c78b8937d87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ef6c269-72f0-4eef-8ccc-2ce9c65f0e50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c636cf-04a5-46e4-9927-e043457c56f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a0263d8-2335-4c4e-8ac3-6f95d0ad2060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb1776bf-136c-4648-a36b-85873c2cbadd",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ef66ad-070d-4fc9-9dc4-e25bea3046d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cee9a051-15c9-4d41-8b14-dc2fc37bff16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d9685c-6608-49b1-ad20-4167b57f8406",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef0c3ab7-2cec-40e7-8443-04ef1c071f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33943a86-e564-4154-a79a-cdca74b27dc9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc5e5c1f-bc13-4148-b741-76822dec57d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "057b3517-2f75-4f91-8014-28a8ff24757c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f429a0b-4c37-4c83-a75a-c1a233e206c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28e90c36-e98d-418c-a003-8045154b6c63"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5865294b-ce68-42e8-bc9c-12b59a1fb422",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ffcfc9fa-0c29-435a-bcec-392597fdb5c5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "580127f5-4fe3-4971-9d4e-f544df807c23",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9081b457-1aa8-4495-b3fb-ad291085e244"
                    }
                  }
                ]
              },
              {
                "id": "f49df32c-7104-480f-8a56-ce8dfc8f61ce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2faeb356-87de-4b2b-80a4-fcd7aa916ac5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cd974b7-a74b-488f-9ce5-5ccd6edcd5a7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2b3cbb44-396f-4f26-85e6-521a83d8a2db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "625da294-fad2-4ee9-b4b4-97e8ac6e3846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0acc7ce3-9a76-44ca-b655-1d6e9ce40f81"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e5896b6-3cd3-4239-abe2-adf4ca4921cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05d14227-3809-4579-9491-84bdcd83799f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "598f6d99-9b85-44f9-bc05-67cdbe9c2995",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6240701a-a7af-47b7-b318-46d08bcb76b8"
                    }
                  }
                ]
              },
              {
                "id": "c2745252-0c27-46ba-a0b0-d5c9e16c4af6",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "632b9188-6dbc-464e-847c-29b4e4f27cfe",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3147e3-cef5-4b22-b3cf-c88782005a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6b1f3d76-a086-440f-8c45-34fe146cec31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ab5a6c-57d9-4c0c-8174-379eb030870f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3dbc87d-545b-46fe-a180-ee0c844237a6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "dea19901-bb7a-44a0-99fa-3a16cc64e64b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2295dea4-33c5-4c3e-99ca-b98f4aa07345",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78a70d28-fec4-4dfd-b7e2-9df580dfee43",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b8c25bec-f0bf-4cdd-a782-13dec4b802c5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34cbce01-b416-4d2c-a0b3-6c8281dbeb80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a7da271-3456-4339-aa72-7d7162ebd745"
                    }
                  }
                ]
              },
              {
                "id": "b91e5186-3886-4311-b74d-95e8cd0a8c77",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b8b7787-7299-4f22-b949-856b63fb2c54",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3a5461fd-434e-4440-b31e-8d8593ce252e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ddab595-57dc-408d-8f58-8aa69f87852d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "14b5999c-d7c0-4074-bcc9-7ab14fa6b967"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4720def7-ad31-4e8a-9ba1-473dd28e88af",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "ddbd5419-292a-4e69-94e4-df9768c1e5bc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7aec11d9-5303-46c3-a616-493956b560ab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b44bc6dd-d412-42f1-9863-0401b2a9c71a"
            }
          }
        ]
      },
      {
        "id": "9ac162b4-eae9-4c89-b0b1-15490d0b6013",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "244144e2-8cb3-4835-9aa9-5be47795fcd9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3d0aee09-d56a-431a-88f3-47ac33303582",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2d266fd9-9fc0-4662-8e8a-0f4a5c6f8b91",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d16fcfd7-6baa-4657-9b62-34597d0a2032",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ff965cf9-572a-46c8-ab11-48d7434e4bab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8bea02-7bb3-48de-a664-cef1a46a93af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6b69136-f896-4856-9e13-4c3fb95a0c8f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b974976-2598-42e3-a275-58f66ad0ac6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a89b0c3-194a-43c1-b181-ee3317cf364b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf079a59-5dff-4839-8353-a776b7e29091",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "237f3354-0841-4889-980b-b931d35ac913"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3bbe3a65-4d49-4436-b752-89b883b2febd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "07613f0c-384c-4970-b370-6170cd64116f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3ad970f8-c15e-49c0-a0ce-c25f766d304c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe1b0556-1ba5-431b-95a6-83ff09b6a56a"
            }
          }
        ]
      },
      {
        "id": "eaa87837-674a-472b-9f22-920aea412900",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "cd5e1297-5e77-4082-9a91-1a5b5337f48e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c9bbc03b-b878-4a09-add1-025d886519f8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4e53fc73-44f5-4ce9-b78c-900652782471",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377a1523-bc13-41d2-a739-b4ceacc5efee",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13d3b1bd-ebd6-41aa-a693-91d36c67d4d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "395115b4-10a2-493c-a903-52e40b424b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff320ec3-d64e-4ab1-9098-0550053a99d6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5bc0827-9727-40f1-b2ab-9618d85f0ca2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "683d2921-5016-42d2-b49e-fd40c5667a4a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0263839d-5dc9-447a-a2b7-c2a3a5b8075d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e17a2cb7-ff2b-47cf-93ce-f47505902ce4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3939facd-9d61-4481-9105-a184baf950c3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "398f13ee-4483-4dc6-baa4-64e15c96aee9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "949e89c4-998c-4a90-b709-3cd7a8c930d3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d6f2681e-1900-4f46-8823-1273c11fc632"
            }
          }
        ]
      },
      {
        "id": "cdeb3c12-835a-4543-bf08-e492deead3f2",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ffc11542-b51e-4772-87e4-410bb42b8e19",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d068365a-490c-4d27-abd5-3d31aab48256",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "df9bcbaa-dfe1-4dec-81dc-9b3ad010ec75",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ea1479-d7a0-4a8d-b783-531b955e54c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "953e095e-24bd-49c2-a548-bbaa0d0661ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd58740a-bec6-45c0-9966-dd7448630b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b97b3393-f9b6-4af3-b910-88d0bed426f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a05a8f6e-c16e-46b7-a4b7-e4b56f4eef28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "342b04f0-f2ce-4fa8-9233-54aa58500487"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0230a916-8230-4bfb-92eb-3e4b86ac06a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73c1c283-33dc-493f-bf53-3d56fec2c37b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a1e09579-5dfb-4a3d-a857-43a489a3aa77",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bef801a9-7502-4b52-9589-e87248980230"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c893b26d-c425-4ea5-bd66-52390093f359",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ed96929-3c11-4fe9-a888-e2ad92cb0c70"
            }
          }
        ]
      },
      {
        "id": "f7111c0f-b364-4d36-a865-2a0d0726f0dd",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7ddb3c20-39ae-4b65-acca-08e87475b6c2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "241b64e8-ba3e-4ecb-968b-3eb954a04bf2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "de960f16-53ba-4e55-b92b-d6c96ca25c84",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "118afd94-c182-4ceb-959f-604de218d106",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "386475e6-3fea-40da-914e-993ee0bc2a3d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 68.42105263157895,
      "responseMin": 6,
      "responseMax": 917,
      "responseSd": 84.71706209151898,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1701131767890,
      "completed": 1701131796664
    },
    "executions": [
      {
        "id": "a378e4b0-38ca-4273-8001-6a7e04c4570b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c0624ba1-25d6-4c2e-825a-9b4dc36edee6",
          "httpRequestId": "3bf81fb4-8349-4259-98ea-44f2cdc6f6a9"
        },
        "item": {
          "id": "a378e4b0-38ca-4273-8001-6a7e04c4570b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d55160fe-798a-48bb-b405-1224de4ab76f",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 0
        }
      },
      {
        "id": "d0f1307f-50a5-4086-ba44-937926a6b38d",
        "cursor": {
          "ref": "921b471d-297d-4088-89e9-ad3e28170080",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2b797527-6493-4c1e-a143-a5d120d66ec3"
        },
        "item": {
          "id": "d0f1307f-50a5-4086-ba44-937926a6b38d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7b1ddad6-df08-4d4c-8e1b-fc38fe508494",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "d9d15838-87c5-4e92-b0ad-1cf0e6b2598f",
        "cursor": {
          "ref": "e57edb18-d304-4b16-965a-49c47a40ca36",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "881cc749-b32f-46c3-9bcd-7a61ba390308"
        },
        "item": {
          "id": "d9d15838-87c5-4e92-b0ad-1cf0e6b2598f",
          "name": "did_json"
        },
        "response": {
          "id": "c58e0b96-7812-4284-af29-0732c74985c6",
          "status": "OK",
          "code": 200,
          "responseTime": 178,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc89d2a-944a-43de-88e5-6b3a8d86173a",
        "cursor": {
          "ref": "b1470f52-9b01-4f82-aff9-32901364d35d",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1e28475a-cc68-4025-99e6-d2af966f088f"
        },
        "item": {
          "id": "1bc89d2a-944a-43de-88e5-6b3a8d86173a",
          "name": "did:invalid"
        },
        "response": {
          "id": "8c7a913e-bbb0-4781-b25c-bcb2c367d100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc89d2a-944a-43de-88e5-6b3a8d86173a",
        "cursor": {
          "ref": "b1470f52-9b01-4f82-aff9-32901364d35d",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1e28475a-cc68-4025-99e6-d2af966f088f"
        },
        "item": {
          "id": "1bc89d2a-944a-43de-88e5-6b3a8d86173a",
          "name": "did:invalid"
        },
        "response": {
          "id": "8c7a913e-bbb0-4781-b25c-bcb2c367d100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636d9045-c3e8-40a2-9514-907ed16b89d4",
        "cursor": {
          "ref": "e66aa04c-f822-45c0-a9b6-e1db2494ce6f",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9ef7a8de-dd5a-415c-bcf5-53cdf7383105"
        },
        "item": {
          "id": "636d9045-c3e8-40a2-9514-907ed16b89d4",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d4958b21-8040-4d4e-9d17-8d6f1873a925",
          "status": "Not Found",
          "code": 404,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88811fef-51ac-41c0-bab4-2f38a442eebb",
        "cursor": {
          "ref": "e004076b-5e34-4690-9038-14873ad5955c",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "334c9d0f-2a9d-4d6c-a4fa-a051ae57f9f3"
        },
        "item": {
          "id": "88811fef-51ac-41c0-bab4-2f38a442eebb",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d63af5a6-59df-4d3a-9386-0ee2c9349ec8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd429736-45ae-438e-ad83-e375105adcba",
        "cursor": {
          "ref": "6f66a757-8a8c-4828-9ae4-0dd9145b830a",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0db004c6-979b-4ba0-9cbb-7e062638c7cc"
        },
        "item": {
          "id": "fd429736-45ae-438e-ad83-e375105adcba",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b910e816-f926-49d6-8ae0-c5f9466000a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a360bcd9-6574-4067-a85b-7c950d6b638a",
        "cursor": {
          "ref": "0f0b28ab-affc-4761-8d55-9d4f7d2efeba",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "46728a4f-cd07-4c4b-b732-4e19c3c7af11"
        },
        "item": {
          "id": "a360bcd9-6574-4067-a85b-7c950d6b638a",
          "name": "identifiers"
        },
        "response": {
          "id": "665babf5-244e-4d9d-bb3d-6d64b23a16ad",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f5e3b43-acaa-4c6f-b622-bd6a927b8116",
        "cursor": {
          "ref": "f4d293a1-a244-4f02-bb2e-889be7abc441",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8c1ee0ab-23fb-45ed-9753-dbed9d3ef1fe"
        },
        "item": {
          "id": "7f5e3b43-acaa-4c6f-b622-bd6a927b8116",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4611cea9-d14e-4dc8-91ca-5c4d1fac188b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e35467d-61d2-4225-a4b9-557b2a8a7460",
        "cursor": {
          "ref": "0d2b7caa-9e67-4827-81f5-c06b4e6bc642",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ad2b8aee-d5a8-4dba-ad46-5741d980e842"
        },
        "item": {
          "id": "4e35467d-61d2-4225-a4b9-557b2a8a7460",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "223ed90f-501e-446b-a2a0-70120e3c5474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a95a48-8c4d-46df-b80c-f13a74259244",
        "cursor": {
          "ref": "93bf49dc-dc43-4dbb-87b3-21681c9b8ec2",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ad68234b-9ab3-4c6f-b8ce-674588b34254"
        },
        "item": {
          "id": "58a95a48-8c4d-46df-b80c-f13a74259244",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c4796525-6e03-4e19-9284-f17935825d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71fc1c8e-9115-44ff-a384-e10ecb6f4e3a",
        "cursor": {
          "ref": "babe576a-0a2e-4c3d-a166-598e9060b01b",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1e7d2f40-2e8f-4d3f-bb3a-df7928eeceea"
        },
        "item": {
          "id": "71fc1c8e-9115-44ff-a384-e10ecb6f4e3a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "55d6d15b-ae8f-40eb-a669-74fda5058025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd699e6-f395-468f-ab4f-a0b63b4bde1e",
        "cursor": {
          "ref": "940f37a8-a387-45de-85ab-48971d5603ec",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fa8a2c0d-083a-429a-bf0d-6a8a72b6cc59"
        },
        "item": {
          "id": "4bd699e6-f395-468f-ab4f-a0b63b4bde1e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "72fef106-7f12-44ab-84ac-f3b5eacea4e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1341b09d-258b-45ca-a49c-995b4ba30f21",
        "cursor": {
          "ref": "3ebd5874-bf4a-4467-a562-73969e8e6271",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7d5cc153-beb1-41fb-a69a-bbebac06db72"
        },
        "item": {
          "id": "1341b09d-258b-45ca-a49c-995b4ba30f21",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f0191a07-1b41-4c23-a82f-6925ba7ee07c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf12d57-c9c7-4438-a2eb-045f49375e0e",
        "cursor": {
          "ref": "4ab54b47-ecab-4072-bb22-eceabefeb059",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ec7e35fe-194d-4338-a8b5-a4fc88965033"
        },
        "item": {
          "id": "ecf12d57-c9c7-4438-a2eb-045f49375e0e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d4e573fb-e343-4069-91d4-8ff18a1cec2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f47a78-88fa-40d7-bc15-25e60c0deaea",
        "cursor": {
          "ref": "b3640548-e4e2-4348-b67e-3a52c113dbdc",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e3eac5a8-aea1-4c8b-8fec-863d843cf542"
        },
        "item": {
          "id": "95f47a78-88fa-40d7-bc15-25e60c0deaea",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "90350a74-8034-4f68-a8bb-26afc2cecf94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30dce7e6-25f1-42af-8e16-cdb0506aa323",
        "cursor": {
          "ref": "91edee77-e77c-412b-8392-767622574fd9",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "75b5f98d-9109-400e-a226-3dea5a77398f"
        },
        "item": {
          "id": "30dce7e6-25f1-42af-8e16-cdb0506aa323",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "784198a6-e466-4442-8947-ed75d782d0f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b2cde3e-da88-44b4-afb5-60b59b06da38",
        "cursor": {
          "ref": "6356f4ad-aabe-4352-86f5-85008859b437",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8ed52318-6ecb-41cd-9559-9c00df6623b5"
        },
        "item": {
          "id": "1b2cde3e-da88-44b4-afb5-60b59b06da38",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f289e43b-e0c7-417a-9376-874fe89554c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7ef29c3-bc60-43dc-b431-12f79230af43",
        "cursor": {
          "ref": "d4f9972b-b455-4f5f-b2a3-c7a65aa25126",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "44f5c469-951a-49f7-ba2f-c62cb6183d67"
        },
        "item": {
          "id": "f7ef29c3-bc60-43dc-b431-12f79230af43",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a969951b-5a52-4a37-bb50-546c51ea267c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "668e4c97-929a-4f19-adcf-678a84822226",
        "cursor": {
          "ref": "b502103a-552d-4d8b-bdc5-bf813cd93ad5",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e52f4cfc-7abb-4c8b-9704-9c26fc5bf77d"
        },
        "item": {
          "id": "668e4c97-929a-4f19-adcf-678a84822226",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7875bee6-5026-4086-8c86-06d93e7002e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5006a521-44c0-44d0-aab7-e446309869b0",
        "cursor": {
          "ref": "89722c3e-2a5b-44f5-acc8-477ff56bc98b",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "50cee8b2-b708-4e11-9e85-bd22b676fa75"
        },
        "item": {
          "id": "5006a521-44c0-44d0-aab7-e446309869b0",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "63b678ab-c76c-4cfc-b217-13d3964a9b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23cbfca-d736-4a3e-82fe-bc6ad98621cf",
        "cursor": {
          "ref": "3cdea79f-404f-4d49-96ce-29b9f384a473",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6047096d-11b7-40d8-896c-bfa63e76c283"
        },
        "item": {
          "id": "d23cbfca-d736-4a3e-82fe-bc6ad98621cf",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9768cffa-ef5d-4098-9ee9-4df93360e50f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9807e61f-e37c-4118-9c9e-3c70bf53c712",
        "cursor": {
          "ref": "daaaacd6-ad5f-4b8e-9288-41cf68154c71",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "908a2a15-0aeb-4495-a32b-7a59f47fab43"
        },
        "item": {
          "id": "9807e61f-e37c-4118-9c9e-3c70bf53c712",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f074327a-08e9-49c3-9cf4-1282b46dc604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09a41d3-2e6b-4f3d-9c6f-0175aebac3b4",
        "cursor": {
          "ref": "64d996d8-39c7-45a2-9676-cd9966f22669",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "13cd898d-8526-4de5-aea5-042ed1147709"
        },
        "item": {
          "id": "d09a41d3-2e6b-4f3d-9c6f-0175aebac3b4",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7adff3a9-24dc-4b41-928c-99a60ccfc5f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d9c0108-72b0-4154-987f-74b51568a0ac",
        "cursor": {
          "ref": "0d305e99-c53d-4ae3-b8d5-44c0d8f7aa77",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7ebdcde1-84cc-418b-939c-c0e440e18940"
        },
        "item": {
          "id": "2d9c0108-72b0-4154-987f-74b51568a0ac",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a83bf3d8-3e48-412a-a583-f069b06e41dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfaf8421-0457-4c0b-9f6d-0f10106104f5",
        "cursor": {
          "ref": "5bd8037e-67dd-41ca-b070-229b12e6b917",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "37e0a39d-b152-4026-9365-d36b12a0551b"
        },
        "item": {
          "id": "cfaf8421-0457-4c0b-9f6d-0f10106104f5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "588f9e27-6bd1-46b1-b894-8b4abcce7f1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02aa78b6-1f32-4cc8-ab17-98a73ea466c2",
        "cursor": {
          "ref": "5e400060-32bf-4837-87a3-a6288dc8001f",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7bff9a92-5c15-4609-b138-ae2433d71078"
        },
        "item": {
          "id": "02aa78b6-1f32-4cc8-ab17-98a73ea466c2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "bcf6cf4a-4fca-480c-b2f0-db172d4dd122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d80e9b3-04a8-42a8-a146-446c550944d1",
        "cursor": {
          "ref": "4ac02c7c-70da-4b7e-80a3-a9875696950b",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a4ba856f-6b5b-4895-83a9-dd184de81d68"
        },
        "item": {
          "id": "3d80e9b3-04a8-42a8-a146-446c550944d1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "3170b4b8-bae2-4b8d-821f-64a2d9df75f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed8dff4b-168b-4611-b7a6-d68e471e5810",
        "cursor": {
          "ref": "59385728-1728-42c3-aca1-4b6bbadbc019",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "97b3401f-8625-465b-9b2b-ad2ba1bf8b8e"
        },
        "item": {
          "id": "ed8dff4b-168b-4611-b7a6-d68e471e5810",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0100a6c6-7a85-422e-a834-f63be87aa5ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a6c69f-ee36-4f7b-a2dc-d3c303477a08",
        "cursor": {
          "ref": "9782f0e1-70d9-49e7-aa02-4815cd0e163e",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f30566cd-8bd2-4900-b6b8-615d27715adb"
        },
        "item": {
          "id": "a9a6c69f-ee36-4f7b-a2dc-d3c303477a08",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "5cb22feb-c067-4f17-a484-aefd37123a41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "332a7546-2bcc-4c07-a0f2-c658f0a12395",
        "cursor": {
          "ref": "e9b7ea71-fd60-4d4b-91e9-87a8306e2a50",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9926ad9a-9b4e-458d-be67-5c287d4dcfd4"
        },
        "item": {
          "id": "332a7546-2bcc-4c07-a0f2-c658f0a12395",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "eef37e97-fd1b-43e2-b637-55c9843e6ed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2267beb8-25c4-4429-bd2f-329a1fea3231",
        "cursor": {
          "ref": "501f5c0e-9bf3-4cd5-8aaf-28e85a1f3505",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "54c445bf-d28f-4c40-86a9-2174c5ca0352"
        },
        "item": {
          "id": "2267beb8-25c4-4429-bd2f-329a1fea3231",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "36111ce7-7926-40f8-a162-36bdb83210ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f68afdf-9c17-49c0-b247-4f5b16457dc5",
        "cursor": {
          "ref": "cbf448c9-3c72-4a43-9f2a-81319c196588",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b1f52c06-aec4-4498-830c-b7590a2dd724"
        },
        "item": {
          "id": "4f68afdf-9c17-49c0-b247-4f5b16457dc5",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2b6d4b31-0404-40f3-b9af-7fef9b7d3f53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9f626e-01fc-47ea-9229-c2a8b22039f2",
        "cursor": {
          "ref": "c7676e38-0da7-46b0-a284-8d445cdbe129",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "150335ab-26b6-42e3-a684-022a5bd33c76"
        },
        "item": {
          "id": "fa9f626e-01fc-47ea-9229-c2a8b22039f2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "92d1c982-bbe4-4f3e-acf5-b45c73ad2f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4583ca28-7f31-42da-83f3-801086530dc9",
        "cursor": {
          "ref": "f4900eb2-34f5-4965-a4a1-f1bfdbe67cd7",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e982d88a-b5e6-4d2f-ac12-6a9074012cc7"
        },
        "item": {
          "id": "4583ca28-7f31-42da-83f3-801086530dc9",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "20050479-5c60-46ff-906f-98c941284375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddf3e3e3-42a4-4013-9e15-07813d5b8c88",
        "cursor": {
          "ref": "50b9f01e-c983-4947-b7af-b0eddfaedc26",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "da9d3558-a3f2-46a6-974d-d1f1e9bfa449"
        },
        "item": {
          "id": "ddf3e3e3-42a4-4013-9e15-07813d5b8c88",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e8db8b9b-d679-4ee8-98f5-bec41513f29b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c00419-39c1-43bf-8a1b-ecffc9ad04cc",
        "cursor": {
          "ref": "b34401a9-c63b-4cc5-aea7-2dffb4cd3eb9",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0ed41349-7944-48cf-9a26-52ba8cbefd40"
        },
        "item": {
          "id": "e8c00419-39c1-43bf-8a1b-ecffc9ad04cc",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "61d414aa-052a-429e-a35f-27ba0cce0263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832525b5-ce73-41f0-824c-b6df73d2020f",
        "cursor": {
          "ref": "41085d8a-5c69-4371-9330-40413a95dcaa",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "27809d9d-eec1-4341-a24c-2a773d0c0e71"
        },
        "item": {
          "id": "832525b5-ce73-41f0-824c-b6df73d2020f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "40bef2d2-8861-45cd-9a5d-ef7c18c44661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e18539e9-3c45-48f2-8130-93b50b58fba1",
        "cursor": {
          "ref": "11b3d3c9-7ce2-48ef-8bbc-2ba8d589f001",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0977012c-c274-448d-b4ae-2a8534972fc9"
        },
        "item": {
          "id": "e18539e9-3c45-48f2-8130-93b50b58fba1",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "fa6851a5-599e-4a66-9e3e-1342d9e739dd",
          "status": "Created",
          "code": 201,
          "responseTime": 917,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "184d3537-527e-4a7f-bb97-b0169d25d79b",
        "cursor": {
          "ref": "69c084c4-50a6-488a-828a-95fa39d3fa73",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7388b566-02ea-4bfd-a239-3ac35d2159c2"
        },
        "item": {
          "id": "184d3537-527e-4a7f-bb97-b0169d25d79b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2d5ac7a6-521a-4e7b-92d4-06cc25c0c166",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "1276fc97-7cd7-4dd3-9d8a-bd904ce3beb9",
        "cursor": {
          "ref": "4baef776-42d4-439f-8249-6bd9ad56c856",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "180540e2-7249-494a-9e25-2a4acc27b7fa"
        },
        "item": {
          "id": "1276fc97-7cd7-4dd3-9d8a-bd904ce3beb9",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c2eced98-fe6f-4c84-9afa-576b5291d0c7",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "00573eb0-5363-4411-87fc-d0991d22673c",
        "cursor": {
          "ref": "cb3fcd4e-f1c9-4f89-8600-56ba0ded6ff8",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "11dd81dc-0250-40ca-a57f-90f536472f03"
        },
        "item": {
          "id": "00573eb0-5363-4411-87fc-d0991d22673c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "efe263b3-8be0-4114-b3a1-e777e6976e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f96556-193e-41d2-be80-6e1bc3c4e76e",
        "cursor": {
          "ref": "a8e4db02-7775-4ce5-915e-17358e58fc89",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0169f812-1621-4a8e-8c7a-0438d54a2fc0"
        },
        "item": {
          "id": "15f96556-193e-41d2-be80-6e1bc3c4e76e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4aaa9b49-9ea0-4199-b631-695fcab46694",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "3ee62f99-27a6-464e-b56d-2a111260bcfd",
        "cursor": {
          "ref": "120517eb-3308-42ea-b06b-154d9cc5ebf7",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c834fd1c-cedb-47ae-b104-f91da86bf9d6"
        },
        "item": {
          "id": "3ee62f99-27a6-464e-b56d-2a111260bcfd",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4a94a655-5400-4a10-8597-8fde1e9303d6",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "052fd87f-075e-4af0-8399-d08ac2b10284",
        "cursor": {
          "ref": "84dcba01-fced-4255-aca7-72398ee4ce63",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8811f781-7832-414f-9183-785b9b8ae38d"
        },
        "item": {
          "id": "052fd87f-075e-4af0-8399-d08ac2b10284",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "59851a0a-2a6a-4ba4-b20f-9fd82d320b05",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4d7c9abe-3b55-4970-af98-5492d352c248",
        "cursor": {
          "ref": "0f166985-aedd-4ef9-9480-a8e6cf736bd6",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0b2e4ba6-215d-4536-bbe7-ff2e803b9d7c"
        },
        "item": {
          "id": "4d7c9abe-3b55-4970-af98-5492d352c248",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8827be03-d60a-4edf-b647-0a889a0c13af",
          "status": "Created",
          "code": 201,
          "responseTime": 504,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "25288d7a-36ad-42b9-bcfc-64fe3cf872b5",
        "cursor": {
          "ref": "33466854-038a-40a5-b92e-62cadfd3f73a",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3e1a0134-9c98-4ec6-bb19-1b0308870948"
        },
        "item": {
          "id": "25288d7a-36ad-42b9-bcfc-64fe3cf872b5",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "32e6e5a1-f254-48d8-847b-63483be46538",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "e4b2c8ed-c830-4a2c-9e8c-3886c92b9e53",
        "cursor": {
          "ref": "0f7c7f7d-1dee-41e2-86ba-8e4c58e7b205",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "faf00b77-9337-4785-b430-a8c94e7ff5bb"
        },
        "item": {
          "id": "e4b2c8ed-c830-4a2c-9e8c-3886c92b9e53",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "60ddff8e-585e-4c76-b0a3-e7a99f932582",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "3909c57b-b642-4f69-85d5-2a54be3af16e",
        "cursor": {
          "ref": "7b3597f1-4935-4d45-801a-e54c08b15613",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2fdc95a8-3b0a-4c6a-b88c-1810a1426dce"
        },
        "item": {
          "id": "3909c57b-b642-4f69-85d5-2a54be3af16e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "cae24038-ca43-4794-be72-b5bfe34e2592",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "7d00bb7f-4e65-42f7-96b5-efe7ce87f50c",
        "cursor": {
          "ref": "a1b7f6f9-cc1e-45bc-8cc9-89609a3cb3ea",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7b74bfac-6973-4fc4-bbe2-95aa4f408340"
        },
        "item": {
          "id": "7d00bb7f-4e65-42f7-96b5-efe7ce87f50c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "1c2cf082-552a-4666-97d5-192a1e855c04",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "e7f2586e-9106-4a51-ade1-9cfa89f91501",
        "cursor": {
          "ref": "f5af0800-3ee0-4bb6-91ef-68c3fb05c336",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "de79ad9a-5b39-49fc-8a39-87a5533d9276"
        },
        "item": {
          "id": "e7f2586e-9106-4a51-ade1-9cfa89f91501",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9f9afc04-8d23-45c1-8dac-3941861d37e3",
          "status": "Created",
          "code": 201,
          "responseTime": 494,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4d3460e6-1bad-480b-b4ea-0c7acd945fd0",
        "cursor": {
          "ref": "c4588da8-9a06-4bef-ac30-6abc9a2e29fd",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "be95455a-4b26-432c-b4df-5029e2a50e99"
        },
        "item": {
          "id": "4d3460e6-1bad-480b-b4ea-0c7acd945fd0",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d07d61be-c66c-43df-ae7e-5a80a662b9e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b365596-93ef-406a-9893-cb53d552e327",
        "cursor": {
          "ref": "cab05b87-ee5a-4c33-9eec-6e63e8fc06ed",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "21c4d08c-5ce2-4b70-af97-bda8ab79a2cd"
        },
        "item": {
          "id": "5b365596-93ef-406a-9893-cb53d552e327",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ee74aec9-de78-479e-aa4a-3226576c68ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e547b21c-83f0-41cb-853c-1d32c6a71e7b",
        "cursor": {
          "ref": "5a0bbf4a-a37a-4e5a-8e21-40f025bfdce4",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e8e08b23-556a-4feb-863f-d8a51f8e7d0c"
        },
        "item": {
          "id": "e547b21c-83f0-41cb-853c-1d32c6a71e7b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a4bd14f3-6fe8-4a50-93b4-5d0b96216a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88598190-293b-4a1a-bc09-22f2ca2de74f",
        "cursor": {
          "ref": "46e1ff8c-ef5e-4511-bfb4-8974e2ea6b7a",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e996113d-7025-442d-b540-3d0348a126e3"
        },
        "item": {
          "id": "88598190-293b-4a1a-bc09-22f2ca2de74f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e32ac371-81c4-442c-8513-4c7e92ecb085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9595f296-b125-430f-96ed-b5597ad2e359",
        "cursor": {
          "ref": "244afddf-c55f-4e35-937f-e73cf16146cc",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9b16a466-497b-4a95-8610-c3108d694c30"
        },
        "item": {
          "id": "9595f296-b125-430f-96ed-b5597ad2e359",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "cda1b678-8632-4b4f-a7f3-b57cbe64874a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b03297-e320-43f2-8360-25979bf724e5",
        "cursor": {
          "ref": "d9e8463e-61ff-4a03-bebd-2ed39e28cf76",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "047a14ce-f7aa-469b-a719-8a0d81b16b37"
        },
        "item": {
          "id": "17b03297-e320-43f2-8360-25979bf724e5",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "88e1b95b-2b8b-4c77-9ee6-e2f7afe7ba7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df85256-adfd-46ed-b6a1-291402a6480b",
        "cursor": {
          "ref": "8deb9f29-0022-4275-abc6-f09fbf91d042",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0111391b-f2ae-4780-a674-4aa971e6070a"
        },
        "item": {
          "id": "7df85256-adfd-46ed-b6a1-291402a6480b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c933828a-2221-4425-a344-d5a3c6bd7a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70952fe8-11ba-4a1d-a7ef-c5a6c9e57990",
        "cursor": {
          "ref": "00d9d13f-a8fb-4a61-9612-36abadee51d1",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e6e8f089-d448-4c72-a185-1cab58ab4c76"
        },
        "item": {
          "id": "70952fe8-11ba-4a1d-a7ef-c5a6c9e57990",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4a167c3b-38e2-47a7-b319-3b0535783a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d955cd35-443c-478d-a876-b3bb2006bb2e",
        "cursor": {
          "ref": "fe46fd30-8e85-4d64-9d55-5be0913fae7a",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f8a50e06-77de-4691-870d-cb87175fca8b"
        },
        "item": {
          "id": "d955cd35-443c-478d-a876-b3bb2006bb2e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1f269d63-0ebc-4f60-99cb-e747186fe46d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b24ccd-ff01-4f89-9a16-bf9affc3d2a1",
        "cursor": {
          "ref": "8dbbbdd9-01b4-456a-9d78-14aa75982100",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "96d3fddd-0b26-4ce1-b3c8-793c9832178b"
        },
        "item": {
          "id": "25b24ccd-ff01-4f89-9a16-bf9affc3d2a1",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "fab66159-3fce-460c-87c7-b89e37df883c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77800f15-8051-46ed-abe9-7067f9b7e93c",
        "cursor": {
          "ref": "00e9f261-32e3-4d64-9dd0-9a398dd7b27a",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f2710347-8717-4ec8-b3ac-10a0248ddafb"
        },
        "item": {
          "id": "77800f15-8051-46ed-abe9-7067f9b7e93c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "e7313b3e-0cbe-443d-8128-14ccfec27557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75cc3bf1-08ed-460a-9215-86d50b990d3a",
        "cursor": {
          "ref": "6d899945-f987-431c-8a0c-97dae6f57d7e",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "10aeaeb0-baa2-4b39-822a-cc312ec4d6b8"
        },
        "item": {
          "id": "75cc3bf1-08ed-460a-9215-86d50b990d3a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "09baea02-ce29-4eaa-83e0-dec0d92483a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a53884ec-6b95-4b99-951e-d8519444827c",
        "cursor": {
          "ref": "e54f7522-e813-4e93-ad9d-487bbef48c82",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b88e0b64-266a-43b6-8f2b-400e40ef9028"
        },
        "item": {
          "id": "a53884ec-6b95-4b99-951e-d8519444827c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f2cf3864-0f30-46dc-99e1-badf558249fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b2ca71b-c6e3-44c1-8c1a-3aa2874739fc",
        "cursor": {
          "ref": "0986a0db-a267-4fa1-9ad0-649400ff5bcf",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a90c30cd-7633-4746-9a10-043e85103c49"
        },
        "item": {
          "id": "2b2ca71b-c6e3-44c1-8c1a-3aa2874739fc",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "29cd7710-ea08-41d3-96fb-41c2f92e657b",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "d4870c06-3a0d-4c62-915a-787a7f76f9e7",
        "cursor": {
          "ref": "fff321f6-3f7b-452e-8b3d-09b02e1b02d6",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "71d65211-3dee-4ef2-b67e-a14fa06840d1"
        },
        "item": {
          "id": "d4870c06-3a0d-4c62-915a-787a7f76f9e7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e691341e-9e13-431d-b452-610d338929b5",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "b68ba682-fe04-4349-bbef-78fb9ea48f48",
        "cursor": {
          "ref": "0fb12b82-ccf1-4038-8eb6-f306774a9cc6",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "cd94d8a8-5b7c-4506-8399-f9ada26c1a00"
        },
        "item": {
          "id": "b68ba682-fe04-4349-bbef-78fb9ea48f48",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e2905107-4290-4aa5-ba61-d0a431875074",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "b9ad5c5a-1ae5-43ce-b4d0-bbefb30c409a",
        "cursor": {
          "ref": "5e565569-91ae-44ae-a7db-559a08563e6e",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "618e76a7-6a3b-4279-af89-8ec59f30d12f"
        },
        "item": {
          "id": "b9ad5c5a-1ae5-43ce-b4d0-bbefb30c409a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b2c2f44d-8ba0-4d0d-a36a-a243c925f598",
          "status": "Created",
          "code": 201,
          "responseTime": 400,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "80c067b1-96bd-4ff8-b8cd-405f960ebee2",
        "cursor": {
          "ref": "bfe6ee07-018e-4853-af38-491451f5268a",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "5f6f12dc-871d-4dcd-a04a-dde1b11d773e"
        },
        "item": {
          "id": "80c067b1-96bd-4ff8-b8cd-405f960ebee2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6e27eda2-ddec-45bd-b84a-28eb8947b737",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "3fc5a6b4-1e66-44fb-8afe-293cf6ca8cbc",
        "cursor": {
          "ref": "64d2b28a-6faa-4c31-b13d-22c4a92427d6",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "7f0a88e2-f937-4746-9220-5739ca46dc81"
        },
        "item": {
          "id": "3fc5a6b4-1e66-44fb-8afe-293cf6ca8cbc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "659a321f-9dd7-4512-aec6-9cdea7356304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "179fd68c-da3c-4644-9ec7-ae1cc0779884",
        "cursor": {
          "ref": "c5eb21f0-0dec-48d1-a747-38cfc35eb73a",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2ba26440-5d29-4a26-8e4e-72cb1e7718ed"
        },
        "item": {
          "id": "179fd68c-da3c-4644-9ec7-ae1cc0779884",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "0bca7695-16f8-4728-a0ff-a4f80b16150a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b5896ed-0881-4dfb-b985-5572c617381b",
        "cursor": {
          "ref": "80fb6e9c-a95a-4dd0-9cfb-5af6dd0deaab",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "bf23ea3b-8f1f-40ef-a08e-4adddc8a9786"
        },
        "item": {
          "id": "0b5896ed-0881-4dfb-b985-5572c617381b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ba35ba9f-b018-48e5-9b5c-71e6f1f245bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c20507f-ba0e-4751-98cc-14ed4713ebb2",
        "cursor": {
          "ref": "6abcf99a-8974-4006-8349-aa9a33e9692d",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "954bb1d2-d92b-4b8b-911d-4c375dfbe1e3"
        },
        "item": {
          "id": "8c20507f-ba0e-4751-98cc-14ed4713ebb2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4b638a1c-5362-4fe3-b779-6b354c01629f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9bb2928-0bd1-401e-89ce-a32b4c8804f2",
        "cursor": {
          "ref": "40a0ffe3-f909-459a-a392-51bd92563f06",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9a2e7ff6-6d2c-4ec7-a846-1e5158b2b42d"
        },
        "item": {
          "id": "d9bb2928-0bd1-401e-89ce-a32b4c8804f2",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9d098221-2ee6-4dcf-9943-4293e7a98292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b74262a5-eef5-41d5-8be5-01cc01cd508f",
        "cursor": {
          "ref": "89fbdebc-5345-4612-b580-228391517701",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a47cb4f1-f3dc-429d-957b-bbd36c0784e0"
        },
        "item": {
          "id": "b74262a5-eef5-41d5-8be5-01cc01cd508f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "1ea17540-2842-42c5-b6ee-4858235a4e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4605b94e-055a-40bf-b07f-a3eb08d33a3a",
        "cursor": {
          "ref": "b5151bec-5399-4690-bd23-f328576f0759",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "04f213b7-1689-43d8-8eba-4ab132ddfffd"
        },
        "item": {
          "id": "4605b94e-055a-40bf-b07f-a3eb08d33a3a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "38dd1081-1cc1-4bda-ab35-2539a2f56af9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6273de-d99d-4789-9169-d45ff2787562",
        "cursor": {
          "ref": "fb2dd0f0-cf49-4e3c-b2b7-7bf88d0e933f",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "032a2ccc-1998-43cf-9fdb-c73e8e4424dd"
        },
        "item": {
          "id": "8a6273de-d99d-4789-9169-d45ff2787562",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "3f2f9178-5971-4d88-860c-2504423c48ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50be7038-6d81-49eb-b3b6-cbf4b914841f",
        "cursor": {
          "ref": "c9fc9a6f-d2ad-43d5-a403-37476502748b",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2346594c-504b-4c28-ac44-6a07eaafa24a"
        },
        "item": {
          "id": "50be7038-6d81-49eb-b3b6-cbf4b914841f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5be5c3e2-c8bf-4fe7-8dc7-6d549482a3af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdfc151c-75ff-4f09-a4b5-076283198fe5",
        "cursor": {
          "ref": "90a65770-e8f1-43bc-9fe9-219222307c75",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f6012108-a273-41ab-8e49-297f2cf04436"
        },
        "item": {
          "id": "fdfc151c-75ff-4f09-a4b5-076283198fe5",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b5702695-7667-4368-9860-50560cec8e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4271216-00f4-4b4b-924d-308733e93b33",
        "cursor": {
          "ref": "2923cde0-9f42-4b16-a98e-5a7d40a205aa",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6d536c52-1a5d-4728-b29c-fc05cf6c9852"
        },
        "item": {
          "id": "d4271216-00f4-4b4b-924d-308733e93b33",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "62ca9d9a-2c28-4853-b7b1-e26022d0ab5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f7e5acb-6f3e-47b0-8ec4-df35b417ac00",
        "cursor": {
          "ref": "6c8e7e15-887d-43d0-84ec-22353b323ad0",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a85f1554-461a-4334-8ec2-d478b42c3cea"
        },
        "item": {
          "id": "3f7e5acb-6f3e-47b0-8ec4-df35b417ac00",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e313f818-79b1-4041-8d3f-084baa15816a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00bff1d1-d6e9-4194-9263-450988952df1",
        "cursor": {
          "ref": "65f8daed-00d9-4efe-88b6-83b186dc7bf6",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "858831bf-5162-46d5-b6d4-6e542eb72b06"
        },
        "item": {
          "id": "00bff1d1-d6e9-4194-9263-450988952df1",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d8100c0e-0004-4b3f-99dc-7a27bc63a24e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc09cb12-56ec-441b-9bd8-46290ff67660",
        "cursor": {
          "ref": "ca725690-b683-4d86-a79d-ce27ad8bb92c",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "639d8391-8fd9-4e4e-9e97-c1aebc95c185"
        },
        "item": {
          "id": "fc09cb12-56ec-441b-9bd8-46290ff67660",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9f9dd025-a728-435a-af89-81c3f43a8455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "424c1991-ca6e-4171-ad94-4c57ccea394e",
        "cursor": {
          "ref": "e4e92e2d-3861-422f-8f1f-b53227e64184",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "927540ca-75b0-4cf2-bf09-08acc2ed3afd"
        },
        "item": {
          "id": "424c1991-ca6e-4171-ad94-4c57ccea394e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "fd666847-4d52-45c1-bc28-510dc94b5c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a566376-d4a9-4f4b-abc0-eb2f7ff7c7fb",
        "cursor": {
          "ref": "7e741521-5cfc-4265-995c-6c69a54f75be",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "8b95fd8d-92c7-4690-821c-0000bcfe573b"
        },
        "item": {
          "id": "3a566376-d4a9-4f4b-abc0-eb2f7ff7c7fb",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9a9fa488-bb63-408f-b96c-78a78dbd5d52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81de3cdc-763b-45a7-a549-a7922a2fb4e0",
        "cursor": {
          "ref": "b6508666-ab94-4993-ace3-e64ae913491c",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2ee799a0-d9bd-45ad-b794-50244da778f4"
        },
        "item": {
          "id": "81de3cdc-763b-45a7-a549-a7922a2fb4e0",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "59445d15-0a69-452e-9058-2c661eb2e80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9708d43-daa3-48cd-9d25-d1473c2b595d",
        "cursor": {
          "ref": "81dd0f8e-3653-44b5-821d-4805d7d4073f",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b4791595-e61e-4eab-a8ca-e5d9344e075a"
        },
        "item": {
          "id": "d9708d43-daa3-48cd-9d25-d1473c2b595d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b54e6e93-28fd-466b-8848-5c8f0c61dfc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aff4216-dd93-492d-8c47-03d51b7cab7b",
        "cursor": {
          "ref": "60e70324-7c7d-4423-8ea2-8ee03c914877",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "0815b331-7a3f-4145-905a-d9a4722f9df8"
        },
        "item": {
          "id": "1aff4216-dd93-492d-8c47-03d51b7cab7b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "88327881-b796-4848-b3fb-2d49e2177df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0072b6b6-7f89-4e16-b485-cc88d6050a4c",
        "cursor": {
          "ref": "41db5887-ff3b-4505-bc11-e4174ddb98ff",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b5cc08cf-407b-47aa-8611-cda28d2841f1"
        },
        "item": {
          "id": "0072b6b6-7f89-4e16-b485-cc88d6050a4c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "25280688-3b14-47d8-951a-543d2e2c0527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f9c9fe-90fd-475e-8531-a45897a4f44f",
        "cursor": {
          "ref": "757e6f5a-6c63-4799-bfb5-4d9df646bf20",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c4e70696-b908-4db2-a91f-17b465d34d78"
        },
        "item": {
          "id": "b1f9c9fe-90fd-475e-8531-a45897a4f44f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5922fc6d-9882-4976-b2b6-1ae8735ddcf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cfd9e4e-e61e-4b10-92b4-48c73e191910",
        "cursor": {
          "ref": "613d803b-0dd8-4bcb-b639-df00860c1e6c",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "86d14098-eb02-458a-8259-3b8246c8147d"
        },
        "item": {
          "id": "1cfd9e4e-e61e-4b10-92b4-48c73e191910",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b5c45a50-0c23-4ec3-849f-d6a4e0f40b42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b82065ee-2ad8-4774-8c50-b861a59e0da8",
        "cursor": {
          "ref": "74a1e0eb-58c0-41b4-9a40-2b1f214878f6",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "438924a6-6d98-40bb-a1fa-267fd1ee3d70"
        },
        "item": {
          "id": "b82065ee-2ad8-4774-8c50-b861a59e0da8",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "81337c8a-4f08-4ee0-837d-872f08f73cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83a2753a-41e7-4975-a783-6c80244b61b9",
        "cursor": {
          "ref": "d820062b-fd55-4ffe-bed3-c16b4117fef7",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "acc91db5-ef29-46e2-8835-d71e6ccf3511"
        },
        "item": {
          "id": "83a2753a-41e7-4975-a783-6c80244b61b9",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a0b31d36-92e4-4342-afd0-77168604e0aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "183624fb-dfc9-41ef-a641-7ef1ee6e0552",
        "cursor": {
          "ref": "f49fd462-c6b4-4867-858a-3eb3665757e9",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "5dcd8d90-e731-4d4c-bd21-385d192417a3"
        },
        "item": {
          "id": "183624fb-dfc9-41ef-a641-7ef1ee6e0552",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c22c50d1-5b42-4df9-a51b-f0f8493b816e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21de49cd-0a89-4dca-b703-f15d937213b1",
        "cursor": {
          "ref": "b77a97f1-89b5-47b3-a0c2-3f528155e939",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "4e7481a3-2c5c-4251-9577-ab52ded249bf"
        },
        "item": {
          "id": "21de49cd-0a89-4dca-b703-f15d937213b1",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3a33c785-1f8c-4bd3-bc04-2e044346593b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92e5680-4355-4f9d-9ab5-39661c4f19b7",
        "cursor": {
          "ref": "423af77d-4bbd-4344-bc56-64bc7f5b0464",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8f438401-ebba-4e02-8ef4-7fc854ce7afc"
        },
        "item": {
          "id": "c92e5680-4355-4f9d-9ab5-39661c4f19b7",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "2a759c97-6dcb-45df-b5b8-d5c2fcd6a7fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f139d14d-a211-453e-89d6-8ca5e0229df2",
        "cursor": {
          "ref": "28be43a7-db11-411c-8704-0d16b212d222",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e946c33a-6862-40f7-bd0d-0473c229936c"
        },
        "item": {
          "id": "f139d14d-a211-453e-89d6-8ca5e0229df2",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "37941b04-8812-4153-b839-d8e83a864fe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc65b58-128e-4bb4-aa69-0fe171abc7ee",
        "cursor": {
          "ref": "786bf14c-4540-45e1-834f-0d465b898749",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "bc298685-e4de-4eeb-8b5f-e8526a200038"
        },
        "item": {
          "id": "dcc65b58-128e-4bb4-aa69-0fe171abc7ee",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f8c8c460-55bf-4c3b-9215-45d2b151976f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "368f2463-215f-4ed5-8534-e629ea2a2b9d",
        "cursor": {
          "ref": "fcf97b06-3f42-4631-9c68-2079e6aefdd9",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8aae3102-efb0-4a39-9493-1a1dba850e27"
        },
        "item": {
          "id": "368f2463-215f-4ed5-8534-e629ea2a2b9d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "483e0965-9e75-4a93-904d-68f90c4a505f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "622db1f3-f1e3-4074-8a30-ba53c0980d23",
        "cursor": {
          "ref": "a9c52b56-23ac-464e-a0d4-737f4b3bd686",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5898ef74-e706-4123-88ed-71c8b0025e3c"
        },
        "item": {
          "id": "622db1f3-f1e3-4074-8a30-ba53c0980d23",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "507d4f74-3090-40ea-b304-37478ad5c447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3adf91b-5720-4f11-b113-dd7ad0ce87ec",
        "cursor": {
          "ref": "586a3468-2a6d-4fc3-bc43-52a630d19d2c",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "be51caa4-946c-4648-8cb2-c6cc47be7059"
        },
        "item": {
          "id": "a3adf91b-5720-4f11-b113-dd7ad0ce87ec",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "2bcc9d92-c075-48a3-b29c-1c4d139b53fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec94a48e-db48-4f6b-b0e4-bb67d86e1c37",
        "cursor": {
          "ref": "d1586030-0c23-4bc7-ac67-6b12651bdd5d",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ac5b6378-b090-4257-9658-3ca894dde2e6"
        },
        "item": {
          "id": "ec94a48e-db48-4f6b-b0e4-bb67d86e1c37",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "fa0d74fe-b514-4fcf-bb85-6d6deb1b6803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "6d705cf9-cf82-4448-b147-cf67f8a6935c",
        "cursor": {
          "ref": "8fd3fc27-e672-478c-913f-913e44fd744a",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2f4079c3-c351-414a-9fac-2edba484deba"
        },
        "item": {
          "id": "6d705cf9-cf82-4448-b147-cf67f8a6935c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "aa7084bd-c7e0-40f3-a1e9-70d9da3b594d",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "379664a5-62fa-486c-bff4-7598a9a9bd0f",
        "cursor": {
          "ref": "7a2d5012-369d-4f64-8ad6-61e8655c4cf1",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6869fb6f-066f-4459-8c1e-9836d2bbd074"
        },
        "item": {
          "id": "379664a5-62fa-486c-bff4-7598a9a9bd0f",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6752a798-8d8d-4073-8a4f-16277ea0ecd6",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "53774aff-529c-494e-938f-c1c1ebe23bdc",
        "cursor": {
          "ref": "366d2720-27f0-4ba9-a3c1-0a8ecc167d4f",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e624dbc9-9e4a-4407-90a3-e9177d439eef"
        },
        "item": {
          "id": "53774aff-529c-494e-938f-c1c1ebe23bdc",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d385e0b8-bf86-45b4-a6bf-a6eef96d1dec",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "00941e31-d6d5-4803-b3fb-1ea39fbab8df",
        "cursor": {
          "ref": "96289e43-b885-4b00-a125-72310a383a9e",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "bd422855-b0ac-4eef-a892-d4eceacf3c60"
        },
        "item": {
          "id": "00941e31-d6d5-4803-b3fb-1ea39fbab8df",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1fbe5c93-50ac-48bf-b5f7-d069f063cd88",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "70251fea-4133-4164-8a22-6ce8a57fd848",
        "cursor": {
          "ref": "cdeac77b-e6ce-4302-b11c-13b495bd09a4",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "81c27e0f-d7a4-4a12-a8d6-53ba68859a04"
        },
        "item": {
          "id": "70251fea-4133-4164-8a22-6ce8a57fd848",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d06eb78c-8e8c-4414-aaf3-52712a6b300d",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-28T00:36:22.514Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-28T00:36:22.514Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "be0b826b-48f8-4b1f-9849-fa053a256463",
        "cursor": {
          "ref": "e4f831e2-0afe-4aae-94fb-3486854ea4e5",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0a96ff09-7e67-4d09-af18-ab43fab3a11f"
        },
        "item": {
          "id": "be0b826b-48f8-4b1f-9849-fa053a256463",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "91bc9f82-7c79-4dc6-b591-34ac1cf0aa3e",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d64775-43b2-4572-9953-700aef00dcdd",
        "cursor": {
          "ref": "6eb2ca96-8b9c-4266-9b3d-0f40b23742ea",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "de7bb18c-a0da-40b6-b06f-29fee6b58d55"
        },
        "item": {
          "id": "b8d64775-43b2-4572-9953-700aef00dcdd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "457e4bd8-3617-46c4-b180-a9304e8468a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ffa23ad-09ad-497f-8d27-d66d7c53aca4",
        "cursor": {
          "ref": "5890f856-290d-4032-a833-30ad19d749c3",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e4ef1b0b-9c82-4e4d-a916-cea9d53bc484"
        },
        "item": {
          "id": "0ffa23ad-09ad-497f-8d27-d66d7c53aca4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5a495ce1-aa7b-4882-812c-05f78a109a58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9850a75-2c15-4216-8778-50b595599ffe",
        "cursor": {
          "ref": "a4781069-f0f7-4e9e-98cb-cfcc4339653f",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a1934d7d-2d9c-4390-9ea5-3a5774f10074"
        },
        "item": {
          "id": "c9850a75-2c15-4216-8778-50b595599ffe",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "cfaac06d-a6d2-49a5-9864-7fa095461d1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1585373d-bcf5-4690-875a-beefc044beda",
        "cursor": {
          "ref": "9ea3f969-f941-43a3-a010-3323c531371e",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "38d44990-5bda-498d-932a-95c8afa0916c"
        },
        "item": {
          "id": "1585373d-bcf5-4690-875a-beefc044beda",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5712ee19-cf03-4408-bf24-8f2c4db0d193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6070a48-121e-4c59-9f74-18f7861fc901",
        "cursor": {
          "ref": "e461b6b1-5489-4e9d-9f6b-78f817856037",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f844031c-4f07-44ff-8433-52a21d708672"
        },
        "item": {
          "id": "d6070a48-121e-4c59-9f74-18f7861fc901",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9404c2a8-2a43-4a26-94a7-c7fec7f047ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec1bc36-6656-4374-bee3-54dd0b483ba3",
        "cursor": {
          "ref": "4dc59de9-7274-4fc5-9c90-b1f7b76c243d",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "630e33b1-d341-4def-8abd-08c28bf9a03f"
        },
        "item": {
          "id": "aec1bc36-6656-4374-bee3-54dd0b483ba3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "77884e65-f7ac-4e5c-ae1c-d9c953ff3e7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57ae147d-60a5-4bbb-a225-d314f6eb3442",
        "cursor": {
          "ref": "1501c0e1-33e4-4305-bf6c-44ec2e0a723c",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "79f64bb0-a8fd-414f-9ec7-d9e67be0b74b"
        },
        "item": {
          "id": "57ae147d-60a5-4bbb-a225-d314f6eb3442",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "44dc4119-086a-4e5e-a3d6-53b8e867117c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0883e8f7-bbde-4a20-8470-184df9ee84da",
        "cursor": {
          "ref": "4aca85b6-7984-40a2-9377-424997439aa5",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ebb8894b-08ec-4d60-b5ba-fca095059c06"
        },
        "item": {
          "id": "0883e8f7-bbde-4a20-8470-184df9ee84da",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7672b473-cc26-4f60-b01d-5c17f3f86376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95335721-4ceb-4a2a-b563-7f7256434f7f",
        "cursor": {
          "ref": "80f70239-f903-4c7f-9e79-63524bf5e9a6",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "967be52c-3bf2-4525-a627-34ac2b49c7f3"
        },
        "item": {
          "id": "95335721-4ceb-4a2a-b563-7f7256434f7f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "558cf69a-7ff2-469a-8fda-92e81d448344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1675a94-4621-4232-be56-7e09db404dca",
        "cursor": {
          "ref": "58f6f2fa-1f5b-435b-8798-cf012bd11b66",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6960aaf2-0055-4368-bb49-5ca220d92296"
        },
        "item": {
          "id": "f1675a94-4621-4232-be56-7e09db404dca",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1ab568ec-c6e8-4370-a6a3-4ac0402ed094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce05fd54-1f4a-4dca-8023-97dfc36c385e",
        "cursor": {
          "ref": "1f58f861-97d8-407f-b495-78641cbf180a",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b039956e-c56c-4685-87b9-5ba5779d4f49"
        },
        "item": {
          "id": "ce05fd54-1f4a-4dca-8023-97dfc36c385e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9a3b231a-dfb3-4913-99e7-894a3835e97f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a494126a-2c5b-43b8-9d42-dfbb94c6d329",
        "cursor": {
          "ref": "c51b4b90-8fde-479c-8d76-8b17358762ec",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8917d4b9-4b4f-41c9-8c78-962e95c81084"
        },
        "item": {
          "id": "a494126a-2c5b-43b8-9d42-dfbb94c6d329",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "011c3049-dbdf-4e4b-9670-7b4b2302cedf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b7aa178-5db5-4545-aced-0865cd39612e",
        "cursor": {
          "ref": "00f10b07-e6d5-4a67-b57f-5d2f108ca384",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3a3ab1c7-b8b9-4b04-9954-0007ff8b5113"
        },
        "item": {
          "id": "2b7aa178-5db5-4545-aced-0865cd39612e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4c54a25c-7f93-4add-9808-2cdd56da9faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "228d26f5-7b2e-4a2d-93b5-c955e9389f61",
        "cursor": {
          "ref": "27deb414-b596-4e78-9984-a7b5114a6058",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6f59f84e-dac9-4804-b14a-c1af133bafca"
        },
        "item": {
          "id": "228d26f5-7b2e-4a2d-93b5-c955e9389f61",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "069bb750-5ac6-4f8b-b048-4bbe09b78eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce7d7ccc-dfbe-43fa-b6e8-727ea9c59469",
        "cursor": {
          "ref": "18657edc-de51-4f3c-84ab-f7952b9f7999",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d3efc172-fc0f-468e-9984-887802437e3f"
        },
        "item": {
          "id": "ce7d7ccc-dfbe-43fa-b6e8-727ea9c59469",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b6f26424-f97e-499c-9b46-d8ce9eb06b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e315a223-b634-41b8-9af8-b3c7c6bbf3fd",
        "cursor": {
          "ref": "33671017-cdb6-44db-a951-79886c92937f",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e5b4bb9a-42f2-42a4-ba92-5f65cc4530eb"
        },
        "item": {
          "id": "e315a223-b634-41b8-9af8-b3c7c6bbf3fd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0ce69231-9af4-445d-b502-2471161a64c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0af86b8-da14-4c0e-bcfd-916324df957a",
        "cursor": {
          "ref": "fd7d0dad-679c-4574-9b2c-72c946faaeb4",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2cca29e5-64c0-4389-a4ca-663d89bd732e"
        },
        "item": {
          "id": "e0af86b8-da14-4c0e-bcfd-916324df957a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "38c3b1a6-f6aa-4dd9-86cd-f18b9809457b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64579381-2a87-4456-b3c7-6fb8d6b9d13b",
        "cursor": {
          "ref": "df43c229-2096-481d-8023-3228d37761c1",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4151a810-fd2d-4e1f-828c-48dfa2de8334"
        },
        "item": {
          "id": "64579381-2a87-4456-b3c7-6fb8d6b9d13b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "228098dd-acc7-484d-af6a-a52382170232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4740548-2e64-418b-93ec-f374fbcf7098",
        "cursor": {
          "ref": "ed8bfde6-4ce6-4ff1-a018-b1db8ea4610c",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "87c134b4-21bd-4211-9dbd-825ea968fe6e"
        },
        "item": {
          "id": "c4740548-2e64-418b-93ec-f374fbcf7098",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "17f145a3-deed-4549-87d5-34d5d7a7b9dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5497530-1003-4e16-a498-27017a0bd555",
        "cursor": {
          "ref": "5fec8fa1-4e28-4c2c-bb96-3beb537b1720",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "335707a2-eda0-4a95-8ed0-b44852c704eb"
        },
        "item": {
          "id": "f5497530-1003-4e16-a498-27017a0bd555",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "092372d0-27ed-46c1-b1aa-f7432d5be465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717925aa-0bcb-4e73-9d57-99c9c0f6b0f1",
        "cursor": {
          "ref": "f9cbac0f-d33d-4461-ab5d-387eef43037b",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a08460c7-f15b-4a5a-a371-849caa173a0a"
        },
        "item": {
          "id": "717925aa-0bcb-4e73-9d57-99c9c0f6b0f1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3ca2f245-8f3f-44bd-bc05-c7b28a03ac22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dabe5959-121f-4800-994a-3e9ed89fc1d8",
        "cursor": {
          "ref": "28d0b425-5b0e-4c23-96cb-642adb159653",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3a220202-93ff-4b65-bc4f-f59b659af628"
        },
        "item": {
          "id": "dabe5959-121f-4800-994a-3e9ed89fc1d8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7cd3a95c-467c-4603-a536-11ef611df1c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f68e58-eca7-49c6-a9dd-a6b6b4783a14",
        "cursor": {
          "ref": "32e0f93f-f939-4984-9c48-368c79063c1e",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e6cc3c00-35a6-4ff8-9b4a-2b5597205d8d"
        },
        "item": {
          "id": "13f68e58-eca7-49c6-a9dd-a6b6b4783a14",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d86f0128-51d4-4284-922c-c17634819345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc5e64c-23e6-440a-860b-9241d144fed7",
        "cursor": {
          "ref": "923951ed-d9cb-4b45-a014-09a846aadcd9",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "fbe90a6d-350c-4b3f-a243-0882cdcca311"
        },
        "item": {
          "id": "9cc5e64c-23e6-440a-860b-9241d144fed7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7a7c0e49-e720-4cfb-b92d-d391312f8986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6686ab0e-738f-403e-a6cb-bec7760289d6",
        "cursor": {
          "ref": "ed51755c-3901-4538-ad9f-606c5c615fc9",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2e868ab4-7246-47ae-b709-f4a38f50d0c1"
        },
        "item": {
          "id": "6686ab0e-738f-403e-a6cb-bec7760289d6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "52ac4dc3-039f-44b1-a666-05b3923efb8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a4f51ed-22a8-4271-aafd-a5bc0e4892ca",
        "cursor": {
          "ref": "edc1bd07-be2a-4578-9f88-c9b9f175d6ca",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1fb8d360-6ab8-467f-ab32-4e93d706bf4e"
        },
        "item": {
          "id": "0a4f51ed-22a8-4271-aafd-a5bc0e4892ca",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ae3b8921-166f-4385-be94-6332ee9276cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe7758db-73a2-45c6-8fd0-71738ca147b9",
        "cursor": {
          "ref": "694f5ca8-d236-4d02-bdb8-e1c6d6cb455a",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "8d625eaa-1ea4-4ecb-882b-7f6eb00bfdb7"
        },
        "item": {
          "id": "fe7758db-73a2-45c6-8fd0-71738ca147b9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c8e2cb68-579b-4696-b53f-0df811b7ccac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc52f7b2-16c7-423f-be0e-b98fd888f017",
        "cursor": {
          "ref": "484c5bb7-21fe-4c7d-b032-4df533ca42c8",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b0417506-54bd-4a65-a4d5-92f6c5f49aee"
        },
        "item": {
          "id": "dc52f7b2-16c7-423f-be0e-b98fd888f017",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c1953dcd-e0db-4821-8a2c-19896d4e633d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64a4e758-1950-4510-a6aa-258b2b0e4753",
        "cursor": {
          "ref": "c7a6b5cb-4e57-4d09-bab8-01492eccf5f2",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c9049c54-32bf-4c2a-be5e-68e3d925c6c6"
        },
        "item": {
          "id": "64a4e758-1950-4510-a6aa-258b2b0e4753",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ccb44411-67cc-4b7b-be98-b17b33465a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a585b5-70e5-4b55-baea-3c099ecea401",
        "cursor": {
          "ref": "777fbd02-5a1b-4095-9880-7071bb433e02",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ef79f29e-4bd9-4c0e-a95e-56921aa95266"
        },
        "item": {
          "id": "f2a585b5-70e5-4b55-baea-3c099ecea401",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e937583e-0c13-4e43-9e60-fee2a1101c55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb555e6-d9b3-4db7-8e17-6dd74952f163",
        "cursor": {
          "ref": "3a636b48-b733-450f-8f90-b5587752bdf1",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8b64b7d8-2f32-4b5b-b962-eac7ed0b87d2"
        },
        "item": {
          "id": "6eb555e6-d9b3-4db7-8e17-6dd74952f163",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "06093633-6706-45b9-adbe-dd5872f49a0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65f6be9c-20b3-4a8f-ad39-b5883c6c6781",
        "cursor": {
          "ref": "ad24ca03-9aae-4691-97ab-01396682230a",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "baf1b668-0de9-4284-b1ef-70670a129ca6"
        },
        "item": {
          "id": "65f6be9c-20b3-4a8f-ad39-b5883c6c6781",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "9c0a56bc-89e8-4d42-b560-a12f3ec9f761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "735c6edf-6ebc-46e1-bf94-9ab1dc11d3c2",
        "cursor": {
          "ref": "16d8fdc6-9e97-4330-885d-fda6527b3385",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1c554240-5e21-406a-b982-a8a185a93510"
        },
        "item": {
          "id": "735c6edf-6ebc-46e1-bf94-9ab1dc11d3c2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e3aa82ca-c4a4-40ca-948b-c595333e7b25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e8a9102-d745-4082-867f-1aec28e07ee4",
        "cursor": {
          "ref": "37ce0f9e-bf25-4e76-81e6-5d6c46a12eee",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "42490f73-212b-4b9a-a133-5926382d3340"
        },
        "item": {
          "id": "7e8a9102-d745-4082-867f-1aec28e07ee4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0b566054-39c1-4bf8-aad4-9276fdb5bdde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace9cd0d-83dc-4ae0-bd72-f5b0e76d9b3c",
        "cursor": {
          "ref": "44976853-2697-450e-84d2-3ae1efee09c7",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b00fe29f-094c-4ee6-9151-4a58d380b327"
        },
        "item": {
          "id": "ace9cd0d-83dc-4ae0-bd72-f5b0e76d9b3c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "30fe6d18-0f77-434a-88e1-4b2e6427c081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bce2756-4391-43e9-aa14-27d490988548",
        "cursor": {
          "ref": "87029474-d9ab-4c52-ba6f-0dae7ffaba50",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "11a2552e-8a95-4c37-b02a-591e6cbee03d"
        },
        "item": {
          "id": "3bce2756-4391-43e9-aa14-27d490988548",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e6258b6b-6797-495a-b957-7e154c465469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b352a3c-de5b-4695-bac7-8149511b68b3",
        "cursor": {
          "ref": "82aa3bf9-6c2d-4d30-88c7-0911ea9c414e",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "70fee35e-ac34-4109-8957-fe34447d8adb"
        },
        "item": {
          "id": "2b352a3c-de5b-4695-bac7-8149511b68b3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6a792a55-acaf-492a-a585-f3153d1462c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d57c3cc-a216-481b-806d-f6dba3044555",
        "cursor": {
          "ref": "f1dc8c58-91f9-40a4-bfe2-fe1d8bf8f9bb",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "40aa2030-c062-4125-8ab1-f2c9fe4b49bd"
        },
        "item": {
          "id": "3d57c3cc-a216-481b-806d-f6dba3044555",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4b232974-c689-4d01-a826-d616b67feab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de6e561b-5c22-4f44-b8c9-0d69d6cbcf0f",
        "cursor": {
          "ref": "2b58573b-1943-4e8a-b902-f0b7d2fd69a1",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6112d91f-809e-4542-90c0-477b4c57cd43"
        },
        "item": {
          "id": "de6e561b-5c22-4f44-b8c9-0d69d6cbcf0f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8ee8419b-0a51-4336-91b1-2c43d23e8516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "463e1c78-0058-4348-88ab-fe1b5d4c5ca4",
        "cursor": {
          "ref": "c955a276-8bcb-4bb3-a182-dcb2748ca7c7",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "60cda082-4de9-4e6b-917a-cd11d418771d"
        },
        "item": {
          "id": "463e1c78-0058-4348-88ab-fe1b5d4c5ca4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7230f9fd-ca24-4675-b2a8-f2e72c5e9c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e3a7d6e-e6bd-4e34-bc71-f751c4f531e0",
        "cursor": {
          "ref": "2133e241-b9bd-41f0-88b0-d94d12fdf436",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "16795726-c290-4a6e-b671-0fba6c207681"
        },
        "item": {
          "id": "6e3a7d6e-e6bd-4e34-bc71-f751c4f531e0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "08161aa7-c907-45f6-a868-4b16abbf725b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "107ec20f-7e9f-475d-a720-5f69bb6ccf06",
        "cursor": {
          "ref": "45bfe914-a95f-491d-95ac-57b7793cf83a",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "52be7be6-4cfd-43c7-9129-7c5405aaee06"
        },
        "item": {
          "id": "107ec20f-7e9f-475d-a720-5f69bb6ccf06",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c4fb15ea-7279-4a9b-8e6b-c6158d705ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3518453b-6430-4a81-b027-e177973a43bf",
        "cursor": {
          "ref": "cd8bd11d-d79a-490a-9c8f-bf0d471d5039",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8d202690-bd55-40f8-a729-b4593331732f"
        },
        "item": {
          "id": "3518453b-6430-4a81-b027-e177973a43bf",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a4bddaab-2724-4466-b749-0d0341d50090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c57c7d-3ed4-40a2-b764-bc697fcb88ed",
        "cursor": {
          "ref": "8e341edd-8d1b-47ad-9055-3791aa889748",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "965040e8-db9a-437a-ab2b-04d7c84d3dd1"
        },
        "item": {
          "id": "31c57c7d-3ed4-40a2-b764-bc697fcb88ed",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "daf9d1c3-f54c-4127-ba56-f99780b7636c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff4e7502-f97b-4d37-8118-f57a081dc58c",
        "cursor": {
          "ref": "69bd9d99-f6a3-4cb8-99ef-254d596c568a",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "bc679fba-0677-4f8c-bcd4-cc2d50607e9e"
        },
        "item": {
          "id": "ff4e7502-f97b-4d37-8118-f57a081dc58c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8a98825a-f0af-4668-90c3-211d1cfaf472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba10200-6c64-4c07-88e0-fa0d63587db6",
        "cursor": {
          "ref": "10b3bf15-e178-4011-960c-4ac3a941f08d",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c682b1fb-46d4-42dc-a4e6-a13fe84cf3b2"
        },
        "item": {
          "id": "aba10200-6c64-4c07-88e0-fa0d63587db6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5db3cef3-d2c2-4463-baa4-b9a07e4c03a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e15d921-9e8c-43c1-aac1-769144f63231",
        "cursor": {
          "ref": "b25455ad-f2ac-4150-99d6-d64891b498b1",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5fbd01c9-30d5-479a-9d85-63d7d60cc0ac"
        },
        "item": {
          "id": "8e15d921-9e8c-43c1-aac1-769144f63231",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "746a1620-95f7-4790-9c6d-de2adb414185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "705bd15b-5310-4054-8979-20f70a858fae",
        "cursor": {
          "ref": "3b4ef10f-e410-4fc5-a2da-416831005ffc",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "37dca788-78f6-4301-82de-053b8de50140"
        },
        "item": {
          "id": "705bd15b-5310-4054-8979-20f70a858fae",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0c2e79a1-217d-4dab-b171-af7584e358e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "632e9795-3ac2-4927-a230-39bcea67d758",
        "cursor": {
          "ref": "83cd2ea6-2944-4fda-bafa-56108fe3d951",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b19778f4-d016-44b8-b925-4af46db3b13b"
        },
        "item": {
          "id": "632e9795-3ac2-4927-a230-39bcea67d758",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "dd3f7b3a-92f5-4d83-8e6b-36ad077e4e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a186c052-ecbd-4a41-9039-ed38964c20a8",
        "cursor": {
          "ref": "204e5254-963b-4131-915e-2c680cc7f17d",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ea9dda4a-230b-4e75-9826-7c0e22fe14b7"
        },
        "item": {
          "id": "a186c052-ecbd-4a41-9039-ed38964c20a8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "882c710b-d20f-43c0-acf5-2d0a66ef8531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03d69747-7387-44ad-b396-4bab220055a6",
        "cursor": {
          "ref": "08fb63fb-5485-41b1-a1d4-00e5bcbe9506",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "40c4f06e-4a40-42c2-8c9d-2124f2830793"
        },
        "item": {
          "id": "03d69747-7387-44ad-b396-4bab220055a6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7576db8e-acaf-4c9a-bd5b-aa54428dff72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "714a0c03-073b-4936-bd0b-fc2b97a9d3e6",
        "cursor": {
          "ref": "9c9c2402-0056-453b-87a0-f0ff96c3e3a7",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "89c76196-e4e5-4a1c-899c-209e55054403"
        },
        "item": {
          "id": "714a0c03-073b-4936-bd0b-fc2b97a9d3e6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "24ff0cc7-a24f-42c2-bd76-dcc772f8dbd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2d0601-7aba-4747-9804-ad3b5fa1c85b",
        "cursor": {
          "ref": "ffceb8e1-e40c-4827-acfc-d8db5d6a00ce",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "89541041-82a9-44bc-a257-cd86f43786c7"
        },
        "item": {
          "id": "5b2d0601-7aba-4747-9804-ad3b5fa1c85b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9a9765c9-c956-4769-8408-82ea66b64942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed08de6-66c7-4f11-be3e-2d69416e5b5a",
        "cursor": {
          "ref": "34d64a02-24ec-4294-a717-ddc654a8a76f",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "faa012ea-6c5e-4178-a619-b488f957feef"
        },
        "item": {
          "id": "eed08de6-66c7-4f11-be3e-2d69416e5b5a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ddfb3c29-370c-41ef-98f2-4ed5eb7cf927",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6bfefac-2210-4825-9c33-fd35335d1bcd",
        "cursor": {
          "ref": "7466b972-1a70-4617-9871-505857e0f905",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "567ab482-4a75-4d57-8b07-5e84a517d475"
        },
        "item": {
          "id": "b6bfefac-2210-4825-9c33-fd35335d1bcd",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "49dca856-b853-4ce1-bf83-4c331eb5d53b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20eb29d8-15dc-488d-a993-2627bb29eb2f",
        "cursor": {
          "ref": "c1b615e5-46b8-4363-b6c9-ea51bcd4f40e",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b049702d-83f8-4244-9d5d-a30322cf9175"
        },
        "item": {
          "id": "20eb29d8-15dc-488d-a993-2627bb29eb2f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d43b9c6c-491d-40d3-a9a5-9d11cebfcde2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e17df629-42c0-4adb-8aa8-d245e6f93c44",
        "cursor": {
          "ref": "4dbf573d-e8b3-463e-b332-6eb152c32449",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6194375b-7360-4a5f-9c93-4dfc633a490f"
        },
        "item": {
          "id": "e17df629-42c0-4adb-8aa8-d245e6f93c44",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c8e99567-260c-4189-8285-30acd67bfcb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b458eaf3-9cab-475d-8772-4ec31b3d324e",
        "cursor": {
          "ref": "6df7691d-28eb-41f4-b56a-2d3e8c3df605",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "65f7e8fe-65e8-4087-86ad-70bae3eed7cc"
        },
        "item": {
          "id": "b458eaf3-9cab-475d-8772-4ec31b3d324e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f6e661b6-29a1-4cea-8ece-975308884294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12901d68-7a84-4fce-8d14-80d6382d878d",
        "cursor": {
          "ref": "7e9cb6f9-ede9-4f74-935b-3cbd8b866abf",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ffae96ed-c6f2-41e9-8b14-f17a923206ea"
        },
        "item": {
          "id": "12901d68-7a84-4fce-8d14-80d6382d878d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "71fc43e9-9aba-4196-8a4b-b31d8ee0e2c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e086833c-47fc-4d54-b612-e3318e1155d3",
        "cursor": {
          "ref": "26dfc339-b06d-4684-aad1-94674964c2a6",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "844d5d01-6caf-4fba-bb4a-99501f4d047f"
        },
        "item": {
          "id": "e086833c-47fc-4d54-b612-e3318e1155d3",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f6dc9f10-c2d2-4086-90b9-6de9bf553e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b15724bf-aed6-4d9b-b40f-ca6610cd7140",
        "cursor": {
          "ref": "f272c1f3-5f20-466d-b514-089669241b99",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4cde1fde-3c0e-4b7c-9017-644f9c5b61f0"
        },
        "item": {
          "id": "b15724bf-aed6-4d9b-b40f-ca6610cd7140",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "85441fba-cc79-4afc-8382-3848c2761a2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e22a34d9-8192-4fde-bdd9-8a95bdb34515",
        "cursor": {
          "ref": "0241f4f4-8a37-4c55-a746-58c6a55accd4",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7154ebf6-e11a-48ec-9af0-c086c2b9240f"
        },
        "item": {
          "id": "e22a34d9-8192-4fde-bdd9-8a95bdb34515",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "bc4b034e-d4d9-4c3f-9ef4-5bfc1b78723a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b966d0ad-2dce-4ce7-af49-a50b727e1c82",
        "cursor": {
          "ref": "c162a3e2-4e8c-44dd-b79c-35e2f622def4",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b07f2e9e-3c0c-4228-bd06-f09bb5f3846d"
        },
        "item": {
          "id": "b966d0ad-2dce-4ce7-af49-a50b727e1c82",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "03a22edd-193a-4b0b-8129-fc64c42d0bde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61187256-e259-4920-a47f-db22932f29ae",
        "cursor": {
          "ref": "dfed4cc5-5e97-42b7-85be-7a9138c2397d",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0974be22-da09-4025-aa9f-e0413c5371e3"
        },
        "item": {
          "id": "61187256-e259-4920-a47f-db22932f29ae",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "bcf6d8f5-a8b6-4deb-b866-14c85a9e725e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c01ed9f-ce37-40b5-8e5f-b48e5b5254f0",
        "cursor": {
          "ref": "b39e469a-9077-423b-b12f-b2e2c3a09e28",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "cb733ba6-9c06-4fea-bafb-06d7c4de4c1a"
        },
        "item": {
          "id": "8c01ed9f-ce37-40b5-8e5f-b48e5b5254f0",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "cda92d6f-b920-473d-9b2b-8b50997ae435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e0b749-5df2-426e-a6f5-2b6d7938819b",
        "cursor": {
          "ref": "cfcba0d3-3fe4-485d-b422-669e87f1e50e",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3f4babfa-cf8b-49e6-b0b9-23261407efe9"
        },
        "item": {
          "id": "76e0b749-5df2-426e-a6f5-2b6d7938819b",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "4807525a-b8d1-4dfa-b5a7-0f631304c3d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e207e1b4-2d31-4e60-8df8-d8eb8f432bcf",
        "cursor": {
          "ref": "969caa6b-cd24-4578-907f-9ad6fbe064d3",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "58da6e21-1879-4f34-a087-aa2f509694e6"
        },
        "item": {
          "id": "e207e1b4-2d31-4e60-8df8-d8eb8f432bcf",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "0030adc3-8385-406f-a721-4c552aa9f493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82bf56f8-c81a-40c4-afce-e4e5b97f43f1",
        "cursor": {
          "ref": "511ea7f6-f3ed-407e-b32e-e53415c83493",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "cd098893-17d9-41ba-a17e-6ca4eb109473"
        },
        "item": {
          "id": "82bf56f8-c81a-40c4-afce-e4e5b97f43f1",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "dec0b4a8-914d-4219-9d64-e453fc8f8dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1bc9af-d19b-453e-9b9e-4ca9afefea7e",
        "cursor": {
          "ref": "0f349c85-3cba-4b15-8e99-69a1956473bd",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "df33b966-b5e5-4e73-8196-652aae391eee"
        },
        "item": {
          "id": "9c1bc9af-d19b-453e-9b9e-4ca9afefea7e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "c71fad5d-8481-4c98-9a39-d4af673a6f5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf4a0cc2-c6f1-4109-8843-846daad4eae6",
        "cursor": {
          "ref": "b6e86f24-714d-4ad7-83d4-9ef7d64706b9",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "966aab0c-67d7-458c-81ca-0d4aec6dbb6b"
        },
        "item": {
          "id": "cf4a0cc2-c6f1-4109-8843-846daad4eae6",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "c8705da8-e1af-46b7-8331-976023906459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d814cd24-a088-41c4-835a-d40955eb1f47",
        "cursor": {
          "ref": "afb68fa2-38bd-4048-a5a1-bd5a0e9c99a5",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "04d501ea-e4ff-47de-9187-cfb9ace7ff88"
        },
        "item": {
          "id": "d814cd24-a088-41c4-835a-d40955eb1f47",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "fcf1c5ec-6275-4442-826a-159bee038a08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08adb9b5-4aca-4021-a010-f1e5972783c2",
        "cursor": {
          "ref": "e41c93dc-a716-4ba7-8fc4-b83597606043",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0e45a176-99bd-41bd-9b53-d54bf2974c8d"
        },
        "item": {
          "id": "08adb9b5-4aca-4021-a010-f1e5972783c2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "fd67f2cb-70f9-4f3e-a113-c3f33ccfd0b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d70d57f0-90a7-4705-9ef6-1a11b72f9913",
        "cursor": {
          "ref": "a45b0c97-97c3-493f-bbfe-e40e2b731035",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "153f8276-504c-4113-b598-42beeb250262"
        },
        "item": {
          "id": "d70d57f0-90a7-4705-9ef6-1a11b72f9913",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "391b4974-3b34-4b98-b9c3-7ab0d607f00e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863dc011-d922-43d4-8226-b137abcd8939",
        "cursor": {
          "ref": "5ec7b2ef-f23a-409d-a988-7053fcf377c9",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "1523b3b3-5c5e-44d7-a651-00a84a8a014d"
        },
        "item": {
          "id": "863dc011-d922-43d4-8226-b137abcd8939",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d394da36-e604-4fa7-96e5-1301d841cce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d5ccd8-2d6b-48cd-9e48-9d5997f9071d",
        "cursor": {
          "ref": "855bd633-03c2-493a-a803-1e2e6ca2f616",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0609e806-aa00-4340-9b14-1a02d47aaf0e"
        },
        "item": {
          "id": "f9d5ccd8-2d6b-48cd-9e48-9d5997f9071d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "20b6c504-daab-434d-9def-063545772312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5cac68f-4be9-4591-8872-736c9f134007",
        "cursor": {
          "ref": "27a9075e-7c9d-4f72-ad6c-6479fb155714",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "0192c05e-8386-4188-b87f-ab2bb7a44fe0"
        },
        "item": {
          "id": "f5cac68f-4be9-4591-8872-736c9f134007",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6bf98a42-08f0-45ea-9dc8-bd583b1ccb57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c00cf18-f6e6-4e3c-9a1e-1bb593815eea",
        "cursor": {
          "ref": "32b555d7-92b2-48db-9c7a-2e2cbec20cc7",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "016ea850-e9a0-4fca-a74c-b0e6dc092e83"
        },
        "item": {
          "id": "1c00cf18-f6e6-4e3c-9a1e-1bb593815eea",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "25953482-1e80-46a5-87a8-3c8a9176c1cd",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "9c06f172-174e-42a0-9230-4c6f976baa63",
        "cursor": {
          "ref": "61f4dfbf-aabb-4d1a-b951-a5660e0f11b7",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8552b030-447b-440a-9068-fdaa97f12fd3"
        },
        "item": {
          "id": "9c06f172-174e-42a0-9230-4c6f976baa63",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "03cdf432-c286-4b1b-b720-d9807608eaa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f87d57b-319d-41ad-b1c2-fde08d9a65e6",
        "cursor": {
          "ref": "88318912-6527-4623-b398-c8aafe0592f0",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "bd5a3b16-3151-4bb2-8423-18d1b6f009dc"
        },
        "item": {
          "id": "6f87d57b-319d-41ad-b1c2-fde08d9a65e6",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "44b7b9a3-5c89-49b9-8003-755cbec2fdff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb07df86-b6a9-4b72-ad58-7c039d99143c",
        "cursor": {
          "ref": "be0426d9-648a-4788-afce-e30d90729c7f",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3e38b6a6-411a-44ed-8214-8a6185b0e914"
        },
        "item": {
          "id": "cb07df86-b6a9-4b72-ad58-7c039d99143c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "9ebbd048-86d0-4d77-b1ca-225af008718d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68fff075-6e9b-4473-8cbb-67a86bcdc51e",
        "cursor": {
          "ref": "8ead99b1-9809-447e-b4b4-8d149aed545c",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ea0d6b83-4022-474b-ae30-fc54eafb4894"
        },
        "item": {
          "id": "68fff075-6e9b-4473-8cbb-67a86bcdc51e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2cd79034-049e-4883-8676-6383670d032a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8391e696-47fa-4828-baf1-a65c6b532f49",
        "cursor": {
          "ref": "f6c8d9fe-8866-4acd-b731-aba1e7477af9",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "165d1ffd-6599-45ef-8b19-1a8ca2c78143"
        },
        "item": {
          "id": "8391e696-47fa-4828-baf1-a65c6b532f49",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5a1f4d8a-0513-47f3-971d-6a4a64c798d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22677c35-6cf1-48c2-8e1f-3440ca5a1b57",
        "cursor": {
          "ref": "95b94d5f-ade5-48c3-9991-7d65444642b8",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a9bf5e55-ccf0-4297-8399-5851a2517dd0"
        },
        "item": {
          "id": "22677c35-6cf1-48c2-8e1f-3440ca5a1b57",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "aa706efc-f38a-48d9-ae1f-7012e1e9f301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03507c7a-cec8-4504-a139-271905db230c",
        "cursor": {
          "ref": "ef559e22-7fa5-4232-8056-882f3e118208",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5f1b1270-2be4-4baa-a160-d05b51eaa7f4"
        },
        "item": {
          "id": "03507c7a-cec8-4504-a139-271905db230c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f35a8ff3-3f25-4913-ba62-8a56f8d60f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd762f7f-6370-422e-97cf-fcce3df93864",
        "cursor": {
          "ref": "e12ffcb1-10e8-4699-9143-32f6939fb5c6",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4e39bef6-bcce-4f45-915f-d8365862b45f"
        },
        "item": {
          "id": "dd762f7f-6370-422e-97cf-fcce3df93864",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "09a1568d-97d0-47ee-a181-d48d1500deda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8df9378-d55e-4049-a19c-8493a6d96450",
        "cursor": {
          "ref": "50304303-486d-43ea-987e-3c248a5ea96c",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5bff8e53-e61f-4735-9fa3-2e76467272d9"
        },
        "item": {
          "id": "b8df9378-d55e-4049-a19c-8493a6d96450",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ae2755da-a483-43db-9f61-9b06ca8a20ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95386ea7-864e-4fa9-a8f1-64e4c6622a1c",
        "cursor": {
          "ref": "b885f23d-d46f-46c3-8d5c-19b5bee0046f",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7e33f4e5-eaa0-4bde-8627-f322db13021a"
        },
        "item": {
          "id": "95386ea7-864e-4fa9-a8f1-64e4c6622a1c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "044931df-e287-4038-9dc1-4504faf625c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef57bd1-5499-4062-a219-25e638f899e8",
        "cursor": {
          "ref": "662e512e-ab49-4b1f-ad3c-0846c0da9fbe",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "cd06f406-9cf6-4cad-871a-b6e80e86ea21"
        },
        "item": {
          "id": "aef57bd1-5499-4062-a219-25e638f899e8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "57957eba-5a8f-4223-86bb-fe4a3cf608dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4d7e2da-7bb9-48e7-8956-5fea749d43e3",
        "cursor": {
          "ref": "17304193-8484-4e8f-99fa-bb1a4e7fe64a",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8c96e1f3-9092-4f0d-9e8f-7a31333f4080"
        },
        "item": {
          "id": "e4d7e2da-7bb9-48e7-8956-5fea749d43e3",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2553c7c9-ebcc-4fcb-aca6-9631a2fcb51a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01cae6cd-83e9-4756-8cfa-3f0a451c89f6",
        "cursor": {
          "ref": "e222c63b-863c-432d-ad39-6ee068751d75",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "59b5bba1-c4df-4109-ac4b-27d2d92494ed"
        },
        "item": {
          "id": "01cae6cd-83e9-4756-8cfa-3f0a451c89f6",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "57034049-333b-4bb8-b0e4-5cba70b12634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f15fa1-7f3f-4322-848a-bcb441c28613",
        "cursor": {
          "ref": "998ea7dd-6f6c-4210-b7ca-ef9eaf160c23",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6156f62f-08b0-4417-9038-4b12b93ef010"
        },
        "item": {
          "id": "94f15fa1-7f3f-4322-848a-bcb441c28613",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d414f255-423f-4a42-bdea-3861eafe4b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16fdc0c-1cec-4491-9b5c-b394ad375456",
        "cursor": {
          "ref": "62616cb1-91b4-48ee-abc9-70a6161da194",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a0e6a001-4238-4c72-9e87-06feb84450a9"
        },
        "item": {
          "id": "f16fdc0c-1cec-4491-9b5c-b394ad375456",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "fcd19e87-bc22-4210-9e55-d9dff6f9fd10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6dc834-fced-49e7-bf57-4716c243b3b9",
        "cursor": {
          "ref": "2fb4bf0d-f7a1-4c1c-99f6-f9c66a1c58ad",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c98dacb8-ff84-4e0e-a8d1-0d724dfd4eab"
        },
        "item": {
          "id": "0a6dc834-fced-49e7-bf57-4716c243b3b9",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0f74629d-252b-4c19-b89e-cc924e8fb817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0828890-9b40-4b3d-b1c2-799da5478555",
        "cursor": {
          "ref": "1dfc6fba-8b21-4b36-a76b-958446e93fef",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e070ca2c-cafa-401d-81d4-0e03b35869c1"
        },
        "item": {
          "id": "c0828890-9b40-4b3d-b1c2-799da5478555",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ec9fc930-cb0b-4ac7-b270-118006b124f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "521c6e76-28de-42b8-9376-668aeab743b2",
        "cursor": {
          "ref": "a3b91d06-3fc7-48dd-a28b-5bbacc6f5595",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "cb2fe6e4-94f2-47b0-9b82-354e84de1e94"
        },
        "item": {
          "id": "521c6e76-28de-42b8-9376-668aeab743b2",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "65f48de2-32b5-4bd3-b6b7-92e58c1be274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73dac712-bcfb-4253-b2e3-7c73d5f6608b",
        "cursor": {
          "ref": "6423eb76-28b6-429e-a4ea-bc5b0345b2fb",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "64945b8a-c536-4b25-a564-ad457a75ba76"
        },
        "item": {
          "id": "73dac712-bcfb-4253-b2e3-7c73d5f6608b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "684428b4-146a-4817-b952-65ee061af4da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1bfde6-9c99-48d3-95bf-0183ee068da6",
        "cursor": {
          "ref": "312a9720-ea34-481b-9019-a0bfbcf79a9b",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6a36c406-51dc-4898-bd75-d90881ec9708"
        },
        "item": {
          "id": "da1bfde6-9c99-48d3-95bf-0183ee068da6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "242ad51b-a725-4182-a483-c907685c8215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f941f0c-64b4-4348-a2a4-6dfe05074abf",
        "cursor": {
          "ref": "10434faf-b775-4fec-92f6-ece4af5ba30b",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "1a9f79b1-51ab-4715-8d7d-a33b55e0273c"
        },
        "item": {
          "id": "7f941f0c-64b4-4348-a2a4-6dfe05074abf",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "eb45429a-7f0a-474a-af47-57ea29ee8975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd371655-c818-4dcd-afea-8106e06f29f1",
        "cursor": {
          "ref": "c8f2f5c5-ab6c-450e-86a3-722b27bd2f4b",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9fa22921-aed7-450b-9707-382ee99ae658"
        },
        "item": {
          "id": "cd371655-c818-4dcd-afea-8106e06f29f1",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "89bef92a-22ee-4ba2-a320-3b70de809ac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "348156b4-5dee-454e-8570-594b7b19f7e3",
        "cursor": {
          "ref": "09b17197-1b63-4ec1-b8a6-1d4d1297ee85",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2aad5f37-3489-4623-87e3-0bdb7fa7d7ef"
        },
        "item": {
          "id": "348156b4-5dee-454e-8570-594b7b19f7e3",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "903bcb61-b287-4710-8ab7-043eab70e9b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6594f8be-8b7e-4eb0-b1db-e782518c457a",
        "cursor": {
          "ref": "de7f3c4f-d882-4096-8241-632bcb38d7ec",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f6c91fd8-56f8-48d0-a60e-1b5f3bad42d6"
        },
        "item": {
          "id": "6594f8be-8b7e-4eb0-b1db-e782518c457a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "06b9ed92-8f6d-4402-9902-670d628b48a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6d15e5-a740-4eac-a7a0-c8b0dd60aff9",
        "cursor": {
          "ref": "b8e5680d-8890-4b33-8b8c-56cf2b44aad9",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "62cfa528-a99e-4312-827a-b93d72264b1e"
        },
        "item": {
          "id": "7d6d15e5-a740-4eac-a7a0-c8b0dd60aff9",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e2530cd6-2047-4685-85f6-3cbfaa8fb429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0eaca79-fafe-4428-9bac-bcfc16f33630",
        "cursor": {
          "ref": "9dd01907-d467-4877-a06e-25035c1f42c2",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b870ca7b-787e-4121-bb4b-767b6e47cef1"
        },
        "item": {
          "id": "b0eaca79-fafe-4428-9bac-bcfc16f33630",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9ddc1da8-55c2-4199-b189-49ca386c7fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "416261ae-c574-4d7c-8a2d-1e16fd6bfaa3",
        "cursor": {
          "ref": "a64fd7b1-9fdd-4e5e-94f5-9a191fa06226",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0f3a4623-a910-4189-95b8-8dc3cbe6293b"
        },
        "item": {
          "id": "416261ae-c574-4d7c-8a2d-1e16fd6bfaa3",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "069f1454-1731-4430-bc22-f2fbcdf1c162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76a8f906-d2f1-4b25-9875-a55b61f53cf8",
        "cursor": {
          "ref": "b62b408a-8478-4853-8001-e7c5d4aeb271",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "94460c7d-d071-4fbf-b48d-f3f4765f32ae"
        },
        "item": {
          "id": "76a8f906-d2f1-4b25-9875-a55b61f53cf8",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "87e158a6-0e64-4baf-b413-d92548edf410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5dabb4-2f40-4e8e-b8e1-eaaa7ce913c1",
        "cursor": {
          "ref": "5bfd3cc0-9dd4-4195-b94f-9f383d4e13a5",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "49653518-1803-4a7c-9fdb-a8dedd8fb06c"
        },
        "item": {
          "id": "eb5dabb4-2f40-4e8e-b8e1-eaaa7ce913c1",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "88edbe26-5b69-47cc-971f-5ca514bf83e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f09ea383-dcae-4df2-a535-ac68b0c87820",
        "cursor": {
          "ref": "102fc11c-04fc-41be-b31f-c405d76d87ff",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f5c4079f-3401-4f54-a08a-ba5cfaad4759"
        },
        "item": {
          "id": "f09ea383-dcae-4df2-a535-ac68b0c87820",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "081246bd-e53b-4c8a-b2de-8248d2cfa61c",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "6ad76afa-1d33-4ad0-96c2-48e3ae4d13a2",
        "cursor": {
          "ref": "fe1f2fac-b3ee-4c0a-85c4-3b3ba282e452",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "26cfb3bd-161c-4a3f-a6f1-a408d9a6c040"
        },
        "item": {
          "id": "6ad76afa-1d33-4ad0-96c2-48e3ae4d13a2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "bb4ed65f-3549-4cae-9979-5a2de8d6c1f2",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "0e839e03-561d-4761-bfc7-7172c8699a4a",
        "cursor": {
          "ref": "8045a52e-38bb-4f95-8927-84dbeb423990",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "699dfe45-abb6-4f24-8cef-840479d588ef"
        },
        "item": {
          "id": "0e839e03-561d-4761-bfc7-7172c8699a4a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c3a7bdbf-44ce-4603-87b1-f8aa7c5b36f4",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "44731912-c854-4cf5-a13e-0662a2c4b7e0",
        "cursor": {
          "ref": "15ad1bc8-a051-4432-86e3-9345829e3ed1",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d51356d4-446f-496c-ad13-ed97d8aa6f71"
        },
        "item": {
          "id": "44731912-c854-4cf5-a13e-0662a2c4b7e0",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f5f06bac-26a8-406c-ae6d-e7f64ec2ae9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9be8f8d-0cbd-45c7-bfb3-4c60d2f0d667",
        "cursor": {
          "ref": "0f38ef6f-7976-4185-be2b-9314188d9887",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0f2121c4-a169-4b0a-b16c-16065c845adf"
        },
        "item": {
          "id": "c9be8f8d-0cbd-45c7-bfb3-4c60d2f0d667",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "af05166c-49cc-4275-a082-09ea87d9644e",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "49ddabc1-39cc-481a-93d3-ff8a4ad2684d",
        "cursor": {
          "ref": "df07298f-4a63-4a20-bd70-d69b45b18dd8",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "983fe350-5086-4288-abd7-76307d2926d3"
        },
        "item": {
          "id": "49ddabc1-39cc-481a-93d3-ff8a4ad2684d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7da3c62b-e3dc-4840-a1dc-3a95edd6347f",
          "status": "OK",
          "code": 200,
          "responseTime": 167,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "5df33ff2-2e39-4ce7-9301-3de241cb390e",
        "cursor": {
          "ref": "2e429dc5-eae9-4b26-934f-3690fb4fad67",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "2b3fcb55-7b60-40ee-811c-7d2dca3f7486"
        },
        "item": {
          "id": "5df33ff2-2e39-4ce7-9301-3de241cb390e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b81e268e-2850-441d-b92d-4e5f20f19a56",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "97b58cc2-443c-4422-b148-32f6b521e4a3",
        "cursor": {
          "ref": "fc2aab6c-e89b-46b2-ac1c-f9ab4e0673c8",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3d8cfab5-6939-4f68-9a64-b5b2b21c5333"
        },
        "item": {
          "id": "97b58cc2-443c-4422-b148-32f6b521e4a3",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "36ae8fa5-584a-4637-9794-c60d264dc763",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "a2c740d5-4f85-4604-afbe-fdda6d4a8770",
        "cursor": {
          "ref": "2ba26f43-564a-4a1a-abc9-1d5132556158",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "53ff23bf-0aa4-420f-b119-edfbdb993cde"
        },
        "item": {
          "id": "a2c740d5-4f85-4604-afbe-fdda6d4a8770",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e4512558-8eb0-4d27-8afc-3c5a7c8faa85",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "c4a1a440-a744-45f1-9af3-e79069e303da",
        "cursor": {
          "ref": "5801abe0-9bda-46ad-9575-e91e4876f029",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0e9f61e1-b928-42b4-b3ac-6c4027bcf45f"
        },
        "item": {
          "id": "c4a1a440-a744-45f1-9af3-e79069e303da",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "6d319965-0a30-4b2d-a712-94dbb58f976d",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "c9040967-464b-403a-b49e-08892c84e2f1",
        "cursor": {
          "ref": "fac7fcae-f624-4d36-9cf8-0aceecece6f5",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e28e6f59-ae89-42a3-bb1a-4ad8d783cade"
        },
        "item": {
          "id": "c9040967-464b-403a-b49e-08892c84e2f1",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3038818f-8abb-4209-9e8b-98980718b8fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909a1360-6f08-443a-9a6b-c473e5e371b3",
        "cursor": {
          "ref": "94195284-a3c3-4e63-83d8-cf4e47836fa2",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1807ac78-555b-4a3d-883b-c119c66c86ce"
        },
        "item": {
          "id": "909a1360-6f08-443a-9a6b-c473e5e371b3",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "09092547-a4ad-487b-b1fe-64f0da42b621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f0e3fc2-50bd-4aef-8126-c6b07cd24999",
        "cursor": {
          "ref": "ab560329-ddd5-4ef2-a202-1de6f21d266d",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ce836972-9c59-4819-9ecf-9c117ae4b9fb"
        },
        "item": {
          "id": "8f0e3fc2-50bd-4aef-8126-c6b07cd24999",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1e80078d-218e-4e15-a29a-8c5b531dd067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7ff114-1ec8-4ac3-8beb-e87c0e1e78aa",
        "cursor": {
          "ref": "779e26d5-b92e-480a-af61-c2f906a92547",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4d731643-8518-4d26-b780-deb11a334541"
        },
        "item": {
          "id": "aa7ff114-1ec8-4ac3-8beb-e87c0e1e78aa",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c429054c-0d22-4353-8ae9-8b2345a5fc39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d300d20e-b549-47e4-a826-33f9dd24d994",
        "cursor": {
          "ref": "30a6ba90-5e54-4b3c-aeaf-126295b7b9ac",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "379c9a3d-578b-48f4-aea1-84eb17f390ce"
        },
        "item": {
          "id": "d300d20e-b549-47e4-a826-33f9dd24d994",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8f8f96bc-f367-4bf9-89d6-4bb6da3a512e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f93436-e1de-4334-94d9-f27afc29c3a7",
        "cursor": {
          "ref": "dd4bd5e0-d9b4-4349-afd6-24b8c7eb33e9",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "3a606f0f-60e9-49eb-b281-33ecac542d39"
        },
        "item": {
          "id": "05f93436-e1de-4334-94d9-f27afc29c3a7",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "013e1ee2-6f9f-41ad-bbe4-081979e49512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e7a681c-1ece-4b56-88ec-d0f5c4719745",
        "cursor": {
          "ref": "95c7665c-8741-4b9f-9e60-00dcab8ae228",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ad5214e4-021a-4f19-adaa-fc551e40499a"
        },
        "item": {
          "id": "0e7a681c-1ece-4b56-88ec-d0f5c4719745",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a8be2903-de36-4e72-b305-659e67fa0bb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ba82a5-74c6-47ae-b274-087ec68f7cab",
        "cursor": {
          "ref": "1fcf5dd6-d930-425e-9448-2561a8ae4f49",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1375af8e-6933-4e60-b847-d78478ecd303"
        },
        "item": {
          "id": "07ba82a5-74c6-47ae-b274-087ec68f7cab",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5a4b482a-157c-4891-97fd-eafba09474fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3fdfc55-1aa7-4837-9af4-9c7454f111d5",
        "cursor": {
          "ref": "0ab683ab-3ed1-42ad-becf-c5593204e0ef",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "873810c6-7aa3-4745-bf1f-be5094427504"
        },
        "item": {
          "id": "a3fdfc55-1aa7-4837-9af4-9c7454f111d5",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b2adce90-e8da-4b04-973a-2d687bbe89b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9273dc45-f141-4bae-ae93-fdc17eb9b0e5",
        "cursor": {
          "ref": "318e47c5-5039-42ed-889c-1195879fdcb4",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "999551dc-ed3a-4e26-aa6e-17aa5b22c7db"
        },
        "item": {
          "id": "9273dc45-f141-4bae-ae93-fdc17eb9b0e5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "924c74ce-ca58-4ed1-9d7f-39e735d84ee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a8cefd-4c1a-4b42-baec-333eb99c822d",
        "cursor": {
          "ref": "23b154fd-6ff8-4887-bb77-62e1f08454fd",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "74ce8690-1682-4417-b405-fc651328066f"
        },
        "item": {
          "id": "91a8cefd-4c1a-4b42-baec-333eb99c822d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a65634f9-497b-4c0e-9043-55540c35afa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef963f3-fd97-4234-b17f-a1dcfb4d3902",
        "cursor": {
          "ref": "37308a55-95ad-4be6-b0cc-7621165500ed",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "196cfc6f-8b8f-4470-a284-57eedaece007"
        },
        "item": {
          "id": "6ef963f3-fd97-4234-b17f-a1dcfb4d3902",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9a856f77-01f0-4f67-a749-fe21c67ce923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e21d6e-9bf8-4ab4-acf5-ff8e196a4ff0",
        "cursor": {
          "ref": "459210ae-72a2-444a-8a7c-17a5ba72853b",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "64afae75-903c-4f0e-baac-cd7c257c33b6"
        },
        "item": {
          "id": "72e21d6e-9bf8-4ab4-acf5-ff8e196a4ff0",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ca44f504-2e93-4c95-a150-5711f2d020b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98446f7-f285-4742-b918-d4f311ef54b6",
        "cursor": {
          "ref": "7cbacb0c-5710-40b1-b7d8-33be31ed80e4",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "247c0bd1-0e09-4b1a-b6e9-9fda4c9a6b66"
        },
        "item": {
          "id": "c98446f7-f285-4742-b918-d4f311ef54b6",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7d58259c-9efd-4dd3-8e44-e1cf0f8b8176",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "5b4350fa-66b0-4a4f-8930-9dbe6e08f02a",
        "cursor": {
          "ref": "b60aab06-3dc1-487f-b710-47d9392d99c1",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "edad87df-6eef-42bf-8e19-b29f6087db36"
        },
        "item": {
          "id": "5b4350fa-66b0-4a4f-8930-9dbe6e08f02a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6684060e-33b6-4316-a305-1923d37b8dfa",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "56024daf-8898-4a59-86e4-ebadf06a1814",
        "cursor": {
          "ref": "bbb76d0f-8c4d-4f6e-928d-fdc42abd33ae",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2b28da2d-032f-4820-a01e-9336e511a6dd"
        },
        "item": {
          "id": "56024daf-8898-4a59-86e4-ebadf06a1814",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fd0804be-484a-4fb9-ad84-3a3839b6b72f",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "6fa8aded-974e-4267-84a6-bba5a7178650",
        "cursor": {
          "ref": "bcb7246a-7d3a-49e2-8cae-933acca8f277",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "238440b7-e29a-4d32-b4d1-48023735c000"
        },
        "item": {
          "id": "6fa8aded-974e-4267-84a6-bba5a7178650",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0cfae627-fbf2-4c03-aeaf-7acc1e415bd2",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "e1948d96-22c2-46ae-ac49-a4148d374791",
        "cursor": {
          "ref": "8e98fc7b-f95c-4363-be4b-bdac9edef5e5",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ed835a11-6b9f-410d-85c9-16f2c41b9a9e"
        },
        "item": {
          "id": "e1948d96-22c2-46ae-ac49-a4148d374791",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "19a9f706-c64d-4fcf-8bb5-455ea974e7fc",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "fa24d378-1672-4765-a9f9-5a0862f9d6ef",
        "cursor": {
          "ref": "fa5dca35-f628-4cfe-aeaa-5ab77ed6ff2d",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "971a32a1-52e8-4fda-9a7f-e8f594044e4c"
        },
        "item": {
          "id": "fa24d378-1672-4765-a9f9-5a0862f9d6ef",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "20c498cc-e071-4222-855e-ef424d956a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a663af57-0ed2-4ec5-b584-bdd55c7d3e54",
        "cursor": {
          "ref": "4acbbdd2-f232-4e1f-8cb8-645e38944f77",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "68465ca4-40d2-4de7-822f-3a8d87b8d930"
        },
        "item": {
          "id": "a663af57-0ed2-4ec5-b584-bdd55c7d3e54",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e60f96b0-880b-409b-b07d-2b2924ba2be3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32421ca4-0cef-47c4-8f65-264956c4cc6a",
        "cursor": {
          "ref": "bf5805c4-b6b8-4701-9d71-71748a60d1f0",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e0c8ecb4-7ae7-4246-90f5-7afac911abea"
        },
        "item": {
          "id": "32421ca4-0cef-47c4-8f65-264956c4cc6a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "018b8654-16ac-4b12-a659-dd5ec4850a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fabb821-3d9c-42c8-acf9-3557d8146887",
        "cursor": {
          "ref": "25bd2d85-7c03-412c-9413-09cc344cb285",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c4dadb50-324a-4de2-a516-5db538ad3c43"
        },
        "item": {
          "id": "1fabb821-3d9c-42c8-acf9-3557d8146887",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f16329ca-f414-4247-be03-2a27a3594e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c86d3e-263a-46a0-bd1a-d97e9233f1a8",
        "cursor": {
          "ref": "0272e591-887c-4f17-a2c7-6fb081c2d1f4",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "432f2cc1-f101-4b1d-b682-3574fcbad2b6"
        },
        "item": {
          "id": "a7c86d3e-263a-46a0-bd1a-d97e9233f1a8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "10dfcadf-d709-4861-a548-f2d4ab3f5852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "752e28cc-d708-454a-9c54-2b759897b956",
        "cursor": {
          "ref": "a455d0cb-f260-4b67-94d4-af3d34bab7a4",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e058f7db-936f-4e60-bbf9-1e44b397182e"
        },
        "item": {
          "id": "752e28cc-d708-454a-9c54-2b759897b956",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2c5bc7b6-d006-4a90-ad66-1ec886cbda91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e54893-4ce3-4db6-88fe-c443d20e64e2",
        "cursor": {
          "ref": "a8ae1dd7-f3ca-43e6-a7f5-5b8c61d68fc0",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2ad0410f-02f6-4948-beb3-bc94c6355b3d"
        },
        "item": {
          "id": "c8e54893-4ce3-4db6-88fe-c443d20e64e2",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "62c50b32-fa72-498b-b912-4bbdcba2d170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43749db-9466-4371-b308-2be5a24c583e",
        "cursor": {
          "ref": "10c9ac2c-925e-48f1-9bb0-df7a43847dbf",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "86c2b5c9-ff46-4dc7-8fa4-d33d16b556b5"
        },
        "item": {
          "id": "e43749db-9466-4371-b308-2be5a24c583e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "45276839-509c-46b6-8fb2-5a6abac7f989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f9ca526-f0ff-4c46-a163-3c07e091e385",
        "cursor": {
          "ref": "de046e2f-ab0b-46eb-b292-db6660c6350c",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e7fda753-5e3d-49e0-ba2e-799137a88386"
        },
        "item": {
          "id": "3f9ca526-f0ff-4c46-a163-3c07e091e385",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0b21bda3-4216-4048-ab08-94e14625d639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "531a1a7f-49b8-4d98-a436-494af43ffe8c",
        "cursor": {
          "ref": "fa714d98-1e41-4d39-a0f3-c7a005984a9a",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "59ed40cb-d70c-444e-a96b-1cd415d235f2"
        },
        "item": {
          "id": "531a1a7f-49b8-4d98-a436-494af43ffe8c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "261d4be9-c8a5-4179-b9fc-54b94f62504a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d67e856b-16f3-4efb-a8ae-3ea2a9b6735b",
        "cursor": {
          "ref": "78d221d6-6af7-4a75-ae07-189718933d8f",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "0cab9442-4213-488d-9399-b584407e25bc"
        },
        "item": {
          "id": "d67e856b-16f3-4efb-a8ae-3ea2a9b6735b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "fbbec817-8598-4e9a-964b-aa65b7bb3e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf8e8f6-a3ad-4010-ad8a-5d56593bcbb6",
        "cursor": {
          "ref": "7097be79-3a17-4346-88c6-4cb4f3b6a9ea",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "1ba7065a-69de-44cd-b659-0c1a4cf16b11"
        },
        "item": {
          "id": "9cf8e8f6-a3ad-4010-ad8a-5d56593bcbb6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1685570d-2171-471b-a0d3-a17c035aae68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e4fd266-3d8d-4849-9b1e-0a57168422e1",
        "cursor": {
          "ref": "89f08f6f-1425-4051-9244-45604a1f9b98",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "c442fd9c-99fe-4a15-b0df-1d614c6ea4f9"
        },
        "item": {
          "id": "7e4fd266-3d8d-4849-9b1e-0a57168422e1",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d6780cd1-0d3d-40fe-8903-871ed166e098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17175f1-aba9-43c4-86b6-6001d06298f9",
        "cursor": {
          "ref": "5ff2ce86-6653-4fde-85c5-c3c7d0509d46",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "a9514249-a4ba-4969-b99f-f72f2088579f"
        },
        "item": {
          "id": "a17175f1-aba9-43c4-86b6-6001d06298f9",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "785e0c65-0b3c-44cf-b83f-f58a238a85da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9ba1a0-675b-4be2-9ca0-b3f1427e0395",
        "cursor": {
          "ref": "add6a3cb-177e-46be-a89f-840c5b572ee0",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "f2359034-8278-477a-a600-db4385716f3a"
        },
        "item": {
          "id": "fc9ba1a0-675b-4be2-9ca0-b3f1427e0395",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "191cff0e-c7e0-4612-b00b-02f56f73d300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9137f256-aac7-443b-913b-3a7884cbc7cb",
        "cursor": {
          "ref": "c080eb8c-0c74-496f-b1de-5c779f63029d",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "1d56d62d-7726-45cd-b957-aeb0ec88bfec"
        },
        "item": {
          "id": "9137f256-aac7-443b-913b-3a7884cbc7cb",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f4415ea6-f248-48a1-8a29-955d7de4d0bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f6d95dc-07eb-4dfd-ae79-acad8d778217",
        "cursor": {
          "ref": "a14ff744-60e9-4832-ab43-3670b4f759a6",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "19a47756-9324-4467-9141-a3ced03fa7e3"
        },
        "item": {
          "id": "9f6d95dc-07eb-4dfd-ae79-acad8d778217",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "ba5d7fe6-3328-4656-92bb-4bd3c0ec358a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4588f7da-da1a-459e-92bb-7080320d5af7",
        "cursor": {
          "ref": "901ade5e-be9d-40c1-bee1-878d57c89bb7",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "500c9219-656b-4e1d-9406-26c2387a0773"
        },
        "item": {
          "id": "4588f7da-da1a-459e-92bb-7080320d5af7",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "aa2018c7-26c9-44cb-96bc-8627f1fab198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e61b75-6d43-416c-990b-bc9e02e5638f",
        "cursor": {
          "ref": "8bc2669f-ccc3-4771-b6c0-aa1ec62cb288",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "9256cca8-0352-4df4-9c1f-b0f703bfcd4c"
        },
        "item": {
          "id": "89e61b75-6d43-416c-990b-bc9e02e5638f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a924aabd-59a2-42b7-a1c8-3c9d3501b2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adec69aa-b07e-4c46-aa3d-604b01d04657",
        "cursor": {
          "ref": "400e2877-5518-424e-8782-3f16d03a8f91",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "6f9b2f0d-0c05-4d7f-bcec-3c551eb41bbd"
        },
        "item": {
          "id": "adec69aa-b07e-4c46-aa3d-604b01d04657",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "68a3e6a6-e934-4120-847f-68227648b517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "107617b3-fe99-418d-9e0e-834037597223",
        "cursor": {
          "ref": "229d4987-0360-4939-9bbe-1a8fff4b44a4",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "1f2dcca7-dffb-4adb-ba52-52ef6586e5ae"
        },
        "item": {
          "id": "107617b3-fe99-418d-9e0e-834037597223",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c21291fd-8296-4e58-b859-86e2b4590da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a5eb8f-4b4a-47de-8058-748ec2c7d0f4",
        "cursor": {
          "ref": "d8d914ae-f871-4685-bb31-a532451858b3",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "bd68ddfe-b131-4a19-afd4-53504cbe662b"
        },
        "item": {
          "id": "d2a5eb8f-4b4a-47de-8058-748ec2c7d0f4",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1a9dd1e3-c03f-4954-b6cd-8b96e0f7a05a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2078d268-d79a-4713-9ab0-0dc5f09b4645",
        "cursor": {
          "ref": "937a6c6a-93d7-4867-8427-43d260483852",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "e7155faa-d470-421c-9c80-66f8eb1a4e58"
        },
        "item": {
          "id": "2078d268-d79a-4713-9ab0-0dc5f09b4645",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2245d895-743f-43a9-8734-00cd224c6aa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aafc00aa-b218-4d31-b813-4946cebb7bfa",
        "cursor": {
          "ref": "57a53a4c-cdf7-4703-a3cf-cb7366f622a0",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "027510e9-913c-4215-a1c5-e0200d3b2474"
        },
        "item": {
          "id": "aafc00aa-b218-4d31-b813-4946cebb7bfa",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ac256a59-cdb1-4a3e-91e1-fda8bb932a60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db45e8c-29f2-46e8-93c1-3ad1c2f3f7a5",
        "cursor": {
          "ref": "ad68b1ad-3cdf-41d3-95a2-693a80c1f6c4",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "bbe069fc-b209-47e9-b9ce-0f28ba3338fd"
        },
        "item": {
          "id": "8db45e8c-29f2-46e8-93c1-3ad1c2f3f7a5",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c7b0cad1-c937-4a9f-93cd-224c9aa3c1bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6312973b-3c5f-49c3-901c-b4179d946928",
        "cursor": {
          "ref": "a10af408-dfdc-4bba-8224-9704ec33e59c",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "1658bfd3-2098-404e-b4e9-f65c4d81beeb"
        },
        "item": {
          "id": "6312973b-3c5f-49c3-901c-b4179d946928",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8389877c-6322-4e88-8006-e3a554c5b71b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a29601ff-46bf-4319-a664-1a7473a8595b",
        "cursor": {
          "ref": "35e70a1d-6375-4b7c-87f6-37f305e50fe2",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "0f954620-111e-44be-8a37-c74f2ac07add"
        },
        "item": {
          "id": "a29601ff-46bf-4319-a664-1a7473a8595b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6726ef84-db33-43f3-bdd0-a77dba8b184c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ff11c2-4dfc-497c-96ab-7e7d996809b9",
        "cursor": {
          "ref": "097e8c2c-6ee4-4aac-ba83-b6983c67d5e4",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "ae156765-996f-4cb2-a1f7-a487f3af49bb"
        },
        "item": {
          "id": "e1ff11c2-4dfc-497c-96ab-7e7d996809b9",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "fef0c071-c4a1-44f3-b892-19263dcaa457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e22e3f6-5b1b-4dde-b18b-17b518156370",
        "cursor": {
          "ref": "790c7001-a086-4e9e-b768-3e0b307dcd55",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "f7e56e94-d759-40ce-9f23-cd4886426b2f"
        },
        "item": {
          "id": "3e22e3f6-5b1b-4dde-b18b-17b518156370",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6d05c454-ea71-47d3-9b9c-240a402409f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d95d45-16ba-41ec-9ff9-3f9cb7a2a1e5",
        "cursor": {
          "ref": "605c6814-a914-4ba7-8db3-37b0ac49c70c",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "e1be6e3e-6e94-472d-aa68-c30da5520f2e"
        },
        "item": {
          "id": "d7d95d45-16ba-41ec-9ff9-3f9cb7a2a1e5",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a48d78c1-bb33-44fa-b316-1a87714c6c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ec050b-a882-432e-936a-1dd34b9db019",
        "cursor": {
          "ref": "b5728913-f703-44d4-90ac-4fb9d15277df",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "c7c43870-fcff-4ee2-b398-7bce7bccff76"
        },
        "item": {
          "id": "67ec050b-a882-432e-936a-1dd34b9db019",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e0d40b8e-3a96-46f9-aa6c-cd1d6d07602c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3272a027-0ee9-4b39-a35e-79b5efa9be73",
        "cursor": {
          "ref": "7c773cdc-acca-4bfb-b2fd-31197081b792",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "3061f793-7659-4065-a7cf-fde3d1d5a3e0"
        },
        "item": {
          "id": "3272a027-0ee9-4b39-a35e-79b5efa9be73",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "78e84413-933e-488e-a7fa-42de01c3ecde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb1776bf-136c-4648-a36b-85873c2cbadd",
        "cursor": {
          "ref": "0151d187-d414-49b2-bf37-f5e9f8533662",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "d5c3d18f-f90f-4f74-a260-4b4b88a032e4"
        },
        "item": {
          "id": "eb1776bf-136c-4648-a36b-85873c2cbadd",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6586d9d2-68d9-4d90-a283-8758083e81bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33943a86-e564-4154-a79a-cdca74b27dc9",
        "cursor": {
          "ref": "3105db42-ed3d-4598-ab2e-e3e147d9eab3",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "b70d9267-2f96-45b9-a49d-64f5bf358596"
        },
        "item": {
          "id": "33943a86-e564-4154-a79a-cdca74b27dc9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7c497c41-5c09-4e0d-bfcc-1c230908e8d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2faeb356-87de-4b2b-80a4-fcd7aa916ac5",
        "cursor": {
          "ref": "b0ac7aa0-b7fe-4dcc-9211-4aa2ae8a5194",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "bd2c0fcd-b614-42f7-97d0-d0dd92e134d5"
        },
        "item": {
          "id": "2faeb356-87de-4b2b-80a4-fcd7aa916ac5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8f9191e0-5c92-4a58-a8e5-2b463014c691",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "632b9188-6dbc-464e-847c-29b4e4f27cfe",
        "cursor": {
          "ref": "ec6bcaff-df50-4cdb-9272-8e4c46d249b1",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "5519f327-b3a4-4181-af4d-cb26d3bc74de"
        },
        "item": {
          "id": "632b9188-6dbc-464e-847c-29b4e4f27cfe",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "40e5285a-9a89-44d0-bc55-3fe64f74f050",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "2295dea4-33c5-4c3e-99ca-b98f4aa07345",
        "cursor": {
          "ref": "af91be13-11fd-49a6-a725-10419366ab4e",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "174c6d88-514d-4db5-9741-e78620b18761"
        },
        "item": {
          "id": "2295dea4-33c5-4c3e-99ca-b98f4aa07345",
          "name": "credentials_verify"
        },
        "response": {
          "id": "68b199d9-23ac-4085-8ba4-3e86421e8de1",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91e5186-3886-4311-b74d-95e8cd0a8c77",
        "cursor": {
          "ref": "9191c63c-3e67-49c8-97b1-daabb9d60072",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "8df1181f-a62d-4278-a5c7-490367ebfabc"
        },
        "item": {
          "id": "b91e5186-3886-4311-b74d-95e8cd0a8c77",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "7071c61d-4688-4617-a0ab-cfb71c969fca",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d266fd9-9fc0-4662-8e8a-0f4a5c6f8b91",
        "cursor": {
          "ref": "218b7272-76da-482d-8426-b888ff085c11",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "999774e1-c7df-4d86-8971-d7905123b598"
        },
        "item": {
          "id": "2d266fd9-9fc0-4662-8e8a-0f4a5c6f8b91",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bc7c6cf9-5e27-47b0-b7b6-74f2f08e9448",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d266fd9-9fc0-4662-8e8a-0f4a5c6f8b91",
        "cursor": {
          "ref": "218b7272-76da-482d-8426-b888ff085c11",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "999774e1-c7df-4d86-8971-d7905123b598"
        },
        "item": {
          "id": "2d266fd9-9fc0-4662-8e8a-0f4a5c6f8b91",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bc7c6cf9-5e27-47b0-b7b6-74f2f08e9448",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e53fc73-44f5-4ce9-b78c-900652782471",
        "cursor": {
          "ref": "b1886dbe-572c-412c-b82d-d99043c54d34",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "5295ba32-66a6-4db5-8ca0-3fa590d55960"
        },
        "item": {
          "id": "4e53fc73-44f5-4ce9-b78c-900652782471",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d47bec19-6dcf-4d0f-acd6-18c0af32aeb2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df9bcbaa-dfe1-4dec-81dc-9b3ad010ec75",
        "cursor": {
          "ref": "2437a938-6aba-4214-b6ff-c0a9b0b053e7",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "d4e5084e-f948-4281-8a21-b72bbab6b308"
        },
        "item": {
          "id": "df9bcbaa-dfe1-4dec-81dc-9b3ad010ec75",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d6e86b3d-6375-402a-85e3-3529d8a8d465",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}