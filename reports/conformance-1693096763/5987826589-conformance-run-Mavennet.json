{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "007cf125-bd7d-400f-bb9d-edd722a7772f",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fde4f7d2-b323-4cbc-bf03-38893d4086fe",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cb8e3de3-ab4d-41fc-87d8-e40496fc5c04",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4ff46600-f4db-437e-901d-24038c3edda3"
                }
              }
            ]
          },
          {
            "id": "7ce4c863-1007-46ee-885c-c058b9a2280e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1f4eb5a1-99fc-436d-a637-bc5abbce20f3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "17ad8ff8-5aa4-4ee9-b9ec-483ac362befa"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ddcc2253-c637-4dbe-8146-c4f980a277d3",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "886b1e67-3395-495d-bf18-cd7273afcaa0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8ea3496b-9aca-4374-a303-c1d934fd919c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ddf4e3a6-83e1-4617-99a7-d2a6bcdefd09",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9ca40348-943f-4388-bc94-89a1ed575421"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9e772f19-8351-4a4c-b8a7-3ff933255207",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7508076a-b70c-4bf0-b3f2-17dd402c36f4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3008afea-a211-46a6-a7e8-4c09302dbf8e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fde7a091-570d-4ddb-aac2-33515f44a377"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8a8663fb-4a78-494c-a1a5-29f6668487d1",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "31581fe1-a86d-4d47-991e-55ccae34c2d1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01c6c6a8-0720-43cc-bc0d-6c2b8f9f1d4e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "62053104-ade6-4d3a-9d70-b3ad78201c73"
            }
          }
        ]
      },
      {
        "id": "7ce33820-53fd-447c-bdb8-834764d3bc39",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "6c9bc43f-aec3-4883-bfa7-c0a658cda211",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c7ff421f-fa8d-45f6-878e-6e877a8306f1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7632ce0c-d058-427e-a344-04e46528b9d8",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4fc5e9-6588-4462-acfd-cd398f6dfc1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd44009c-a21f-4d45-b8a7-351ebf418e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d854ef31-2376-410c-aa60-79284cf7336e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "198875dc-7eac-4f7a-bb48-40f43578f703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2cb841bf-4ba6-43d5-8f1b-8e15077c1399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae064cb1-1f0d-4964-82ab-81163e4bc64d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba04f85e-7fc1-455b-82b2-50643512e91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a3f7566-2ea3-402a-896f-ce0d65c4a699"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7fa369a4-48d9-4471-9a73-308d75b17b42",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6af61e85-1ae6-4337-94f5-d8598e82e5e6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60f2a75-1b86-49d4-bb38-cfb37cf8998c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75016e7a-4fbb-4f47-ad93-5c98095c1d61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd66b79-a288-4473-ad00-44fa2b75e4b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed16d99d-aaba-460c-b59a-4062982d103b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fdb4a01d-dbd1-4bdd-8e98-0ed6d7b71242",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1fdd04f4-1388-4a84-b3fd-da509d31ad99",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbeb7ff2-490d-4551-be20-9dbf38c8c0e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0124583b-9e9c-43e4-91a7-af83a1836c74"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6d625b9f-c800-4331-a47d-5f796882d561",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "b9f0d339-2e1e-4203-82e0-27d8ae7937fe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a704f3a3-2f26-4306-a6b7-db8e14ae2206",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6deb672e-8c8e-4cbc-be95-5b521f84f172"
            }
          }
        ]
      },
      {
        "id": "a5c4fdd1-ee96-42a5-be1f-3e71adf808a0",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "5a91be19-df40-4351-8ea4-5a20a79cec0c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4627b057-f50d-4f9c-a8d5-3fe372dc0c7f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "161020b6-d02c-4b3e-b24b-08e8148c328c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afde6dfb-9b06-4ff1-b734-755c4d9824e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67ee2266-b5f7-4eef-b230-6822af26c183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e748f8-247b-4354-8d9c-3145502010e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf138f75-0759-4223-9cb5-cd93dbcb4929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "602dd3dd-1db2-4a09-b6eb-fd33a717646d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9503971-fae8-4520-80e2-8f1602e059d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ec76646-44c0-426b-8acb-dd991116286c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7eea08-14b6-40e1-934f-ec44397a7dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4600b52-debe-49b8-ab9c-dbcdd808e39c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6603fd3a-04f3-4349-8425-99d725980e0b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "272a8b97-7057-4832-9480-7d5088c7fb27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "701ca720-4ca9-4807-becd-6e47ba229b3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58bba52d-3680-488b-846b-d8086b7df325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7874e923-9db0-45dd-8756-535fd144af98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c6a8738-1152-4a56-92dc-addf9e67fb7e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "489b94a4-591c-4de3-846c-9c4e2771541a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdcfb584-2ce5-43dd-b726-bba643901277"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e755c8-0569-4327-b7f1-2ac8b5372783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff8532fb-1421-4319-8b46-d4bee3a8a449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3834fa8-6fc0-4833-8461-e19e1e650a0b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01495c6c-8bf1-4534-a771-30fb962200b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d79f772e-2bd0-444e-89f7-c8826fbe4a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41245489-504f-47ca-8458-53adf44560f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88930e65-2484-496d-8b76-95fd88bdf59b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14045932-0802-40d8-9512-d2b44661e8d6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "259de69a-b3e6-4a7d-b2d4-75bd0cb8288e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d78ee043-cd33-423c-97b2-4ce945822611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9911d1c3-15d5-4886-99fb-a9e3def96136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78f80353-8196-41f2-8082-573ca6a4bb10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b990d5-e540-47fa-862f-95a60bebc259",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2221c01-fd27-43b3-aaac-7b0ea350acb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "340e6566-a498-43a7-bec0-a7e29b00e37a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c7a693-203d-40a0-bb02-63ddb291efa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "294bf552-8673-458d-b8bc-8a860784d4d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ba3b63-267c-4472-8022-8db007e9e205",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f146a2b3-5107-460b-b584-8a9f87ae39b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5797cb8-e3f0-4852-a429-54e16cda5600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f621a3e-a67d-4b19-b562-aa7986dee960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb7ba6f9-4e05-4203-bc49-d6d2298009d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3e02a2-8b6f-4507-84b4-e58057b72d01",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e38cf55-e5e0-4f3f-b82a-40bca40c84e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "114ad993-ed45-4fde-9916-4fcf9842ba7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f59642-4be5-47b8-8c1c-488c02b8dcad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b1825dc-b3ab-4f3b-903f-22261c38725b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac81a4ad-c1a4-4d97-b240-41905e5e2c5a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b59190-889b-48ad-b72e-0caaf6c79878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "400dec42-4926-47a1-bf4a-eb71995d5eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eff6a10-0fff-400f-aba4-1505075b4a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65e6f6fb-7c4d-41a4-b91b-cd1d252bde8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02318529-755d-469b-998f-f59a0fa351a1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "481341d0-497f-4f77-904e-8be1539c20b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4d516b0-5965-48ad-8677-d7a2f0912e25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d2e8e8-9d7e-4a89-aa07-ae747f370912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "939fcb2b-9a55-439f-8f42-3444f6840355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06dd893c-3456-42d8-8ad9-27496f53a7b4",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d221dd-8b7b-4cc7-a730-7203e126a33b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0e32d78-41d8-4fe7-976a-db354d6cf2bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f9312a-3c11-4240-a4e9-b6fa13f6c5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a4e87d1-3571-45bb-a614-5cb29db31f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dcc2f64-3369-4619-8929-da45553099d7",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1906c0-f609-4b3b-a58a-285520f04de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "058c4cea-e3f0-4c14-83e0-de6987bfdeec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2afee4-b2ed-444e-a489-e801b5528937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61f0b68b-499e-4257-9b20-f39fa5d4deef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54bfccd2-cccc-43e2-b609-fa30d14100fc",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a022c6-b442-4557-b9fd-9a9bbcf7463f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "968b904a-0104-455d-b68b-9a9a2185bb01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb5cbeeb-75e6-4df7-8584-24545d7f5e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68ff662e-fdc5-4dd3-ae0b-d4c422a0f66a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0219b94-48ba-4a44-a41a-f136119352ff",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "203ce41e-a7db-48d8-a9d5-ad88ebc80dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b34e1b06-2dbd-483d-9a13-828110f9ad97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d5b583-5734-447e-85e0-81e11d46a6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ca9ccb6-c724-4124-947a-57f21387195c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa97b37-1f61-4018-b551-41679436638f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5facb28b-b3c6-47d0-b9c0-71e9eff5b0ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e988e84-1d6c-4e1a-9c11-b2bc98244396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9126e1a-1bc4-43a2-9672-b3a239c7afc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17e5c957-cd24-4c66-9d67-9b8726c2b637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88495865-39b4-409f-b3f0-b446e8f29252",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0076e547-71e8-4c4d-8231-3c7710e5ccfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6500d498-22fb-4a2a-b0cf-05f9632cd128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e201a9-92b9-4b30-8169-343505ed361b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51060088-b394-4688-a20f-4723ff26d4c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9fc706-7793-4f83-bdd8-f2556a895e97",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12413d5f-f1ad-4552-a5b9-f615355bd690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddfa85bd-db3d-44f0-b413-d761cd0b7163"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce6bd4e-ab3d-425b-98c8-c14012328bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e637f9ed-55e9-40c7-be13-6a5365e24da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bcf581f-7a7f-4eed-9894-db2e5684fb9a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd2ba8c1-8641-4132-90c8-4aac2123b463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef7504ae-6bee-453d-b06e-bf8078e0c7e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f854e0-38c5-403f-9801-f1b83cc481b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "14419e72-2a2d-4500-8966-419c4af52fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d990928-ca34-4444-8e50-b2d60d66b22f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8255d7-0d80-4e25-a617-47280387787d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7907261-e2e6-44a0-8898-4a0d2085b998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372a71ee-805c-4c83-9ea8-fe06188cd055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b8d4bee-257c-4779-8843-95727ca1de2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ae0e8f-463f-4259-899a-7eff78dbd507",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd8c8b1-c21a-48eb-8129-7b105889714b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8831a92-a171-46bc-9b4a-110e2bd78f9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc4d697-d9ca-4488-b6de-4dc3b5c2cf59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e1bfa8d-f17e-443a-ad98-b8a0b6ee690f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad4734a-77e9-4cd3-9780-c9813d29ec8e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03163bf6-8b4a-4f4c-a761-b1b76073fd70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce73f641-1224-426d-a424-a0105ed64ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b06d300-242b-4a34-81d3-7c3e4bc8257a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "09979586-e7b3-4ed8-9c1d-dc226adecf6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16d0d7d-53ba-48dd-9c6a-b0d7f9ac6a14",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f9c5d7-a76a-4133-8c91-2352355a2e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d81dbba0-d75b-4210-8795-36b305f6a69c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d190173f-c573-4c92-a6bf-c3da9f9dc2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f00986fa-d4a9-450e-82de-f1a514721f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3b4373-0fa2-43a6-91a1-339f3a3faad5",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ef0406-692d-4777-8f21-6810518fa779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b3ec226-7a62-43ae-b452-f71f19db57fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a77c3f2-b658-4556-bee0-b54fbade4ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "83defa7b-4608-490d-ad57-6c5c4562853f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd078428-cf70-4998-8617-b7fe81bfb55a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ffb63ea-af24-47f0-9580-debf3b892290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2999762c-216c-46e6-be74-7ba86057ac9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf2803c-9c3a-4a29-8791-d99976cf551e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee0e1ad0-e36e-417f-984f-7df656107650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e53fbe0d-7a6a-425a-9f1d-94fc8e5af584",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2aad088-f159-40cc-8b70-df478138ddca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad49e2b5-11a4-4cb3-a5d0-487353a99ff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a01f02-9f71-4bc8-9d7f-e630522aa77e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fff89cd-39e9-4c32-ac28-76de5d73878d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae707fc8-20b0-46d7-b46e-4cb3c95fde96",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7bcd280-6dda-4228-b4d8-2e876de41daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a4c202e-45e7-45c4-87df-2ab5fe210c7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b4ab24-9018-43a0-818e-67a466203325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c160c83a-f6b4-4aad-8836-e9a0b8ea6511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7235e7-b80c-4021-93a1-814efb1b99c6",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d14fe1e5-dfca-4594-9d90-98e13b3b1a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6714ebe7-11ed-48ae-92c7-190f9658f646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79dff277-b7f1-468f-8548-406bd21bcca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1439f0f-a959-485e-a18b-f42baff4cc76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709753c4-700d-4146-893e-e427c782d5a7",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02da376b-58aa-4ce5-bd3c-559dcbb615be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebe98d7b-b5de-40e7-97bc-a0d8b6fc09d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83fc8221-7acd-41cb-bc3d-c4d9471ba3be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d08ab411-a453-486e-b642-6c47f4c90688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "943678f5-4812-4d81-81f5-e9228e7cfe05",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee1d75c-8c8a-4da0-acce-9f5ebd7dc388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f630968-273e-4bad-997e-969a69119578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a115100e-1eba-4a44-a52d-e554a1b05c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ea9481d-31d9-4d41-92a8-4e94ad62ea9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d42c85-5ba2-4dbe-8ce2-813d5b558a03",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8ecdca-5011-466e-b22e-2f58b400cc5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "109edb3c-98c2-4f0f-89b4-e136043b950c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88f2abb-4bf4-4027-a1f5-3865443a30a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfc5d15a-4f33-4842-95ae-aa633f2c2e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2992544-fbd8-4286-bb8e-a38ea1222357",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0280cc5c-ceb6-4f8a-80c8-505d18e43720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed138f19-8cd6-4639-94b0-8751df7d719e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dffae1dd-9beb-40fa-a0fb-efa60460ad81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "475bc35d-46d9-475c-afc7-66a8c5e7f126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37059404-9dc0-4028-bb54-ce618fdb13a1",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9d56b5a-4e35-4af7-897e-10f2a1e278fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa5714b9-36a2-4df1-b8f4-9a324aa7b193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1fb30ca-c409-4adf-ae8d-b4eaf1816984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9130d9f3-6171-422f-8360-e51c30719cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440108c2-5086-48ed-8142-5092d7e81528",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a58011c-3786-402a-bb92-4e57647b37f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b834f628-822b-489e-ac1a-d19c4b9b8756"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d54545-d53c-4de7-bb89-23abc752f60d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac3a2ace-36f7-4947-a7d8-9681d8e290e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80be295-9834-428c-b5b9-a7faaba6ca00",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afca744e-3720-43e3-aea9-f6d3270afd68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ceec4a6-0fae-429e-9a1c-9f6ec049c981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4831f71b-30cb-4e0f-a6a2-cfa3cbd0e495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b6a5fe20-ecd0-4aca-895c-75a75f2026d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3a420c-5c5f-491a-93fb-886ce8465ceb",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f223de1-1b81-45ab-939c-15c027318a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f39150b0-f4e6-427d-b5a8-387d1e0be851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852948f0-6794-4790-b111-a07c0a335beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "246b95da-3116-4c73-86e2-d36cda448cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae624f8-52a9-4318-b51e-4d2a9f859f15",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "482d472f-8fee-4a14-aca5-8d35b74ae513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "982a0666-fa49-4e40-8e89-e6ade1b54254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e20be81a-e480-494d-8b33-fec587901d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e4a7357-c121-43e8-9244-a4694368b85f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c6f4a4-6bae-4e58-89a4-04b166d1049e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c50699a-d1ee-4048-b723-73ea0cd8018c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "129f91ac-5f44-4c34-bacf-a93225b2980e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3130a301-3532-4736-ac0c-653cbe5c2863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9f03840-139b-421b-a89d-1dbb3b481064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b13be79-67c2-4248-b502-5cb5883a8510",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da31115e-7cb3-402e-8439-8305944d7022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b84d5aa9-51d2-4494-aaa5-84715f0d65c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "885ecb8e-3402-490d-89b1-2ce54d3919f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4e48e35-00de-4e01-92e8-a168547b362c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6436821d-8e81-47fd-a94f-66ecd0ed0ae1",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a9198f9-4c35-4439-a996-3dd696aa46f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95c63208-dedc-47a1-99a4-f1a95846bf9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c58382-3077-42bd-ba31-5182263eb5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "aba82346-9262-4567-91a5-d13159ed491b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "847f14f5-f72e-4699-9732-85e14a14a224",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6514891b-d30d-4f2a-8ebf-a3f8ab613f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9bccda9-5621-460c-a7c1-8426ea098e5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f319452f-a5b9-4c2a-ad79-35286eac94c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d5c1728-2c4b-4b6d-ae55-1b897cf9560a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec6519e4-f0e5-4cea-9e1c-46e6d5cea5ef",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bcb700a-6b9a-4e27-bf28-8315eb00117f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8742f67-9e9b-412a-9cc1-ec593643436f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2af64e-a42f-47db-a1fa-23b408643b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "9f5c16a5-95ed-4e88-b63e-323bd3783674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f557ec-307d-4f27-baca-a0678db5a0d4",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4a1a41-f47d-4c3d-ac4f-da3f1fca6b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "455be702-022d-480b-954c-e47fdab9db3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c60f0b0-9cf2-4d7a-941e-09ed884704a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "527d9378-a0cd-475e-ae15-26a9b2d78899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b57f7d-fcd3-474b-8e19-95fe2e11d95f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "551b9af1-f3ff-4e46-adde-2dab2fcb5ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b11fc06-9689-48d9-b7bf-8728fd336ca1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36a47de2-bbad-4f07-8563-69f25372d5e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d06858fc-526e-4b45-ac30-89f95b426946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a3e86b-8dc1-41c8-bdba-4d3d6ae6f1b0",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af33fc92-307e-4372-a133-aa1ea1da4096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e947e9c-1e02-4746-9ba2-3df0078aa737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df7c245-b7b2-495f-b9ba-e466baf443d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "08983300-c7e1-48f0-bc10-0441cbf761df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "921e1e1a-4c71-4093-abe8-3b304a7c6f9b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e674f084-fcc3-44ab-a55b-49b03ecaf4de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38081c39-4133-4140-9904-c45d9c304653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "510b2683-a75d-4f23-8079-302d20e5b719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9db7dfcb-453e-4e13-94bb-0bc4901c2487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f60e77-adf8-4f04-af30-a048704db859",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d115b4e-88ba-4ab1-8de8-87c3782ea63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b8dc3cd-6048-4d1b-aa16-c1fecca72e45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1053d910-7815-41b5-a1b2-85174bb2d873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c7c98b3-41a6-4692-8db7-cd7d7b9bae63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b7b4181-70b9-44c0-a589-3ef7173dc25b",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e97e105d-7f5d-4bc1-923a-7dbea54292d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f6576b1-af01-4e73-a829-ec3cb838e571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0221bbac-84a3-4108-af44-0f513ed1fa37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "045aa629-4fda-4c07-bcf2-995fd6e568b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3693609e-3f7a-4b85-a4ad-d7b96f2961a4",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "989b0eb8-b55a-4f8c-baa5-9a18a32c3fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d609914a-78cb-4935-bdae-617e88225664"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3312a390-1feb-4fb7-8dbb-fe9599af3e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "439f6053-2c96-4b30-a429-58c9f2b82704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a35586-63e2-4593-a8c9-7ffd51fe686a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "065e2efb-330c-4905-aaaf-68c867cf2398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94acca14-d901-4c02-8245-33d429bc3933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe95a2d9-46fb-4764-98ef-19187caa3564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "98eb49ab-09a2-4c80-8aa6-4cc1f665e843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902b76f5-075a-482b-bd3e-1fbae3919eef",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa07f4d-266d-44d4-856c-6c80fc515cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "138a0c18-61c2-4df3-aa73-8558f43cf4ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "454e61dd-8a57-4a3c-a9fb-c403d3fc1322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d078ac2-b3fb-4fab-a255-4b127245ed15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "502e87d5-94da-416c-b54e-f671126350bb",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6295367-ac4c-46dd-9e03-fa79bb21ecb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74f3d910-9fcd-4e48-a140-f87429de11c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "056dca34-74ac-4a12-8bc3-a0215ad9794b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "357f05f3-4aad-4c50-a87a-269198615be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75514d7a-ec5f-438b-a029-51d50969e80d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d424a170-7b5e-440c-86d5-1afa5a890ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf999194-3802-4379-85d6-7ddb6034a1fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4a0da4-55b1-4927-bec8-b1c0afde443b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0368e84-487f-4bf3-9cc8-1f38e10990da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d9da89-9535-40ae-9127-e5687ead8cc8",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e716d3-41e1-4a57-b9af-f4160148047b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "091a6baf-9dcb-4100-add8-778ef86c3f6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b24d693-22ba-4195-b5a5-eae3d14f791b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "abdf3cc1-d6f9-42ea-ac7d-d7f30de5b650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b4a20c-0e0c-4a86-9abd-590135405e85",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1fd109-a15a-476f-9762-9fb0f4388c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6672faf0-7a48-4f89-968f-2396543da935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f787d1b3-da29-4cd1-a0f6-e0d620fcdbb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd419371-cc63-4067-9684-9b9d5e98e5cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c675eb4a-b77b-4222-bf1b-db4914d59a62",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a446b2a-bbbc-406a-98eb-be240bf98569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "557c8b09-3c41-452b-b13a-f0b4a15da946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d0eb8f5-e450-4d03-8822-e426f498a091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "41a9ab0f-d007-4f68-94cd-cd9b938a0fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b297898-40d2-4199-bb1a-98c6e92a60af",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baee19c1-74a4-4cdc-a765-d67626fbfc5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "412f18d3-57ce-41af-a971-b374175dc181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f6aaf7-f0c9-48d7-9262-1dae80390d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "be6e646c-b5af-4fd3-9548-83c5367b4fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d70a3840-fbdd-4593-af0e-99f97983f165",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab7afc4-f00c-4675-a105-9f5493f1ea5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dc2b371-5080-4937-9da1-2d8a775c2614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3520aea5-ca32-4496-ad98-c407584b6e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a437efc4-d496-4c47-9955-415c6208dad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22dc235f-1633-4a45-8d95-c75f29cb03d8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03037e3d-2810-4dfd-b128-c683a9ba157a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abc3512b-ed6b-41e9-8683-b88369984cac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04bd482d-943d-46d1-91fe-ba66dbb6909e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5c64080-1fb6-4c05-96c1-66840d1eeee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e195903b-1bd0-4035-9049-5f3fd15f3fe9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78312ec3-6045-49e4-8a9a-1acab94390e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b4edf46-c041-4fa3-a8fb-c2ef8ee7b10e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e951ca-11c1-48e8-a32a-0d5f3a9b86c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ca03822-fd03-4544-9ae3-be0702069d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c1952c-3894-4137-84ab-9557ba431425",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d503dac-bbc9-4d98-b80c-9e8fa3ad5558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72f5d6f7-e970-4e06-a8b5-cb9c622b15b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a281be9-767a-4d4a-b176-661668b0ec3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4255dbd4-99c0-40ac-8787-68a45baf31a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12260dce-5ced-45cf-b140-fb3a07e28b41",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0405e03b-6ff2-449b-a2f5-d465f2540167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c320e013-74a8-46ae-9d05-30902d5517f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616b679e-ad94-45d3-827b-ab06892e62d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "c196138b-0e04-4bdf-8614-4bd19dc7e035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c266e54-e282-4065-9e29-68874b452295",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd00cff-a078-4f7a-b766-2f55486eba3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12f60984-5c93-4968-a999-3e91779104b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c4c833-a7f3-48a1-b9e3-69ba3739d952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9161d47f-a044-4d0e-bb7e-f26937272ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "841e63be-e438-48d7-beaa-e5fb1dca2d99",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e52120a-2380-4b9e-a162-d17c6f435a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d6b1f1-c166-43dc-a895-5480807662bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20af9ee7-dacc-49b3-bf94-ca3c8c4daab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "340fa2b4-fdb8-45fc-ab5d-37bd7e5abb3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96878937-797c-4eb8-a236-77d7e1807e93",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baded3a6-41f6-4da2-a3e1-98e9a20954cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2fa3b26-3f84-4553-93ca-017e83090eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d907dbd-39be-4587-a39a-b9fa13f72a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c86765f4-65b9-4d35-8c48-b34003ba01f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13bfb4fe-ee12-4dbe-ba1c-463f885428f9",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ee77bc-397a-419e-b23d-ba59c997f072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29a6b655-53de-4f62-9a79-19d58e0f1e42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050101b4-a01d-463e-8b7c-4b51a63e93f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07d6b20f-2282-4e14-8564-fcd789246f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e46cb0f-1e02-470b-82bd-d5de3843b788",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c3bb89-1865-459f-86f1-f6dc40af3c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70f56374-e00e-42c7-82ee-da0ffd3f5097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "233ea145-580c-4b62-aea6-c4bbd78b4788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0df66e47-c6ab-48e2-8a5c-cf56048e62c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b6bddb4-568d-4c2a-881c-cfacc8ccef5d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aacb85df-de9b-45ca-983e-408136be774e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13c5d683-2182-4860-8857-dcf58a0d6a46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b7c7d8-50b1-4f80-b5a2-047adeadc2ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e77414c-c877-4f2f-9f10-65f13f784f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba8450b5-5b17-407f-8ce7-28b476298fa4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e9bfc1-6378-4cc4-a3e6-b2aa956c5b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76208653-ab4d-4fff-9e23-f04735bb64f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38388edf-0777-441b-85ae-1040c618e7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4d6e012-98c1-48c6-b893-75c8d1995297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f6d352-b558-463e-8261-03f159665c51",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "086a0202-7544-425c-83d4-970b6f3b6e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58114d80-78c7-4c75-8cc4-200144c85d13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c404042-bd60-486a-a9c2-720f1e296d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb3906c9-e595-49c6-a43c-3778b2a45799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d365f1-aea2-416d-9055-7d84fc3fe53c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fdf48c2-846f-4344-ba86-c146a3caad99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21028d73-0b06-414c-9791-ce14f1ba0f14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a76443-9c1b-416e-af4c-c7dcad4f94fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4162a92-6589-4f39-83a4-cc392bea2c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f7bdf91-fc1a-42de-9354-0df18495c1c3",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b74b566-7961-4815-9563-556672d6fd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a464c85e-f49c-49f4-b1dc-4a2157a9353b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd83074-1f7c-4db8-8518-151cace8f5b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a889bab6-5d75-4995-8907-319165ed0f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ceac5d6-7a15-4761-9bad-2aa54c80bb5b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "513758d3-00fa-4a70-b151-f844ce3a151a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22c6ff55-cb97-44e2-8bd5-428e339dc866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8197c564-960c-445c-8852-49c204a2d5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3c1a5bb-244e-4816-ba4c-d05d8cc10080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d275938-37ea-4f75-9c67-61460f828b6a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6932103-e137-497f-a5c0-0bcc76f80f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64ac0a95-0bab-4833-a49c-b0650cf18192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e582157-0e39-4936-827c-4503630ce46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "621db19e-7180-482a-b76b-ed18df30d869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9814014-5970-46e4-abc4-08e732ec39cf",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f0f2e1-350c-4bed-ad12-1c520e60c100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea60c48d-a4c0-4a42-88b9-c757798c80ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1572c4b3-e146-4da1-96a2-0bcc191608b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "986b484d-e790-49fa-854e-033454e71397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd6512f-ca2c-487e-976e-6f22ac39794e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ea0a02-e994-4993-a742-382cbea5b735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5965ade7-c4a8-4840-8888-ce468a61b757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2602139c-1d3b-45d0-9d68-fd26591196e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a407966b-1616-4265-ad23-53b11d338add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d84d24-88c4-408a-9e37-97b4b6104e6e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d432bbb8-f139-4971-a76c-79f19e402966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cb82af1-5fa7-4473-8fd4-aa5c916c34d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb78254-fedc-49d1-8881-ef04ae7afcbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce39f1fd-da2f-41a6-93ce-534ec1219deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767b09f2-f7c3-4d3c-9b12-3e06590d5632",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91897d73-47e0-49a5-9e52-117d102ce447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58732c95-c76f-4147-a866-e34e6b5cda5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e3aafed-17b7-4705-8f47-b8334d39c0f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "18098da2-c9b5-43c0-be01-dad6352379b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2865bee-cf0a-44cb-8448-5f639e3e2ed7",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af093a2d-6a7a-4fb3-95d4-e1a8076a6367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ad3b6e6-f708-4f29-aec6-e15e4fd025b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142fe1a0-d311-493b-9b56-67323b5ac130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "82b572d8-7b9a-4591-a3cd-462fa56ea2e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b17e48-2ce7-4d40-bbba-ee695e1397d8",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0367c58-9181-4097-854c-f5682402ec52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0493951-b783-4650-84fe-891344486186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e124bc8-bba0-4bec-9c44-081a803125b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7c70b9f6-16f6-4bd1-9642-7df386905f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f966ecc7-f0c9-43cb-a5d2-6186dcb91df0",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf924614-4668-489e-943a-4e498d5f3158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcf83cbe-0a42-4723-ac57-bf629167588a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63de98e-a06a-490f-9878-c89538de6d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c56263a2-c581-402c-9fcc-8371497c6ad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21666fd4-e3fa-484c-b00d-cbf8a9574ebf",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2acfba-ea8e-4c16-9582-8fa1a3285313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3787b88-28f9-44f1-a6db-8da9631986b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8f4344-7337-4b14-abf4-c333193bcde8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ecff8bd-da09-45dc-9a17-38b94c4abb05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df65c71-5e91-407c-9c28-40da0da74c62",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59b385c-6da8-4bc6-ba1f-edd20e58f445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3376a022-c497-4671-9c61-2e5eacc79236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a2850e5-dfcf-41d2-ac80-e4dec29f6a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "44a05b81-d083-4ea9-9f5b-cb44bfa0c492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8845f7c0-23bc-41dc-b019-0758c28868db",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a6795b-b21a-4d9a-b437-ba32d0217732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b822af8f-5c88-42e2-91dc-bf6798ebeabb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142c704f-1dd9-4331-be66-b2f2f5c930d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8ad4b5e-0a90-42fe-ae84-72fc4befa1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "179f3465-713e-421c-bbbb-2f22ec6e4d5c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca3d5e0-7151-4da5-aa4a-775712aeb266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c3036f8-c8c5-4fe4-94ee-878f5048bbc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a25e442-68ea-4c91-86f3-884ca620317f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "be921367-1c4d-48ac-990e-fb2fd09be864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5ab5cd-dba8-4af5-b578-b644984f5b38",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7efb38-0981-43f1-879c-ea250f70238a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10fc4261-ec0c-4f8a-8561-9c5fa0ff4049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde7b0e9-8dc0-45ab-bcbe-de986d0bcd23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9b54ecb-b526-4579-b3a5-b09f1a7e57d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37ea56e-b96a-460e-9ab1-f15982f30e66",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e009dbe-b50d-4578-b442-aaf38359b77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be1ae3c3-a460-4c97-b22e-3405cfdd83d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe31422-4120-466e-a827-79af5e46efc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "911a048a-20fc-4d31-8bf9-2cd369f576a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fde92b9-e479-4011-a510-8858091a55a5",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a01a734-d34f-4177-9328-ad559f7b7b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9559bb6-5365-4cac-98e2-1919686226a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2781a0ce-1a29-475f-88dc-8b39be3124ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b404b0f-1330-4552-83f8-5492cb70ee57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b2c7a23-ceb0-4f55-a2ee-5692ee5f2cd8",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f5b059-551e-4f60-b9d5-51a184606bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b990bd2-c7ea-4c64-95d2-9d7aaae5a87f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20351b2e-5d5b-4916-95a3-c5b7e24814ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6aa70c9b-26af-4686-9c38-b8440ae75bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b42765-fa6c-4f2e-90be-af65bfdc2199",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce55da0f-05ee-4e8f-97cb-38c6eb71fd10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3027866b-a8c9-45e7-b585-44c158ab718e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24461cda-124f-4269-86e9-d79d201d11e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7822c851-3788-4efe-a72c-741d6e0df045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4540ad56-f4ba-4a38-a7e1-f58346a743ab",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a2e81c-6e75-458f-94db-784af3f46e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35f705c9-275a-4c0e-ac32-d9b3d9436e07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9248d0c-f88d-4ecd-99e5-078ae39a884c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f939e5dc-188d-4ca0-bd18-3bfa3c3f524f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5cbc1ca-b82a-4177-85f2-c7ea2f1c3fe8",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6df640e2-f282-4054-833f-77dc75f578e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c301af7b-95e1-482c-8cf4-3753006bfe3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1dc454-f9de-4ead-9f8a-35db9d8fa36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9228a31-5694-468d-9c89-6af14b066784"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fb1276e7-17ea-4133-8876-3a584be29626",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ae336756-c7b2-4b36-a649-1d5230872b1b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3a43b5-b9a9-4085-a66c-b4326771a980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "010c5a76-468b-4eec-8ce0-912cfbb6759b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6566230-0c1a-47e2-9f77-34f1ad2f94b5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7412eee1-9759-4bfc-b0e5-cf585bf3fdc1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1518f5e4-b345-4dcd-b108-976c0ea571b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf346690-c1d2-4701-a7e1-f32ecd623c5a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "577ea745-62a0-4eb8-91b5-4f8e13f6ca28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7dc3c1c8-78ad-4110-b9c3-a7cc13adf507"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2e43cc14-9c54-4184-b749-6f5c94d2ed36",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9c71b8e4-37d8-4d20-a996-34ba4727aeea"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "233f5e91-755f-4c07-90b9-70e0798a4720",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8942f73d-2fda-44af-a49c-95ec0c4aff58"
                }
              }
            ]
          },
          {
            "id": "79775431-f316-45bc-bc67-c3a2d5d3e044",
            "name": "Positive Testing",
            "item": [
              {
                "id": "739216e3-5c48-45f2-98e5-c3908eb2251a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "58d257a4-776c-4fdd-89f6-17ee6a4913e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "877d6f18-35c8-4882-b7d1-25488f6f0206"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6a14181-50f5-4ad8-b8f8-4efde3abf609",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b8189b59-cb4c-4366-b1bf-d722e52cc461"
                    }
                  }
                ]
              },
              {
                "id": "b431327f-99f5-43a5-8bcd-3003f138ac8c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "79a98c68-35c1-48f4-9fb5-88c3d108ece2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0c4988b1-d84a-4a17-81e2-d078234cf1fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f69d4648-3bc1-48fb-ba2b-e1f1946da0ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0d294501-5b62-4119-95a3-5881f5ee7241"
                    }
                  }
                ]
              },
              {
                "id": "1e34d934-434d-4fdd-949f-03e420236740",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2211d35a-e794-44e6-af1f-ca0fbc624f02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e3845dd3-50c0-4b6a-9dd0-389856c5aa13"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da3d03e4-12ea-4c40-806e-fac851b4b607",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "59ada726-030b-4c9d-98e2-c8787c179ea1"
                    }
                  }
                ]
              },
              {
                "id": "e97fcba6-8fa1-472d-9f5f-31e0f2a7d3a7",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00b7ad17-3641-4cf2-8a2e-560319d662f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1aada266-b698-4361-aba6-862ad7cbfbab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e899d0c-cba0-484d-9821-72099d06102a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "deade979-df02-435b-b4d1-cb2945b74819"
                    }
                  }
                ]
              },
              {
                "id": "9d37ba16-15a6-4b4a-8ed6-2b4a197bdcd5",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0dad0033-889e-47fb-8450-e0e2c0558088",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b57b846c-4471-4044-90da-60386dbf40d7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca3a2d20-a16a-40f4-a915-70d333f110ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9c6fe469-3ce0-4498-a89f-585e727e6671"
                    }
                  }
                ]
              },
              {
                "id": "050f7317-695d-4e87-8512-07323959f183",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6d7d1d7-3625-4364-acb1-bfa1708ea17e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4bf06c63-ae89-4cec-85f4-9cb33aa75f66"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cfcd01d-478e-456f-85a0-2c2a35d286bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "495c0db3-5929-47d0-a850-6755c6350327"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2a168ba0-0fc6-4951-9312-c13f20cb3911",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3795b058-13a1-4591-85d5-cfbb6208eb39"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d0039dad-b610-4147-9d1b-55c30accecb1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3c4b28c3-0fc7-4cce-87c5-ca2f200acd0c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba68bd28-62bb-4974-ba31-1b179ad800d0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "4cc241ac-d92e-46a7-8309-27cf8a13a65e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84967a84-99d0-4f69-ba31-cc7b9505f94f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2d7448ad-83be-4cdd-b45b-cdd11ba9786d"
            }
          }
        ]
      },
      {
        "id": "1a2304a8-9b5c-4346-be63-2efd91a0feb4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "efc41bf6-45dc-4198-a9e0-33c31c83916f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a507a637-c717-4b83-93c5-13420bbe3e48",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bec2d480-3ccf-4846-a649-17f5f3938318",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "979096e1-8766-4031-b859-5144fc162fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a781ac9-e1ae-425c-8c87-71aeada09142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3283d2a1-d508-4098-a214-74599293323b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "88fd0bf1-a679-4dd7-8668-551bd13bd2ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0a8301-e5af-42db-8341-f343490e0b5d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d367e36-0766-462a-99c1-046429c1fa05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e2abfbd-25da-4f14-bc73-6d44b5550079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993c051d-5cf8-40b0-b21b-74e5140bb6ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "45b04cb5-f8b3-458e-9af9-a7822be691d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e149b67d-5623-4507-bacd-c16dbc0883e3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e8369a-2eb4-42dc-812f-cb47927c8f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e01620d7-0a65-4631-9baf-e80ec80a9ea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7612247-0448-4b7d-9670-ad7a3b2042bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "36924ce3-f2c7-43b5-a76f-401c30b9fb07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc537196-0d76-48fa-aed8-0fac40349f5c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cca8da3-9f31-4be7-a7ea-5a46d00e389b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5c4d505-e31b-4ab6-bf92-a09c4f5abb40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be94c9a8-1c65-474a-a94c-fd556492b78a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0aeceb7a-b1c7-4c21-addb-1d2ce2ed4dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2ce2c0-f85a-4d25-95e2-5e564855da36",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa236f37-b0c2-421a-90ca-22fb7fe725f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2ac683f-24b2-428b-aecc-05e6ffbe9d76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2409e629-6cb0-4076-a48f-7036d4d5273f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "203597a7-79b5-42a6-bad8-565618d18878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacd6bda-89a2-4bb6-9efd-cc6bb3fad2bd",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82011666-5e97-4f32-ae76-599eae39b2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fe995b4-1a25-4b62-a876-541f9313a2ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "710fc421-c747-4967-83b8-e62946b7278b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c58531a-9443-4a89-aa20-17b5e904dabe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ae98e7-4a78-4273-beab-dd866128eaeb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bea25dc-3272-4d98-b59e-781e1d18713f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19fb846f-3fc0-48e0-8ae1-7ee3622c6dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "334d4fdf-d716-4571-a5b9-05f21eb943fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8c760a1-f9a2-4d6b-be7c-7265edb7e862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7fe9c4c-1d42-47c3-91f8-f03dcd9c77b5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67b10a77-167c-4f9d-ae55-46cc7cbaf14a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76eb5c34-9800-4540-98b6-8e4e2427386d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a75e6945-f6e7-4251-a144-f6ea78b3a81f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f3dc8d3-5408-4349-9bea-c9d57ac73614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e268d939-4d02-4126-9ec3-cbdf330761d3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b4bbaa1-6d1c-4eed-a212-25c35f404ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fad2e05-215c-4998-8516-bb9a0d00812d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc4eded6-6d62-4d35-9fdb-5e23e32e8e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e40dcde3-ff65-44e2-bb8a-13ae8587778b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e11de1-1db9-44dc-b7bd-924a432964f7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05401cc-fea7-467b-af98-005da71708b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff28c6b4-0236-4977-b2be-520b9b2465a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce27905d-c056-48d8-a5b4-8f0d459cb3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e97bb7a-e741-4f2f-8bcf-c4a010a837c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e913ccd-f15f-4083-af30-066e9714249e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "026c9e51-3748-42c5-b0b1-aa6e411561ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1632dcd-e211-4682-afec-139648aa5d6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd96ab95-6767-4f68-8a84-3b3759272564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "aa9b5d81-48f6-4d76-9ea7-21caee6d6a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dfbd10a-3374-4cc3-a4cf-e02030987ddb",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "158d6e94-0ef5-4621-a9cb-a9133e16cb20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c50c23f-eda7-42dd-9304-23cf457d0e9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c1372bf-8b4b-4926-97b5-7ab21f55f977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7372183e-c597-48cb-b878-1b509422de6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340291f0-688a-4e1e-9cc5-c2ff3175252a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d6b675-534d-427c-84ce-3cda52ab68ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d0611af-85cd-472d-a16e-26878de96d04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1111e78b-bf5a-4892-9d0c-0b857c717b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "418c3233-cfb3-4cac-a0c3-1525117a6ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93fbe473-0ed2-4f2f-acd9-90c5fe039d58",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74803f7b-2840-46c4-a183-e68d1860ce4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7746644b-7056-4c2d-98d3-81fb87cf91a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97896fdc-67fc-41f0-a49e-5c3b59d65ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e90f48b-4d5d-4b6a-bc4b-593cd7fe5188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85360120-0471-4c63-8eae-69f923051e5d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "036eabb2-39bf-42a1-af4b-10a3fbd88655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48a3e910-3bdd-42c1-a9e7-4fcb31ea5b65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4047b012-779f-4870-bd25-2d9865c62117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4465b246-a3e9-4377-966c-444c8324dd0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0b13aa9-2df6-4c90-847f-098ec7db6128",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7bd5515-00f5-4be8-a8cd-a50ce13e6b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "316ec574-8784-4bd3-964a-7baff633d84b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b084df-714c-49ac-bdd2-bbc88f7a2e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "461b573d-60bf-4461-a3c8-a2699d869fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "406ad04d-7945-406c-9e0e-8d45b3e2072b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ee0c9f-0d7c-42bf-bf99-c2eed4c8626c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dff9411-30f5-447c-9c57-a5b89f09678d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42afa3b3-ec14-48a3-87a5-3eae841070d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "73fe6623-e6b5-450a-a3dc-8f0e15cad54d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39bf1f49-03a2-4efa-9084-c4a4c8b42090",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9dbad5c-d76d-43ee-a657-ce50342a40b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3373b8b0-e0c3-4dec-9d39-47786d87435b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "904097bc-d41a-4216-8e2e-3c7920b24e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "28501b06-13b3-46d9-9a3a-3a3081f8598f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "712a64f3-9650-4475-b677-420a21f59f68",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4008ed2-5414-49b9-86da-8556544fa3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1586ef7-8dfd-4ef3-a993-41af6b26e12e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2972b8fe-ea12-42fd-ac97-7357149abfa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "005d2ab4-b475-479d-9112-b51e466443a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ec1697-b550-4629-9e23-c82b618b804e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2264020c-e6ad-44f3-abb8-dbdc4735ae4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61b02587-0ec0-4f83-ba00-bc0f3d3f2919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9167390-adef-471d-b2a2-6ba72ea119ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8e6a4e5-1139-4112-9b9f-c4501393a005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a8f3bab-d3a8-44d6-823d-0a26ba5f0685",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2279d34f-dd7a-44da-aa9c-dd3ec9e72c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb1e34ba-99a0-4662-bbc5-af1144d639a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f2eaae8-9657-495c-9f17-1da13b2998d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1319c4d-f691-453b-b5db-6c3da920ff16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687fb10d-f5c1-4491-bac2-b7c00b2f06b7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51950908-512d-458c-a584-dfed376767c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57a8e36f-b12a-42b8-b7e1-cc25d31c9b13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f87bd6-fa77-49cc-a40a-6d6a0d29d316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5eb1086-0dd5-46ea-9249-19a89a3324d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd4ffa43-7ea3-413f-bb7e-d8a196dc1677",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d065d503-0a5c-40e1-8f4a-2fd4019ffc8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9b96ff1-80bd-4239-8f4f-271966d23a0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf09e3a4-55a6-425a-bced-e666b69d236f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f068ffef-a640-4993-93e8-f2410efa8b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc2bcf5-f759-4920-b9fe-18ae94a7c44f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "179cc530-a44d-433b-bb37-bb99e078fa7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad907418-e824-47a2-9847-56e8f9dda9c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24688b45-171a-4bb7-8c6e-aaa5b1e05ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30b6a813-34ed-4300-afc3-91fdb64b2077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a755b0cf-b29c-4e32-a93d-7103f991b840",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d232f5-9dd0-4a28-85ac-39051dcb03d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78ed5cdb-2722-4e17-868c-e4fee960d770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab696371-f6b9-41ca-a71f-589ad7b06a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d1644ea-c0a4-47f7-9bd3-ebb6713daf21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867563ab-170a-4a47-ac2c-2a0541a913ac",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1afc25-463e-4dd9-9590-c2614156410f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36f91944-4b65-46de-b726-7f1c67ff4171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09811a8-8657-463d-88c4-1cac497f5350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4bd3c6b-7b7f-493e-a610-e661fcabab4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47aca74d-7b5a-4215-9276-63212c85825e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b69d54a-a07a-48c3-9fcd-53e89475c37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a474d8cc-83fe-4797-9ed7-9e530a5a4135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ceae0f-c992-4985-aff7-45bde31586ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cba1eba-8d6a-4f76-964c-1f8a35925f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c80959-9916-4bc3-89d8-423bf0bad1ec",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf06e53-e9f3-4a42-9b6a-773e128298f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18295a5e-88cb-436d-91de-acba39a0a8cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "843d2df8-ac81-4c11-8d71-4503795f4d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc30ef5b-b2db-4aa2-ab6a-8efc1fc48e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ed5e7a-828a-420c-885d-f78568ea5093",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6708be4e-71eb-4b66-ac81-09299451654b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00134679-7288-4218-b6f8-9fa98a3d0cc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65eb651-ae62-4ca4-be1b-a51fe59e3d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94bd6ddf-5168-4139-8784-56e6dfc23cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e81505e-8456-4527-bca6-91e31e2ea27e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "353380d4-c15b-4f5a-942d-63a4263e7a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b65551cb-c822-474b-a56c-d04d97b267f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f5a7cd-a343-44f0-a48e-00601acb2949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41068203-ac89-45aa-b3c0-3720de64ca2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5faa98f-6366-4b28-ac2c-29f3b0741d59",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b944249-3f78-4a16-ba57-1fe61b8afd88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3764166-4f1d-4dfe-841b-e9e2dbcb1242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a259f1bf-e66c-48fc-885b-e1fff2996221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06b09a58-e21e-439f-931f-6b9e77e201de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ec3da2-b026-45c9-bb56-538f46864341",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66fb1d6-d8f4-4975-a5d1-9a7a74ec9da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41bf1099-2ea0-4b93-b4a5-3c10f2e46591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97489f1-6f8e-43ce-84e1-ab7231ad3415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9fe125f-822f-41be-aea6-094c81829260"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7841dbfb-234e-4140-bd86-bf1c406bbcf4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2dcc1964-1322-4e0c-84cf-0d84c7b380e1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29295dba-e9d1-4c14-857d-55c68d197130",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e12bfad5-751e-4112-b75b-7d08ed42c5fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be53cac-a6fe-4185-ac0e-3fc030a97157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9da2674-9f13-4a1f-93b4-a9b83189ee69"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76f43ef4-6983-4be9-a601-dd95f4b5a977",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1bc16cc7-8b8d-49b1-9c11-6a45875aac90"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "17d66fa3-9c6e-4c6d-b6fb-f74ca71f9384",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3172a42d-c183-44ba-8ebc-d7009853840e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22602c13-282f-4459-8184-a427a9668cdc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9ca1fefd-85ee-486f-9f90-83b42b8eb3f2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "141aafeb-b040-46f2-91ad-50c46df63f23",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "01d995d5-32d7-46a7-9fba-c7e266e6012b"
            }
          }
        ]
      },
      {
        "id": "63e81348-e623-421e-a7f4-57c144736707",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "8b2d8357-17e2-450d-8668-f3afc58c2b70",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7afdf66d-abaf-4835-8a6d-b7a1a5f48b21",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b609b16f-388a-4774-8de2-4b8e55cab1cd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3faa2e90-b428-4543-8c0e-cf9d2eb89b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a5a4675-8f3d-4623-9037-df3787183eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "536910c6-c707-4b45-b774-d4228820e6e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bf053ce-75ec-40a9-b0d1-db5331ea32d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25aade68-abf7-404a-8e15-b5335e443ee4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4049959-d057-4593-aa8e-7e4f160b2b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d50e3f5-03d0-4dca-a5f7-06117add61b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464e4b32-86f9-4abf-8c0c-01e51b94b52d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e595c7e0-48d7-48cf-90dd-f1823b8a9c28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376c924c-c95a-432a-b525-2357a4d9eb3e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96089578-1784-4670-85be-73a913a2763e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1728b1dc-67d4-4276-a301-d883350296cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "576cfe98-f31d-4308-8be4-d95aabd66861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc56e8f9-9e71-48bf-bf27-76b636297fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd928ad3-ba0b-4dae-bb86-c043caa1fb56",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a9cdeb-3766-4504-a535-690f9254bb7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f32b7408-b8f2-4b61-a128-eda257eef955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3f48b1-2db9-4ebc-9713-74cd1320a699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13b1cc36-596f-4a85-a8dc-1b2faa3dbbba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d1c33b-7db1-4e42-bea5-bf3667380dd9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82164b1-66f7-4e8c-bbec-d80f35811750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c22b03e6-6b3a-4923-94d0-9579220e0141"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923f5bd3-949f-4dc0-bbbd-211d24af610e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c967ac6-c4bc-4133-a842-3b21d1412fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1458ce9d-103d-41bc-9ef0-5efe761f30ac",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b3f3e46-6692-48de-bb9d-736ec5234650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23d6c147-0dde-44f7-80eb-9f1a225e19b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba579f33-3769-43e3-b3e5-bf585dbd72ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f61d397d-039e-4751-90bd-25ea0697e0c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7620a2-8bf4-416b-849d-25bbe0c43b78",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d80b643-2a48-4f31-8a52-ee4848a18453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4daaa685-78fe-4ae0-9476-a1c6dd7c9eef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69911be1-d284-4e2a-a6f1-f00ec7a5dc08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3384248-7cc4-4c17-8732-e81bfe6d52b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb44172b-8f2e-4dfa-b13d-ee6e1a120864",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2bfc09-a1b5-4fc9-a6ff-bf5ae4a31eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22fc74ab-faac-4098-b408-2a86e1ee652d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d3e298-9802-4604-b7d2-06e73a51d880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2af5159b-e9ea-4323-bc97-7c819ed736b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6629c6c6-4ccb-4b6a-bc8d-00ec27622687",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9390f0-5372-419f-986a-f2cc2780507b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa02e9fe-033d-4489-aec5-1b1759cdc8b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4338d85-bdbe-42f3-82a9-30567c9535ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d290bd4c-fdbc-4c8c-849b-b7e1c5c27304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1123de3c-e796-4495-8dc4-27093d9e68b5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca7d281a-e982-4e89-8a70-5d1acc41b776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cbee5b6-0aaf-408e-8ddb-854ca11c7847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e18672aa-35b3-40bf-88ea-f594aac8f47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "601bb68a-f311-4b71-abad-ffb9dbd27f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac2ed8f5-8e83-44dc-8ad5-4d880576bc3e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37e0d50-4649-486e-a9f0-e83c96fff67f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00de0083-7568-4919-802d-1dfaf1faea4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db543a7-a8f3-4f7c-b171-955b316bad34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1b513595-3e47-43af-a927-fa8a6aeb87c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60011843-e0e6-4029-a80f-b37108b0188a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3bf86cb-efcb-4644-9325-92a7dc68b669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff95cc5-8d16-45cf-a09a-ee6f82cafc1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7e25a0-bff9-4900-b716-650c61a5a478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "74694ed4-557e-4824-a1ac-0f8a6fb5aa43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2438367e-7f4b-4d56-b7bd-3e74d5fc8ca3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edba891c-6fdb-4a46-a7ee-a6e474ea4402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0706c0cf-19bd-4994-90d6-579ee5cff7b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9c0659-302c-4cb7-9305-2dad3b5b5b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "56cb022e-4c8b-4219-bd88-592480a479d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1768f3d2-53c8-42db-bcc8-c8040aeb2100",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b55e6d96-ed05-4606-be0d-440c971e98c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04fa4cc5-b1f8-488e-a0d4-675cec4ecbe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa712eb7-2f7d-40ab-b49f-fcc52a5031a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "51613898-a13f-4f72-9459-adc1b4bdd0b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e09f251-aa23-465f-a750-c69525652118",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad59d447-ab1b-434f-988a-c80fe0982c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2527628b-5071-4c85-b6dd-abc9fdcf5635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a8b73a0-af55-42fd-96fe-49876833c0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0117f28-4d27-4b17-a888-749e9b75272a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c91cf8-84f4-4730-8944-1a032def5927",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e576045b-89f0-44c3-860a-d569f1e0f552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ff572f4-743f-4683-9ae3-2f4a69113c31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4e4f863-92fd-4173-aaca-ac718ca0d4a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bf8f3a9-06c3-4a14-80d7-4c52095f02e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c86fa417-d546-40a2-95a2-a8aea601447a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e3a655-c88d-4908-91b5-e709beaff70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4287296-d97c-4284-9149-53d62d54ccd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ea8888-2e92-48f5-ba75-11be0359e99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4eae0a5-c728-4e79-9bd8-5c8a8bd179ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9feab872-739d-4bed-8961-822cca3d1dfd",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6fbf2e0-752a-4e5c-8f81-8403d2022fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13441062-f3a6-4e52-a719-20f6d727d7d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b8b530e-1a09-45b1-b63f-e6d9ce23796e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ef36d9e-92aa-47e0-83d9-56c40835ad89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b4db62-06ce-4162-b972-c240b6d2ddd5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc25292-5d0a-4642-b9ae-e64cccc7f0da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e0904c4-9861-48ea-9a01-85882baa63be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f580f5f-fd0b-48d0-ab2e-cc82881aa089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d6e20f5-7a4b-414d-8d45-f0aed88732df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d0e2ed-a02b-4da9-b478-cda47529d89a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2710318f-0fe9-4ca1-b571-c1ac95fd46a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c03a721-919f-4655-b080-1c68bda0834c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820ce140-e5a9-440c-98c9-60fb20e5ad47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ab1d7a9-6326-4561-b000-de1f0530445e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a015f30b-72cf-4be6-99e6-a311dcafe3f6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50049497-8d2a-4f77-9cc4-47520ecdda1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fae9c8b-6440-4fb3-8748-3deaec587738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db59d160-4d47-4c65-a303-74cb98aa2d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f2d4bd9-95e3-49cf-bb05-5833b4030324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91363cd9-f0e7-46dc-b05f-3a995cde42f5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8086463-ac15-4c17-9e2f-2022834c2a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9066beed-cbe6-4838-b89c-93724d6c26e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578b4e1e-1d38-47a7-817d-7624a3684a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2a9230d-42d0-4b90-aaec-b628aa59d5a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c0d683-684d-4a8d-a9bd-2a9f50d9d0e6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3817f38f-3f94-4bac-ac0a-58924fcfa603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d92e250-fe75-4596-8829-ba468ab3c47c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aaed93f-53d7-49f3-9fee-636e6986d040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d2b222e-5112-4571-9440-ceb4eec62093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530a23b2-1f54-4409-8ba3-1fb0bd0a547a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0323c4f5-7e65-41f0-b2e2-f7e33caacbff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cda2a81d-4b33-4ade-81fb-5f3f9d6bbbb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9cf93e-547f-40bf-864d-9e058f88ad8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58e0ac50-e2c4-44fb-978b-c1d8c45fcc9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed9b1c0-a5b5-43a3-80f3-43f68dc1117e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "319b244c-8c34-4006-91f9-cafa0f2ff76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2f5bef8-c538-4885-b1b2-c90ff585091d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac909b0-7345-4963-a11f-b34d49914e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46b4b533-c8c1-4ed8-9875-3e4b7c4b53f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6297840-47f2-481e-86fc-af4a830ca402",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ee3d8a-1423-4ce3-b463-00caf386e7ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c2b506c-c3b2-4c36-a0ea-2b532ebfbcc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97309995-4997-410e-9713-35829b5e6a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4e7594a-6977-4571-a02b-1232150a451b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f09e913e-7872-4fda-9c4d-4932d3b994b7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec4e6eb0-8f93-46b7-bf83-0a23e7f46692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3df4256d-7919-4cd9-aa3a-d72ce67f4883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7903ed47-b240-427d-b8a7-437f1f8ea786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5e4ed11-8c82-45d4-a3f9-7aeff38e36ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea31570-5dbb-4b23-9d96-67797ea1068b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68d4993-4185-487f-afc7-f5d9ddaf7ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ccbcf3d-9adc-44d1-a22e-df13f29a29a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a107e17-7129-416c-a3ac-84c18ad47318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16fb7dce-59e2-49cd-97eb-395ee0fda8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c0165f-2c0a-43fa-8906-563fd730769a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66498d8-be01-464a-b11e-d8cbce932a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed8a7d5b-b0ed-4577-95e8-dcc019a859b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd606563-7c5c-4957-8bf4-877e4e1c1b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42ce901a-eab3-4f22-990c-09cb1ba6081a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0952288-6a8b-4c4f-9c0f-838096627113",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90121bf6-eb8c-4410-a36a-cbda5670e642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87b2c840-667a-455f-94bf-168132ae0270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fba7acc-2c92-4644-a3e5-a3bfbb52e23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ad2747a-c2f2-46de-b240-74afa6ab6d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee4190a8-63a6-4f55-9205-3c38322b3b06",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c37e6a-8cdd-47fc-8f0f-a874074d19ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "670d93b9-d789-41ec-a1dd-cae768355118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de8dd121-0b75-48cb-a699-da1e2f120c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b026bd2-bc12-45bf-9bc7-b68eae61d7ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70410aa8-ab7d-4634-afbc-d31faa0ac48d",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdbf1653-d05c-4f05-87da-07427a2dde83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a578638-1607-487a-a877-d73ad38c3a87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "588a647c-a2d0-460f-854d-8ca33bb54e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ac99e24-3ef3-4b37-8479-4f89ec69bacf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50bc8689-aabd-4762-aa6a-4c569b8efbff",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d475681a-755b-4988-aeb8-3da4585fef4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaf26c02-ab7c-4b6c-906f-acf8676886e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b346ba7c-8a3e-42ae-8955-489f5c0fb092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b27c2dd3-9284-4d29-99e0-cc9ada6a5b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2835b2f8-8ac6-4bc5-acde-3a785824f2d6",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d92d564-1d1a-4e26-a600-12f5ac962d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90c360dd-36ed-4dda-b9fd-9caa081cc9cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4e7735-341e-4e0e-af9c-0a7df746b98e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73c2f8fe-99e8-410e-b073-c8a427288605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9f9aa6-9512-4066-8c1e-ed787467a0bd",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3fc564-f7e5-4dd6-9b78-727fe818641e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8cbbd84-bdcc-4381-87e8-7bfeefa647e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "561c3423-343f-469f-8a6e-1fedf5c81b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "580d07fb-78ae-45e8-a6d5-975da350932d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf06db0-2b5d-441c-8c4b-a0931c2d013c",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ffaed1-01ca-4004-9b2d-0175d923e82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a2cdb09-f6c6-4254-a506-ad296fca1800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee22dc7-276e-45ce-b566-0c95a5278684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56550a5e-af52-4849-9d47-b0743419aec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11bbac3-35e9-4e2b-9128-9bea7d76e724",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff2bb8c-7751-4664-a688-a4f11ecbc15e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97a035d3-3414-46f9-8cc3-2b6070f95bc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd03c82e-6def-496f-8f8b-d2ec839dcd1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57f272c6-aacf-4043-b18c-45576293b780"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d4d76704-024b-4dd2-a1c6-7832bb191437",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b26aa6a5-76d8-4cc5-b79b-7d5b13b924fa",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7187e46c-44bb-4cbb-8ff1-61f4b73e3a89",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "df903374-2eaf-41f0-afad-1120284413b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c7450a-f6b5-4622-a411-20abde6a182e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3784b99e-487a-42bb-8cf6-95103ef16725"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "acbc8f49-c43c-422e-a18b-98d421dd3a16",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3c1c755-3b74-4fa0-9d31-85a04d3718fa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "22bd7c48-a318-4285-b2c0-6a0477b75251",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6217f3d-2d14-4ded-b2f1-124d6dae5f57"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "208cae70-0c92-4224-8267-40d12a8331c0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d3f43e78-418b-4fc1-bd6c-2a241a949710"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "12eddd6c-e07e-4941-902b-de2f94e0b6da",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "764ccda2-3fa3-4c00-93cc-001cb2d1a923"
            }
          }
        ]
      },
      {
        "id": "fc42ba55-f03c-4bd8-90bd-a1dcd155863d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e4469b5e-8deb-4a13-ba6f-593bbcf1232e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "abd74d1a-b622-4d6e-add2-8cf0ec21a724",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ab6d9157-1e73-46ef-9b52-392728c71913",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2873798e-924d-418f-abe0-3089c75ec1b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96a392c2-7326-4ab4-b5ee-cb1400effd51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00ef521-c8bd-44c9-b9fa-42bbc31fa87d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3838ba-c465-4400-aaf1-93e5a4c978f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0671789d-ca88-4b47-807f-47337cb4b24b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd572a74-5367-40fc-ba46-81be5b3fbd6c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ca0441-2935-44a1-8480-a1789483d447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfdb0923-863e-4842-a72e-d2f7a4e2ace1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be76a1d-b927-40bf-bbb3-4bab42b30b0b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0e2314e-7b03-4314-b7c7-7ba52354e222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91744c6c-6392-4564-b899-e6bfdfd303e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c20171e4-7154-4191-b7c1-1e55beb750c1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce54b900-426a-4666-a779-2d8be50b12c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb186259-1179-42e2-80ad-a97145039499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "146bf5e7-c785-4bc0-9c32-0249fdb7fd4c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f2e305-d759-4a07-b8cf-5a7b037bf43a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28be20c4-8c48-44ca-a17c-f5870a0dfcbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab5d861-10e3-45d9-bc97-4be42fe9a99b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8941296d-305b-45f4-87ca-a57637d1c487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bd875b8-afff-44d3-8dfe-29335103bd66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "408d09ee-ec21-4788-9b1d-5f8047a764e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3258212-e312-4a75-b47c-81edabc21360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da838d2d-ba7e-46ee-a798-4ebbf8053619",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d683269e-7454-4e10-9a56-626e0a66c572",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "229f48f9-b923-40a3-8098-6af4d41db89e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d77c3df-ca5b-4757-af23-a10762f74175",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0110393-d7e8-436d-85c1-6ac1ba63c77f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52ef575-5ab9-4fab-8d77-f0c949524f3b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e674c3-394f-4d97-a0dd-dd2d098f9bfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdd1bdd6-906a-41cf-b844-5029dc8fcd54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99547cd7-f3c8-4c4e-99f0-c8c94bc55350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "366a9db6-14fd-49f8-bbec-cf199f9f337c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72400e19-1936-492e-8f41-02c87f88d4c1",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e460f2db-f33a-4978-a691-158d1d17fe51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c66773b-7087-4b8e-b949-9f3469c1f355"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c83c26-01d9-42bc-a437-8dbaafb805e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1750f99-7a25-4a25-9822-2fca4aea20b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55dfa25-6412-449b-966d-ae5a4e3a19a2",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c74ca8-40b5-4670-a3c9-45c62c0b6ed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa4aafde-9dfe-4fce-bf3e-e383a179ef98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e051db-5a68-4fe1-9afd-5e09504a55e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09756598-b69c-4df7-a019-5ad947bd295b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7169f5e7-c867-4232-aa78-68557f79141e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8cbfd38-0f8f-49fc-a702-7caaf9a1393d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62fc6716-3d2e-42a1-9e26-065843fffa7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70164aea-dfbb-4604-ba61-80572b24f302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1017317-cdc9-42f1-815d-0f0c6b9d3b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a559cfe2-bd8d-47dd-a00d-8996c2f0c84c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1252e72-1b7e-4136-86c5-77d9847868d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2eb2d976-a01e-4e49-a608-aede6ac38b3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4016326-ec07-4c46-85f3-d2723fdaa734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cf738d0-f7c0-4f36-adcb-4fbd0e42ae8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1a91a97-cf7e-434a-a127-cceea186a032",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226a7a18-ac49-4d56-afeb-8e6c9dbc6d16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50e86a54-820f-497c-aacb-71f953bbeb5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60f18fe-bd5c-41b1-843d-ee3ef0bef00d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68a40a83-15b6-47fb-96c1-53d6e12fb3cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab38908d-b462-4424-b6f9-4a3268044005",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde48c42-dc51-451c-a362-e07211055da4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fa6afe2-e977-4400-af87-405f1a1c5d3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bee7d06-6fb2-47d4-94f4-1404dfecf46b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37392772-c1b6-48d1-aeb7-45746bed00d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2530182-bfff-40db-ae69-fc0567464731",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1f0419-93ab-4fc4-ade0-241d498001cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17b0ab73-b838-4d2a-987f-be95c2bd903d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d36bd902-2ebc-4979-8389-d5d9eff21faa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78fe8fcf-dc0a-4978-9626-b52359144c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a897c1b-243a-401a-8678-75a6441b7aef",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "595754f6-9df9-44de-b2b1-7e4f8b3def1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd8a8c68-4019-4a3a-96e9-d865c5c01788"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c088f9-3f87-46f0-97ae-b4c607c2d0f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0630e3bb-74e3-43a2-843d-e9c1fae2ce49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab44953-de30-4810-a5c3-c7232e4bf3f5",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f27813a7-5171-4563-8ec8-071723835851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6dfb8f1-af38-4b07-938c-7ff26dd959a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b107b0d-1691-43c0-9db5-ff45f01abd51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b87caa0-a455-45f8-a13a-71831fd19189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f19136d4-2b33-4421-92fd-ba8e909628d4",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aec3b5b-4f5f-4cbb-b252-0acceaf93f33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "358e03ae-47f5-4090-933c-75afe0572912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "811415a1-d8c4-4a81-9eae-52b634aa47db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03f3df54-89bb-4520-80c6-ebb99a6f9106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d5d59e5-0869-40b7-a44e-b9b4bbd32065",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c03748a-c6c1-497b-bc9b-43b96269c65b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c48f3a40-9958-4eea-ab95-e440e3c7462d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "138b452b-62f8-4d91-8501-ad80f8a6b5ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35756a98-2d98-4bd5-9b3d-f046e2d50051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89dc0099-4a21-4975-8467-9ea173a8128c",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59226702-de0d-46f9-80fb-c3826199e0d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4649a41a-bdaa-44c1-ae20-3577ef1f5b0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd22d4bd-e91c-4c4f-a6c4-133c2395a9a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a72aa111-7686-48fd-a31d-cf45b89ebdba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf58513-5d56-480c-989d-29ec956bafe2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b92944c7-d77f-4a47-a754-be5498176ec3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bc3f998-ac2f-4406-93ec-fdd269b25e06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e8bc15-da4d-4eca-aaa7-a9c3bdfab5f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a60c9678-6d4a-4f07-8ea7-e42fdbd1db1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9306b3-7eb3-4247-9664-60b90bca137a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bae392b-9478-4150-af04-1cac8c51f7f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09628a61-62d5-48ce-82ee-0d0b9c244b2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5817c5ba-6866-4e2e-bb1a-258e0f489707",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a882ac24-85c2-4e4d-8d31-6c84271fe481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3016fd18-c539-4702-a14c-0aca8779e871",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20613213-1f29-482c-a0eb-72190bca9719",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bdb598c-0b0b-4a22-88e9-daebf0aca8a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a64c2bab-0df9-4de1-8b60-1685ae1dcea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fa8e9d6-f8b0-4e9d-a4fa-c9ab6fca2b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc36c95-c8eb-4b62-8fd3-ed1f76f6b577",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed44905-f078-4637-a1ec-b7c03184b829",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee8a415f-cf0f-42b2-addb-44d59fab19bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5154b759-eed9-4ac5-9505-96ce1ab28406",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3515117f-0611-4478-8bfe-70acab7b6ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4e37d3-7a9d-4620-aa29-a06eb8877427",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6ac5b9-269d-4480-a5d0-29717cf46d4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a52dc729-4cdd-4ad3-9d25-6bab655d35ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af3f5bf2-0dcd-4cc4-923c-b5020b7f1a76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba383274-9c45-4b49-824b-15ba1f4f1df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f057197-3d3b-43bf-8c7c-242650988964",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141248eb-dd6b-4f61-a8b4-1d02478237dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e26643c4-1e5c-4ca3-aa1b-5fe3c59b4cf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f16809-64b6-45fb-88b4-86ebafb03401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db59a8f9-aede-43c4-9655-8dc19ecd10ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f64afa3-eaa7-47fa-a38b-d69165f13236",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c9afb4-7b67-4822-ab43-7b8510bd3f59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69392dbc-f725-4922-8b17-3a0b1b632b24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51217a1-9969-417c-82b7-743fff249b92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba4a37c9-7bd8-4792-80d7-5b7afe0d3d02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0402b02-7ac9-42d4-a78a-ccbb19c4bc82",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5536cb15-d43b-4e67-9637-c5b44370f03b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0185f24b-3d10-4771-a3cd-d195b6aaba0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ba7ca2-11f6-4f2d-8fe6-61529203343d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15443b6e-3997-496b-af04-7f4312f718b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15247c9-c982-47a3-bd53-e32555a3fb55",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb81504-a96b-484f-b3d8-f39a2c3f352a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc87dcf1-59f3-4346-a9bf-fdb4db158698"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9378052d-29cb-4a0a-821b-9f53e36d0ab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fe3395b-5100-4075-9653-cbae936c0997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a263c6bc-d0a1-4aa6-9431-84c21a0c2e74",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "815d7692-3b02-4497-9a32-efc186718917",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5408b55-1e6f-44a5-8e3c-1b1bce36d132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2580bdd0-45a9-4363-b1ef-5bb86aad12dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af7448d2-1d21-475b-9336-798e5549dd5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94260ea8-1b7c-4493-8dae-8eacb5c9f794",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29c152fa-3b0f-4f81-8d85-91d6f60a3ba3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96271664-7a48-4121-9498-6a5ec8ad8d3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2807a8-0317-4310-9f1e-cbc82f0e4da0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2a3854e-f8c8-411a-88a3-226bbd7b10db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e29e27a4-2456-4a9c-bd39-d6245ebf2bf7",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39952530-ce95-45ab-8481-450c8da7a2a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c778c5d-943d-47c4-b032-6f1b30687ac6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc885f09-db2b-4196-82c2-a9a748469084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dd7eff6-6df2-442f-98d4-9a2f9ef16989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd13420-d95f-43c0-8dd8-5a2b98890c0e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27da0c50-2ca2-466d-9ef5-e0012ec3e903",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64db9ad3-af42-4f2f-8f6b-af36c04ba801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc5b64d-8818-4a93-932a-1008e8ffc7bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "035fe5c3-5609-4dcf-bc06-99c3c76ff75a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93124bd5-401a-4742-8c41-298df6b971ae",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e27a6a-ad8f-44fc-b421-6e073049aba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67c204f2-538c-4d27-9723-e9981330f01a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe52b652-91f8-45a0-88c6-fc401c9011a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b19b05e0-bd2f-4d69-8e0f-b509b4a5d070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70052da0-666a-4010-b127-19a4ba693b0d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2210c4c5-481a-4768-8420-47ecd5d097f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f04ca737-89d4-47bc-856e-28f5e477e037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb539759-c415-41ca-8fb3-555ee55f7943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2315284f-2c14-43cf-b0af-15ecb7143560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "380e61d2-b4fe-4c37-b3e7-5aa7d97cb30c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8ea40b-134e-4c81-9994-a3c6e7ae4ee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b882ab04-a833-475d-ba3b-0125243e32b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbedac93-3d9a-490b-bec5-35e72bab5186",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61b1a7a9-87ff-4306-9812-d8f2593b0e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2340bd9-d985-46cc-a1a5-c42cbd070403",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4de371-3496-4b48-a4ab-2338118c9f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "809093bd-baef-4c88-838a-2cbf66e62f90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9791eee-dc42-41e5-a95f-f1e17c4c7622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ed5eeba-8c97-4b03-98f4-cb2459371cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c954360-ad95-4726-9d26-11d7a6765d47",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe09c78-10a1-431b-9c55-fd7ab7eb4f7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12c18653-eea2-49eb-93c0-01320819d27b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41e3097f-3ef3-4b46-8174-3f584e2a788e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc1d75b4-1165-49d6-9570-f6dc50933788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f5e1d8-04ba-42d7-969d-3e5a6ec08222",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a00458af-8856-435f-8269-a2cd8f0b1778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42335635-23ad-4029-acc7-e50c0f4b6130"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3368cbb-3e2f-4db1-a210-f5fe2efb8e1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0b68004-03c4-4541-a426-43d30d478e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d4b853-1a26-4792-aa7f-f4027f316246",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "082b0917-8133-4213-b56e-7a6b47e2be49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7371d102-6aa2-4a3e-b32d-bc4e6c26be0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7fad09a-8105-4ff8-8cbe-6d910a9d39c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31ecc9b2-4faf-49f0-b6a6-eb8bc999cebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebcca646-0efe-488a-b1bb-8e718d08acc7",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7543f31-e9a5-43e1-816f-f421a05ed809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be8cf541-004a-49b5-a59c-a5586ce25818"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9352cbd1-cda5-4004-82bd-5fec39dad697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c518f0a-a06f-4895-acc6-f70cb6d787e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86200e39-26b8-4dc7-bea2-fcd8f4a7b9fb",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a38febd-ff34-4c13-802e-e1cb74c8d788",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d68e4ee-3d8d-45d0-a0c2-6fab77059061"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f503ab-9fdb-4b25-95d0-512ceae19230",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc4b4bee-9af2-4955-b803-54323f6749cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70516330-202d-479f-b342-6311e818573e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68496ca-3963-440f-8d17-9a0e5a17d3fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10c3af26-9925-44fe-8134-95491170fde3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c282830e-aa2d-4fa2-b617-abcea3d19708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c587ea1-da51-48ca-95d7-4c7e93146e12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1baa39a9-a19e-4c76-a102-9b75d94b6c5b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d1dd7a-99c8-40df-9774-20b1dc857472",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4837639-1e63-41f3-80f7-ed89ac6c2bae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e65572-68fd-49c2-b1b1-0b6e7437d160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24fce277-edcf-4bac-975d-058903eac16f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8664db8-84df-4ccc-a73d-574da4627fd7",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16464755-d24a-4a0d-a39a-f575598c7f08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2e22d72-b0a3-4f5c-96f4-5811d6b56b6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2ad562-2963-4782-a045-e343f9bd7ed0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "408d87e4-d2a2-451c-92f3-d18d8321821b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317ff694-7d44-4c39-8d63-c0e842d6b2f2",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66959ef-3954-4315-89aa-35bbea785705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01b90fe7-e66f-4ba3-9f77-b4921b1275fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf9cf7b-31fe-4d50-9fed-591b9d797fd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05ebc460-b7ea-41d7-8fdc-7b6c05064900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c2cf97e-fe9b-4a21-92e8-da2ff5cfbb46",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bae51be-db0e-47b0-b9d4-418fd884a4c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65e861bd-875b-4f13-a600-3b0ea7565b13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e369f4-cddf-4a11-abd1-2176f7bfad33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "401987e3-e369-4029-ba62-2baf71a21372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c784c5be-0a91-4c08-ad09-0db7aa87eadd",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e13e2bc-5dc4-4641-affe-5a32e59bf4db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "750715c2-8974-4ea3-8380-396d0e0de819"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e130c41-cd11-4cc1-acf3-cbe41eac7e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcdf4093-a5e7-4947-b2db-363e8aa8a9b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88f11d3-36a4-488c-8263-1449b760fa04",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b6ccef-b745-49f3-a09e-e5b3be450bc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45522950-41da-4bbf-84b8-81dc19cea7b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1655dd09-1780-4664-9cfe-e838847e505c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf810681-7255-41e6-9ab3-314284396b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "943579c0-107d-43a8-bd34-f52b50f94fa0",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f3f929-cfe9-4c41-864c-d710edaf7bdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "363e3691-f036-424a-b637-eb1fe217a1ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa83221a-105d-4ac4-a8f7-3aca1459acc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f07f428a-a802-440d-91cd-492ee9a5cd8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba17ba9-8e54-475c-8ff7-fff239f9a6b6",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d680f361-89e7-4ef4-993b-2b251cda9a0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5911bc21-f66e-48d4-84b5-41acc7ae6d7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b556a15f-6106-49e1-add4-448e8d04f8dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "352eea31-b13d-4707-b144-abf36b5b0917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f566ecee-ef8c-4051-aac9-36c9ef4531e7",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9dbc7a3-a02b-487d-b860-95baae027305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0791bc49-a99f-43b4-b4c7-15d81f59b4da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83563b9f-888f-47af-b18c-23bfd97925d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6280ae71-c0b7-43d3-b4cd-377152aaef99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c9118ac-5ceb-42b7-a7df-052ae9aba1bd",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c710a7-cf91-49cd-b0f0-bbb7bad9f889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd175721-dabb-416d-824e-83a5464f72bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5521d6e0-db4c-4d15-92ba-510e49f16400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff7291c3-4000-447b-8476-358575117c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a2d5dd-6a6e-4371-9b13-cb419bf871e6",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51442a72-9088-425c-b364-df2dc75fe540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b57f6b6f-6acf-4023-950d-cfd46f4b5583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb506d97-2057-40a1-bf75-6ba7edc60f41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a090df6-90ea-4470-8fb6-11b60bd23688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebed107f-62a1-48ac-8dd3-cc79d1731b18",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fafb811f-71ae-49c7-be64-715c939fc752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eca3ddb-3054-4ec4-a3c9-6e25d4a0bf4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5248a4-c0b8-4b92-9fd4-f27b22b61346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69725308-cf18-4649-9f67-6763e2f9d256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc15030-05f0-4297-be59-cccdcffa768d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd03e305-e507-4fae-981f-4d2b562b3229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03ac0ab6-93be-4801-bf20-f86d0740446a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e43e8cf-e7f6-4a13-a2b5-c57eb5eedf59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bce8d04-4afe-4651-a682-78d86bac0104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bfd1c28-f5aa-46cb-bf42-7ebcd6a47e1c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe05efd3-89dd-45af-864b-814b98a1cf45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aed9380f-f383-4b7b-9bb2-25353f2ec8af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b330b58b-75aa-4a64-8039-5ed7309e9efc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87a4bc70-6cd3-4c0c-a358-a40853400bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f29bcdd-7a77-453d-b722-b78eb56ff41a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d05c02a-84c7-4a1a-8a32-6b4fbd8dbac8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfc49777-f7f9-4aad-ad3b-c4c94a7e9e2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "376b07fb-299b-4dc0-b852-4c4619c23871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58473c7c-bf0a-41b9-b77f-48b84ea84c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e9759f1-fc66-4e6b-961d-4eea382cf2b3",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea0412e-a551-4994-a93f-09301165802b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "343e29cc-8a63-4a34-a106-98b9b71e9a1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e874eb86-c616-4e89-af02-98f7d6a23141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25c91cd1-6d3a-4a66-b62d-7004c4b9514e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69bd56d9-5b4c-4f07-8b42-aeec13116247",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f760dd7-8851-455a-b980-513969769103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db6036ea-a7b2-4465-abeb-3bf4292055c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19129f5f-a1f5-41ca-a6a3-1a722186b5a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae058599-b3b8-4e41-b004-03c7d716b267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7217c38a-c21c-4fa3-8d10-ccca6aade1f4",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1206565-caad-4329-b6a8-8f8f0ef3cd45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ecad50a-f61c-415a-94e5-6d517c8562e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89cf004-b7d4-4545-8226-9f7be21bbbfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf838587-df0d-4f7d-8d50-ae080408f296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc75fd7-bd50-4e56-93c5-3643cf1946d8",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629f61f9-f5f6-4c3c-891d-b65620706c79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ff8d7c4-4104-4987-9c14-3e72dbbebf25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b310bd-7346-449d-98af-df3c60943604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f727fc8-1f50-443c-8102-bb997b85eddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1db6c86-a2da-4fdf-866f-88f945c304f0",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6104ee9-c194-4eeb-8b3e-0e82dd8fedd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9603897-6395-4dc4-906c-903858397cc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f815dd-4c64-4e08-b5c9-a5b77ab81648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d264ef5-b5ce-43da-82df-71e67f038988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eabb6b95-c993-48b8-8766-4f1a70c879b7",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c5b587-99c8-419f-bb5f-48bef6611cfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bca9239-9bd9-4fa6-a502-19386c9b4011"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5803bc16-3ef9-4725-8d0a-a2f062309122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7127eeba-d9d1-4fdc-a098-afd5a758aa4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed491fb-388f-49b2-9114-f6724517f8e1",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3673a90-ad22-460d-a9b8-7970d3d00cc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61aeb5c1-9fe4-4099-8bf5-22c53e73ab83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f59eee5a-1851-46f3-bb8e-bf712bd2815b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a6d3081-3173-4935-81c0-1941e7d4f47f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1058ae9-9f66-4236-82e8-02075f8fe39c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0830621d-2505-4f8c-b63e-8ed9b7031b88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54e6f171-1164-4a7d-9d51-f5f208f9e4de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e60888-5748-47e8-a2e4-d756f52bddf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9a6c38d-e5e9-48e5-8903-991d1a92a712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f56e77-ed6d-434d-8896-2fa8b0c9ac9f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26a21c45-f224-45e1-a3e3-563f92b2bd94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c783a622-b714-44bb-9c52-8807e3e24a3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10dc5e3-6a85-4772-9e50-54f5c10de8bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dde66f76-0052-4fbf-8138-9e24a258182d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee8a3c3-4581-4894-a666-d55ad4657ef1",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8484e188-734d-4d14-81ff-2bceaac1da59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98c4a560-b153-46e7-ae71-976a5655d422"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8f67be-4683-4b2c-85ef-b1fb66b39b24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dbecfd3-1021-45a6-aeec-f1c7d2d5e726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a60103-d2e0-4aff-872a-162fb266c89e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2704a3de-082d-4e0b-a207-6cfd100a4017",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d15049a1-6fe0-4b37-bc63-0f70ef911e03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "879ddad6-6fa2-450d-a7a4-db9c3b353955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "396d9882-be43-42fe-890b-0581f979842f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5f1c799-078d-4d0a-b101-16e3dd5ae998",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff96b5c1-3742-452b-99c1-9f5a1e692c7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "157bba69-2280-4535-9eac-37d977579073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "693d4667-20da-427d-8a13-0120602e4d73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07b1fc8f-76c8-4623-80ca-86c122633b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651b43b0-831b-4a31-9861-b0fd6126131c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "245967bb-e13a-4e2a-9057-239a1d799067",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3164c6e8-b745-43ee-8fa1-da8a1ea2e260"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "973cc687-2688-4b67-9be9-06564eb1cb7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc686bf6-8e10-4c3c-8009-0a6259837d01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e98e5d-3dd9-41eb-8407-855689325b6a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f60a947-7379-4882-a49d-32cf9777c310",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30fee8bb-65ef-448d-9550-fe53ed4935eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25cf52e-4b7b-4c3d-acbe-89250f91329d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb84f408-80e7-40c1-a6e9-b23dcb5aabb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e2b0be-5298-472f-896f-b2a1ec3fe5e8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a345b1-de23-44f7-a665-d83f07724ceb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0cb5a7c-59cd-4b2a-a176-1fe1d816f813"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c148d236-0a86-4a3a-9625-44b1b6840e6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a5f6941-f926-4306-9cad-e450823bf466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030871a2-73a6-4052-ab06-d1274bce6a8e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7862bbf3-15b5-4db4-a30b-28b9a70f7335",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a098c148-0414-44c4-8652-eaa7dda31475"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c91726-4488-43bb-9aa0-6828db1901ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "915b392d-2a9a-499a-b9e8-73ec05a28ae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786fcc1a-ecee-4cbc-801c-995601f4e8a9",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33b12fe-4e20-42db-81f9-96ceebf373a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaa32b98-b0b3-4099-93ac-5a05ed814804"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b25b4735-96d6-467e-8e77-36ead61e224c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cdc06c3-c249-43dc-9f8e-2e3f591f2925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c9e7f09-88bc-4d8a-b6cc-4c749e4cb38b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0261cf7a-8b43-4c56-9de6-a0967c6debd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfce8261-de56-42e1-a90e-9cc9de85c334"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "511867cc-0d85-4ed7-b52c-447250c0772f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3abe1010-40a7-4259-bf17-ad244b92fcb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a35e38-1b44-43ac-883e-4b18ca5acdc3",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc6e3d3-126b-4f04-9553-1f40a0b3055d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c97992d-772d-4ab5-886a-c252e0df0df8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "240dc5c8-dc9f-473e-88e9-d97c3339608c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62b9e55b-0aeb-48ed-b39c-22710c5a553c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab59752b-613f-4256-9ee4-e6c6b634dad0",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3a91a9-c671-47b3-94f4-f4bff99da8c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b22b5549-a9ed-45ff-9eab-7c6542a6ca26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf1fef5-3403-42a4-989e-43cbae0befcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd3fd596-584d-4a4a-91a7-dc4a91e5d19c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed67abd2-82ff-4947-b377-9049c894329a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d425aa45-8a22-4480-9f31-a0e4c3d662bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "403488c6-7873-4838-97bf-9b669865caab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a23eeef7-bfe8-45e5-8d8b-43c40155d02f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a7e2ab4-0595-4e7c-962e-2aadd06c7297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673bcfe2-f67f-4eb2-8e2c-1a1fca2342a7",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6d45e4-8ae8-4bd3-a77f-6eb4d10b5a1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a01dec56-1172-4a63-88d4-7757a5fb6b6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82b0111-ff02-4495-a92a-061f371db5fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbddda47-a391-4e1c-9b04-2f3e7aff66ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8485bea7-7701-4330-a12e-b8603667eb5f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6dadbd-20ea-4c68-8c2e-c155e980b709",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcc049e7-a9a4-41ff-a846-a4f613fdce89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "863a7e41-7f79-4e73-9a64-b3b0d3db400b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11d66560-76a8-474f-b073-594c7336cd08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a909989a-557f-46b6-9c79-a78ba81c69b1",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9330b7f4-f9dc-4454-a6a6-b692dd41235d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c2821ae-28ce-4a28-acf9-b9fb73054d46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ed5cd1-4eef-4b19-b4c6-1ad15005c1d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eb15c7f-3aaf-47e7-b79e-49baee3fad4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae3ec42-d021-4090-b224-e9ca2e532080",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07cfe07-bc12-44b3-91d8-c9eca5ddb2a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caab3a40-aa5f-4dfb-b058-943c72e3d4fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d8c8a8-169d-4b78-b55b-6f3ce5b79fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2636b88f-f4db-463b-8be0-ab1bb95ca320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81927623-f6f2-458e-81ca-d1171ae0d71a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a325e937-92f6-4605-be19-16d32fa98c74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c80110c-09b0-4130-9cc4-e23967cee5be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc63563c-aaa1-4664-a92e-c571ec2e8d74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c6a2c52-94a8-408f-b9c4-4b54418c7e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc163ed-31f4-473b-849d-749efd5ed5ec",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdade5c9-bd13-4fb9-bd1b-7a5e0794e954",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53694263-c64e-4c50-8d8b-c3d32935a966"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "356869ba-00e9-47e3-9dab-8cc865f0db3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50f18d64-f7b2-4f5e-b890-bc001bf82ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bc9a893-7d81-43d2-9a84-8aa94d4461f6",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b392ad2b-e60c-4df1-861e-4711ce17e6ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b642832f-11d6-4280-a2df-e9fa8b724aae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d519a3-2443-4b0c-b4c0-60547185db4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe6ae6c4-009f-4dd1-aa4a-67b1a380f9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16548836-a4e6-49cb-862f-77ed1278ad72",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e2d6fa-6b78-434b-bd54-f1bc90bfa151",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f182fc99-8f29-4284-a522-989c439d619e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d9eeb6-2f03-487e-894e-8beb7ac8f25c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5b49b3b-7b25-490c-8b48-0f34d3c2c61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444c4147-6a69-497d-b2e5-76f820c3ac68",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e7adefa-43d6-46d4-95e8-8f954b8d9ec7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbf2ec97-0846-4006-bdda-70f7edea0ff1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adfa0220-b046-4022-a990-5552389f73db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe77df00-1643-4af3-a5d4-df5f769abc77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a12fb85-945f-4cfe-92a0-fab3148d35ab",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8ed33d-8cd3-4155-8f13-f9da6cc9d727",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa535d96-0f86-42a5-93e0-90349575feec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f17d18-a068-4e4f-872d-0f5856744821",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d5a089d-d6da-43ff-9872-b88c4c205065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97938770-d8d3-4571-9229-2332b717790b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e8dd72b-1bc0-4c9a-9c01-aa342aec710f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b22bf467-bcd4-4db4-b3a3-67546413176f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af944c2-8167-438c-8e0f-180851aa0048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39083aff-e9c4-47cd-888a-0cff0ec62cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a1e249-87eb-4ee1-9b60-139644e18b2b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e18e16c-caaa-495b-a7ae-103b77888acc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b6d0a96-cc0f-44a2-8674-07c5318ee1fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3509afd7-bfc3-498f-bad8-a9b6424bc65a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e22b4a5-8812-4bdf-ab02-aa07872a4cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e14c19f0-0558-4d88-a52c-c4e258c60989",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fef25d7-27e1-4f11-b9d7-9e81ec53cb8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4f7e942-0ee0-4baf-9d9c-c23a785e22d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f5755b-359e-42b7-b8de-665642c34d4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a46699c4-acc6-4bf3-b9b5-de80e225da15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd5ae89-cc64-4088-8548-6bc7c65dcecb",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4419c39-c29e-42d1-bcba-3eed4fbd81ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7a62699-1538-4588-af1f-1d218d0d22a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1726bc18-27a7-4202-b0d1-f152b4ff2f0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fedfb8c5-c9d8-4190-9982-8a34945cf216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6bc9c9-980b-41cb-8234-286609db31e2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4541f550-d791-4f46-a163-01c7fc6caabb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cd1067c-3d91-4096-bdd0-4739ddc8c2d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "116db26f-79e5-4686-98fb-166f72bd2321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a10ab8de-a42c-4792-8e14-9a15018d7fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0861b2f-4522-416a-b33e-3e5fc8499b2f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d205a94-3261-4ccc-a9da-181fce72147c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c1a5bbb-01f3-4d38-9988-d02d46b8c5b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a897724e-2aa8-41c4-801a-e1a7c99fea81",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b21bbb2f-53ae-4f03-95ba-12bcac77b4c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43458b7f-1615-4e76-b285-c5ac2d916523",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0d33e9-98a5-4feb-b82b-5f56cace5075",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af9d6818-19c1-44fa-9cc5-c0d8e22aeb22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45cdc325-03f6-413d-8112-20f80cbd42d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f08347e8-b3ce-43db-9cf9-fd22b9b535ce"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c283b74-06a3-454c-89ee-c0882f37c680",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4ea11c6-8685-4d34-95e6-c3c4984ba27d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "be0c4bc0-a279-4e98-a2d5-821a51b8a168",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "484059f5-229b-441c-9956-681df856512b"
                    }
                  }
                ]
              },
              {
                "id": "eb8dfe10-999f-41ff-ab0e-6af9692e0275",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "96ff5c2b-1467-4791-a589-d1b1712d7bd8",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1edebcbe-bfde-4c47-8117-b00f57ee4217",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ef7fbc8c-4ac4-4a6e-91c0-78518284bfce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a0b3d5a-03ef-43aa-baff-622797548db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eddca589-7141-4c46-ae9d-b7cf345f0f42"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96631901-c377-4d5d-b71a-6174f45aca43",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "895e0a96-e3d8-4edb-ba4a-9909a40a5862"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd2990b2-cb32-4fb1-96f7-fcfdd9c1c71f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7eea641-73c4-4b6c-bb1b-ea6ac73f2a86"
                    }
                  }
                ]
              },
              {
                "id": "ac4c7738-be81-450a-955e-bf3f22eefeb2",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1baab676-725c-451d-a855-178a78f3fc67",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed63a2ba-2c56-4582-ab97-c1236f605871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e9f7ac55-9682-4706-9f03-550b1879090c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624ac31c-511a-4c97-ab6b-9c9f57046f5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf31d69-b3d4-4f0f-966b-81b5777566ef"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8d2470bb-fc8f-4ce6-bfe0-10c50538f05b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "19c4c125-fd6d-46b6-a650-5bafb9747939",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "efe9d01d-1fac-4a41-ac3b-32bdd7c2e885",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ebe206d4-07d5-41be-87c5-cd98d8ffabd5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19dd7acd-75f5-4565-a64f-3a8488c2c9ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27e3ebf5-b364-4465-a3b5-057a1ef51677"
                    }
                  }
                ]
              },
              {
                "id": "2a6af971-f27f-43a0-9ec6-48a50d2427bc",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ddd0b1d-030b-4545-92ac-ccf64de036d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7a20a0c2-84fb-4810-9aa4-bfc1785f6b7f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fae13605-bf84-4532-a5b2-cb22a4da8f98",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e31bfbc6-de63-49b4-b2db-c495a497c058"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cbe62cb8-9882-40f1-acea-bd8af6773d2e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1fdc3f6b-c2d4-43c5-8965-9e510973fd6c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "18d176cd-848d-4105-ad58-cb26cd6d52df",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c0f2d83b-acdc-4d67-a2ec-577a110a9bb6"
            }
          }
        ]
      },
      {
        "id": "6e8c2539-eb7d-4b4e-a9ea-acf1fcd367f0",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0f960be2-04fa-45e7-aed2-c424219c120e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6bcb4a1a-ddad-4cee-a16d-f9d8f68a2169",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "16a5722c-8cde-4f98-b97e-275517976f63",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810e9873-f284-499f-a8f4-18ae7cca2f66",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f7b33f78-efe0-410b-8e67-19fb0e047efe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d13e053-8bbd-451a-8057-968ceaa1531d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a733bf13-9e9e-45be-bf32-28fd5b00b4d8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eed11d35-204b-4dca-afae-40f030ba30e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "463b2abf-33af-4988-a267-3abb9a10fd35"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6da2422-2fe5-4d99-9d77-b0aaf2511f37",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7d0cf71-c413-43a8-826f-53a75366dcb3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2d2c5a5-667e-43f9-b5f2-c8e58e9e4dc2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "bb27b2ed-0691-4fb0-903c-b947d2238d98"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "262c4300-7809-407e-b302-e78ed6f7c28e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d8e48ff1-35ec-4ce2-aed6-818e7c9c6ce2"
            }
          }
        ]
      },
      {
        "id": "8b836b6a-85ce-4382-ad4a-2e4d7be0e7e0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "67043f90-09f1-4d98-914a-840740137723",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f4521753-000c-4355-9354-cda353264ddf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1a00990d-3a7c-4060-a136-f8b8870e43ea",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee3be7d-bec0-45c1-afc6-7cbbd7f928c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0e7166b-5148-4c24-bbd3-7181f31cabf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a930c4a6-7a67-4c3e-9e50-b54e34b2fe58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "239a7a9b-598d-4bfd-8309-47f07ab7f584"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4fb3c2c0-27e4-456b-a801-7cfb80d708fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aae2b397-999e-4fb8-b64b-64ff93b0160a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "85021d4a-d504-439b-b8dc-b49b2b779054",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b9a4733-6eec-4ccc-bed7-45cdd787c11c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "780a2e58-3027-42c0-b141-69a82f33adde",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "21c8df96-99bb-4c0d-bdb6-099202e0014c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3b132454-ad75-4fc4-ae3c-2a19b5591d14",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "07e7bbcf-7339-45aa-b3c0-2b7c79c7355b"
            }
          }
        ]
      },
      {
        "id": "a5fd2c8e-e0c5-4f3f-94a6-f5aa5d993734",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ad9431a0-df60-40eb-b680-42b265b0028e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "941f5abd-7c1a-4e54-81eb-e299d96dd784",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2826eb6a-6933-4aea-9021-1aad62c4e359",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e7bd6f-0847-4c8f-985b-114aea166fdd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1009c19-ee10-4736-b988-3396a2135182"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ae8f90-c358-4c31-b472-8c9e71876018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "356fbca1-b92c-4601-bfc1-12576d0ac17a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "262386c4-a4cf-46c3-adc4-1d8b9b22e712",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a95838fb-952d-42c5-8355-76eb0a8d3a19"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf6be15b-3b27-4df4-9184-b112757739f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae89dce3-85c4-4d64-989b-a8f7a56fbd48"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e087278d-cc03-481e-8faa-03a91d59dba3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2abaf599-bd7d-4373-aaeb-108cf27cc322"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "220fbc03-7e40-4dd7-9c70-d4ec61efcfa7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "053823f0-f581-40c5-9854-44b0738b3a71"
            }
          }
        ]
      },
      {
        "id": "06c8850a-4e33-4e82-ac76-23f590302384",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "900340ce-a30e-4fa4-a71b-54c259633db5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9a10d543-5a0c-4460-a22d-28a9546c3058",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4b4e18e6-66b4-4503-8762-34cbedd96be2",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eff9ae18-13ae-4f26-a7a9-8319bebc7433",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d72352ba-e940-4534-af4d-56ee9e5eb7d1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 45
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 114.33450704225358,
      "responseMin": 15,
      "responseMax": 2340,
      "responseSd": 253.04090871896616,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1693096466572,
      "completed": 1693096512622
    },
    "executions": [
      {
        "id": "fde4f7d2-b323-4cbc-bf03-38893d4086fe",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6990e673-8445-4163-9eb9-eb0061c167ac",
          "httpRequestId": "2877875a-0b35-4d94-84c6-4d169fb7ab99"
        },
        "item": {
          "id": "fde4f7d2-b323-4cbc-bf03-38893d4086fe",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ed9848f5-79e3-4e33-bbf2-8a9b7951a379",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 0
        }
      },
      {
        "id": "7ce4c863-1007-46ee-885c-c058b9a2280e",
        "cursor": {
          "ref": "ffa339cc-6224-4070-8dd3-6ac64c84c62d",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "20d8fdf7-383d-44bc-acae-6191b0a27bcb"
        },
        "item": {
          "id": "7ce4c863-1007-46ee-885c-c058b9a2280e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "60ad2aa1-1d3b-4b89-a460-1fb2a33ce1d6",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "8ea3496b-9aca-4374-a303-c1d934fd919c",
        "cursor": {
          "ref": "eeab489b-9506-409e-833e-72dd2c1c7d44",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4648a598-7760-4d4d-b9cc-65e6526a1536"
        },
        "item": {
          "id": "8ea3496b-9aca-4374-a303-c1d934fd919c",
          "name": "did_json"
        },
        "response": {
          "id": "4d4bc7a2-707d-4a67-85a0-19f87d57a4df",
          "status": "OK",
          "code": 200,
          "responseTime": 207,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7632ce0c-d058-427e-a344-04e46528b9d8",
        "cursor": {
          "ref": "69875ee3-b457-4149-b489-1d9e176d2844",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1baa6020-7c31-495c-ad0f-f06ee52a5411"
        },
        "item": {
          "id": "7632ce0c-d058-427e-a344-04e46528b9d8",
          "name": "did:invalid"
        },
        "response": {
          "id": "c341854d-dfd3-484a-94e8-fea213af9eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7632ce0c-d058-427e-a344-04e46528b9d8",
        "cursor": {
          "ref": "69875ee3-b457-4149-b489-1d9e176d2844",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1baa6020-7c31-495c-ad0f-f06ee52a5411"
        },
        "item": {
          "id": "7632ce0c-d058-427e-a344-04e46528b9d8",
          "name": "did:invalid"
        },
        "response": {
          "id": "c341854d-dfd3-484a-94e8-fea213af9eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d854ef31-2376-410c-aa60-79284cf7336e",
        "cursor": {
          "ref": "2fa3c9ac-0631-4c27-a97b-f48437135b66",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3678789f-ae10-4d25-b1e7-f0663bfc6d61"
        },
        "item": {
          "id": "d854ef31-2376-410c-aa60-79284cf7336e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9f59704e-5b6f-493a-9dde-c00b89d321ed",
          "status": "Not Found",
          "code": 404,
          "responseTime": 123,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae064cb1-1f0d-4964-82ab-81163e4bc64d",
        "cursor": {
          "ref": "c76b0c18-5966-4499-bfb8-0c1d088b9e9c",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ff1cefca-cbc9-4149-952e-9649d8dfcfef"
        },
        "item": {
          "id": "ae064cb1-1f0d-4964-82ab-81163e4bc64d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a594a0a4-da7c-4b34-9810-f061debfd610",
          "status": "Not Found",
          "code": 404,
          "responseTime": 69,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af61e85-1ae6-4337-94f5-d8598e82e5e6",
        "cursor": {
          "ref": "40da9603-db26-4fd8-93dd-aeeef6803718",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "86651deb-0af3-4eb7-9214-d9ed040e6c11"
        },
        "item": {
          "id": "6af61e85-1ae6-4337-94f5-d8598e82e5e6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6ff59cd0-35a6-4d99-85a0-58339977ee8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fdd04f4-1388-4a84-b3fd-da509d31ad99",
        "cursor": {
          "ref": "ff206502-bc2c-4dc1-b5ae-5c441ab9fe3c",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "86be70c2-835f-4316-b8a8-f757b6599080"
        },
        "item": {
          "id": "1fdd04f4-1388-4a84-b3fd-da509d31ad99",
          "name": "identifiers"
        },
        "response": {
          "id": "abb93887-75de-45dc-8ca7-f62a22f336c6",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161020b6-d02c-4b3e-b24b-08e8148c328c",
        "cursor": {
          "ref": "9997259d-bc65-462b-b371-2330cf2ca209",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "42519dc4-1825-427f-951d-88650eafdd0f"
        },
        "item": {
          "id": "161020b6-d02c-4b3e-b24b-08e8148c328c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b43cd001-3152-487b-919b-885a3f0d3ebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "602dd3dd-1db2-4a09-b6eb-fd33a717646d",
        "cursor": {
          "ref": "5dddd87b-725b-4697-ae46-8e08c9b3aa71",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5d54909e-8742-4a7d-ac21-545d6cfd7316"
        },
        "item": {
          "id": "602dd3dd-1db2-4a09-b6eb-fd33a717646d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7ea46d09-58e3-4ff4-8c6d-1f743eab9939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6603fd3a-04f3-4349-8425-99d725980e0b",
        "cursor": {
          "ref": "73639a14-d8f4-4690-9797-4e7dda1518de",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d0405ffb-caa6-4230-9ae9-6c1a33996921"
        },
        "item": {
          "id": "6603fd3a-04f3-4349-8425-99d725980e0b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8431f72c-82fe-4745-98d7-ede465e081d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c6a8738-1152-4a56-92dc-addf9e67fb7e",
        "cursor": {
          "ref": "6253eb7a-cb5d-45dc-b152-a1687ba0e6dd",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ac1e7e5f-c009-49d1-9895-3dcec7d318bd"
        },
        "item": {
          "id": "5c6a8738-1152-4a56-92dc-addf9e67fb7e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "8dc2578a-ea33-4243-ad1e-b689edf0e246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3834fa8-6fc0-4833-8461-e19e1e650a0b",
        "cursor": {
          "ref": "df54be62-48e9-4e5c-be32-079a60eba5c1",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "922bf96c-b3be-4fe5-8330-2536dbd20ceb"
        },
        "item": {
          "id": "f3834fa8-6fc0-4833-8461-e19e1e650a0b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f2dc0a2c-bc2c-4f79-8efd-daa5abc98f2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14045932-0802-40d8-9512-d2b44661e8d6",
        "cursor": {
          "ref": "66435437-13d7-4973-99c6-4cf77a0d6678",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4df50fb1-d005-49e9-bd34-87903ee646a4"
        },
        "item": {
          "id": "14045932-0802-40d8-9512-d2b44661e8d6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c6a0d5bf-9988-44a8-b028-6216e623ac1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b990d5-e540-47fa-862f-95a60bebc259",
        "cursor": {
          "ref": "25c9f3d6-c140-417e-b80f-d45333dec50a",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8ec1d597-c515-4c51-8487-e8d96d998caf"
        },
        "item": {
          "id": "f2b990d5-e540-47fa-862f-95a60bebc259",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "01a4ea18-e9f7-44d8-9bb5-cee727d2c58b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ba3b63-267c-4472-8022-8db007e9e205",
        "cursor": {
          "ref": "e46381e3-8031-4bc0-b4c7-4e6db6ac336a",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "42998c17-6401-4a51-b0c3-8e3f47233ad1"
        },
        "item": {
          "id": "33ba3b63-267c-4472-8022-8db007e9e205",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4f00bbce-dcbc-4b86-9818-ad04072b6bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a3e02a2-8b6f-4507-84b4-e58057b72d01",
        "cursor": {
          "ref": "b502d0f9-60b6-4c1a-9a55-3bad7f654def",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0d7d8cad-3618-472e-bb10-15a4a10c1d24"
        },
        "item": {
          "id": "5a3e02a2-8b6f-4507-84b4-e58057b72d01",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "0e24ba3c-d907-40e7-ab16-7865ed90e5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac81a4ad-c1a4-4d97-b240-41905e5e2c5a",
        "cursor": {
          "ref": "f6819cee-067b-48f7-82a1-427a37053a38",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "397da62a-0b77-4294-988b-13c9d2849a5a"
        },
        "item": {
          "id": "ac81a4ad-c1a4-4d97-b240-41905e5e2c5a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "ab60b55e-b15b-4288-ad55-946a282a3d57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02318529-755d-469b-998f-f59a0fa351a1",
        "cursor": {
          "ref": "27602fbb-f4e4-4d33-bfd8-d444dadb5767",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e7e7e5f7-1342-458e-b7fb-182ebc9a34c7"
        },
        "item": {
          "id": "02318529-755d-469b-998f-f59a0fa351a1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ebbfcc67-e72b-4b85-b6c7-32a61b42d139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06dd893c-3456-42d8-8ad9-27496f53a7b4",
        "cursor": {
          "ref": "3ef2af02-a756-4ed3-9b0b-1293e741110a",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d124c888-2e53-4a2d-828c-071797dbc106"
        },
        "item": {
          "id": "06dd893c-3456-42d8-8ad9-27496f53a7b4",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6b59f478-3acd-413e-ab85-9942e5344075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dcc2f64-3369-4619-8929-da45553099d7",
        "cursor": {
          "ref": "2f91eed6-70b4-43ee-a44d-67a888a5ecc0",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "cd5c44b7-1d24-4c57-a2a7-1fb44773cf6d"
        },
        "item": {
          "id": "7dcc2f64-3369-4619-8929-da45553099d7",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e448f701-dcd5-4429-980c-21e3ebab435f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54bfccd2-cccc-43e2-b609-fa30d14100fc",
        "cursor": {
          "ref": "736a3cbf-5cd3-4f9f-a0b1-32acdfc13730",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9109a2f3-90b1-4a5f-a00e-98d184e7dec0"
        },
        "item": {
          "id": "54bfccd2-cccc-43e2-b609-fa30d14100fc",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "5ef18aaf-65df-4e3e-b37f-576cd086fb08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0219b94-48ba-4a44-a41a-f136119352ff",
        "cursor": {
          "ref": "36508758-6c68-44e2-a16b-458588d47bb3",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f97ae398-7b81-4e7f-96d7-3beb01292cb4"
        },
        "item": {
          "id": "e0219b94-48ba-4a44-a41a-f136119352ff",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "65ab7828-d855-4d2a-99cc-c35ce048dd1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa97b37-1f61-4018-b551-41679436638f",
        "cursor": {
          "ref": "13cb82e1-51b6-48db-b0fc-04f7dd9b6c87",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "aa3f1754-0018-4ac0-94c8-7d039ef3c6a9"
        },
        "item": {
          "id": "6aa97b37-1f61-4018-b551-41679436638f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6246eb87-fa45-4af2-98a6-fe4c060fd267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88495865-39b4-409f-b3f0-b446e8f29252",
        "cursor": {
          "ref": "ba798067-f85f-47a7-a82e-9c2d21e42b15",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3d373105-f1e8-4592-ba17-85d145191439"
        },
        "item": {
          "id": "88495865-39b4-409f-b3f0-b446e8f29252",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b864379b-cfe7-4e14-9184-5e7e75209d59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9fc706-7793-4f83-bdd8-f2556a895e97",
        "cursor": {
          "ref": "2dfa09cf-8858-4bf4-a0b8-b6bafcfc44ec",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ebe1720f-9205-4aa5-84d2-4b5466e2abe2"
        },
        "item": {
          "id": "db9fc706-7793-4f83-bdd8-f2556a895e97",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d5f66cfa-1089-46cc-8e35-b3cd8dacc7d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bcf581f-7a7f-4eed-9894-db2e5684fb9a",
        "cursor": {
          "ref": "7cb87e6c-2c3a-43fe-ae08-c998e948a334",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "455f9022-a158-4194-8a70-e7e30817310a"
        },
        "item": {
          "id": "4bcf581f-7a7f-4eed-9894-db2e5684fb9a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4d179d39-b138-49f8-bf1e-845429752ae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d990928-ca34-4444-8e50-b2d60d66b22f",
        "cursor": {
          "ref": "e4dbde2a-902b-4a69-9c2c-8f3865d3a825",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6043e47a-fefb-45cb-aca1-747c31f73b90"
        },
        "item": {
          "id": "2d990928-ca34-4444-8e50-b2d60d66b22f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2cdec85d-e304-4c29-b758-947e212fb325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ae0e8f-463f-4259-899a-7eff78dbd507",
        "cursor": {
          "ref": "81b9be41-9b75-439c-9c65-13b9853b9645",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "87a69efa-642e-473d-9fc2-bfbff1db0105"
        },
        "item": {
          "id": "42ae0e8f-463f-4259-899a-7eff78dbd507",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c3b3a455-ed79-4557-8de7-e218c90c8f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad4734a-77e9-4cd3-9780-c9813d29ec8e",
        "cursor": {
          "ref": "5bf8a4e2-635c-4505-9cde-e6070b5f1ecd",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7eb3d168-f104-4499-938f-9bde1c53517e"
        },
        "item": {
          "id": "1ad4734a-77e9-4cd3-9780-c9813d29ec8e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2e7196a8-3a64-456c-8242-7c514936b7e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16d0d7d-53ba-48dd-9c6a-b0d7f9ac6a14",
        "cursor": {
          "ref": "ff724330-dd9c-43dc-9c9f-8700ca869693",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5c14baab-7f3c-4daa-96ca-14149c56a397"
        },
        "item": {
          "id": "e16d0d7d-53ba-48dd-9c6a-b0d7f9ac6a14",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "37dacfc0-14b8-412a-9ce8-805267abe618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3b4373-0fa2-43a6-91a1-339f3a3faad5",
        "cursor": {
          "ref": "9b9a3a1e-9f8d-4572-95f8-1a3247a49bc0",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a544c3b7-cdf0-4e2b-bb1c-6eff223bc244"
        },
        "item": {
          "id": "2f3b4373-0fa2-43a6-91a1-339f3a3faad5",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c090e342-58da-4390-bde0-8fdcab1b7ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd078428-cf70-4998-8617-b7fe81bfb55a",
        "cursor": {
          "ref": "0661453c-41fd-4346-84ac-ad18a2b2b0ec",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d142f10f-c608-4c9d-90ba-15478c17f111"
        },
        "item": {
          "id": "bd078428-cf70-4998-8617-b7fe81bfb55a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "bc60025b-1d59-4c2c-ab1b-da409db651ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e53fbe0d-7a6a-425a-9f1d-94fc8e5af584",
        "cursor": {
          "ref": "0660d870-5f70-403a-900e-366139e3b039",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5e7f7579-30dd-49ee-9f0c-8bd382b2ffae"
        },
        "item": {
          "id": "e53fbe0d-7a6a-425a-9f1d-94fc8e5af584",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7a4f907d-a3e0-4033-919d-6e0fd266c63d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae707fc8-20b0-46d7-b46e-4cb3c95fde96",
        "cursor": {
          "ref": "da183488-7b61-4ef5-bd59-2f6a3bb0dfa5",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9b1557ac-700b-4879-a32b-402bb05a91a1"
        },
        "item": {
          "id": "ae707fc8-20b0-46d7-b46e-4cb3c95fde96",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "fcd3d63d-cc41-402f-bdc1-e3f5cc376822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d7235e7-b80c-4021-93a1-814efb1b99c6",
        "cursor": {
          "ref": "c0263209-e6be-4a79-be1c-869c3b3fc7cb",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fa2c48e6-3fc5-493d-97f0-5754571bcc14"
        },
        "item": {
          "id": "6d7235e7-b80c-4021-93a1-814efb1b99c6",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "72d37da3-07db-4b11-95a2-79548a1e1ebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "709753c4-700d-4146-893e-e427c782d5a7",
        "cursor": {
          "ref": "c30aced0-2773-4a4c-883e-7f7052f07ccd",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f8c9d84c-934d-437d-8563-0021d6550fe9"
        },
        "item": {
          "id": "709753c4-700d-4146-893e-e427c782d5a7",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d4918e95-6869-41b4-a0ae-405e5e685772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "943678f5-4812-4d81-81f5-e9228e7cfe05",
        "cursor": {
          "ref": "7c4f0247-3bc5-402a-8b73-027d7a6d4b4c",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "473889ef-924c-4e80-8ffd-a40a3bb40c4b"
        },
        "item": {
          "id": "943678f5-4812-4d81-81f5-e9228e7cfe05",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5456d694-4c2d-4d52-97bc-959989bc179a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5d42c85-5ba2-4dbe-8ce2-813d5b558a03",
        "cursor": {
          "ref": "dbff36b7-e410-4584-945a-4171da1cb252",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "37059f0b-7824-4831-998d-2594592f5b12"
        },
        "item": {
          "id": "b5d42c85-5ba2-4dbe-8ce2-813d5b558a03",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6f90fd39-db1c-44d9-a339-0aad404284c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "f2992544-fbd8-4286-bb8e-a38ea1222357",
        "cursor": {
          "ref": "3104217c-ffe1-4eae-ac24-97dbdf86ce1c",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e9a20485-37ab-4ff1-b888-ca41ceee7c19"
        },
        "item": {
          "id": "f2992544-fbd8-4286-bb8e-a38ea1222357",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1c2bed6a-4b89-4ae5-9986-4a31f32c392b",
          "status": "Created",
          "code": 201,
          "responseTime": 2340,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "37059404-9dc0-4028-bb54-ce618fdb13a1",
        "cursor": {
          "ref": "5926c079-1908-4a6b-8017-c7a8449d1bdd",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "41326ee3-ab6b-4bb8-bdc8-d17e7b4a5125"
        },
        "item": {
          "id": "37059404-9dc0-4028-bb54-ce618fdb13a1",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "5e637d18-49d8-41da-9347-44b740863e62",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "440108c2-5086-48ed-8142-5092d7e81528",
        "cursor": {
          "ref": "96c2380c-5d3a-4cf3-b516-89fdddd84fd6",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d6e566d0-ff76-42b5-9cfa-60121e17048f"
        },
        "item": {
          "id": "440108c2-5086-48ed-8142-5092d7e81528",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ab8e5e60-95aa-42b9-aee8-86691b202c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c80be295-9834-428c-b5b9-a7faaba6ca00",
        "cursor": {
          "ref": "dd7e2d8e-30d7-4315-80d3-08d02c7091c9",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "464f5ffd-5cfc-44da-9e1b-709d194de57b"
        },
        "item": {
          "id": "c80be295-9834-428c-b5b9-a7faaba6ca00",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "870d022c-e321-4700-bf69-c0a18cc7bdb0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "1c3a420c-5c5f-491a-93fb-886ce8465ceb",
        "cursor": {
          "ref": "caa2ff31-60fd-4aa9-8f2c-a3ac9d20b9e6",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ae57ad99-166d-43bd-951b-8c8c48b1f898"
        },
        "item": {
          "id": "1c3a420c-5c5f-491a-93fb-886ce8465ceb",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4139b921-5902-43eb-9aea-a10dd5e99c9a",
          "status": "Created",
          "code": 201,
          "responseTime": 1679,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "dae624f8-52a9-4318-b51e-4d2a9f859f15",
        "cursor": {
          "ref": "831b654c-fb9f-4092-a40d-beb7aafc5d84",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e9433ee4-a923-4752-a63a-23ac3adeef40"
        },
        "item": {
          "id": "dae624f8-52a9-4318-b51e-4d2a9f859f15",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1fcaedbb-07bd-4d95-ad71-ce6597fedf62",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "25c6f4a4-6bae-4e58-89a4-04b166d1049e",
        "cursor": {
          "ref": "a8a33c92-a1b9-44e9-920d-91fec36e7f59",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "741828ed-4f76-4d50-8561-0c836645411a"
        },
        "item": {
          "id": "25c6f4a4-6bae-4e58-89a4-04b166d1049e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "05a3df44-36c7-4129-a89e-170045ca844f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 839,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0b13be79-67c2-4248-b502-5cb5883a8510",
        "cursor": {
          "ref": "0634f95f-d5ca-4950-986b-952f927b4f52",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a317be05-2410-487b-a06b-9fc16f516435"
        },
        "item": {
          "id": "0b13be79-67c2-4248-b502-5cb5883a8510",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "211f10de-2272-4a4e-8916-311bf14e5b2d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "6436821d-8e81-47fd-a94f-66ecd0ed0ae1",
        "cursor": {
          "ref": "f4f865fa-8eaf-45fc-935f-cede407bf2b1",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e53b4436-c489-42ee-9803-938f32dcaf58"
        },
        "item": {
          "id": "6436821d-8e81-47fd-a94f-66ecd0ed0ae1",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "755bfb5f-3970-4ad2-8ea4-0f7d78b51ea6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "847f14f5-f72e-4699-9732-85e14a14a224",
        "cursor": {
          "ref": "82be224a-62ff-44aa-b2cd-1defe1839567",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "484f817b-a433-4f1a-b644-d018d00d18eb"
        },
        "item": {
          "id": "847f14f5-f72e-4699-9732-85e14a14a224",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6b6f0ede-be0e-46ac-a082-d0b0bde9b05b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ec6519e4-f0e5-4cea-9e1c-46e6d5cea5ef",
        "cursor": {
          "ref": "9a68cdf9-1955-4631-9e12-e8d91febda92",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2e15bd14-dbe0-4157-a7f8-3d0184aa9b42"
        },
        "item": {
          "id": "ec6519e4-f0e5-4cea-9e1c-46e6d5cea5ef",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4f6152f6-b5e9-4bc6-8b1f-81c9b48a5bd6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "41f557ec-307d-4f27-baca-a0678db5a0d4",
        "cursor": {
          "ref": "2fdc6788-ea1d-4291-b32d-c356f3cc214f",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f22a25b4-e914-44f8-9ac1-f4553c0c9d2b"
        },
        "item": {
          "id": "41f557ec-307d-4f27-baca-a0678db5a0d4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6cdaa5bc-4a2b-421b-8aab-fc44c1435c99",
          "status": "Created",
          "code": 201,
          "responseTime": 1072,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "77b57f7d-fcd3-474b-8e19-95fe2e11d95f",
        "cursor": {
          "ref": "7642589f-de6f-4f0a-b7c2-6cc5879df4fc",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "9ff698e7-ed3e-4a3e-8c5d-44cc33c66797"
        },
        "item": {
          "id": "77b57f7d-fcd3-474b-8e19-95fe2e11d95f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "850e8836-bff4-493e-9e54-4ce4c8d9fa4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a3e86b-8dc1-41c8-bdba-4d3d6ae6f1b0",
        "cursor": {
          "ref": "24356c43-beca-4bb9-9415-02580c2d7f98",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a815ef0f-d33e-4912-9d88-e911be1f3277"
        },
        "item": {
          "id": "42a3e86b-8dc1-41c8-bdba-4d3d6ae6f1b0",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3e755fae-f23f-4aca-bae7-15d053125c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "921e1e1a-4c71-4093-abe8-3b304a7c6f9b",
        "cursor": {
          "ref": "0b006a60-4d1c-4619-99b4-65e3a128088c",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5c76177f-5e15-4f8e-9a5a-19b16e66f6ce"
        },
        "item": {
          "id": "921e1e1a-4c71-4093-abe8-3b304a7c6f9b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6fe0b2f1-c80c-42b1-b3f9-c1a70e93eeb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3f60e77-adf8-4f04-af30-a048704db859",
        "cursor": {
          "ref": "a7c077f9-993c-4b0a-abe1-beceae3c2d6c",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "010dabf8-471a-4e3c-89c0-489a8eb68bc7"
        },
        "item": {
          "id": "b3f60e77-adf8-4f04-af30-a048704db859",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bb0a6a2d-767b-4a41-9635-c83dbce88d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b7b4181-70b9-44c0-a589-3ef7173dc25b",
        "cursor": {
          "ref": "bfc72863-202f-46d5-98b9-9eed5e49d305",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "dfc37434-1816-457b-9cb1-06362b33b674"
        },
        "item": {
          "id": "0b7b4181-70b9-44c0-a589-3ef7173dc25b",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b19c89cf-f29b-4309-b630-cd3b87225520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3693609e-3f7a-4b85-a4ad-d7b96f2961a4",
        "cursor": {
          "ref": "deefbdd8-dfca-48e1-b5d2-64236bbab1a1",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ca9bff48-1fe8-4e14-9301-0a9bfb3c96ee"
        },
        "item": {
          "id": "3693609e-3f7a-4b85-a4ad-d7b96f2961a4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "94ad5bde-9b24-43dd-88ca-d2145331eaec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65a35586-63e2-4593-a8c9-7ffd51fe686a",
        "cursor": {
          "ref": "83a552ac-92a6-4aa8-a66c-92fcb2aa2c90",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e1cb0d1d-d632-41c8-988d-7f7fa99008eb"
        },
        "item": {
          "id": "65a35586-63e2-4593-a8c9-7ffd51fe686a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "90234710-2ac7-4c40-a3ea-7404a338c03a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "902b76f5-075a-482b-bd3e-1fbae3919eef",
        "cursor": {
          "ref": "f1c2f634-687e-4d95-9596-f4bde0528907",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8f4b7a6a-4e4d-4c86-a20e-39480022a1e7"
        },
        "item": {
          "id": "902b76f5-075a-482b-bd3e-1fbae3919eef",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4eadf485-39d9-4764-9e2c-6cbb5b89718f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "502e87d5-94da-416c-b54e-f671126350bb",
        "cursor": {
          "ref": "7a96461d-3ccd-4ee0-b4f5-f62805279f30",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "70b5c969-f327-4681-a883-826a4a6fcead"
        },
        "item": {
          "id": "502e87d5-94da-416c-b54e-f671126350bb",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "97422251-5d0b-442f-9e02-c236c377d9a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75514d7a-ec5f-438b-a029-51d50969e80d",
        "cursor": {
          "ref": "06522672-a95e-447e-9af1-c767d6832293",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "769d4906-2fe5-4710-80e4-f9b7ca2d2645"
        },
        "item": {
          "id": "75514d7a-ec5f-438b-a029-51d50969e80d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d362ed17-d3b0-4ba3-8b85-b79d1febddd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d9da89-9535-40ae-9127-e5687ead8cc8",
        "cursor": {
          "ref": "fb894294-e2cc-407d-931d-d38051f9faad",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "790d9461-544d-4e81-9f7d-16df67017216"
        },
        "item": {
          "id": "b3d9da89-9535-40ae-9127-e5687ead8cc8",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9ba23421-0295-4949-b333-2566800ca98c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b4a20c-0e0c-4a86-9abd-590135405e85",
        "cursor": {
          "ref": "a94a0d1d-4d6e-4241-b135-dc654d4f2d4d",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "90ea65bc-305b-4dc9-b603-0a3ced03f034"
        },
        "item": {
          "id": "74b4a20c-0e0c-4a86-9abd-590135405e85",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "22ff7d47-7bb8-4ae0-9bda-8af84f175f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c675eb4a-b77b-4222-bf1b-db4914d59a62",
        "cursor": {
          "ref": "578e0d48-49f8-419b-88ee-60f501104064",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a6cc4f27-8d32-4b8e-9a13-641facc5a947"
        },
        "item": {
          "id": "c675eb4a-b77b-4222-bf1b-db4914d59a62",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8b6b9e4f-1bd4-45f4-ab89-db07da19ea59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b297898-40d2-4199-bb1a-98c6e92a60af",
        "cursor": {
          "ref": "090eaf27-7133-438a-b1f0-22a6acef8295",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e1e68809-21da-4311-bf9c-e327fcb27961"
        },
        "item": {
          "id": "8b297898-40d2-4199-bb1a-98c6e92a60af",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ae02ecdc-0e8c-4c4d-a964-df4d1c6ff56b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 797,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "d70a3840-fbdd-4593-af0e-99f97983f165",
        "cursor": {
          "ref": "d8aec7a5-fee1-40d9-86f2-c40bfd35976d",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "336dc049-2d5b-4f63-9f43-4104610311f2"
        },
        "item": {
          "id": "d70a3840-fbdd-4593-af0e-99f97983f165",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "8b96a470-8242-43af-a1b4-8f4cbdb9ae28",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 817,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "22dc235f-1633-4a45-8d95-c75f29cb03d8",
        "cursor": {
          "ref": "703dacd0-0cc2-4b58-966d-d15921cf85ef",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "674bbec9-ea40-4a89-b375-4b3ccea7604a"
        },
        "item": {
          "id": "22dc235f-1633-4a45-8d95-c75f29cb03d8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "40a5fb23-c72e-42bb-a396-9d4047f03f7f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "e195903b-1bd0-4035-9049-5f3fd15f3fe9",
        "cursor": {
          "ref": "db0d9adc-dcad-4f6f-a042-b12f8a721c1d",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1d0ab970-4761-49dd-a512-36fbf3b800c6"
        },
        "item": {
          "id": "e195903b-1bd0-4035-9049-5f3fd15f3fe9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "734396ac-f999-4b11-91dd-da35677515f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 906,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "83c1952c-3894-4137-84ab-9557ba431425",
        "cursor": {
          "ref": "a726e37d-187c-4c35-bbb3-37b0e7648309",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3cc873cf-9d65-4576-b39b-c4b8a62cb6d6"
        },
        "item": {
          "id": "83c1952c-3894-4137-84ab-9557ba431425",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d39e50c8-e5b2-4117-b023-88de1ce28d5b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "12260dce-5ced-45cf-b140-fb3a07e28b41",
        "cursor": {
          "ref": "8273a757-e446-4505-9dac-bca36b66b2df",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9fade406-d8ea-4746-ac8e-ed553f7b7aff"
        },
        "item": {
          "id": "12260dce-5ced-45cf-b140-fb3a07e28b41",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "200c4546-a5f1-4f89-92ff-62750ac42628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c266e54-e282-4065-9e29-68874b452295",
        "cursor": {
          "ref": "44397020-60e3-4697-9e38-3376c54e6ef5",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "fbc2bf26-a5c8-4652-8789-92a429676663"
        },
        "item": {
          "id": "1c266e54-e282-4065-9e29-68874b452295",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1ed8a4d6-ffd7-49a8-8ea1-1ce8621936b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "841e63be-e438-48d7-beaa-e5fb1dca2d99",
        "cursor": {
          "ref": "c551b313-8821-4d73-b2d4-c04fe0b1630e",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7134273a-3836-4df1-a2cc-557c090ed19d"
        },
        "item": {
          "id": "841e63be-e438-48d7-beaa-e5fb1dca2d99",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3a9d9468-9efa-4e84-b14e-aee04bed920d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96878937-797c-4eb8-a236-77d7e1807e93",
        "cursor": {
          "ref": "38c121d9-8948-4bb8-96b0-42ec5d209f86",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "97f11ffb-eec4-43e6-a1b2-da74e68563ef"
        },
        "item": {
          "id": "96878937-797c-4eb8-a236-77d7e1807e93",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4f666c98-4793-4601-9cbb-a5fbcead64b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13bfb4fe-ee12-4dbe-ba1c-463f885428f9",
        "cursor": {
          "ref": "d25414cb-0d23-4a36-a6e0-cb0c0e4c6c8e",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a6cf6d9b-a2cf-40b5-8802-b738d938aad0"
        },
        "item": {
          "id": "13bfb4fe-ee12-4dbe-ba1c-463f885428f9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b9a1e78d-3f01-4b95-a98d-897c36e5771f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e46cb0f-1e02-470b-82bd-d5de3843b788",
        "cursor": {
          "ref": "972eea5f-5899-4308-a6b5-61e3beebcd03",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "237e337d-5792-4afc-bb7a-b17fa3fbbad8"
        },
        "item": {
          "id": "1e46cb0f-1e02-470b-82bd-d5de3843b788",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "f873e824-9ca6-4e2d-85c7-177f597a0708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b6bddb4-568d-4c2a-881c-cfacc8ccef5d",
        "cursor": {
          "ref": "64f4e00b-8a28-4e0a-b202-d61dfa098f95",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "4bcb0ce4-64dd-41e8-97db-855ea315e27a"
        },
        "item": {
          "id": "1b6bddb4-568d-4c2a-881c-cfacc8ccef5d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3a15a3e5-e1d1-480e-8f9c-e1e159da4d33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba8450b5-5b17-407f-8ce7-28b476298fa4",
        "cursor": {
          "ref": "55b400bf-638f-4650-ba57-2620d80600ab",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a9512c42-9a06-41ab-841d-5c913414c59a"
        },
        "item": {
          "id": "ba8450b5-5b17-407f-8ce7-28b476298fa4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "381210bd-ac1c-4588-8a28-40bfb615d295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f6d352-b558-463e-8261-03f159665c51",
        "cursor": {
          "ref": "dece8eed-13bb-4f37-b4c6-18d247bce295",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4aadabd0-17f6-49ef-8d1b-c24845b9aba6"
        },
        "item": {
          "id": "c5f6d352-b558-463e-8261-03f159665c51",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "580c5843-089b-4972-a508-a852227ca10b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d365f1-aea2-416d-9055-7d84fc3fe53c",
        "cursor": {
          "ref": "c4939f11-4326-42f1-b3da-71febb7d8454",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "1d830a47-a208-4f55-9ad9-31fddddbbd25"
        },
        "item": {
          "id": "d0d365f1-aea2-416d-9055-7d84fc3fe53c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "1d5e05a8-9bac-4300-9eca-7a3f38c9c0b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f7bdf91-fc1a-42de-9354-0df18495c1c3",
        "cursor": {
          "ref": "f2543ee8-5dc3-4c1f-81f6-bdc70c5ec97c",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1976a606-6a3f-4c8f-8508-f67960893cb6"
        },
        "item": {
          "id": "0f7bdf91-fc1a-42de-9354-0df18495c1c3",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8f837ea9-0006-4b91-8802-d237cd82c827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ceac5d6-7a15-4761-9bad-2aa54c80bb5b",
        "cursor": {
          "ref": "11774bff-76d7-4f9b-b483-19c81796439c",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6a84e61a-17ec-461b-a348-5b70b8b59dfd"
        },
        "item": {
          "id": "2ceac5d6-7a15-4761-9bad-2aa54c80bb5b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d73c0104-cfd0-4db0-a510-2980ff795fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d275938-37ea-4f75-9c67-61460f828b6a",
        "cursor": {
          "ref": "7a058fae-0a79-4d14-a99d-82a2f4d6acb7",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "67a117f9-9137-4bda-95ab-5b1e3c36d48a"
        },
        "item": {
          "id": "2d275938-37ea-4f75-9c67-61460f828b6a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e62526fa-2262-40f7-bc33-4b059e7a5d2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9814014-5970-46e4-abc4-08e732ec39cf",
        "cursor": {
          "ref": "65b7a6d0-b4c8-4128-b471-3a332f5568dd",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ffb76ed5-4662-4a41-9c71-cacaf60805a8"
        },
        "item": {
          "id": "d9814014-5970-46e4-abc4-08e732ec39cf",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "abd1c078-007b-4dd2-a3b9-4b5bb2d07b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd6512f-ca2c-487e-976e-6f22ac39794e",
        "cursor": {
          "ref": "a00a40a0-725e-43c0-9254-011451a0c356",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "bf5585ec-6972-464a-aa7f-3f6808491d73"
        },
        "item": {
          "id": "6fd6512f-ca2c-487e-976e-6f22ac39794e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1cee41d3-7656-49bf-bc46-28b4ac5c535c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d84d24-88c4-408a-9e37-97b4b6104e6e",
        "cursor": {
          "ref": "7e35c875-0465-42c5-b5be-1259a4bfc147",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "3c12893f-80fd-4c78-8619-1e7b7fd98d5c"
        },
        "item": {
          "id": "77d84d24-88c4-408a-9e37-97b4b6104e6e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6b5eef6e-4776-4758-a187-ec3d8ccb96e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "767b09f2-f7c3-4d3c-9b12-3e06590d5632",
        "cursor": {
          "ref": "45c15a98-7b3c-452b-abda-bea25b22d0a7",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "de152ae5-1b75-401e-9a0a-6ac2e9d92067"
        },
        "item": {
          "id": "767b09f2-f7c3-4d3c-9b12-3e06590d5632",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2c650e35-454f-4758-8990-17077d25e1f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2865bee-cf0a-44cb-8448-5f639e3e2ed7",
        "cursor": {
          "ref": "f8fe58ae-19bf-4e05-b61a-6b8beec4c3bc",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "455a6238-ca31-4c32-8565-69d4fb3d3855"
        },
        "item": {
          "id": "f2865bee-cf0a-44cb-8448-5f639e3e2ed7",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8388de9d-df9d-4910-aa37-55fccc3aa68f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b17e48-2ce7-4d40-bbba-ee695e1397d8",
        "cursor": {
          "ref": "e6094d53-9ac0-4363-9d61-39b9c01db7d1",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a6b4e880-92a9-42aa-8766-ef0bbac83537"
        },
        "item": {
          "id": "b4b17e48-2ce7-4d40-bbba-ee695e1397d8",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6af9a4c3-b0fa-44b0-96ba-4d50d2ead12c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f966ecc7-f0c9-43cb-a5d2-6186dcb91df0",
        "cursor": {
          "ref": "76241838-779c-4643-85ba-aff81a7be5c8",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d0408cf0-4e28-4ec7-a8b7-180620f40347"
        },
        "item": {
          "id": "f966ecc7-f0c9-43cb-a5d2-6186dcb91df0",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "94e1ec0c-e1be-4d7d-b369-a4ff4d1fb629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21666fd4-e3fa-484c-b00d-cbf8a9574ebf",
        "cursor": {
          "ref": "e4c046f3-09fa-4f8f-af85-573e870fd4f3",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a7ac50aa-049a-4c04-8a6d-f079608abeb4"
        },
        "item": {
          "id": "21666fd4-e3fa-484c-b00d-cbf8a9574ebf",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "de3e5cb0-7f6b-4dc2-a1c9-11d705fd8ee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df65c71-5e91-407c-9c28-40da0da74c62",
        "cursor": {
          "ref": "a78afd03-88c8-4801-a300-51a42b67a2c7",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3831f2c5-47f0-4e68-b455-d3b0608e38a0"
        },
        "item": {
          "id": "2df65c71-5e91-407c-9c28-40da0da74c62",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "04d401fe-5897-4398-b12b-0c50ded77d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8845f7c0-23bc-41dc-b019-0758c28868db",
        "cursor": {
          "ref": "b1e37814-b86b-46df-a15e-fae0e6dbaac8",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9bc0eb22-134f-4f6e-88a9-d04484b4b856"
        },
        "item": {
          "id": "8845f7c0-23bc-41dc-b019-0758c28868db",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b435ca6e-fed3-407d-954d-712f04f25906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "179f3465-713e-421c-bbbb-2f22ec6e4d5c",
        "cursor": {
          "ref": "db37a542-a0fc-471c-9e08-11d098e6e584",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "37331358-5611-4535-a9c7-138d68fb4ac2"
        },
        "item": {
          "id": "179f3465-713e-421c-bbbb-2f22ec6e4d5c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1cf5f827-1bdf-46e4-a97a-73739129a762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f5ab5cd-dba8-4af5-b578-b644984f5b38",
        "cursor": {
          "ref": "7b28b984-4118-4b8f-8291-e1dcb4dc01a9",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f290645a-33cf-494b-9fe7-1ff1659e69d9"
        },
        "item": {
          "id": "8f5ab5cd-dba8-4af5-b578-b644984f5b38",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "36f581b5-a665-458d-a3d9-ad19d6e1aadc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a37ea56e-b96a-460e-9ab1-f15982f30e66",
        "cursor": {
          "ref": "aa3d10ee-db81-4d58-89ec-784cfe7bee2a",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "72493255-162e-4e25-a137-86fbd09f0d1b"
        },
        "item": {
          "id": "a37ea56e-b96a-460e-9ab1-f15982f30e66",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "538ffcc9-5274-416a-b07c-a729f352f8b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fde92b9-e479-4011-a510-8858091a55a5",
        "cursor": {
          "ref": "838878b4-9b5c-405a-ad1b-23e9a3f28822",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "64e84799-4718-4798-9427-639382a42a36"
        },
        "item": {
          "id": "4fde92b9-e479-4011-a510-8858091a55a5",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "da230465-31c9-4b9d-bbcd-a95cd8bfdf6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b2c7a23-ceb0-4f55-a2ee-5692ee5f2cd8",
        "cursor": {
          "ref": "259f7b74-12fe-4115-a4db-c485ef4d459a",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8f6d5967-f150-44b1-ac41-12441d6ea638"
        },
        "item": {
          "id": "7b2c7a23-ceb0-4f55-a2ee-5692ee5f2cd8",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "6ee8b06b-60b9-452e-ba14-fb4c83f9d4ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b42765-fa6c-4f2e-90be-af65bfdc2199",
        "cursor": {
          "ref": "1ff8973e-b550-4859-9797-851255e4d83e",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "545312d0-5f84-42e0-99ca-7379d2b16996"
        },
        "item": {
          "id": "e6b42765-fa6c-4f2e-90be-af65bfdc2199",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e5b98be0-3b71-41ae-8836-dc8df3ecf159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4540ad56-f4ba-4a38-a7e1-f58346a743ab",
        "cursor": {
          "ref": "09259dd5-9d5b-4d39-8413-6711205ec701",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "818f2af2-eb6d-45ce-81a1-f620138ab3c2"
        },
        "item": {
          "id": "4540ad56-f4ba-4a38-a7e1-f58346a743ab",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c7b4423b-721c-49d2-9a59-5f24d184a74f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5cbc1ca-b82a-4177-85f2-c7ea2f1c3fe8",
        "cursor": {
          "ref": "8324c26d-81b8-4df0-b89b-d2908dc75e88",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "57e7e0b7-1411-4e7c-9a8f-29404e65d8a7"
        },
        "item": {
          "id": "a5cbc1ca-b82a-4177-85f2-c7ea2f1c3fe8",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d199788e-b925-4918-b8c2-764c5d659c41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae336756-c7b2-4b36-a649-1d5230872b1b",
        "cursor": {
          "ref": "b4dd6a29-8365-45ec-b660-a5ed020f7ee6",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "aba32903-edb3-47bb-9883-edbf7dd23933"
        },
        "item": {
          "id": "ae336756-c7b2-4b36-a649-1d5230872b1b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f470d3a5-ad1f-4d98-b3a8-8ebdd3c62253",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739216e3-5c48-45f2-98e5-c3908eb2251a",
        "cursor": {
          "ref": "4ac9e393-fa23-4b53-b302-c18a16b6939d",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "97863214-75e3-4799-9235-9b6fe29f2631"
        },
        "item": {
          "id": "739216e3-5c48-45f2-98e5-c3908eb2251a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "40e75322-4b73-4a6a-a8bf-844d2b75ee8f",
          "status": "Created",
          "code": 201,
          "responseTime": 1692,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "b431327f-99f5-43a5-8bcd-3003f138ac8c",
        "cursor": {
          "ref": "4b7bb625-365f-410e-9467-4c757ef7e056",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "06bca2c2-0ab9-4c70-9b6e-2e7d4578f3bf"
        },
        "item": {
          "id": "b431327f-99f5-43a5-8bcd-3003f138ac8c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "1f1aec71-abee-46bd-b878-41441677f72e",
          "status": "Created",
          "code": 201,
          "responseTime": 1022,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e34d934-434d-4fdd-949f-03e420236740",
        "cursor": {
          "ref": "d4f4f838-1627-4f94-a287-3ef6d0e439d6",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "bf8da559-1ed0-4015-9f82-5e78a253f6ed"
        },
        "item": {
          "id": "1e34d934-434d-4fdd-949f-03e420236740",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4d7ebd74-7a96-42ad-93d1-7429d64d0833",
          "status": "Created",
          "code": 201,
          "responseTime": 1070,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e97fcba6-8fa1-472d-9f5f-31e0f2a7d3a7",
        "cursor": {
          "ref": "f4f90263-818f-42b4-90db-0f87f4ebc653",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "aff42b22-b2c0-4f2d-882a-44bcf3138d16"
        },
        "item": {
          "id": "e97fcba6-8fa1-472d-9f5f-31e0f2a7d3a7",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d565e9ae-421e-451e-9745-38f77f6dd358",
          "status": "Created",
          "code": 201,
          "responseTime": 1069,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d37ba16-15a6-4b4a-8ed6-2b4a197bdcd5",
        "cursor": {
          "ref": "0cb72441-8a5d-44ae-8c5f-d846945b414f",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "26c30e31-7589-4564-ac07-69ed6812a497"
        },
        "item": {
          "id": "9d37ba16-15a6-4b4a-8ed6-2b4a197bdcd5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ea4a0d4a-d921-42d4-8a32-cea679541b7d",
          "status": "Created",
          "code": 201,
          "responseTime": 1065,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "050f7317-695d-4e87-8512-07323959f183",
        "cursor": {
          "ref": "041fbe95-bd42-48ab-9232-d04b75bb1646",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f5a270a2-7e80-440c-b056-b040f1daaa68"
        },
        "item": {
          "id": "050f7317-695d-4e87-8512-07323959f183",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "40f9e78e-ad47-47b9-8b46-3ab8ab1bf933",
          "status": "Created",
          "code": 201,
          "responseTime": 1082,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec2d480-3ccf-4846-a649-17f5f3938318",
        "cursor": {
          "ref": "53f86270-31a2-4fd4-ae73-5449a9749152",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "efa689b4-7855-41a8-b7a8-72a5843478b8"
        },
        "item": {
          "id": "bec2d480-3ccf-4846-a649-17f5f3938318",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "09a6761a-4846-4ec6-b198-b7881a639e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc0a8301-e5af-42db-8341-f343490e0b5d",
        "cursor": {
          "ref": "17095dff-5e77-4690-ab7f-b4278cdf23a4",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "48898c72-e714-4f71-be86-a12259bbd495"
        },
        "item": {
          "id": "bc0a8301-e5af-42db-8341-f343490e0b5d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e93671fb-6d29-4c94-af1b-1182051121ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e149b67d-5623-4507-bacd-c16dbc0883e3",
        "cursor": {
          "ref": "060f96fb-2d2a-49a3-aeb4-f94a0af98d3e",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6ccfae4b-64e4-4516-a0f9-856bcb0bf1df"
        },
        "item": {
          "id": "e149b67d-5623-4507-bacd-c16dbc0883e3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5abb8082-7110-4e90-b419-9da8f1309cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc537196-0d76-48fa-aed8-0fac40349f5c",
        "cursor": {
          "ref": "8f612708-c3b0-4787-b6e7-2d7e76064e15",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e31261b6-6425-4129-b279-9f57fcfd01e7"
        },
        "item": {
          "id": "cc537196-0d76-48fa-aed8-0fac40349f5c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2e1cf806-7b9e-4787-aa29-66bf84c13c4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa2ce2c0-f85a-4d25-95e2-5e564855da36",
        "cursor": {
          "ref": "1601f2f0-a04c-4d2f-86bd-239713aec478",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9a4cb15a-9b77-4ba8-8114-4fdb27c4c307"
        },
        "item": {
          "id": "fa2ce2c0-f85a-4d25-95e2-5e564855da36",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "09545811-da0f-432e-88d7-778c8ea1a7fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dacd6bda-89a2-4bb6-9efd-cc6bb3fad2bd",
        "cursor": {
          "ref": "0f7d1347-012b-444d-b545-bfa080ed77f5",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "07273c77-8608-45cc-82ae-5275e7d9b8ea"
        },
        "item": {
          "id": "dacd6bda-89a2-4bb6-9efd-cc6bb3fad2bd",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "532119b2-9347-45b7-bb29-860f1565d04c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ae98e7-4a78-4273-beab-dd866128eaeb",
        "cursor": {
          "ref": "1df60608-7ef9-4eaa-9955-e4577df37577",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7dce5be1-3fbc-4650-8d21-da7550d7a4b5"
        },
        "item": {
          "id": "a9ae98e7-4a78-4273-beab-dd866128eaeb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0cb99f81-16f6-4d35-b73f-adb19fe902dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7fe9c4c-1d42-47c3-91f8-f03dcd9c77b5",
        "cursor": {
          "ref": "88a63ca3-9c27-4a17-96e3-2a5cee9ccb25",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4fa00a64-cb98-439a-8209-44c4e5a97d17"
        },
        "item": {
          "id": "c7fe9c4c-1d42-47c3-91f8-f03dcd9c77b5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b7ea373d-6ffd-4ecd-aac6-c4aded61fbe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e268d939-4d02-4126-9ec3-cbdf330761d3",
        "cursor": {
          "ref": "003e5b10-d493-4013-8964-60886ee1d527",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "bee01dc0-9afb-4c79-b0dd-09e99841eadc"
        },
        "item": {
          "id": "e268d939-4d02-4126-9ec3-cbdf330761d3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "05210b6f-59de-4f00-b087-d10bc23b9870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e11de1-1db9-44dc-b7bd-924a432964f7",
        "cursor": {
          "ref": "ce247332-57e1-4909-96cf-890a02e3d122",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7f68a375-83e9-479a-b029-ace4d95ffe45"
        },
        "item": {
          "id": "66e11de1-1db9-44dc-b7bd-924a432964f7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b88b119f-a5f4-44c8-a83f-1514c7f18bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e913ccd-f15f-4083-af30-066e9714249e",
        "cursor": {
          "ref": "ccc2f291-8e3a-4997-99f6-3cab698abac4",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9e5c79d2-937b-4ea4-85cf-9684343612a9"
        },
        "item": {
          "id": "6e913ccd-f15f-4083-af30-066e9714249e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "615d698f-a7e6-41ec-b177-950079064802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dfbd10a-3374-4cc3-a4cf-e02030987ddb",
        "cursor": {
          "ref": "53c7e361-cdf1-42ad-abe1-5148dcef30e5",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "766e57ce-57b7-4e86-abc1-8b40df3df666"
        },
        "item": {
          "id": "1dfbd10a-3374-4cc3-a4cf-e02030987ddb",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0c32e245-2898-4489-9ca4-5e280c242973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "340291f0-688a-4e1e-9cc5-c2ff3175252a",
        "cursor": {
          "ref": "d4ea105f-9a62-471c-bbac-034ca52194ea",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e76b6ab2-038b-4b2b-a49e-6015365c74b0"
        },
        "item": {
          "id": "340291f0-688a-4e1e-9cc5-c2ff3175252a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "45df6ba6-55fa-44e6-b7f5-ea693fb644d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93fbe473-0ed2-4f2f-acd9-90c5fe039d58",
        "cursor": {
          "ref": "6f5c3934-2d77-4b7e-8c42-c6229fcfb470",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "bf985f87-b324-4859-aba5-44ffebdb318a"
        },
        "item": {
          "id": "93fbe473-0ed2-4f2f-acd9-90c5fe039d58",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b6fecb9b-3817-4904-aab7-88a6f2a126f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85360120-0471-4c63-8eae-69f923051e5d",
        "cursor": {
          "ref": "9ac4ac89-fa15-48a8-9d6d-8685ba7d0e10",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d07d30ff-dd5f-44c8-a0ab-1a9907496755"
        },
        "item": {
          "id": "85360120-0471-4c63-8eae-69f923051e5d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f302ecdc-cdcf-4ef6-afa6-bbde6fd3f92b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0b13aa9-2df6-4c90-847f-098ec7db6128",
        "cursor": {
          "ref": "68388e73-e6dc-4ce0-be34-e25ab4996e29",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "dc13b64f-7937-43f7-8fbf-e00a0cad7c33"
        },
        "item": {
          "id": "c0b13aa9-2df6-4c90-847f-098ec7db6128",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "dfe22a1d-e134-4fe7-a02a-1dec63cd56d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "406ad04d-7945-406c-9e0e-8d45b3e2072b",
        "cursor": {
          "ref": "f2488389-80ae-4cb0-9234-af6e155b444a",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "85d8cd57-9c19-4c7e-ad8b-002657ae8b04"
        },
        "item": {
          "id": "406ad04d-7945-406c-9e0e-8d45b3e2072b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5fd733ad-97ec-42c0-937a-8a523d687f5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39bf1f49-03a2-4efa-9084-c4a4c8b42090",
        "cursor": {
          "ref": "87205781-b990-41da-ac4e-4cffa610f77c",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c558e947-321a-4c83-95b5-2084a326f366"
        },
        "item": {
          "id": "39bf1f49-03a2-4efa-9084-c4a4c8b42090",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6637f0ac-9c23-4d2d-a50b-db92d630eab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "712a64f3-9650-4475-b677-420a21f59f68",
        "cursor": {
          "ref": "45f64ba5-9cc9-4a57-877b-ab6e9f053b7b",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5c08f9cd-9272-4604-99e5-518e956332f9"
        },
        "item": {
          "id": "712a64f3-9650-4475-b677-420a21f59f68",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0da020c0-271c-404d-81cb-fcdf5bc0510a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ec1697-b550-4629-9e23-c82b618b804e",
        "cursor": {
          "ref": "4636b580-191e-40a5-a404-e1ad557344f4",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "12103b49-e919-4cbf-90ae-f843db12ef37"
        },
        "item": {
          "id": "19ec1697-b550-4629-9e23-c82b618b804e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4b1bc55c-4535-4a9c-80a3-1a7b050baa81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a8f3bab-d3a8-44d6-823d-0a26ba5f0685",
        "cursor": {
          "ref": "28b4efe9-6c4c-4aef-9a5f-18c15f4d8896",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d7de0b31-c288-4672-badc-aec6b6414d8c"
        },
        "item": {
          "id": "5a8f3bab-d3a8-44d6-823d-0a26ba5f0685",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a273f2d3-a67a-46cd-b078-1af37a7edd0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "687fb10d-f5c1-4491-bac2-b7c00b2f06b7",
        "cursor": {
          "ref": "cc7a66ae-1cf8-40eb-9592-fa62887931b2",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e76ea390-2b1c-4086-86ea-c6cc51f69c47"
        },
        "item": {
          "id": "687fb10d-f5c1-4491-bac2-b7c00b2f06b7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "40a51627-f313-4462-8c6e-b3c5403ff6d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd4ffa43-7ea3-413f-bb7e-d8a196dc1677",
        "cursor": {
          "ref": "82502ac0-be55-4865-aaa7-51bd0115c6be",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4135d493-1c21-4748-a395-0e04e6d89b14"
        },
        "item": {
          "id": "fd4ffa43-7ea3-413f-bb7e-d8a196dc1677",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a05bda19-f863-4981-be3a-675584e315a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc2bcf5-f759-4920-b9fe-18ae94a7c44f",
        "cursor": {
          "ref": "bc5197e0-6078-420b-8627-891a13a5fbb7",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b366173d-8d85-4140-8ca1-5d90326acf5b"
        },
        "item": {
          "id": "6dc2bcf5-f759-4920-b9fe-18ae94a7c44f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c5c18153-cfd4-4d61-ba14-5c66f4e2162c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a755b0cf-b29c-4e32-a93d-7103f991b840",
        "cursor": {
          "ref": "5bcf9c03-75e5-46f5-aefa-177193215034",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7191f338-f667-466d-bf8a-551cdb28f0dc"
        },
        "item": {
          "id": "a755b0cf-b29c-4e32-a93d-7103f991b840",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "79e5c555-a9dd-4a57-9a6f-223bdfcfd0b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867563ab-170a-4a47-ac2c-2a0541a913ac",
        "cursor": {
          "ref": "07f8cdf8-5650-4f9d-b2e8-37ccf985f06d",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4b26bc54-1ca9-4941-aed4-3684eee9e43f"
        },
        "item": {
          "id": "867563ab-170a-4a47-ac2c-2a0541a913ac",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "185d50c1-57a2-43fb-8ec1-91719d2b82d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47aca74d-7b5a-4215-9276-63212c85825e",
        "cursor": {
          "ref": "2988da02-358f-474e-97cd-38460c188c3f",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "019e3ea0-d9a4-45ea-9577-8ee7462de06d"
        },
        "item": {
          "id": "47aca74d-7b5a-4215-9276-63212c85825e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fc635c53-1570-4327-be1b-ca61da7b2829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c80959-9916-4bc3-89d8-423bf0bad1ec",
        "cursor": {
          "ref": "35ff5565-baf1-478b-a50c-7d2562ea49ba",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "12d8cfe7-fb69-4c67-bc58-357c1fd08a58"
        },
        "item": {
          "id": "99c80959-9916-4bc3-89d8-423bf0bad1ec",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "761aa52e-bdc2-416c-9cd4-c71327cf33c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ed5e7a-828a-420c-885d-f78568ea5093",
        "cursor": {
          "ref": "6393406a-1319-4a62-8f5d-01445d29372b",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "486a9141-1ef0-44a0-9bc4-5e2443a1cb29"
        },
        "item": {
          "id": "77ed5e7a-828a-420c-885d-f78568ea5093",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "27a56515-0992-4c0f-8a30-60f6047ab0ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e81505e-8456-4527-bca6-91e31e2ea27e",
        "cursor": {
          "ref": "371a8ac0-bcef-4be5-8408-efd56a264a1c",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b28b1b00-dab2-49b6-a4fa-6eda3973018c"
        },
        "item": {
          "id": "6e81505e-8456-4527-bca6-91e31e2ea27e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9cb2b3cb-fe9d-40f1-ae35-640bd47a6932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5faa98f-6366-4b28-ac2c-29f3b0741d59",
        "cursor": {
          "ref": "47540549-cc34-4145-9ffc-1a4bd6e1bd51",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a25fc28a-4f81-4661-9d44-a17eb37c8818"
        },
        "item": {
          "id": "e5faa98f-6366-4b28-ac2c-29f3b0741d59",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "63132f74-385b-4e0b-ae53-979421781f42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ec3da2-b026-45c9-bb56-538f46864341",
        "cursor": {
          "ref": "cd72426a-b067-4165-8f79-43fd15ce2ad2",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c0c6d94f-4e10-46f8-bfad-af79a5f79f47"
        },
        "item": {
          "id": "02ec3da2-b026-45c9-bb56-538f46864341",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "579a443e-ded2-4ff8-98c4-40d95c1ac6d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dcc1964-1322-4e0c-84cf-0d84c7b380e1",
        "cursor": {
          "ref": "c308237c-3490-4595-b7f7-5fa357fdbe9d",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "bb55979b-aae9-4e94-82c6-41d071bdbdd3"
        },
        "item": {
          "id": "2dcc1964-1322-4e0c-84cf-0d84c7b380e1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "946344e2-949f-43d2-a14f-68835deaf29e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b609b16f-388a-4774-8de2-4b8e55cab1cd",
        "cursor": {
          "ref": "05240b25-b008-4c41-8443-ed052e6ff9a3",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c6ef3728-92da-4c32-9c4a-829d9969bdd9"
        },
        "item": {
          "id": "b609b16f-388a-4774-8de2-4b8e55cab1cd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c68489fc-6e81-4ace-bbef-bff092ff0991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25aade68-abf7-404a-8e15-b5335e443ee4",
        "cursor": {
          "ref": "38360be9-635f-4922-a340-6e4dc37d4fe3",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "055448f6-b514-451b-87dc-2f9e844a1293"
        },
        "item": {
          "id": "25aade68-abf7-404a-8e15-b5335e443ee4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d9aa0cf2-10c6-4a01-bac1-0cca09aecce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376c924c-c95a-432a-b525-2357a4d9eb3e",
        "cursor": {
          "ref": "471bad26-7ca2-42ba-8a75-7af52a0acd04",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9fe16bb1-f3dc-43ac-8f90-293a40e35406"
        },
        "item": {
          "id": "376c924c-c95a-432a-b525-2357a4d9eb3e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a0d7e338-1359-41ed-8741-30b15bb57839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd928ad3-ba0b-4dae-bb86-c043caa1fb56",
        "cursor": {
          "ref": "824c2ba0-f1c5-402a-aefd-7111738a4f2d",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d06e98f1-8cf6-44f0-a0a6-4a3bcff4efe5"
        },
        "item": {
          "id": "fd928ad3-ba0b-4dae-bb86-c043caa1fb56",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f5559033-5325-41c8-b000-d93061e0b3c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d1c33b-7db1-4e42-bea5-bf3667380dd9",
        "cursor": {
          "ref": "02907006-1470-4064-8921-5ba80e373ac3",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ae44f63a-c9cf-486d-8a6e-e8615bcf49e4"
        },
        "item": {
          "id": "90d1c33b-7db1-4e42-bea5-bf3667380dd9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8a60f141-2f2e-470c-bc0f-e7064f64eeaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1458ce9d-103d-41bc-9ef0-5efe761f30ac",
        "cursor": {
          "ref": "90209546-b93e-4378-b808-dbb27df0a6ee",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "abddb1e0-c54b-4b7b-8ff3-1b21233f65f2"
        },
        "item": {
          "id": "1458ce9d-103d-41bc-9ef0-5efe761f30ac",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ba56fdc2-dc2f-4c44-b3f1-665d27dce572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7620a2-8bf4-416b-849d-25bbe0c43b78",
        "cursor": {
          "ref": "4f1471af-58d0-49cf-bd78-8dbf0409413a",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f20b1999-ac36-4e06-8443-4c403b256649"
        },
        "item": {
          "id": "ca7620a2-8bf4-416b-849d-25bbe0c43b78",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6d4314b3-57a2-4333-8194-082a5c60a341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb44172b-8f2e-4dfa-b13d-ee6e1a120864",
        "cursor": {
          "ref": "a7a4923b-fe68-4e20-b0e1-b70381a5b4e3",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "734631b7-feab-46c7-af7d-0799116265e8"
        },
        "item": {
          "id": "cb44172b-8f2e-4dfa-b13d-ee6e1a120864",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ecb283bd-0772-4905-b6e3-261f6a10ffe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6629c6c6-4ccb-4b6a-bc8d-00ec27622687",
        "cursor": {
          "ref": "23dd971a-9bb7-4397-88c9-bc734ba55844",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "521524a5-50ea-4141-8218-1772086b1bf8"
        },
        "item": {
          "id": "6629c6c6-4ccb-4b6a-bc8d-00ec27622687",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d66c29c0-c52b-4855-b342-5e930ce1e0f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1123de3c-e796-4495-8dc4-27093d9e68b5",
        "cursor": {
          "ref": "5a470fda-401f-4db2-b756-730aaf477ff6",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "5e1fccff-d684-498c-8d3b-dd91c2f6a47c"
        },
        "item": {
          "id": "1123de3c-e796-4495-8dc4-27093d9e68b5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "49ad6151-787a-41bf-bd6b-417ca279ea30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac2ed8f5-8e83-44dc-8ad5-4d880576bc3e",
        "cursor": {
          "ref": "810deaa7-37a6-495a-bb76-b9f82bfcdac4",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "62442f00-3cca-46f6-bebf-6955339076ed"
        },
        "item": {
          "id": "ac2ed8f5-8e83-44dc-8ad5-4d880576bc3e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "052d40fc-ec62-46ad-a666-370384f1174a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60011843-e0e6-4029-a80f-b37108b0188a",
        "cursor": {
          "ref": "9b6565ca-c39b-4e2d-95aa-a65feaa0f41d",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e3beb422-d46c-4f13-8a04-7a76b7bbf3cd"
        },
        "item": {
          "id": "60011843-e0e6-4029-a80f-b37108b0188a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f92eb41a-4f22-4787-a660-0b5498348286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2438367e-7f4b-4d56-b7bd-3e74d5fc8ca3",
        "cursor": {
          "ref": "ae2643fa-4419-47b0-87d0-72d22f54f6e2",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "16d7717e-8d7e-4b06-9c2a-bb194b48e946"
        },
        "item": {
          "id": "2438367e-7f4b-4d56-b7bd-3e74d5fc8ca3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "874cd8f7-3e44-47a3-821d-0abb36c3fecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1768f3d2-53c8-42db-bcc8-c8040aeb2100",
        "cursor": {
          "ref": "3fcfd611-ca20-42fa-b5bb-881301961b14",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "47effa54-67dc-4eab-bc8b-46da92a8fdaf"
        },
        "item": {
          "id": "1768f3d2-53c8-42db-bcc8-c8040aeb2100",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7a21aa37-b42a-4413-8c6a-ca296825c98b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e09f251-aa23-465f-a750-c69525652118",
        "cursor": {
          "ref": "366ee969-4932-4a62-b77b-ea0f5c6c955c",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7ee72f15-a9f2-4e01-87c8-fa674cac9bf8"
        },
        "item": {
          "id": "2e09f251-aa23-465f-a750-c69525652118",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "11eca1f1-3a61-41c9-a9bd-5140c25d9439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c91cf8-84f4-4730-8944-1a032def5927",
        "cursor": {
          "ref": "d1ec4099-4b62-4563-8b91-1e70a2d2486f",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4d54abaa-a1fa-45a3-b6ab-722bf897693c"
        },
        "item": {
          "id": "61c91cf8-84f4-4730-8944-1a032def5927",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a201531e-574c-4525-a897-fc32f8aeb336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c86fa417-d546-40a2-95a2-a8aea601447a",
        "cursor": {
          "ref": "f31218ce-a4b0-4887-80e9-09f9f750e4fc",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d1e8fe74-9ee5-4505-a3a9-ade5bab93b63"
        },
        "item": {
          "id": "c86fa417-d546-40a2-95a2-a8aea601447a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "85754665-73f2-4847-99cb-6ccda8ed6f46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9feab872-739d-4bed-8961-822cca3d1dfd",
        "cursor": {
          "ref": "3595b22b-9fef-4a19-8079-ad01ace5b43a",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "39cc602f-d77a-4f7e-9c6e-66392aac6271"
        },
        "item": {
          "id": "9feab872-739d-4bed-8961-822cca3d1dfd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "26d1f7a5-05ea-495c-b44b-24ad238222f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b4db62-06ce-4162-b972-c240b6d2ddd5",
        "cursor": {
          "ref": "48b7d73c-c443-43a4-9c5d-b30e087356c6",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4b6590ca-5650-48ed-bedb-b23a066bf598"
        },
        "item": {
          "id": "d9b4db62-06ce-4162-b972-c240b6d2ddd5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d781205c-9ec3-410e-ae02-fc126aaed872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5d0e2ed-a02b-4da9-b478-cda47529d89a",
        "cursor": {
          "ref": "a764e8e0-6e10-4f59-b580-bd3838cc753a",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ca5acb58-018a-474d-aca4-b6fc8bfdf5a7"
        },
        "item": {
          "id": "f5d0e2ed-a02b-4da9-b478-cda47529d89a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c9dc68b0-bead-4d22-804a-dde6761cef4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a015f30b-72cf-4be6-99e6-a311dcafe3f6",
        "cursor": {
          "ref": "ceb5df3b-b448-41ea-b829-430432f1765c",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b9b69ed2-2dd2-4446-a46b-d8f3a04a7086"
        },
        "item": {
          "id": "a015f30b-72cf-4be6-99e6-a311dcafe3f6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3dbede51-16bb-4949-a588-7df5f565a71d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91363cd9-f0e7-46dc-b05f-3a995cde42f5",
        "cursor": {
          "ref": "e0e2b027-acad-4a41-bd12-9965be65523e",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "80803c92-6559-44e7-bb0f-864eded89485"
        },
        "item": {
          "id": "91363cd9-f0e7-46dc-b05f-3a995cde42f5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "351b39aa-77d5-47d8-9d62-6c1fdadc52b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c0d683-684d-4a8d-a9bd-2a9f50d9d0e6",
        "cursor": {
          "ref": "f7314154-5670-48df-9108-8f86c2e8e579",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f7a8ebd7-30b0-4511-b0c8-1dc7d6ee1bc1"
        },
        "item": {
          "id": "d6c0d683-684d-4a8d-a9bd-2a9f50d9d0e6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ebe963c8-9b9a-44fa-9045-08b94e5edd0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530a23b2-1f54-4409-8ba3-1fb0bd0a547a",
        "cursor": {
          "ref": "f0d7b02c-c1fd-4b97-90f1-b492f7c79747",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "91904c8b-5144-4770-ba13-cf11b7afa252"
        },
        "item": {
          "id": "530a23b2-1f54-4409-8ba3-1fb0bd0a547a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "60ec3933-ed62-4fcd-8f7f-63e2cd285a76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed9b1c0-a5b5-43a3-80f3-43f68dc1117e",
        "cursor": {
          "ref": "977d8d5b-bb60-4fcd-b998-357274adc5fa",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "1bd53751-82c3-4918-9d9c-f3ae542910e3"
        },
        "item": {
          "id": "0ed9b1c0-a5b5-43a3-80f3-43f68dc1117e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b4f6b745-4e7b-4774-8ec6-d46ea9f2fbef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6297840-47f2-481e-86fc-af4a830ca402",
        "cursor": {
          "ref": "1ce42c56-8996-4778-a717-0c5de6fd1bbb",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d081dab7-014d-454c-b573-5a763a724ffe"
        },
        "item": {
          "id": "f6297840-47f2-481e-86fc-af4a830ca402",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3755722e-9844-4b11-9394-248959238c82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f09e913e-7872-4fda-9c4d-4932d3b994b7",
        "cursor": {
          "ref": "55c915b6-7e38-4638-89d2-dea716bf515c",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "96907fbe-3771-4286-854b-66760340ff77"
        },
        "item": {
          "id": "f09e913e-7872-4fda-9c4d-4932d3b994b7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "cc0038d1-1447-41fa-87df-20ab163587f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea31570-5dbb-4b23-9d96-67797ea1068b",
        "cursor": {
          "ref": "a1ff0aea-ad5f-4038-ac21-303fd3fa6775",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "cfa22a00-c86e-4ff5-b8de-992bba9981f4"
        },
        "item": {
          "id": "0ea31570-5dbb-4b23-9d96-67797ea1068b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3aeb72b1-6539-4325-9e52-34b8dac92a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c0165f-2c0a-43fa-8906-563fd730769a",
        "cursor": {
          "ref": "dabed865-d597-47d5-b2d2-6f3ca79452d4",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "fa100787-c8b6-489a-9ec1-8036b2660308"
        },
        "item": {
          "id": "f0c0165f-2c0a-43fa-8906-563fd730769a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1bf93fd1-0693-45cd-acab-56651d7f5ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0952288-6a8b-4c4f-9c0f-838096627113",
        "cursor": {
          "ref": "48ec6046-80d5-4e88-aea1-012bd6e17cfb",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7f761733-3a9e-4a33-9cb2-6c7ea487c2a2"
        },
        "item": {
          "id": "c0952288-6a8b-4c4f-9c0f-838096627113",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1a135ba1-908d-42ba-997d-1fa4e84f20d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee4190a8-63a6-4f55-9205-3c38322b3b06",
        "cursor": {
          "ref": "a36dcd99-1a09-493f-a417-134f734d6e4b",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a2fe7b64-ee04-4dd6-b3e1-edd9bb25d043"
        },
        "item": {
          "id": "ee4190a8-63a6-4f55-9205-3c38322b3b06",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e73dfb0f-5046-4505-a552-b638ea0805d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70410aa8-ab7d-4634-afbc-d31faa0ac48d",
        "cursor": {
          "ref": "d2ac4e61-195e-4436-afe4-29223f03c440",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "db6434ba-8642-4ac5-bd53-7076a3c4d6fb"
        },
        "item": {
          "id": "70410aa8-ab7d-4634-afbc-d31faa0ac48d",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "c61d99ff-6d15-4fa2-942c-1986097c4d7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50bc8689-aabd-4762-aa6a-4c569b8efbff",
        "cursor": {
          "ref": "2a6a0ebf-b577-4ae5-be43-aa07266f37cc",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "6ceeb068-5b5e-4e0c-8bfb-1cb12e663356"
        },
        "item": {
          "id": "50bc8689-aabd-4762-aa6a-4c569b8efbff",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "72da7914-a7bb-440d-a7e1-a687288cdc40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2835b2f8-8ac6-4bc5-acde-3a785824f2d6",
        "cursor": {
          "ref": "cb446a0d-f18a-412b-8963-04c690d48fc2",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "fbf73b22-bdbd-4541-9b68-404c6758a561"
        },
        "item": {
          "id": "2835b2f8-8ac6-4bc5-acde-3a785824f2d6",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "659f7035-085f-49a4-b19a-15df47111260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9f9aa6-9512-4066-8c1e-ed787467a0bd",
        "cursor": {
          "ref": "a66f1aa9-9314-4088-99c0-4786953cd092",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "cefc4dec-9893-4e0d-9107-652f7563697c"
        },
        "item": {
          "id": "bb9f9aa6-9512-4066-8c1e-ed787467a0bd",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "63aaeab3-6151-4f10-9f8a-7fc973b7cadb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf06db0-2b5d-441c-8c4b-a0931c2d013c",
        "cursor": {
          "ref": "3b3a3f91-9016-4437-a566-d2e3e7b31420",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b2a97d63-de74-407f-b9ef-c0495774b706"
        },
        "item": {
          "id": "9bf06db0-2b5d-441c-8c4b-a0931c2d013c",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "dae04698-4d0e-49f5-89af-ad2555539991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11bbac3-35e9-4e2b-9128-9bea7d76e724",
        "cursor": {
          "ref": "8ff1afab-335d-49da-838c-6bfc692ea65b",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "712883f8-e6fe-46c7-862e-02680424a131"
        },
        "item": {
          "id": "d11bbac3-35e9-4e2b-9128-9bea7d76e724",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "b40c4576-9dd1-4068-8240-8c6ec1942be0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26aa6a5-76d8-4cc5-b79b-7d5b13b924fa",
        "cursor": {
          "ref": "37713080-7603-4d5b-9296-de81b45811ce",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "5ccff6f9-77f3-472e-a1cb-866a6b13c5c8"
        },
        "item": {
          "id": "b26aa6a5-76d8-4cc5-b79b-7d5b13b924fa",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "972c50dd-5278-417a-967f-6b17118904b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab6d9157-1e73-46ef-9b52-392728c71913",
        "cursor": {
          "ref": "b6990b91-024d-424f-adfb-27bf61ebf4b7",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a362346f-3511-4a5a-8512-6a016750e0ed"
        },
        "item": {
          "id": "ab6d9157-1e73-46ef-9b52-392728c71913",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "db91877b-c45e-4052-9709-263241aba637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c00ef521-c8bd-44c9-b9fa-42bbc31fa87d",
        "cursor": {
          "ref": "13f1b486-88fc-420c-af8d-92f91af7d372",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d0cc9778-12bb-4f1e-be5d-ae60decd19f7"
        },
        "item": {
          "id": "c00ef521-c8bd-44c9-b9fa-42bbc31fa87d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f8efa794-1e3f-464e-b8ae-c36975f8add1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd572a74-5367-40fc-ba46-81be5b3fbd6c",
        "cursor": {
          "ref": "7ecd603e-8e00-4bb4-b0bc-8b592716dddd",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5f1b88f3-9455-4750-bd96-62695a0660d7"
        },
        "item": {
          "id": "cd572a74-5367-40fc-ba46-81be5b3fbd6c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "24faf2c0-bce1-4db6-954f-32519a265c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be76a1d-b927-40bf-bbb3-4bab42b30b0b",
        "cursor": {
          "ref": "4e8f8f7c-f769-4790-9e0b-b4a12ee785ff",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d7cc9b9f-8907-49b5-b1c5-2c8fcd1439af"
        },
        "item": {
          "id": "8be76a1d-b927-40bf-bbb3-4bab42b30b0b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a792a8ad-6783-405e-9b0a-768bc6471312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c20171e4-7154-4191-b7c1-1e55beb750c1",
        "cursor": {
          "ref": "0c4e39f8-5e12-4607-8398-f854096407f0",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "fa2a0d47-2072-45b4-9d6e-713a2cbdb429"
        },
        "item": {
          "id": "c20171e4-7154-4191-b7c1-1e55beb750c1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "08074189-5924-4198-9397-bd99e450c378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "146bf5e7-c785-4bc0-9c32-0249fdb7fd4c",
        "cursor": {
          "ref": "1a72feac-0bea-4609-9de0-34ef8bdc576f",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "03d5b331-f102-4df8-9177-22f1ff8d706a"
        },
        "item": {
          "id": "146bf5e7-c785-4bc0-9c32-0249fdb7fd4c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "dd06a142-a072-4f7e-9a90-ec93a859793b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "dab5d861-10e3-45d9-bc97-4be42fe9a99b",
        "cursor": {
          "ref": "eea6993b-54e0-45f2-adc5-dbfb2b0404db",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "4641f5ce-15a7-4b26-929d-edad05fd7036"
        },
        "item": {
          "id": "dab5d861-10e3-45d9-bc97-4be42fe9a99b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e12b2505-8824-4f62-9267-20956429eecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da838d2d-ba7e-46ee-a798-4ebbf8053619",
        "cursor": {
          "ref": "1449e9a4-f410-4025-9ca2-2053008dc9c7",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f837ff38-0c77-4cee-933b-b0463f413043"
        },
        "item": {
          "id": "da838d2d-ba7e-46ee-a798-4ebbf8053619",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1afb44f0-ab5d-4445-8656-482235339b0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e52ef575-5ab9-4fab-8d77-f0c949524f3b",
        "cursor": {
          "ref": "181830c4-f377-4e9f-b0e4-7f88affa1aba",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5942c198-e187-48f1-8255-cb6c1234511e"
        },
        "item": {
          "id": "e52ef575-5ab9-4fab-8d77-f0c949524f3b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "aa50c7c6-e5d4-493c-be22-3b1a3b97c650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72400e19-1936-492e-8f41-02c87f88d4c1",
        "cursor": {
          "ref": "e13be9b9-ccf7-40f6-a8bc-7278299f018e",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0ab30141-66fa-4dd1-b436-93ac89f4982b"
        },
        "item": {
          "id": "72400e19-1936-492e-8f41-02c87f88d4c1",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c4971294-2112-4dcb-9acf-9945e86afaf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d55dfa25-6412-449b-966d-ae5a4e3a19a2",
        "cursor": {
          "ref": "de66ab3e-cfa9-4ce3-9f59-b6367740cbe9",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "185eb401-b61a-407e-a9f7-ba9b24787187"
        },
        "item": {
          "id": "d55dfa25-6412-449b-966d-ae5a4e3a19a2",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a8ccaec6-ca83-49af-b793-b82dbe749773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7169f5e7-c867-4232-aa78-68557f79141e",
        "cursor": {
          "ref": "e0df678c-9c06-4419-8c35-123e4610dc32",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c2be7b3b-e3cd-4dfb-ac0a-e7031fafaad2"
        },
        "item": {
          "id": "7169f5e7-c867-4232-aa78-68557f79141e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d5298404-9ed1-4952-b903-4a8fd99a9ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a559cfe2-bd8d-47dd-a00d-8996c2f0c84c",
        "cursor": {
          "ref": "81005fcb-48c8-4ec1-9c79-a8d02c66f2f5",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7fd35dfe-da19-4386-9480-f2bc0a08b5f8"
        },
        "item": {
          "id": "a559cfe2-bd8d-47dd-a00d-8996c2f0c84c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "96a9ba9f-4570-4aa0-bf03-22915fba5615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a91a97-cf7e-434a-a127-cceea186a032",
        "cursor": {
          "ref": "e2801657-d70a-4d41-9479-dc26cdb63d5b",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "701391dd-d18c-481f-8398-816e79a8a0eb"
        },
        "item": {
          "id": "b1a91a97-cf7e-434a-a127-cceea186a032",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1eb3e3d2-ccf1-45db-8736-4af08e7e8fbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab38908d-b462-4424-b6f9-4a3268044005",
        "cursor": {
          "ref": "057d1c6b-cf9d-425a-9656-e81e062ebd4e",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5fc01211-3625-4229-b31f-de0e7f668b4a"
        },
        "item": {
          "id": "ab38908d-b462-4424-b6f9-4a3268044005",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "63437962-4e91-4264-b857-83fde25e95be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2530182-bfff-40db-ae69-fc0567464731",
        "cursor": {
          "ref": "024bca85-e4d2-4d65-934d-8b0bcd408d4c",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "1bc7cdcc-6255-4a89-a23c-8389cee3ca02"
        },
        "item": {
          "id": "a2530182-bfff-40db-ae69-fc0567464731",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "62c9dfb4-c5c5-4be3-ab9d-012826b4315a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a897c1b-243a-401a-8678-75a6441b7aef",
        "cursor": {
          "ref": "1b863de8-2b85-414d-8615-672abb4f78c6",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3938e544-5a4b-4f23-a8c4-1c18437c134d"
        },
        "item": {
          "id": "5a897c1b-243a-401a-8678-75a6441b7aef",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1fc8a185-a43d-43d2-be19-c4dbe6940096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab44953-de30-4810-a5c3-c7232e4bf3f5",
        "cursor": {
          "ref": "308099e0-91b7-4a0e-b908-b5e59356ad80",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "38ecc54e-d19a-4f21-8d23-db4ad119b1ef"
        },
        "item": {
          "id": "dab44953-de30-4810-a5c3-c7232e4bf3f5",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "66d10727-acfa-44f7-a8f6-b2cf65be84de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f19136d4-2b33-4421-92fd-ba8e909628d4",
        "cursor": {
          "ref": "34dee2f6-4683-4d7a-99ce-24d3eea7abbc",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ea2a6c84-a012-4d3b-b001-7720d4fa3ffb"
        },
        "item": {
          "id": "f19136d4-2b33-4421-92fd-ba8e909628d4",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f6cd3385-aa69-4367-a8e8-0fc69c513cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d5d59e5-0869-40b7-a44e-b9b4bbd32065",
        "cursor": {
          "ref": "566faab1-a3cb-4b1a-bb31-0f3b6e96d579",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "28de9523-d61b-4542-a1af-ef7dd6ebc75f"
        },
        "item": {
          "id": "0d5d59e5-0869-40b7-a44e-b9b4bbd32065",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f67bc02d-bd92-4fd4-a184-8a1fc5db64c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89dc0099-4a21-4975-8467-9ea173a8128c",
        "cursor": {
          "ref": "bfc55890-037a-4af1-9370-47267587c1d7",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f6e8e881-2a53-4d08-9a2e-eb6890984190"
        },
        "item": {
          "id": "89dc0099-4a21-4975-8467-9ea173a8128c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "734cf700-d170-44df-bd20-4c40da45ea51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baf58513-5d56-480c-989d-29ec956bafe2",
        "cursor": {
          "ref": "2ae328c3-6ff7-46aa-adf8-ff0c2104130a",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "2e1e1a65-c7b1-4a9c-a896-42ad8dcc8661"
        },
        "item": {
          "id": "baf58513-5d56-480c-989d-29ec956bafe2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "225b43e4-a690-4d84-8e4a-ebbe16da216d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c9306b3-7eb3-4247-9664-60b90bca137a",
        "cursor": {
          "ref": "f3cf6f00-252b-4bc9-89e7-d08c4a9af1d4",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "0127172c-6374-4338-8802-1057f80c5ac4"
        },
        "item": {
          "id": "8c9306b3-7eb3-4247-9664-60b90bca137a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f33e4612-d140-490e-9f5c-abc4f9743f8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3016fd18-c539-4702-a14c-0aca8779e871",
        "cursor": {
          "ref": "00e831f0-277c-4aec-a723-75e19f50fdda",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "fdc88f63-bbe6-4f26-b7ca-af1bcb9da632"
        },
        "item": {
          "id": "3016fd18-c539-4702-a14c-0aca8779e871",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b511f9ff-2349-4b15-9306-929f46dd7c2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc36c95-c8eb-4b62-8fd3-ed1f76f6b577",
        "cursor": {
          "ref": "c8e632f2-e3d6-437d-a17a-dec227b0138e",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "560a9940-8a92-43d1-a301-d99279eb02e1"
        },
        "item": {
          "id": "0fc36c95-c8eb-4b62-8fd3-ed1f76f6b577",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "20b3debe-41ab-40a9-82e5-2352c450a6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4e37d3-7a9d-4620-aa29-a06eb8877427",
        "cursor": {
          "ref": "38f5ff90-23e1-48e4-9240-d90e1d5d52cf",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "552f8537-6fb8-4945-8ac8-fbace251a582"
        },
        "item": {
          "id": "0b4e37d3-7a9d-4620-aa29-a06eb8877427",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1320f576-be2c-4977-9a05-30ab07d964c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f057197-3d3b-43bf-8c7c-242650988964",
        "cursor": {
          "ref": "88f1b639-d559-408c-9cfb-c92225f041ef",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c8f93708-130f-4f31-8e29-d984bf3a523e"
        },
        "item": {
          "id": "3f057197-3d3b-43bf-8c7c-242650988964",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a79ac4c6-121d-430b-a362-86d7f524ee26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f64afa3-eaa7-47fa-a38b-d69165f13236",
        "cursor": {
          "ref": "948d0e22-19e7-4fde-b911-fd648542bac3",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f8688cb7-ddf5-4cb2-8b1d-0e3fa19d8700"
        },
        "item": {
          "id": "5f64afa3-eaa7-47fa-a38b-d69165f13236",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "2dee1640-445d-4aca-b950-132ca15e6356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0402b02-7ac9-42d4-a78a-ccbb19c4bc82",
        "cursor": {
          "ref": "6061a283-ded5-46f8-a35f-8b1e7f49a4da",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4594784d-4958-4ac7-90b2-7fbaefd66fcb"
        },
        "item": {
          "id": "d0402b02-7ac9-42d4-a78a-ccbb19c4bc82",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c33243b0-0962-4e9f-a219-fdab6c297520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b15247c9-c982-47a3-bd53-e32555a3fb55",
        "cursor": {
          "ref": "1a1043aa-992d-4ede-8119-ef6f10f59c41",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4b800752-7845-4419-93ca-e72d241d647c"
        },
        "item": {
          "id": "b15247c9-c982-47a3-bd53-e32555a3fb55",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f4f447b1-4f34-41b5-86af-1573c8a75376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a263c6bc-d0a1-4aa6-9431-84c21a0c2e74",
        "cursor": {
          "ref": "89c4d3c4-e52f-4d1b-a0fb-3baeababdbb1",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f29820ca-4556-41ea-a7e9-27cc5062413b"
        },
        "item": {
          "id": "a263c6bc-d0a1-4aa6-9431-84c21a0c2e74",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e854360b-d4d7-4065-baeb-b6217927661f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94260ea8-1b7c-4493-8dae-8eacb5c9f794",
        "cursor": {
          "ref": "8e0b4182-9e02-4805-bbda-56c122f954da",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b02b6e09-27d2-417c-a277-4d1f2a775faf"
        },
        "item": {
          "id": "94260ea8-1b7c-4493-8dae-8eacb5c9f794",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "44bb56a8-9a8d-4e77-8261-42292a6fffbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e29e27a4-2456-4a9c-bd39-d6245ebf2bf7",
        "cursor": {
          "ref": "83c6355b-e620-4536-a29e-e9bfacbf700e",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7316e0ee-c78c-4697-b7fd-7e868c5fec47"
        },
        "item": {
          "id": "e29e27a4-2456-4a9c-bd39-d6245ebf2bf7",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9585dcd3-43f4-455c-8081-6af6d6ebec55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd13420-d95f-43c0-8dd8-5a2b98890c0e",
        "cursor": {
          "ref": "9b73247b-2a3d-4860-8477-ffe95cf48a26",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "018f10a6-8d3d-493d-bf09-d36af1712f12"
        },
        "item": {
          "id": "6bd13420-d95f-43c0-8dd8-5a2b98890c0e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3eaa4a1c-b232-4cb3-afbd-c6989b7488a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93124bd5-401a-4742-8c41-298df6b971ae",
        "cursor": {
          "ref": "811ff1e3-95b8-4787-985a-f68b7a39d834",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b38f921e-d49a-4c9c-a1f3-adaac9dc62df"
        },
        "item": {
          "id": "93124bd5-401a-4742-8c41-298df6b971ae",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "5ef50a03-7a7c-4a94-900b-565ae0e6fd61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70052da0-666a-4010-b127-19a4ba693b0d",
        "cursor": {
          "ref": "7af03dfb-3931-446e-a011-ccc8556a6c71",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "9de4d436-04f5-40df-b933-b43f464fe483"
        },
        "item": {
          "id": "70052da0-666a-4010-b127-19a4ba693b0d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d14c01a1-03ec-48e6-9196-67b175e161b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "380e61d2-b4fe-4c37-b3e7-5aa7d97cb30c",
        "cursor": {
          "ref": "35f15c79-6071-4df9-9882-3f1c51ac755b",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d447e167-f96c-47c4-9983-b18dd449cb37"
        },
        "item": {
          "id": "380e61d2-b4fe-4c37-b3e7-5aa7d97cb30c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7a238133-fcab-48ed-b917-73f84665495b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2340bd9-d985-46cc-a1a5-c42cbd070403",
        "cursor": {
          "ref": "aa249d94-cf05-4a74-85a5-3e53c6d821f1",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0ce73a0c-1145-4301-bfac-98a5b8eec792"
        },
        "item": {
          "id": "a2340bd9-d985-46cc-a1a5-c42cbd070403",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3588dc9a-6b2b-412b-b755-324032dea79e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c954360-ad95-4726-9d26-11d7a6765d47",
        "cursor": {
          "ref": "521a1479-4e22-4dff-ae30-8ebf7cb7d964",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "09e9e803-58f3-49ec-a11a-9ef3e40e6ac1"
        },
        "item": {
          "id": "9c954360-ad95-4726-9d26-11d7a6765d47",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4ff089ab-b0b6-481f-bc46-19591fcc2d32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f5e1d8-04ba-42d7-969d-3e5a6ec08222",
        "cursor": {
          "ref": "922fae89-63bb-426e-87b4-f828b510083d",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f457f3a5-a400-40ae-9fbe-571e39e14f5b"
        },
        "item": {
          "id": "87f5e1d8-04ba-42d7-969d-3e5a6ec08222",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "8ec0a3a3-442e-4d11-a5a7-8a68c5db02d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d4b853-1a26-4792-aa7f-f4027f316246",
        "cursor": {
          "ref": "781e470d-5ac3-4cbb-8d4e-fcd9f4781459",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f5a986d5-afd6-4afa-ab3b-d2cb6d30814b"
        },
        "item": {
          "id": "49d4b853-1a26-4792-aa7f-f4027f316246",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e2e62a77-9f7e-4709-8378-a4854dbe30b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebcca646-0efe-488a-b1bb-8e718d08acc7",
        "cursor": {
          "ref": "1050b8d4-e6d3-4a07-a67f-af5dbf3f0f6d",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "92834773-c5ac-4c01-9334-e4343b23cf35"
        },
        "item": {
          "id": "ebcca646-0efe-488a-b1bb-8e718d08acc7",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a055c8d9-454f-404e-994e-85a3703cbf32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86200e39-26b8-4dc7-bea2-fcd8f4a7b9fb",
        "cursor": {
          "ref": "ed77cbed-39d1-4f63-81b8-ad6b5fb1f9fd",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "cf98ab29-e89a-42ee-83eb-8f3cb69c8976"
        },
        "item": {
          "id": "86200e39-26b8-4dc7-bea2-fcd8f4a7b9fb",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d083332e-6118-4011-8576-d1e10054d3a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70516330-202d-479f-b342-6311e818573e",
        "cursor": {
          "ref": "87b49f35-311c-4638-ae04-e5c9e173ee46",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e89278a4-627c-4c01-b270-e41dd7cb4703"
        },
        "item": {
          "id": "70516330-202d-479f-b342-6311e818573e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a15c7002-abce-4c47-95e3-10a0797c8257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1baa39a9-a19e-4c76-a102-9b75d94b6c5b",
        "cursor": {
          "ref": "1b86c713-cd30-4ef2-8001-6b93a66c8439",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c71512d8-d33d-420a-a859-9d30caf96eef"
        },
        "item": {
          "id": "1baa39a9-a19e-4c76-a102-9b75d94b6c5b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5f58e1cb-777c-4d66-9c54-4259662f3a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8664db8-84df-4ccc-a73d-574da4627fd7",
        "cursor": {
          "ref": "4ad4daa5-e067-4fbb-89a9-aa98c7efc811",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f8a48b2a-7bbf-4ba2-966a-cfbc9c4839ee"
        },
        "item": {
          "id": "a8664db8-84df-4ccc-a73d-574da4627fd7",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9ec92582-18e4-4028-bc8b-1bf47df3204f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "317ff694-7d44-4c39-8d63-c0e842d6b2f2",
        "cursor": {
          "ref": "39e85876-c5f3-4b63-bc1e-8c4c6a92b6b1",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "bbe67cfb-f3a7-4f7a-a33f-4eae12da2ed3"
        },
        "item": {
          "id": "317ff694-7d44-4c39-8d63-c0e842d6b2f2",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "80b30b7d-1046-4d36-9c51-38e8e5da66d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c2cf97e-fe9b-4a21-92e8-da2ff5cfbb46",
        "cursor": {
          "ref": "966c3c99-5069-4aa9-bf2f-f1507d7547c8",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1ef336b6-cd9f-4d11-b386-eaaab96b39e9"
        },
        "item": {
          "id": "2c2cf97e-fe9b-4a21-92e8-da2ff5cfbb46",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "911e2c50-d238-4632-aefc-fb53440f3603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c784c5be-0a91-4c08-ad09-0db7aa87eadd",
        "cursor": {
          "ref": "a9708bc5-c5be-42ba-9a8a-bfde6b34c500",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c42ca114-2dfa-4822-9a36-0030f7c98993"
        },
        "item": {
          "id": "c784c5be-0a91-4c08-ad09-0db7aa87eadd",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "19cce32c-b430-497a-8970-ad58b6fef980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c88f11d3-36a4-488c-8263-1449b760fa04",
        "cursor": {
          "ref": "31af821e-c9c0-4110-ab98-0e3ab8f7f14b",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2fd6aa85-2a47-4861-bc6f-333d0c1343bb"
        },
        "item": {
          "id": "c88f11d3-36a4-488c-8263-1449b760fa04",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "fadd5f64-a3d9-42cf-bde7-2c85c99a59e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "943579c0-107d-43a8-bd34-f52b50f94fa0",
        "cursor": {
          "ref": "2fb967d3-db81-4de1-90a3-b6dc5887691f",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b1748e0a-123c-4018-bb59-29734e505711"
        },
        "item": {
          "id": "943579c0-107d-43a8-bd34-f52b50f94fa0",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "fbc71f58-46a5-4fd1-b55b-6aef458be433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba17ba9-8e54-475c-8ff7-fff239f9a6b6",
        "cursor": {
          "ref": "7e5b4c99-d4be-4cd3-9410-93d8f6f00755",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "870da8e6-de48-4e6b-9b51-a14eb761a9b1"
        },
        "item": {
          "id": "dba17ba9-8e54-475c-8ff7-fff239f9a6b6",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "3f69932e-0fa9-4c0a-9671-89348178f878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f566ecee-ef8c-4051-aac9-36c9ef4531e7",
        "cursor": {
          "ref": "4619a539-322b-40fb-9047-b433f7743582",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "031eb312-826b-49f6-a188-fc1dc56a3854"
        },
        "item": {
          "id": "f566ecee-ef8c-4051-aac9-36c9ef4531e7",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5b92c66a-aa94-452f-810a-850e1e3e81ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c9118ac-5ceb-42b7-a7df-052ae9aba1bd",
        "cursor": {
          "ref": "b1f27118-d819-4039-b9d5-e5341205c7ce",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "20884c1e-bb66-4a0f-9ec0-02b295e74dfd"
        },
        "item": {
          "id": "7c9118ac-5ceb-42b7-a7df-052ae9aba1bd",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5cd120f1-0b59-4d0d-a665-8ea0956abd91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a2d5dd-6a6e-4371-9b13-cb419bf871e6",
        "cursor": {
          "ref": "1c2e1380-be17-48ae-8178-ae900330389f",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c0581d66-8828-426b-ad56-11cd6ae22478"
        },
        "item": {
          "id": "a0a2d5dd-6a6e-4371-9b13-cb419bf871e6",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ec35c145-58bd-4da0-8502-b131b8c513ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebed107f-62a1-48ac-8dd3-cc79d1731b18",
        "cursor": {
          "ref": "d9820775-df6f-4ee3-8d73-fc8db7644f09",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2db9762a-5421-44ed-b32c-65958fe6e23c"
        },
        "item": {
          "id": "ebed107f-62a1-48ac-8dd3-cc79d1731b18",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "60e19631-3e64-4af4-b110-8fbc5a694c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc15030-05f0-4297-be59-cccdcffa768d",
        "cursor": {
          "ref": "4bbe251f-da90-43ca-a859-f4fb184a4a3a",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "89210326-82fa-4dc3-b8d8-de324c6afa98"
        },
        "item": {
          "id": "dbc15030-05f0-4297-be59-cccdcffa768d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "cce70f43-0ae7-494b-bcc1-cbf952c7069e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 330
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bfd1c28-f5aa-46cb-bf42-7ebcd6a47e1c",
        "cursor": {
          "ref": "aca43d8e-8f24-455d-93e2-e4e8e3ebc64f",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "13cd6884-47bc-44b7-8ad3-a5dbaf07ed40"
        },
        "item": {
          "id": "2bfd1c28-f5aa-46cb-bf42-7ebcd6a47e1c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9b569c94-683d-4e35-8b63-d20f63757e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f29bcdd-7a77-453d-b722-b78eb56ff41a",
        "cursor": {
          "ref": "456e9cf6-99da-4515-adc6-1b4f2cb6cd45",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "aaca25cf-3922-4336-a007-01f80c3945c8"
        },
        "item": {
          "id": "9f29bcdd-7a77-453d-b722-b78eb56ff41a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1d4305b6-7cac-4b69-ae4f-ad4bdb21c7fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e9759f1-fc66-4e6b-961d-4eea382cf2b3",
        "cursor": {
          "ref": "48739872-1022-4cbb-8b14-e1a6a1992027",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "075267ab-1a45-4bd2-813c-693a0e8974ea"
        },
        "item": {
          "id": "2e9759f1-fc66-4e6b-961d-4eea382cf2b3",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c7cb6834-cd84-4e7a-a9c2-232e5d24b2f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69bd56d9-5b4c-4f07-8b42-aeec13116247",
        "cursor": {
          "ref": "1dd9495c-ace0-4bac-b850-d130e910a986",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "00d15a9f-ed04-43e7-8706-9640b260b035"
        },
        "item": {
          "id": "69bd56d9-5b4c-4f07-8b42-aeec13116247",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0e236088-4f12-4415-a8ac-73450483ed43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7217c38a-c21c-4fa3-8d10-ccca6aade1f4",
        "cursor": {
          "ref": "ae9d596d-ea43-4f3c-96c1-da471e1ee499",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b7dcccc6-ad5f-48ba-822d-fee0e6bc91d9"
        },
        "item": {
          "id": "7217c38a-c21c-4fa3-8d10-ccca6aade1f4",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4585e162-746d-4a9f-af99-b330e7905573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc75fd7-bd50-4e56-93c5-3643cf1946d8",
        "cursor": {
          "ref": "8a67a61c-1392-4d3f-bc51-3e5dce3ce0fe",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "84762548-3190-4994-a9b5-78c7f6568b86"
        },
        "item": {
          "id": "0fc75fd7-bd50-4e56-93c5-3643cf1946d8",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e0f0aa73-b713-4ea2-a158-c0078b7d810e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1db6c86-a2da-4fdf-866f-88f945c304f0",
        "cursor": {
          "ref": "fea09444-dadf-4839-8a5e-6d3530447c00",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "fdde9274-523c-42ba-a081-4ab20c104fba"
        },
        "item": {
          "id": "a1db6c86-a2da-4fdf-866f-88f945c304f0",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2a34da3e-4047-4253-a880-2267a9cdcc3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eabb6b95-c993-48b8-8766-4f1a70c879b7",
        "cursor": {
          "ref": "4834d40d-962e-4b7b-bed4-7f998cc303ee",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e4ae2145-ca7a-47f8-b877-9f1121be7363"
        },
        "item": {
          "id": "eabb6b95-c993-48b8-8766-4f1a70c879b7",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8440cc23-b5f4-4f6d-bdc6-531cae91379a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed491fb-388f-49b2-9114-f6724517f8e1",
        "cursor": {
          "ref": "bdf51750-01fc-4f02-9951-b22c64147c6b",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d0315399-6dd3-4167-ab18-b318e7c5ace1"
        },
        "item": {
          "id": "8ed491fb-388f-49b2-9114-f6724517f8e1",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1e100b73-2de9-405d-882c-049d2ba7bd97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1058ae9-9f66-4236-82e8-02075f8fe39c",
        "cursor": {
          "ref": "9eed6006-45df-4e9b-8f0f-40949b597631",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "80dc3467-4cb1-4832-8f04-d6a01d39407f"
        },
        "item": {
          "id": "c1058ae9-9f66-4236-82e8-02075f8fe39c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b9e04b52-5037-44a0-843e-6cbc6de3c254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f56e77-ed6d-434d-8896-2fa8b0c9ac9f",
        "cursor": {
          "ref": "62577c3d-7de1-4678-8f06-458c36f388be",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c9c8fa99-83ae-4ffb-aa10-20b33458da13"
        },
        "item": {
          "id": "64f56e77-ed6d-434d-8896-2fa8b0c9ac9f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "33625b41-856f-4177-9421-2e6fe3918b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee8a3c3-4581-4894-a666-d55ad4657ef1",
        "cursor": {
          "ref": "f84689c0-e3db-4746-bd25-5b76839a2586",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "9dad585a-f445-4893-8e9a-e7312baa888d"
        },
        "item": {
          "id": "fee8a3c3-4581-4894-a666-d55ad4657ef1",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e0c4e2bd-facb-4a49-aeaf-884ddcfd7094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a60103-d2e0-4aff-872a-162fb266c89e",
        "cursor": {
          "ref": "a8d097e7-bf43-492e-baea-f45cbe213f73",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b07e4596-eaa9-4fef-a665-ee3f748e5e04"
        },
        "item": {
          "id": "b6a60103-d2e0-4aff-872a-162fb266c89e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "47f8f9a8-e126-4fcc-a574-89abfc42338e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5f1c799-078d-4d0a-b101-16e3dd5ae998",
        "cursor": {
          "ref": "79aee625-1665-487a-a951-511e82d10199",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f7dcdbcb-1c56-497f-baed-262f7c324a06"
        },
        "item": {
          "id": "a5f1c799-078d-4d0a-b101-16e3dd5ae998",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6c9835f7-a5ae-4c7d-8ec1-71b6400896b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651b43b0-831b-4a31-9861-b0fd6126131c",
        "cursor": {
          "ref": "a42a3361-297a-45f8-9d40-9a694d9e1445",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "adb1d857-e4bd-4492-815c-8068f2d20aca"
        },
        "item": {
          "id": "651b43b0-831b-4a31-9861-b0fd6126131c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c9eba77a-d3c2-40f4-b798-ab555d6331f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e98e5d-3dd9-41eb-8407-855689325b6a",
        "cursor": {
          "ref": "f01aa627-8db4-4f1f-b8bb-7e25d35089e3",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "77d537e2-3980-44aa-9d5b-fda1cac77198"
        },
        "item": {
          "id": "47e98e5d-3dd9-41eb-8407-855689325b6a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "dcd07b7b-e313-4731-a729-2f50ee1237a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e2b0be-5298-472f-896f-b2a1ec3fe5e8",
        "cursor": {
          "ref": "90f4899f-2d5f-419e-80af-3bfb6dd94297",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "a0edfd55-3ca5-4fa7-864e-24c5832ac072"
        },
        "item": {
          "id": "45e2b0be-5298-472f-896f-b2a1ec3fe5e8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "dc7b6a6b-aaae-4a67-b725-90db54ae4ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030871a2-73a6-4052-ab06-d1274bce6a8e",
        "cursor": {
          "ref": "f49bdf26-4ca9-4d37-b02e-06e3bfc53d0c",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "455b6e05-439d-4ea1-b2de-b9ec3c582104"
        },
        "item": {
          "id": "030871a2-73a6-4052-ab06-d1274bce6a8e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2c5fffdd-43bb-4d7e-82ed-8a711f20b53d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786fcc1a-ecee-4cbc-801c-995601f4e8a9",
        "cursor": {
          "ref": "368ae454-7268-4388-910b-e0350ff6bac0",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "fb246bc7-9574-4c50-b113-42e7df14ef13"
        },
        "item": {
          "id": "786fcc1a-ecee-4cbc-801c-995601f4e8a9",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "60c7b7a1-0289-4f84-b6eb-c429e448296c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c9e7f09-88bc-4d8a-b6cc-4c749e4cb38b",
        "cursor": {
          "ref": "a7fae1c3-8901-4041-bb1a-a27d35bfced5",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "ada491bf-47f0-4098-9696-5d55460894d5"
        },
        "item": {
          "id": "5c9e7f09-88bc-4d8a-b6cc-4c749e4cb38b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "67215898-aca8-4e86-8329-bfb70e128824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a35e38-1b44-43ac-883e-4b18ca5acdc3",
        "cursor": {
          "ref": "58ed4477-ffdd-405d-81ec-0f6896be02b2",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "3377e91d-1e03-4f70-b1e8-8d025eff26a3"
        },
        "item": {
          "id": "c1a35e38-1b44-43ac-883e-4b18ca5acdc3",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "13fae36f-8623-4fbe-93b5-379385cdb075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab59752b-613f-4256-9ee4-e6c6b634dad0",
        "cursor": {
          "ref": "7fd181a1-1e62-43a6-810b-99e4f7f8c4c8",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "22a2015a-6339-4afe-ab62-f0eebef16a5e"
        },
        "item": {
          "id": "ab59752b-613f-4256-9ee4-e6c6b634dad0",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "15f207eb-7fc3-46a5-9f59-b15720629be4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed67abd2-82ff-4947-b377-9049c894329a",
        "cursor": {
          "ref": "5e14f3b0-72eb-4da5-bb66-020549b2bc18",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "343588f4-dbe6-4f42-9289-4003675d956a"
        },
        "item": {
          "id": "ed67abd2-82ff-4947-b377-9049c894329a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e46c057e-9534-43b0-9fe3-e0f578f1c6e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 314
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "673bcfe2-f67f-4eb2-8e2c-1a1fca2342a7",
        "cursor": {
          "ref": "2e5a0f71-c763-438e-9a73-e0805ac8181e",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "0d3a5019-2ed8-415e-b7cb-8a80909553c5"
        },
        "item": {
          "id": "673bcfe2-f67f-4eb2-8e2c-1a1fca2342a7",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "bd63c082-9b25-4208-9b96-cd97e4b26336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8485bea7-7701-4330-a12e-b8603667eb5f",
        "cursor": {
          "ref": "afdef6d8-676a-474b-ac78-9f6e028a239e",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "ff428918-1c33-4639-a3e3-578d408b43f5"
        },
        "item": {
          "id": "8485bea7-7701-4330-a12e-b8603667eb5f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "7a2b24d8-d1ad-4fd0-81b4-5e03ad2de115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a909989a-557f-46b6-9c79-a78ba81c69b1",
        "cursor": {
          "ref": "01c1e558-cb2a-4905-8e4b-41f295fa3535",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "1fea7454-78a7-4c8d-be2f-2baf0da7b177"
        },
        "item": {
          "id": "a909989a-557f-46b6-9c79-a78ba81c69b1",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "3b8b1a42-2a82-44e3-9017-03e408189427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae3ec42-d021-4090-b224-e9ca2e532080",
        "cursor": {
          "ref": "c462d7f9-45d2-4b46-b378-6c967d9aa46e",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "5b7591d9-55ab-43fc-b21e-a97da97c0dd8"
        },
        "item": {
          "id": "7ae3ec42-d021-4090-b224-e9ca2e532080",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "61fd6c0c-35b6-48d0-bd7d-1322d6478672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81927623-f6f2-458e-81ca-d1171ae0d71a",
        "cursor": {
          "ref": "1e098186-a749-4b2e-93c6-c6424f9601b9",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "2957e680-5969-4510-ba06-76d6dbe5fa1f"
        },
        "item": {
          "id": "81927623-f6f2-458e-81ca-d1171ae0d71a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c5829896-67a6-46ad-89f7-266a8dd8934c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cc163ed-31f4-473b-849d-749efd5ed5ec",
        "cursor": {
          "ref": "d12f4865-e4de-4664-9570-4d404a47cceb",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "188c6e81-9c09-43d0-9f20-e3bf8deb0114"
        },
        "item": {
          "id": "4cc163ed-31f4-473b-849d-749efd5ed5ec",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5a48ab3d-55b1-4bee-a49c-3364eb8eb00c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bc9a893-7d81-43d2-9a84-8aa94d4461f6",
        "cursor": {
          "ref": "f9b97f97-e9a5-4b85-9ef7-9174a9a4aa7d",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "80165574-fade-46d5-83a2-ad3878aedebf"
        },
        "item": {
          "id": "2bc9a893-7d81-43d2-9a84-8aa94d4461f6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "652da3d2-96fb-496d-8d28-44ce01739883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16548836-a4e6-49cb-862f-77ed1278ad72",
        "cursor": {
          "ref": "4a38137d-fe6d-4cac-bc4d-2709aa1443e8",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "7d6f53d9-4531-479e-9680-3eb557c9871a"
        },
        "item": {
          "id": "16548836-a4e6-49cb-862f-77ed1278ad72",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "181a004b-364f-445c-aeeb-aa5fcc5ae2b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444c4147-6a69-497d-b2e5-76f820c3ac68",
        "cursor": {
          "ref": "7c1d707a-e3d4-441a-b694-b2c4a3682b71",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "d64d509d-24b4-4199-9c86-e112642ed7fd"
        },
        "item": {
          "id": "444c4147-6a69-497d-b2e5-76f820c3ac68",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5e75e4e8-d8ee-49bd-9755-78362a07ce8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a12fb85-945f-4cfe-92a0-fab3148d35ab",
        "cursor": {
          "ref": "d977b70e-ecb4-427e-9972-dc6f518e7612",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "e9d8d286-1c82-4fbc-bd6e-c4704e9f5def"
        },
        "item": {
          "id": "7a12fb85-945f-4cfe-92a0-fab3148d35ab",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "251b34c3-0fdf-49db-a557-c4383c3c3153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97938770-d8d3-4571-9229-2332b717790b",
        "cursor": {
          "ref": "2a7592b6-dffd-4f99-9774-44499db5b6f5",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "2c4f68e0-f699-41bb-8b84-b9f989b56012"
        },
        "item": {
          "id": "97938770-d8d3-4571-9229-2332b717790b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b6fa181b-b6d3-44df-99b1-301b03ed0b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79a1e249-87eb-4ee1-9b60-139644e18b2b",
        "cursor": {
          "ref": "d528a727-8c0f-48b1-9372-61d4a05a9467",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "7e6c5954-d162-4e0f-a3e8-afda535faf41"
        },
        "item": {
          "id": "79a1e249-87eb-4ee1-9b60-139644e18b2b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a1dc2c4d-d6cb-4eaf-b793-5a2ebc7d2c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e14c19f0-0558-4d88-a52c-c4e258c60989",
        "cursor": {
          "ref": "4ee780d5-c8e1-4edb-875f-f224f5da4acc",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "efafba9f-6070-423f-9a0d-812370735baf"
        },
        "item": {
          "id": "e14c19f0-0558-4d88-a52c-c4e258c60989",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "912993e0-31ee-481c-9cae-e2bfc4eb0dca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd5ae89-cc64-4088-8548-6bc7c65dcecb",
        "cursor": {
          "ref": "3b8c0983-e94e-46c5-8113-624933d599b5",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "f2947a6d-3f27-49d6-afbb-5ebeb255c9c5"
        },
        "item": {
          "id": "9cd5ae89-cc64-4088-8548-6bc7c65dcecb",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1ab91794-57ce-4f2f-8bc8-30f90f5ee612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f6bc9c9-980b-41cb-8234-286609db31e2",
        "cursor": {
          "ref": "24b5ae83-ec4e-4e55-8c36-40c051eb2d79",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "0ca18a28-b44e-4da4-911e-a316b55b5cf1"
        },
        "item": {
          "id": "5f6bc9c9-980b-41cb-8234-286609db31e2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6a0a7647-107e-4235-ba66-b00a91d7e0a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0861b2f-4522-416a-b33e-3e5fc8499b2f",
        "cursor": {
          "ref": "4efb15e6-225c-4e41-be1e-34f05bb486d6",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "719c5a67-2b93-4722-8c97-6eaae587dc86"
        },
        "item": {
          "id": "b0861b2f-4522-416a-b33e-3e5fc8499b2f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "80f8ab47-699e-4f12-bcd8-25c613021b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43458b7f-1615-4e76-b285-c5ac2d916523",
        "cursor": {
          "ref": "0c9a8a9b-3a8a-4d2e-9a42-2160f4c2fd52",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "f21c77b1-cc0c-4aa2-b712-42c04886495e"
        },
        "item": {
          "id": "43458b7f-1615-4e76-b285-c5ac2d916523",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "84f479d5-fe2a-4580-b418-8f6902bff63e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ff5c2b-1467-4791-a589-d1b1712d7bd8",
        "cursor": {
          "ref": "d9ad2d2a-58fc-43f3-809e-09922f54e499",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "c3fdd241-870f-46f4-9255-7726f304a9f7"
        },
        "item": {
          "id": "96ff5c2b-1467-4791-a589-d1b1712d7bd8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "61c5679a-6bb8-4584-823e-28dddd230718",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1baab676-725c-451d-a855-178a78f3fc67",
        "cursor": {
          "ref": "6869a68b-6e37-4ac0-bba3-5cee3d8dd249",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "e2d1b66d-d8b2-4328-94a5-a0a62898dd9a"
        },
        "item": {
          "id": "1baab676-725c-451d-a855-178a78f3fc67",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9064b96b-d2a9-4327-8b18-ec4bab1d9118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "19c4c125-fd6d-46b6-a650-5bafb9747939",
        "cursor": {
          "ref": "b7ddd27f-77a0-40fd-962f-c51da0dc7763",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "d97d59a1-e9d4-41a1-9b58-ff49d41a5330"
        },
        "item": {
          "id": "19c4c125-fd6d-46b6-a650-5bafb9747939",
          "name": "credentials_verify"
        },
        "response": {
          "id": "177936eb-b511-4c94-b84b-736f3932c63e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "2a6af971-f27f-43a0-9ec6-48a50d2427bc",
        "cursor": {
          "ref": "94ea0c6a-9ffe-40d6-a725-eedb9bdb374e",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "f100f651-3565-49a4-97d3-868abaa8f591"
        },
        "item": {
          "id": "2a6af971-f27f-43a0-9ec6-48a50d2427bc",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "97f8fc32-2de7-4b48-8548-d801ab51789f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "16a5722c-8cde-4f98-b97e-275517976f63",
        "cursor": {
          "ref": "e3988e29-1184-4c96-850c-a37f97708b5c",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "968a1bf9-7ea5-435c-b418-54e1720024cc"
        },
        "item": {
          "id": "16a5722c-8cde-4f98-b97e-275517976f63",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "90c7243b-ec1a-4cf8-ae15-f65dce85a98a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a5722c-8cde-4f98-b97e-275517976f63",
        "cursor": {
          "ref": "e3988e29-1184-4c96-850c-a37f97708b5c",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "968a1bf9-7ea5-435c-b418-54e1720024cc"
        },
        "item": {
          "id": "16a5722c-8cde-4f98-b97e-275517976f63",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "90c7243b-ec1a-4cf8-ae15-f65dce85a98a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a00990d-3a7c-4060-a136-f8b8870e43ea",
        "cursor": {
          "ref": "0a1df308-829f-4b93-b8f0-58e8ff958fbe",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "d75877c6-60c3-4e0e-aec2-8af7d5daea9e"
        },
        "item": {
          "id": "1a00990d-3a7c-4060-a136-f8b8870e43ea",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5dd30bec-c75c-4cfb-99d9-1ac06bdfdaa5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2826eb6a-6933-4aea-9021-1aad62c4e359",
        "cursor": {
          "ref": "82f8128c-be36-4761-b74c-269225870b37",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "14de5ec4-c6f9-44ef-b981-f7fbdff89815"
        },
        "item": {
          "id": "2826eb6a-6933-4aea-9021-1aad62c4e359",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "439fc95d-2be8-4837-80be-74bc5ba804f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}