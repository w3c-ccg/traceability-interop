{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a8ee8f82-fff8-47e1-9cee-122e2c943ccc",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e173c194-fe0f-4228-9bc0-3ee15fea018d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8d5fe5c1-937f-4d38-8cfd-e3e02c0ef8ed",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a4dde61b-78c8-4c23-a7cf-69f058599c08"
                }
              }
            ]
          },
          {
            "id": "b413b97c-bc12-47a0-9ab0-5417a4875525",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "91097d7e-43f6-4511-b1b2-314e366d1e34",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "266bcbc4-904e-4077-b9c8-25a014a6a41f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "dd2e2302-c1bc-43be-9e63-bea5cb13f8e3",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "73b7fc06-b4a5-4a6c-8f69-7e67369b687f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "49aeffaa-eca7-449f-ba94-2c5145171111",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "05ff5f75-0650-4436-bce9-11b91bffdf33",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cbb51e42-eb25-4255-b492-303c6fd553bd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0bbf8bc6-7499-4aa1-99cb-ac9dfec0987a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "792ab47c-5989-46e6-9df3-8003d0f5dad6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2b7d3420-ef86-4020-9bf5-2316879f5f5d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a70a10bd-770d-4754-8f8e-84a2bc57c471"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7a61079a-acb0-4648-9831-77f2136826b3",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "072b4da9-bde7-4034-b628-3e3a6cf59b12"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c093771b-4f65-48cb-8cb4-7ae2052b5f16",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bd697e58-cd59-4905-88ff-1e6020bccf72"
            }
          }
        ]
      },
      {
        "id": "b3d95d18-f59d-4c3e-a2bc-20fe623b6d5c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1e2d209b-c43c-4d8b-8712-cc65440914ca",
            "name": "Negative Testing",
            "item": [
              {
                "id": "768b7a9f-83a9-462f-a47e-9062218a564f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bdaaeedd-075f-4721-a8fd-95089a8cecfd",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d26e62-efe3-4d76-ba1a-9f0cc3c59ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f03aea06-2b59-4b79-bb86-bab9ce82cfd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa9da61-cf89-43ea-8b50-2ed081ac4141",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d01dda3a-e584-4ecd-b5bd-c40b3a1cddc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d458d6df-93ed-41e5-9f01-b718f9424152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2542381-5770-46a2-b10b-b336d5d00a62",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6faf8042-91c5-48bb-b8d6-ee75654d04ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30eca3ea-dc30-4441-a76f-0b611bc55ec8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "edb12b86-b616-42f7-9b5e-914a4317f88c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8d0f1c01-c85b-43d4-8104-4069548c2a99",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3656f497-1ae5-47f6-95c9-3d66aca43f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9dd656ae-49fe-4693-a716-43d47130f366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294e6c5d-c24a-4d32-a2e5-9a67e0f70f05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41badacd-fa6c-4a62-8789-d5597c0aa1fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a8f46b-8eda-4ce7-a393-73e215a484a2",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "019e3c75-9550-497d-aca0-56e976dabb9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "482e8e1e-f3d0-4b78-b307-fc746b1afb3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfece18b-eff4-439e-855a-dfa80e273c7b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "cde52981-c3f3-4cde-8d77-0b1633a50cce"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "06abbf8c-e0bc-443f-9657-38d23a663ad6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "223c0d02-2343-4180-b5c9-c3bcb0bd9b0c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "626f1afd-bc37-4b7c-9285-85a6b5dad805",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0c0e4b95-7f9d-4129-a4f3-e7d6c52c6162"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a917c8c-be07-4149-bbf2-93aa760d3d44",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "709c670d-d90c-4f5f-a29d-129bda9cc0f2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fe6720c8-1afa-48e5-8e58-04d6cc31d1ae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5a098869-ec6a-4f01-a8f5-84b7a9fad94c"
            }
          }
        ]
      },
      {
        "id": "50d8d94a-b299-4373-ae81-d06fdc1a84da",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "609e4e97-cc57-4372-a091-b6f2a209521c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f58bbdbf-c56c-48af-9fef-2afb0b3b1563",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "422bb6b8-12b1-478c-b841-0fb235f48c7d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62122caa-1353-4443-b40f-de26c24e3eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8acec8f5-3036-437b-af85-14d7c0ed26f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c43b48b8-569e-4957-aef9-d6f02b5010de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76f750c3-2784-4548-b358-2753af933ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e46f3cbc-57de-4e15-a6a3-71e35db7ae88",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3caa55a0-575d-4387-a47f-1351af52732b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8097f799-9e33-4280-a4d2-85c06fd67404"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "431e9090-69de-4410-af00-9465a1689246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc03fe22-2910-41cb-8bab-b42135cc98b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c7a6ab9-128e-4269-8532-ea022bf198c0",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8153b3-5dd4-4fb8-9572-d08eeef2a786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e004d266-bb74-4ed2-af6d-1d9346a43393"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7839f9b2-bc97-422e-bc26-58a46855524c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d9f95ac-51d5-44f2-bb60-400551cdab38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc439850-de2e-4121-a870-ea2335f829e6",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a57618-d282-4d75-b25f-8ddf90f04072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1be8969-d4d4-413a-82cb-b6d6c0254a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236e758d-e512-47b8-a415-c2e08dc1e858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c37eb2b-307d-4e34-bde8-bc39249cfadb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "290ab528-a6a3-4788-969f-8b559df1512d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "929fbd0f-5d6d-45d2-8821-ea9fcfc4e6ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98554401-ce47-4192-a1f4-e944ee15afb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ffab1d-6e86-4458-a413-e2fa71674925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "367083c1-8fee-4f29-ae4a-3a566da9eeb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef096dc-0446-47a1-9dce-db6d1069070e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e330901-3c22-43a5-9ac7-a74bbd864a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a8e1e4-5c38-496d-8e20-ef6450091224"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e628a379-bb07-47e4-bcf4-adda617813a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fccc8663-ba36-4b6d-9338-de74c1227669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6922ae28-9b3a-441d-9bc9-d6a143a1a214",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d34b90-fe58-472d-bd39-7b055ca21dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6b02c4-5012-49dd-8847-54616136d62c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234ac5af-c544-41e1-b1d1-2d1cb9035041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ac56366-2f1b-4087-8359-6ed1b370917a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b5e31e-6106-45ee-8213-044bcd8fd160",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c34591-9a66-4190-a2e3-78bb0d397b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da458bc1-1547-43bc-be0e-2680eefc7d4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af9432fb-f45f-4443-bf0b-4d3fa4ac66c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2eee371e-80c7-456a-8b59-3f0ee0016e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b836dc-0d57-4909-a6b1-8a3f43ca022e",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76f36d72-a65d-42b5-951f-3cacedf531d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9592738f-32e2-4883-9f39-424c013bc5e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ba5c84-9b6b-4390-b674-0a1524551794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ece367dd-0564-4be3-8407-c3023f7666c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be4e0cc-e1ca-4b7c-b3f3-4dbd3f8aab37",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf14361b-a9ff-449d-a6bd-a081e1273e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fd24a46-f89d-4db3-af39-c46896befb6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236fa6b8-b702-4c4c-bec9-07b8b757d7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "014ec5be-98a1-406d-8c97-1b0d8b8d0490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034b48bd-3004-4eda-9c60-f44acdfc2ea1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd77685-a546-4354-a63a-28ba8cd635d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd96a7ea-0245-46f0-bc4a-0b23ba9602ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e07e58-7ed2-4c25-9f78-a0981dddc6b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c2bff0e-9d28-4289-a290-7246a3c225ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36bea0a8-232c-4517-9e5d-bf1b14bdabd4",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a958a7-88b5-41f5-b948-83ebd9b68170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2682231-ca29-441c-89ef-18667f7a60b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9faf8b4-2fed-4b98-bc27-413525ec92ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "442d9ebb-53be-4039-8de8-da1734379a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a54847f-5f71-454f-bab0-d6de78774182",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf35816f-a8a7-43e7-945d-bf64beebd80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ac0efbd-bbac-481a-a6f9-07ee23f844fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d142dbc0-c9ec-4be4-86ef-2ce13a36cdb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "04175d29-16d9-4361-88b5-12743843e7cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca1b434d-4679-431f-b71c-58c9e934cb26",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e65b66-f91c-42c3-8ad8-5ca364c67d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e21719d0-b2ce-465c-aa36-74186100edfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de4be52-5db0-47e3-8373-8660ba0cd3c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "660d7f06-d4f0-4c76-8c04-adc41773cc6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee0e5b9-9abd-4ebf-95bb-b1e69e029928",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3017177a-8e96-42d7-88a4-a3d7b9b16458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5803f0e-599a-4fd1-871f-a3c822d2f552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a260d8c3-2381-472d-9a33-3f33ae14730f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "885c64e9-77aa-4ca0-b778-17a6f8accdb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c9ccd7-fd15-41ce-a9d6-56f23ba2045d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce96a332-34ea-41a8-b734-dd467b390083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "568f5707-b928-4e18-842f-6184893d0e06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9a7e6e-2da8-4419-920e-a9a1d862385e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30114a11-a033-4427-8cc7-8c10d4502e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abcdde7d-e3fb-4455-83f7-a40b6330bf73",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f5c37e-8662-4bfe-a83d-e489ed97687a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc121834-1419-4d60-960c-3fa8cdd5cd0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d2e373-4596-49d3-b1e6-94b17bbda6b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "233c7764-cb60-4619-a6c9-5d806fc6a464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028e9940-4963-454d-ac78-a0e2d1ef97c6",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8138406e-4fc6-46f0-b8cf-db11f285d140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01276ceb-f068-4053-9bac-2f2e21c98c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da56f7d-7fc3-44f7-98b9-70852033b138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "31059663-c5bf-488e-8419-1c50752bf070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d09171c-5988-4fa9-944a-b52a93359fd8",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb18a6ad-3ad3-42e3-b8ea-5c296f960036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "389a821a-3c3a-4baa-956c-d4339339b0ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c409d3c9-c4af-4b37-ac13-d919f14afcbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "803d08d6-832c-43c3-b78e-9308db840671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b809750f-adae-442a-8bc8-254a2f084ac2",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b98cfc0-805c-4f6e-9cbc-4bfe7f9a4dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a01a406-35fd-4073-8090-75a9e22c49cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aaeb719-7117-4890-b7de-d62c6d90c356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c7e5781-7a1c-4591-b471-85998ef48ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2348e16-000b-45b3-94d0-55e66a4b4404",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "392f7486-e57d-4bba-a384-5934cc979f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21ea6bd7-32f1-4ddb-9849-70c3b97afafd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9ed1d7-00f4-4306-af03-502ed74c0a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e09b8206-f668-47f3-bcf0-b2556a5fdeb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2224183e-dc80-4215-be45-5b183f7d5baf",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52af8e2-607d-4d48-bc3c-220ebb04c9a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62d6a851-c9db-4d12-8ee6-7d4bcbb2e57a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6163eecb-1719-4859-9783-69caba7bb9d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "04d4ecd2-bcbd-47ca-acbb-5a533dfd0610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f60aff-7b84-469b-be63-1dbf02eff759",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "210a374c-27ba-40f7-9491-b6994bfa15bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "500710f6-6321-41e1-b5b3-e436ce180f4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f821e1ac-66c1-4369-9d1f-03c216e48f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1d750952-ef64-452e-8292-51f5a2cf38e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31505fc9-fb50-4557-8296-4780698a22a1",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90623239-409d-44f8-8468-0e89c4d9b9ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcd27119-df06-401e-9f50-d46cead0403d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473e6058-5e41-4ac7-927c-2936db231380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bd1f1af-11a1-4ff1-9038-44a6ea139eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a4441e-5ac8-429f-bc97-5253bbd25d4e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99dfc9d-2d2f-4e3f-bbf1-2df239bb15e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd1bd6ad-e0b5-402c-855c-582e2604d81d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706138bb-1590-418e-a410-a3a5bfe74e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e3a1736-4209-49d9-aae0-ff20859c3451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e892512-2caf-4173-a34f-6fd8b08bff6c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38cc7df-8641-4547-9ccd-d52f39cdf6b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69dede22-8c18-4ea7-822a-0ec60255c345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179ab424-d08e-48a8-b636-62dc75417e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "efe5fbfc-703d-41f9-9a2c-b4b6c6b44118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b437aff6-4f66-4580-a323-5c62f2da3fc6",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ac6d72-aaab-48dc-8a7a-ec0011ce1873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1ae5e0c-41c7-4abc-88d2-0ac653d8ee55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d561b93-f12d-41f5-825a-646cf5c9f0b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ec0b993-2472-4fb3-8604-5abb9e61854e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414baff8-d9b4-46e5-9e65-8f387e533bec",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "657628bd-8af6-4a18-9d05-bc243920e103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f31f4232-f06b-4605-b6b5-71645efe51e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cae7a3e-96e7-4b3c-8996-a40d8e74f1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "252eb1a4-092d-4dd5-869f-24a6e70e730d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75917c96-4112-4b8c-a173-8fcb8c676cb8",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "248f5f06-f367-40a4-8270-4feb8faff4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5440bf9b-47cd-4dfa-bf31-a1088ac6b177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a40cb52-e926-4d2c-84f3-2e8deded2931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b575642e-00dc-4dcd-9892-361394718d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ed1a3d-2b31-43c0-b7ac-442a27c29a41",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24126a3-8176-4bd3-98b4-2b11a21a0775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "167b891d-c116-4958-a279-8766d755d084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c471f430-245b-4f0d-a5f8-f360f139a45e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8c2cc73-7c3d-436f-9fd8-d5ce2e267161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4da31a8-ea8e-4289-9852-b7dd138ca9f5",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d235476-a556-42c1-a4c4-24ce4a962416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4c7efa5-c5f9-4c58-b6f7-837581654f35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c79016f0-e7ee-4804-842b-5cf594ff81d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee5ea139-e76f-45db-b361-e7f9ca5dbc37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382bc075-8915-465c-81a8-53b1c1a1803d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c24048-bb9e-4a1d-97d5-20b66eeb5d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "475acceb-e95c-4906-9a68-c5bd19918114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e32545ac-41a4-483d-aab5-bfa6a6a7e518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "809ac3bc-813a-46e4-8d21-0dd67296e668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f64d94-d103-4fff-8c39-7b6ccd40153f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f6dc707-b377-4c01-98d6-764b3c58100f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b038fad-8dbf-4cc2-a2f2-a7091dacedc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3947ac6-7f0f-4efc-82b0-f45e65797e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad1a44c5-44cd-41db-9493-36bae9327af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b5acbe-3a8e-4e2e-bc2c-051bed55a2a4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612af35e-c9d2-4189-ae72-302ee8d947c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "314e17e5-bb18-4ee5-ade8-e6f772e340db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3ac4c5-78ff-4074-85f1-2955dc1288d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d756e03f-ff7e-49ed-800b-cadd50e24deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "048d9635-4da8-4443-bd1f-1acfad043313",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db3dcc9-ec95-4129-ba0e-b4d870e3a2a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d144847-b049-49e1-a2c4-27bc6b22e084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aef45cf-af03-476a-927f-5afe6c754404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "48955854-713e-4f4d-8f2e-b5941213eba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f493a10-a361-4356-b7ca-e61fa9379743",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f05bc2-4078-4bd6-b64b-6974ec9a082d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "06ade603-77b5-4421-99ff-fc79c49091ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9320e8c6-274f-4a9c-b159-3dbf5dabf8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c0046c5f-1f08-42fb-a6fc-dfa9ef2feccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d4bc7d0-1898-4495-8d0f-495251214864",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eba228ac-7a39-49b1-a201-53651f7fe9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acc7d06e-3d42-4e2d-af8a-80220f228a0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a76c1d7b-1135-4725-a3ab-d2d0db46c82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7bfa65a-327f-4e35-a5f3-2e523545ce86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9772d21-8481-4eb6-b3bc-4a0280305639",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3987774b-7d3c-4c46-af70-50a6183eab78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f75352e5-085e-4ac1-8cdc-b9d1b7c97348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "233cfb27-531d-44dc-b0f1-af8cdfe4bdb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "498c7d45-51c5-4935-b8b8-1e7e6e04bbdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192f9189-5e70-4109-af44-96c4b58629fd",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1dc0803-8468-4180-bc3a-efe2593bbb6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76e003e0-7a04-4725-a520-34a3f2570e62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7534cb-5069-40d1-b166-71af4450e6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "68061685-3df9-4c54-80aa-f8003e5b42d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e93f29b-18f9-4d42-ab19-d54f638941d6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dabe1ee-ed88-40b0-9f25-c5f538e325a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0af6ae63-b9e9-4db7-bc4a-8e106ed36428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc63ee89-e96a-48e1-bc98-ebbb1609f8e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "03ba2852-54db-4dd7-ac5b-01cf0a6fcc32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6ac9ac-d37b-4f9f-bc8a-94eb8cdfb0cb",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ec685d-a242-48f5-882f-c6b1c3be692e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6db2dd15-58f7-4672-b0d0-dc721148205c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae0be58a-ee49-4d94-ac59-45b9b780a7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5dc54757-0c56-456e-81fc-cacdb028e516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e76edcfa-0b7a-442d-9a51-e9d16134c3f2",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2750ad-e54d-4544-a1c4-61bacd526f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "381a22ee-e998-43f0-999f-658df785f3f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91244e5-0d04-47ab-a425-ee0f63142857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d9e72ae8-6d29-4a4c-a3f0-e457e05ad35a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d509a0-bd17-42f9-8e0b-3947905c042b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8adf4c-06f5-4b87-9054-59adb7037251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c922106-caeb-4ab3-88a5-2e679a6e7c3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d259766-2206-4df5-b888-04b07bf216c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "60fe3d76-8dc9-464f-a169-7f409d4a26cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b69023-40f0-48dd-8508-d52e42c19c8f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51baf143-d015-46a1-bd04-7f01f4366778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "895cddb4-982e-46e0-b892-a3af1124c28b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f828fd0-5bfd-487e-8bb0-03da32a294b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1dbd0e7a-65c6-4e4b-9149-03c4b93620bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfda2e43-f2c2-4cb2-8af1-e99adeb8548f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c0be4c-e80e-42e4-951f-26428fa7ed92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e2fa34e-cb32-41ec-8d25-4fd88c810c09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8e2f47-f10f-403c-abe0-bf74b4cde6bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a27adbef-9e39-4a3b-86bf-24f8595ef21e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc50c53c-480e-4f97-8b05-b353f0a4aa80",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b90923-9003-442c-a2bc-73c40a9fdfeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25cf5185-a212-4684-804b-22ee42743db7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7489ac3c-c580-4656-b39b-73983c64ad07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5faf37b3-833f-4771-b220-0b9607c7f75d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47527273-1582-4b63-a0e9-c8c7fca639d7",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01bf6095-5c10-4817-bf63-7206e04b6c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27e169fa-d48b-45c1-81de-ac0328b0fda3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d75fd935-f4c5-4fac-adf2-e81ea05eb6be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5919bf4e-5658-4f5c-b04b-64d2a6dff7ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8097c6b5-3191-44c6-8969-b7e77d077af4",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27490197-8dfc-4a5a-a225-d0cc75fcf3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5d730b3-661a-488b-ad79-32ff99a39171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2997ccc6-3209-4781-8691-b3ed3ff92cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "96a12104-0670-4d55-96d2-581c9e426275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c2c225-7dbc-4781-a8ce-5158d8be54bc",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "753fda6d-f1d5-49a6-b737-350d514fb131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7289fdb-95e7-41ac-a01c-a8991e3270ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "250badfc-ab4a-471f-b0e1-00aa5fcbefc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e59fb713-8c49-4a9d-a6ca-9a7d28abe55e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d862681-647c-475b-91e3-5149d436baf8",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9860dab3-6691-452b-a12c-44513ec5cc62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24b1250d-011a-48f4-bad1-4db517e65847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f305cd-4c2f-4742-afb1-f2b2ae343541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "58c2189b-8369-4b90-8dff-16c1211b32a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ff3137d-57f4-432b-9550-e4a439c46bab",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d8018c-099c-4fd7-8d1e-3806fca6b5e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f285165-02c0-4e3e-bfea-8040a45a8d73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf2c3da7-6f71-4398-ae3b-8cfafd53b7db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f9a211c-f59e-4e2f-8452-b91bfde12b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32987db9-98f2-4d17-8726-599226f6d60b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf76eb8-b3fe-42ed-a451-7980f9e392c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b7838c-382e-4ac2-ba28-2c5af932541d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b8b5e3-84b1-4956-a935-f1cf294ade7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e2f2aff-cda6-4f64-91fb-fec0a8458ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2039ceab-0ad2-4686-a690-ac35d82ac969",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7715b3df-9f65-4698-8f10-d6731f02da28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6db40d0-11e2-47ca-b5ce-bb3c3d0754b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db591ea-ad4b-40cc-8e72-7d67c0d97e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d41e5c-c8dc-49aa-a858-0b20ef505118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87549d1-fce6-44c5-8fa1-39ea5d8a60c1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f425db3-82f9-4470-90a7-dc5371bb351d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88a446dd-ee10-47ca-b73b-b8d2cadf9df8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "423eb5a3-104d-4763-9ec0-13fe6e7fc823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1dab380-733b-447c-951b-2d8c2721fb84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60c6f2d-ae89-4ed5-b66e-1744af8c418c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60fcd995-01dd-4df8-8b03-b675b2de16c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d637f0c1-07e9-4001-bb83-b08e0c676952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828f7d5a-59fc-4bc8-8cac-acca95a8461b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c527f56e-9aa3-4cf5-b445-7b297a477379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc6ad09-424d-4092-814c-86c580829ff5",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06faec64-9503-4a38-bcd6-ab8b29a6747d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c75f6d66-3e3f-4b1e-bc0c-f3a67ba7b937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38578660-d30f-4366-80a3-65e47bffc500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5f440403-0034-4530-9525-cd2b3cbfacc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0439dc-7687-4067-be53-f8c9bd57156c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81bde641-ebc3-4b4b-b022-c82d236c5e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9be98a2-e8bc-4d3e-824b-d0dce4b3bff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a8bf1d-21c9-4a7f-bb40-c92b16e16f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "760c763f-b793-4cd2-822f-69249d3f7557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8c0bc4-b951-476f-9687-821619d9abaf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a1f346-7bac-4db7-a302-2f44acec2665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59e986d1-6a8a-409b-8a5d-0a68ac746daa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40d6d5b4-10da-4cce-907a-177fe1538ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c923e856-81ca-4541-a882-db75a11cb2a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62cc6b73-ee6d-4844-bf4c-4bd271e8420a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d0428c-d0a1-47c2-9119-5e9f5a807d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f573031-0a7c-4c2a-8581-aa841b6557f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f02e38e-353b-4ea7-bdce-3d889c7edded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "333882b6-af94-4145-a8eb-39d16583d80a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d7ba78-ebe0-4add-a8a2-b12915bcb517",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee68219-b68a-4fc8-9618-e6a47bd6cf21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2f01879-f0d4-4ae4-862d-f242152fe78a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "953b1585-4841-415c-abdf-b457d385d47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e3a9883-e0de-4c28-9bf2-f76d7ad46294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff2b1375-1bce-42f5-b25f-390c5fda19ef",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0518073-5658-4081-97b1-2fc5e5b8445f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4cd16d4-fb96-4d4a-9510-2ebcb46346c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33273e7e-d26b-4456-b35e-4940560e0d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "451731e8-8722-4c51-a9e7-c0c6252f085b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75e9cf1-a8aa-47a8-a5aa-8f15ecda6955",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85ad7eb-5186-4382-b2a1-312d2fe138a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1de72aa4-38e3-4da2-acce-c425d0aaff48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd45de9f-2122-4191-a062-cbe7d105bf8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1544bef8-6070-424c-9f84-cdaa4c372ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e601ae0f-3fee-4817-918a-21c13de23d80",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "711b83df-ed01-41f0-8431-401529d8141e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06defa5a-934c-4e97-b2da-b98531afcbbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "197c9615-50f4-40bf-b5fe-c0573fd4d486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4074d9a3-e4e9-420a-afff-8411d67d0a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf2374c-e331-4b67-9085-a5254de749dd",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "753016d3-3c1e-4461-8d3a-75cc76f53d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a65a93-6ad8-414f-bcb9-927dde5e531f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2abe31f5-1571-4a92-9dab-75efd1d199db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b14d447-4183-4379-ad85-1f71e5fcdd02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3236fa-5703-4c6b-b362-d47c826d2c14",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68aa60b3-a953-4b34-bc9b-40931e0c7c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29cb4df0-57e2-483f-b7ab-5332689be1ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cdf917c-8aac-4553-ad3f-b5d05efcbc85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc621ccc-6a9a-49f8-8e52-99916e550498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74a8784-cc77-4f01-9653-39fa2dc73df1",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a15baab-7b2a-4010-8d17-14ea9b426cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5e522a2-fa3b-491f-a40d-9ff142115824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f873906f-8a83-4ce3-90e2-76d13e5088c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf6d91c3-20d7-4c26-8c7e-e59ebe78ad6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3fd37bc-b778-460d-8871-ed61e9335289",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8982d1c8-267e-4191-87ae-9c6c21b8d0ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1170b02d-5460-4d14-b6f7-fb7a3421d428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6895e57e-43ca-4116-b78f-ef7822cb891b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c8b5219a-3f6f-433d-9209-44f999907815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba378c5-e5b8-4b6b-9985-a7ff671a27e9",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e170f7f-d257-4028-825d-acb4883138cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc2a7c91-a650-4560-bc13-0edd314851c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c20ae0c-f6d6-4138-ab22-6dfb138cdcbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8680f676-23dd-45bf-b30c-21cc411bf5f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536ef5e7-07a0-4a28-8ddc-7c9d9870f4c7",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f074a009-b99b-4b00-b54b-f002d11357aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9601f35-6f6b-49d6-be15-ec6034af7119"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b72c67-946c-4553-b00f-44e07ec812d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "80788cf2-ba37-4a8e-9dec-ba33ac04b196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ebe4dd-4c00-4409-b6f5-d255f07e6203",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d69e58a-d43a-4d77-bf54-b6391e0c5d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef9e8c67-4b6e-4bd7-8e6f-ae4741d4f5b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "673129d8-b7e7-42c2-88f4-e93bf179843f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "30467fb6-aa66-4387-b103-d227ca644f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6524782e-cdb2-40e5-b486-648802a47d7d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "356b2d80-3118-4d15-936b-5fabb4b652c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfd79e16-462f-4570-8622-c488fe2f5dd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8957cf-58c2-4c9d-b702-9aac56505da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b916878f-396e-48a6-a16b-cd59cd618096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a869c569-3a42-4f1d-938b-36b05a5b745a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4f21198-45be-4cb9-9ec9-7eb189ba48ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8450258-fdb3-4592-9aa6-751b43d341eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f76e51c-4fab-4bf5-811d-194e6af37ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b776e27-3f0d-4f82-8941-ed0d8a949dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587ec4e1-e797-402f-8909-7d39b5277b55",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "402fe2b2-ceea-4cb6-8b14-a6c01e33fbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9edf950-6d0f-4132-a21a-b3993b0a624e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d518dd94-6498-45ec-993c-b4c6e2aed014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d2dcddb-979a-4661-9550-572b554a133d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "262cdc5e-af32-4b49-9db2-963745cb3c32",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89c1252-1b30-4562-a997-06f282cf8013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e97cd853-d3b1-4c3a-af86-72fa8c87b8d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7971deb-e1fb-4902-b7b1-d12670e5c904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3d839a8b-2245-42a7-9461-6bfe92ec433f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef916f6-6d72-4ad4-8219-494fb4462a0b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5cc2f8e-b657-4cca-aa3a-ee0ff34b0682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "713f2565-3cc3-4f79-9820-4e3d9a051acc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ce697c-9f7e-4af7-a20a-3963670cb404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac3ac8ef-f81b-4185-92c6-19446c961980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05da42e8-783e-4264-82f8-79b436370d4d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c98e8abf-0eef-4f2f-a76d-350a4c5c58e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3343d2fe-8fc6-4679-b4b2-a707efe9288c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d1642e-82a7-44ad-91a6-8e936ae86739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8fc78a6-9489-4215-898a-258268ad5907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "babe96a1-efe4-4159-8ecb-f16bd020def6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0824230e-3312-4977-a690-e28c149a7705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43bd9bc8-bf1a-46ae-b181-f4bfbfd9ed03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ea1e1d-54bf-499d-97a3-d5279714547b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "79f35f69-5b53-42a2-ab6c-4531165fb119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "690bff07-6745-4ad9-8184-c3704773b470",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57cf2665-bb7b-43d7-a96e-5eaced9b37a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "160b5485-225d-4478-a1cd-4b2ab8045d22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd08e37a-8169-4856-abbf-ef8c29e7cf6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "389c56cc-92f9-44a7-95cd-b79b1c2190fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762900a1-f819-43cb-8ebd-8c7118a94ed7",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dcadcc3-7aa4-4172-86f8-fc6b2fc1c01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d3691e-fa66-4da4-8113-11695c836efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c15d4a-bb4a-4643-af12-4906a047d7a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd83c64b-4cd2-47aa-b539-74aab4a2569d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46dbf93c-a0d8-4db2-b92c-8a0a78e7fce8",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1392f3-a365-42aa-980f-65ffa6739d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac8207a0-3891-43f9-b91b-200be418d37f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215d64fe-d9fb-4b47-b556-bf29604f5328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c0b118ee-e8b2-4423-a188-4a76ba72182f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c359291-e4f9-405c-a8d3-e0f88b03d1ad",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b0014a-2de1-4324-ae14-88ec2d7d16bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2c770d1-2896-4342-923f-b5d08a513080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f181d73-1ed1-44a7-b794-cafe6ed1ff31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ea6d5d9-77b2-4273-bc59-2829a0deb7b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c01812-db33-4985-91e9-1015750b3dfd",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "879b3461-67bf-4f3e-9f4a-64d398f17b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f59efd8b-ca6e-4120-a2e9-d3f4158105ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d948cb-4bd0-45d5-8d25-19b7707bf41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ef08e83-2a07-47bd-8861-014ad901c15a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5962f111-27de-470f-819d-71541c2d9de4",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "298a1975-3814-4ac5-97d3-34a656e48783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4deca81b-865d-443d-87ca-845e5729401c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850f3e5e-ac78-4ed0-ba09-91c58997fd34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffb0232f-75c1-49e7-9e64-7569fc8737b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4617ec43-7a7f-4ad9-9649-e0e49a7cc046",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0335e1c5-74c9-4b32-9768-384637327ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a2b2e2c-92f4-4e0f-93af-430fd04a6047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905aa97d-8a80-4610-a70b-7354770792ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b30f8e34-45d8-465e-80e6-fe7038b020a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a7093b-9f0b-4d96-ae77-86ad249d5af6",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff0e67c-2295-46ea-860a-fe83c54aa456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa77bfc5-f166-4f0d-a087-a71b76c074d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77443c29-0ee1-4da4-b47b-a31e7d530481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "459170fb-3694-4ac9-8005-6617ee2d8fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ef89e4-f02d-4212-b620-d238086cb2de",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57bb884c-8640-45e4-95a8-311c88a8b2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac66f903-2ce5-4c50-a91a-88c15266c07c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45c2b7dd-bec9-443d-a9fa-3979c7cc7be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef1a0994-d3eb-4fed-baf1-e1655c89d1e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2aba817-6fea-4592-9e51-81310f10f494",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b486bc6b-3397-4048-acbd-b12f133964f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffb22b7a-8c64-480a-b017-707d3e239dab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d99a1e6-71ba-41ea-9992-0ce69589ef84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0abddc49-34a3-4832-a999-6df32decf14a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13bae84f-ecb9-4765-a1b5-b8940706c5ee",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a3d5c7b-effa-4215-8429-22d1d6fdcafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f204e2e0-6884-4dec-9c9c-3ef6d4cee048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30cb96fb-61f1-45d1-badb-dd23ea962a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9cf7975-66a3-42c0-86b4-127c344cf096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ea009a-f3b8-4ca1-94d6-a30f018f62eb",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab19e19-3b29-42c7-adb3-6c67c7300f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d4b6deb-0614-4578-bcc9-170d71138ea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e69a2f46-5ec0-44a9-af5d-4f4e9307ee99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ac6a825-e709-4728-8a4f-3b23d4ad4f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3644400-98c8-4e3b-a860-df7e1b9afc7a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def9e037-137d-4b98-9e30-6ac0f0f831fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7afed2a-bf4e-4575-96cb-a2af8c9aa7df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de6ff80f-1392-417b-8e77-c1647a783f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a1892d5-bc25-4682-b9a4-81a875c913a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca245c48-d33a-47cf-b113-c2eef0f8adca",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8413be90-6b57-482b-b388-dc6d93e3ae28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c41d811a-9781-4350-9b16-75d92b18ae60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1032bee-3a24-429a-b76f-23ab4d0892d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8902a72a-866e-48f0-87f9-636f03e9119d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27aa7290-c7b4-4e24-a9f6-3b7bd14a1018",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f0a732-3903-4e4d-b595-88bc14982d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7ab64772-2324-4397-93d0-76611b02f312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1adc3d0-aa4f-47e9-b171-7f3e6eb0232a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a352ffad-5f1d-428b-8a8d-db175ac4a845"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0874cfef-73b8-45e2-a28f-724203824de6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3866d147-b788-45e4-aa01-d460200e677a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "282c6084-8655-4484-a321-1edb50348162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "645f0c3e-4aa7-40a6-8311-000cf0d70870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "183b5f4d-bbdf-4102-97bf-c8c0845cc469",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7bb1e347-2a71-47cd-b104-7fc62139f142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5413cff7-7d36-4d66-a07e-019b1d7d4ae2",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c51ee52e-fac7-48fd-b61a-029a104997ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "beef165b-6c3b-4b9a-a1aa-52691a641abc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbca4651-76fa-4d3f-b067-3346ee4f07aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02674781-cad9-4a83-be66-04f588032b6f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "50036894-ca77-43e2-9916-6ffe5926a268",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "549ba6c1-f4fd-46bb-ba1c-dbf55f7356aa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "566df411-895b-46c4-9594-e0cf975b5b5e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5569d2e-6a14-4cb0-bd58-bbc5a0faa421"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0451dfbe-9168-4824-98f5-c48a02760bd8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a967dbc4-0d53-44ee-8417-367807e2bca7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d44fce9f-2c64-4576-b8e6-52a375e331a8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c12b58d7-52cc-4718-bf96-db247770d0c3"
                }
              }
            ]
          },
          {
            "id": "7ac1d83d-c49d-4949-9e0e-24566bf9cf56",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4d7572b4-e20e-4fbe-9475-a901287504b6",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0683fca8-e32a-40e4-ad6e-c531467bc550",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6812fda2-1312-4b6f-a4b3-a0cc632faf39"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "187bdb92-601a-403c-8930-282361b95a33",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "94c8c170-5827-4dc6-b72a-9bba5de2c693"
                    }
                  }
                ]
              },
              {
                "id": "33ea42e1-0c4e-441e-b906-6f3a95494ca8",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "370a8b75-afd3-4f79-ba5d-8a96d07fd80d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8143bd53-7124-4f49-9583-a4aa1b0fb0de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7acc87e7-acdb-419f-837a-d686cc4b5060",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "14fcd3e5-cdbc-48a1-867d-92c2d02a787c"
                    }
                  }
                ]
              },
              {
                "id": "360b790b-d0d3-4d8d-9034-9da90eacb177",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d89847a-79e2-4ac8-b76f-a19d8dc5a15f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b6ffb263-b4f7-487c-9a1c-66e17fa34248"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4edf97f4-ab62-4e4a-9279-91a45d03f5cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dad549ff-204c-4274-a793-0abe30e5bedf"
                    }
                  }
                ]
              },
              {
                "id": "1f80a21a-9063-4ab0-b9f7-3186ae47d9b5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "685ab911-f531-4ca0-ba2a-13b3eaa7aee9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a062446a-bacb-4aba-9b9a-5a7e7a99edda"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2900cd2a-e157-4f05-9155-0e8a5040a4fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "3b53916c-67ee-4538-9e9c-26b57924639e"
                    }
                  }
                ]
              },
              {
                "id": "6189634c-4761-403f-8304-2ca134d7a578",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8e4dc8c-6ae2-49eb-bcdb-abef03663890",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "60d07ab8-d249-4389-a4f2-00710b14fe5b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0bb7e1a1-5f26-47fb-b7ce-73ed66ee2d67",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "cc271ddb-c30a-4ad2-a491-6153ff73549a"
                    }
                  }
                ]
              },
              {
                "id": "07814a3e-63c4-4d0f-b495-a25e280bcd9a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40b27149-dab6-4540-8b76-26102b1f68de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "856b934f-cea9-46f8-abb3-4efcef25f982"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "705d82e8-a297-4be0-b618-168a74c6b7d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "54f5f757-b413-4451-8599-99f225a03ef8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b7681831-0d86-490a-9c37-7366cf9d938d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7619c82c-4fdd-4409-8827-62308a3ffc00"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "313c365a-7be1-452e-a17e-bd3d2fb37a2c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ee9e5f71-4986-468d-8c9b-0266fe641a8d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "64361922-842a-4816-8215-f8583bc67713",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "41dcddca-f1f6-486a-a1e3-84cd135d184a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c99bd46-d4f8-4590-b135-c9e5e938f110",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7bc0ee00-988e-4900-b173-eccb716327b7"
            }
          }
        ]
      },
      {
        "id": "955b1a83-8bed-4ba5-af5c-98a139458a7b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4bfe7736-484c-4640-a1e2-2720c3f6cb03",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a373d0b8-8bfa-4647-bb7a-ee6e8de20e9e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a2e584f8-a074-462f-882a-32c0364b0963",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef38205-80da-4a4b-bde5-31e8a0afbfaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "998d695e-94d6-47d5-802e-93026798751e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2c388b-dd55-486e-9c7a-c7b55179c889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "abf47ae4-8a99-4659-8101-862d92276385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97cb8874-3663-4ea4-a1de-a8c544d0f0ff",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bff5ee6-e356-42a7-b7f1-37d8e2994cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82a3c7ab-69c9-496e-be52-16212f4002bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e503e1-4415-42f0-86ad-6b307298937f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "397cd46b-ac04-42eb-8dcb-a69b514a8534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "961ef827-1542-43a7-8b1f-86932b97431f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73879277-12e5-4179-982a-3c2004888c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eb3cb8a-1e1e-47ca-b05b-23005529b1dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066a4636-689d-4793-a084-cb6a5ba6aeed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb391277-06cc-49d7-898e-5196732664f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe54e365-9947-439b-a171-c509a168e532",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "180fd5a0-cbcb-4ecc-b6cd-89c35c92fa5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9942b16c-b8bd-4a79-94f4-165267bb1ccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7400c6f9-468f-4c63-8936-7675d43ff8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e368ec2-16cf-4a93-96de-e15dd3ea85db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717ae3ce-0d6c-4f86-92e8-d4932c6470e7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d78e90-6ae2-4694-a6ef-4207cb3b9636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b14b5b-9a21-424f-8e6f-2a65b906e52c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e24b6555-64bf-4d5c-ad4b-a1df716e1818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "037ede8f-7772-4b82-8bfd-f1da2c8b0b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef87570-b36c-4bb9-8afc-71bba19fd575",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba5ac9b-f12c-4781-9798-289a3731e73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63c8ae96-b65b-4555-97f4-4411bf1172ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29dc4564-1d8b-4251-bd1d-fb7278acfebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "106bb9d3-fb74-4eb1-820c-d00544d08507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2413a891-5896-4904-a787-83a695dfde2a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea27bb5-447b-4e12-a34b-04d6610d419f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94b24f94-3fa3-4988-86c7-24a69da4db5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe18a9b-d062-4035-9fd2-9645fde3e9f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "006c436f-67fa-4550-9e9a-faa9a35a207a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ac17f3-193b-4d8b-89f4-ccfa9b055e09",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "718e4148-8048-4d2a-b900-a92a3dbd84ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a973c0c-c03e-4a5f-bb4f-5234caaab352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaad7edd-7fce-4540-a26f-046de75cf92f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cd08e91-dfa2-4361-8dce-a98c56270dd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b7d09d-9264-456b-a5f3-f4ea2810439e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "171b210c-d82d-4021-8ac7-f5debc732b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "254cdcff-b479-4993-8044-6c5de2273d7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342717a4-115b-4945-8422-a5bb112dfe5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c40c6613-4437-45de-b123-857f1d470353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1dab372-a23a-4db0-a96a-176151efe7ce",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e618e3ab-c9a5-4c1e-89f0-d948b7e3c074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea0d6e1e-edf8-4823-bd9f-0df0f94f250c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2802beb-2d4b-42b8-a85f-a75a4c0da04e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f910d478-c0ee-417d-bc79-508b06ba1d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae2c6b9-839f-4132-a87e-6651608aebc0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5011ca-955a-4dd9-975b-42cd172dc4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c97c479-719c-470c-b550-787bd0ba49c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2730e27-4e7b-4d17-bccd-6000cd16fc3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a26b0138-b71f-49a1-b381-f9bbad7225f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e134e325-8d7e-4ef4-b3b9-189aac0bab2c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "760121d5-618c-4b67-b3c9-9f6a0c468f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbcc58b6-45ee-4033-aa6c-cf88effca570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6079118-6e66-423b-869d-9c8adc849dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f998806f-9123-4471-809e-a0146b145a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d98e28-aaca-4a9d-8e5a-72cf96cb5633",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be62bd5-0d1a-4e9e-afc9-1caa3ef6153b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0df38353-40a4-4f27-b73d-a10458974fd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001c21ab-0ba2-4f2b-aac6-d2f2adf7859b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "61000796-521e-47a3-8561-73853c4b040b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44e1112-f19c-4782-b64f-6b0e7be7873e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1ac9b8-0289-430b-acc9-afae48e40220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ea4e71-ff93-4cfe-96ab-1ac7296e66ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0864207-617e-4145-bfcf-58307a1ce37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "064967ef-ac2b-4626-adc6-53cfc31fb87f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaf71609-6378-4d37-bfe5-40b6b30be2d2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc89067-7078-4e4e-8fb4-ae8c8aa2d627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "300cc9e6-0280-4876-af69-8d7e8967a887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05449aec-72d7-4cb4-ab50-195f389be832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "24e89afd-7322-492f-9472-cc1a924afde4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b23160-fe42-4b94-be9b-f866e7d6f121",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b1d4d0-1b92-4db0-a1e1-fcf5375f67e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5503b937-180c-4c10-97d4-446046607547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fae818e-2e8f-4984-b4c5-4a4a9d774d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "55e3610f-2579-4cb4-830e-7f500e340a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfdfdbfc-8b9c-4d64-b6b8-cd67632bfea4",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b706caf9-e600-408f-8bc8-43bcf6bc0d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc04a4d7-5ec0-474d-87b2-88351f5b2685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12adc10a-e5a4-480f-96bf-444aa404f2f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d960cecf-61c5-454d-bec5-b04ae873b657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722a9e10-28b2-4877-885f-2e4a1b63b27b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4417a2f-0988-490b-8f18-6e43b34bb3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f44f842-d6c6-4780-9566-546ab3104f29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265321f0-83f4-4b0a-8aba-ca7893fb0d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b1fe535-30a4-4e5b-933b-cb7aa656e4f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3f42eae-efcb-47fa-ad8b-97ace18945c0",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e2ba36-7dd5-46a6-b210-5738ea8bd4ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82c01ea2-e232-464a-9e70-6f554e2d7d5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce217db-aba6-4866-bbce-638556ba5e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fdda2a3-6acd-4826-b619-ba820c38fae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7367a639-4de4-45f9-95fe-a90d4564e3cb",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22158997-4e22-4d17-9617-9679117ac029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88857e95-ad36-4b5d-a55e-e1fd00fe1df2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de956d4-0ecd-471c-b126-6162bf3f7930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa60ec1c-e399-4670-87a6-2777ce6436d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbdf7d1f-3b26-4752-9a16-b6b861452bdd",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37bfe15-febc-4dd7-aa9f-1c6423256f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26f9f23f-9535-4232-9934-3bd722c7b6ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b47deddc-921b-4514-a52d-eb9376e8fe69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9627838f-0703-4782-965f-2fea43390f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f67df2c-643c-453a-a546-1156e0c6ce99",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa234759-b39b-4369-9673-c0fb4dc523cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "119553d1-c0fc-4d8f-b393-21c280b3325e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b6bb57-1bda-4fab-a4ec-e14199a5f527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7027cf4-f957-4dfe-96e0-1ba96288224e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52a0054-7e30-4caa-b2fd-43e9fb96039a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5ab077-9fd1-41b8-9c65-3820230193c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5987d06-94c5-4dd7-a31b-9cfef06bc85b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9b5c0d-0d7e-4f97-8b94-508a56f2a765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abeb8b5b-016e-4982-8e89-951d29db8a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0efdf98-6b47-4ca0-b6eb-1fcc0266d699",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2c4643-313f-4212-b646-f237f717c32e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4532d68a-a49f-4d53-b9fa-a112cfd3c7b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4d372c-128f-491e-8585-32816139d8fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c0ea2bf-68c6-4d2a-b19c-474cc03dbe90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "befdf295-52fa-4026-a6b1-f54b0be4b0c3",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21895f57-e125-40fa-b661-f2c6b5656358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ddac2a5-df32-4149-9201-23a408d18b78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f826988-cb24-4112-b4d9-e46280dbccb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "daa966ab-6a91-43d4-b6cb-49244ad6ba82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e74aa2d7-5342-40a4-98c3-99f5ca8ddf0c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7fb6ae2-57e7-4550-ae48-43ad464ef6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25d652cb-827d-467e-b173-9f88f16b3c76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd28282b-7abe-4778-a601-50679ca1753b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a2cfd92-8e7c-40b9-983f-05dfe1b50461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67666652-35ff-4044-8d91-5505e42075aa",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e07889-788e-4e9c-b4f1-bb647a865ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8282ccc7-3d59-454c-a301-bd22c2d5d28b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e6e9c2-0756-4054-b4fd-cdbb66c3f223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c5f3af3-a685-4ac2-b136-0bedeadd1152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809ae479-5798-4088-b628-eaecd0882859",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe54a39-e547-42cd-ac7c-954b38bbd214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab0b48e6-199a-4751-8d2e-da152519690b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76429c0f-6e66-4566-bd1c-906394da8692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c91f731-fc4c-43b4-9c6e-9b0225859b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f78e3a8-0f50-4150-8260-83fe66df25ae",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa087bc9-8458-4258-a57d-cc2f9a11ad26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bdc0efa-7f53-48d6-b3c0-842ab9353531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53beaa8a-ff1a-496e-8c8a-9722ef5be456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a99300de-56db-4d91-a63f-f1e7741d44f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569eacc4-7b1a-4196-8bcc-7d325d646974",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea3b424-1c13-4f49-a087-c43405067c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5541b44b-04c0-4705-98a2-3d3003f9836e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8febfab8-10ba-4065-b00d-55d8048b7514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8e85ce2-9290-4fa2-b85e-d37f0453b196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90458308-31fa-4b7f-bc71-493a7e760acd",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95cdcceb-5065-495b-8515-f256da729e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6cf485c-96aa-4931-bdd0-a3f6bd9dc5e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dbfff67-7c31-42a2-87a0-84be31540e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cf2475d-34c8-4c62-8b0b-bdc8d56e3f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b56db56-ee31-4a76-9d20-1eaef87954c2",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7a451d-f06b-49ea-b0cb-717883501d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa3c18c6-367c-4b44-b510-8c5b502e5839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fbf1ee-7225-43c4-abbf-6889d92b764a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d928009c-8295-4117-8886-3ea7393ada0c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b76697f8-889d-4610-8e94-1d08e44b5418",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "69456364-1b4b-4dd7-bc0a-eb8a4cdf6dc5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "783e9440-db9f-49f1-b9a6-cbdcbb00d004",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4ad5798c-08e3-469e-847e-42e7bb7c1e62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8197bfb5-2bcd-425d-a615-c8c75dfcaf63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0db70545-84b0-4201-b975-c34ac7e19771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f48a0a0a-eac3-4a01-a1bb-0f8353b19ee9",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8acf0d4-f412-4f54-b8d4-77a36b8d7551",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "aa6c36c0-a933-4cd7-98ed-b9206a5339f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9164966-3490-482c-a37e-b40ea3ddfbcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53f34b30-9cb6-4cc8-a135-a17b198ea703"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a42a1bdc-6616-4516-932e-95f9aea9b25a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "728fa862-4fdd-4546-962e-40e5f0f37416"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ce0268e-8828-4bd5-bbd5-0523f694a5ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6777537-2d16-4ab8-b4e1-ce13cf4f5e63"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d339157c-1487-48e4-95b3-3422acb6736c",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "444a11bb-177a-4aee-be73-1a4eef2a03f6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0abbb8c2-0774-477a-b6f6-8e671c815356",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f70081c8-e9d6-4047-b3b5-3fc6de62ac11"
            }
          }
        ]
      },
      {
        "id": "d99a976e-8911-4bf1-919c-165dcb004bef",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9668f1b8-3082-47e0-bbdb-1ba52026587a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a95101da-090f-4f40-b5f6-b95e1cf23e0c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5201af31-b241-48e0-a60d-047ae93c9d2b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af8fb9ef-1118-4459-b7a0-4b9ff1726ab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74a23567-b1c5-4133-9daf-d52e7612a535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e85d98af-b636-438c-8b9f-c49e79bd2bf6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b6c559-038d-41b8-ad0b-30a0eedf105c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4e3d3bc-ddab-4ec6-b899-286c3ec76db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee145f73-7e92-4c73-974b-d6b8b1be40f4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e97f1cfd-d55e-4ced-a1ad-b3e775d1f669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e79c9e5-b9a7-44a5-8375-bac300341489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d9f856-c03b-4c7c-aa61-e99c7e8e4643",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b22da1-5533-40f7-8449-f81bf8f20525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "310f3f69-720f-4ba1-9bb1-85398a10998b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de11c5c5-4e80-496d-a461-2d2d4d874b2a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "390718de-ada4-4260-9953-c752bdcbefb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f201112-2ba3-4632-8ab0-227858fe20fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b29fbda-ee17-41f7-99a7-ed636ca33976",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1469c26-ddf6-4912-8b87-1f81d027fbc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b75b52b1-0151-40ab-b4f3-594c57222c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117603f4-7600-4854-bd01-4f7cf9e3e55d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdcba457-59fa-4de9-98b3-c23bc0232c26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08fd0d7-e123-4c82-9623-f4f5e3673ef6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "343778cc-4fa2-4294-a75b-8dc7d29d767a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3be0d314-76a8-46ca-bc71-2d127ec64d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3347590b-b930-4832-8475-2306b4b5ac00",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8282a5-def9-4811-a9e4-e6980504944e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ffe72d6-694d-4912-8cbb-a173c8d8ca3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9425c3-88e9-4579-b53e-bf0e71084f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "580bc417-8ff4-4aab-8e6c-840630649b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d976af82-0e55-4a97-94e9-91db53252591",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03fafe86-d9d1-4eaa-86f2-f2ec6813cb23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29fd9f82-ab4c-45ea-b871-b6138cf85c8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f99e7f-12e8-49a7-a1af-4b163e7197b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab81407-e5ff-4bf0-8edb-914a9578df66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97faeb59-e93d-4c60-81fd-084bc6b8503a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41b8322-4fc5-4cc8-b683-088c4b6933de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5e03b6b-65a4-405a-9911-ac7a6b30b9d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02cd58af-fea7-4145-9f6a-e7776df57ec7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f79566-8149-4357-9ccf-c3030666e8d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3003cd-b387-42a1-9086-35ac758f4d74",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498003a1-d876-4654-883c-84d22cde2d6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ee520a7-de64-4cb0-92c2-3f5856764099"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71310d6a-9630-41c5-83a3-30ccf8b151fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "341d44ed-92d3-46fa-b425-2aceafeb1450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "436d0c43-3ef5-4fb5-b5c5-51eb8ddcb533",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a05231c7-a27c-4916-b33e-152399c01344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1697f839-60bb-427e-b7ca-9ff7319f55f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9629cab4-87b7-492b-8a65-db9164c814b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06edbf6d-c104-4648-916a-8b72de7d1389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b03d0b-5a90-4469-acb0-758b4308a08e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c97b162-fbdd-4f80-9ee3-3b88088cfe4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02540b3c-784b-4e04-af3b-f44fef6fd9e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4cccbc3-7637-4cd6-bf08-ea95fe8c49a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef4276e4-d3f1-405b-a28a-aae04e9819df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2186e8-790b-4f82-a561-411ca0e212d7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb798e0-6df0-4971-a4f3-333b130bda5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4e1d651-5a0d-495a-aca0-f35d71cfea23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bd6cccf-3084-43d0-8327-16661f14d7ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d62fcb15-9067-4379-82ad-5e323d5d0405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9de5912-d3bf-4229-95a6-adf413a145b9",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b5e88b-b337-470f-85ec-f6d60e0cada4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d59f3ad-0987-4a23-80fd-3f21496b390a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dbc1b7b-9b91-4d5e-a209-0d0492ac6eeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9278347c-9e46-4fa8-a357-d38c133f97e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c885965-9b33-45eb-a00e-e96f001faba4",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c04865c-05b0-4a1d-954b-79de452efd02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3e55f7e-f01f-4851-8db3-524df8913440"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6369542-5cd8-4624-bdf3-89c48c662601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faa9c9f4-7e6e-48c5-a1e3-79d72776ffab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5f4448e-0554-44b2-a723-e67abdff8170",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf32912-8157-4c3b-8e8d-15bf8bf2a009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a756233-e388-4c87-bc7c-e1742e6b9be5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00825094-d6fa-417e-8626-900a89261b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c541989-2694-428b-8f6b-d7ca17c8b735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf9e11ca-c1a7-4133-b491-994e8c96036a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c4d0e0-2e91-43ec-b185-160d5871da76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a1e2ef0-623e-45f2-b768-ed5e21c6d958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14ee1eb-1562-431d-8215-581287184a34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e454ae3-50fb-421c-bf52-bbeb96d333f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad03ee74-878e-4d03-8f3c-1791893accdf",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "027a4315-d010-4fa9-bd07-8fd5b5de192c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e19e46a-df7a-4a79-8fb7-6a3e29442919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "084d7bbd-9753-4719-9d85-5ee8fdecca21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b666a794-4cba-4112-b164-11dce95f39cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d025b005-359d-44fc-a8ee-2e9cdf6037d2",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99ea71c-906d-4f80-9b0d-1d26e4c20216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ec89702-4269-4044-8bb2-590549d00b8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda3e9f5-2348-4007-ab95-d34fe30fd6f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f95bec3d-4494-4f38-86ea-5f4b24472028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f88cf57f-eeaa-41cf-a73e-bc3924e602e1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b07944-d287-456a-9c4c-ec2eb2961909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62637067-d997-4445-b8e7-fda75f4e243a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de4be04-5ee2-4950-ac60-81325eca6966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d718bf22-4730-42ef-8f17-a05cc388adfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee318b1-539b-409c-8ee0-718218c0ddfe",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a07a092-20fd-4e1f-a964-ffbf10c0dc97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86df3a71-f119-4d00-aeec-cb685c74965d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0447aafe-1038-4fcf-8a56-3b7754d67ce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a56ca53-a97a-418b-af1c-4f76c84eed89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55cde089-4750-4106-8ee2-04dad8fe504f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0916ae2e-5a25-4f83-92da-75a6fb34b4e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0a462e9-8aec-4454-8a1a-cb83082239ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "303a60e5-4893-41c8-8a58-b3dd06d5d960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "530cd421-b17a-42b6-8bc9-181b24245ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2738101-21d1-4ede-8f65-bc1e288edd10",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054211a5-b80d-4e2e-99aa-83c5a9fd7315",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a91fa2d-875d-46d7-83f3-ca13653684dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d30356-39ef-4c55-bde2-460e2d14ac26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa42dc1c-3778-4031-96e2-c1c559ca9bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a78daeab-7028-4991-9636-5d7b8174e013",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3008707-1d94-4b81-b245-70c112d76d3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5dc6faf-340e-4669-98d8-be709d903522"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45a9ea0-7fec-4e43-9b35-031def1b83a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e20e69d-025e-4576-9799-44cce730c98a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa969c7c-d6ab-4ada-a1d1-8afa5779ae00",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84960f53-39db-484d-af37-e7ce51201d75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa7b6a43-f0db-46bd-98ca-acfda4bf0383"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b0d50f-f2dd-4fa7-a8ed-57920a9d0ae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b26828b2-7bbc-4468-9cc6-a3f7392f4626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e495822b-b09f-4b5e-9956-b22191666743",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "764f4d27-e0c5-4ae0-8b76-edb7c26de435",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "039859e0-2eea-48ab-90e1-8e16d3d2f86e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c1dde1-ac48-4c75-b6e0-59a35a740fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4874b455-39f8-4d21-86f6-7d2fffc4ec49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2b33d5-adcf-47ba-a541-da995662b27f",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9a2396-d2d5-4128-b0c1-c00a3fd8f2cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd6fae96-6ae0-458d-acb9-46363fe1656b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eaff1de-8457-4ceb-ae05-f970c82b61cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a75746c0-ed82-42d7-ae08-5cf9f06e6752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac67d6e-e02d-47ff-b3f7-f0adff0d37df",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aced6237-a20b-44d7-bed9-a7f58a056906",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d8d20db-6f9f-4b17-b83a-7104e7c28d4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b7b5ea-52bb-4544-b327-34830a4bce1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63362629-fc7f-406e-b5d8-e51335709fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18af7f2-ec71-437c-bb2d-8bd7956688bc",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3352fc6c-84f8-4e2c-bd47-35c1ca0158e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5aca2143-0114-4005-a893-26083f402c51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66fa73db-b879-4267-b094-92a56a1c228e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d787f3f6-b086-42c2-9488-7acc307e5ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d4637e6-cea6-437a-928d-cb71573ab297",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d857da1f-093e-4b44-b46e-951b3e5aa1e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66933e21-8195-4e35-a8df-2135476dabaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e980c7-fad5-4e3a-8426-e45e53109cd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc302a25-50b6-4515-84ab-aed077fa3b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bba7a97-c403-4782-a236-beef35eb3243",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f5720bd-946f-4bc8-8def-aee2cb2cd789",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17c4ded2-f25b-4c47-a93f-a8af2ddda802"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c510f57a-e1a5-4002-918e-7332fc466a18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "026caa4c-eed7-49ae-8d87-d9f0dd1b6e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa231a0-c5c5-4ba1-a074-3500f772c015",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e50586c7-c234-404d-b925-71d114d9e852",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c99bede6-9982-4e54-a056-644fb3763e66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ab7e5d-c655-4ebd-97d5-295d8fb2674a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb93093f-5321-4bde-8e21-9c6ed72cf5b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dedc2081-3838-4741-9c6c-d83e5f5afc23",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "407dc3f2-9379-4a2c-876e-521ab2960cf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "007b45ac-8d18-44e8-b6c3-0ff7b0ee2adf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "403369f6-b90e-4732-a9b7-b114f6ccdabe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "316e4767-1d5e-479a-86fe-a9cf753e0796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008ab982-89b3-490e-825b-23c999a3fdec",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f3e326-1780-4a19-842a-abe5eefa2eab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcbe20d3-306b-4d8b-b5d2-1045d987048e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87c30d5-ae62-40bc-8eb5-dd5e7b36d84a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0178f368-9b2c-4e4c-a1dc-cfb87e153cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be1381b-0e34-4797-bcc6-80bfa60a0ba0",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6eae268-6c52-43e3-ad34-7173453ea490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95b5606c-856d-4f51-9446-65f930509b7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9c396d-db04-4890-95d7-ef482996742c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5da4756-1587-4b1a-a63a-af91825312bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f095ac-df02-41f0-bddf-b3a5bcaf835a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89ec0f1d-daa6-4697-b737-4b8315da4920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "870009c6-c336-4d5a-a9cb-b1ebc75c87fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c56d39-1617-4ec9-a1ff-2f678a28b377",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7daaa73-8fc0-4425-9d97-6a89004ee5ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98f00da-30c5-4f5a-866a-907b25b5c874",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c23e276-1763-46c4-b7e8-251fd9acc0f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eddbf013-6b16-472e-85a9-ca1483b7fc10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a431cef1-7c8f-4d0c-b423-03cdfd144674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb47cbc6-5b1c-4065-9841-36cbe90b2775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13730630-4c20-4546-86da-be9b15589294",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597f322e-f2eb-4851-b4dd-b49e5be3232e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0abf4268-ac20-40cd-bbbd-91b99d244ae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1bb228-5e9b-41da-ad67-7b08a8a53e96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "749d7b93-1cd3-4eb8-ba62-3e72b96cafe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e72b43a7-4735-401a-bcc1-489be9d072dd",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ea82d9-dcfb-4376-836d-69cf18bfff43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1f1aa22-64c8-4e6d-8620-4c44c4208f46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17af2168-bbed-4fdd-86c8-2527c68843f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a79f366-626a-4113-9a9c-8424f1e7ae69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbdc4513-689c-46ed-a589-260d4919e405",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55fc142-2a18-4e5b-b2d8-4dbacf735dfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88cd42ff-51d3-4dc2-a5d8-9e7b8fd0019d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b8839aa-8701-470a-b262-14baf21a1ea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc8e9161-612a-4b2a-8fe3-529e917b0b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd0c72d0-b48d-4249-8437-788bbbda598b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3b1a16-dc0c-4c4e-8776-2f997e743cc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db96f4e0-1778-486e-98ee-d1daa0e3ec3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fccdc5c2-0bc9-4129-9a89-e648b1321590",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "016c546c-3a67-4cc6-bea1-48864755c545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41152841-1431-48b0-a704-4bd5f6a9ce41",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7dda4ad-2e6f-4ef0-a1b3-fd44a8ada561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1b06772-a5fe-46d5-853d-7d4fb0fa3391"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e9d228-1526-4dc3-93f0-578944af2754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a95fd9f4-123e-42df-a083-94329939cff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eee2f20-4859-45a7-8807-7d631dfa245a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb09015-cec4-4193-8d5d-8d3ef7045ea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a15cb921-ca8a-4d34-b8ba-0ce98ce780d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4611f9dd-628b-4a17-86ce-4dd7b1b2e2fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca94a95e-644a-4670-bad8-0c50540ca6a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1811bec-c59c-4718-bc7f-6c510719e87c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6646177e-ed6c-4928-90dc-df50df75aa1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "831f6928-51c9-4dc8-9902-d8122d3d31b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a8465ea-c876-4ebd-80b5-d501567355be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a1dfed3-01dc-488e-a2c0-fbaa968cc9bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3777368a-e19b-482e-9639-86128875c47f",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8bdd093-14c9-498e-99b1-196c23c8c934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20d9659b-64cd-42f3-9b50-d6a927ade295"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b4d9bf-20f8-45ee-a782-01a4007b7d96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "761c15e1-ffe5-4385-8f99-ca5dd05f4a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0ee14f5-7696-49ab-8a41-4d482389bf29",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5276004-067f-454d-92af-c175d6c26712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "202f3490-1092-4714-9533-26a36c1305d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b53d80e-21f5-49c5-83f0-7a121f45527d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db0e7a3c-6aaa-413f-a63a-5f8832d383b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74eb2276-bf22-48ba-a8f0-1aa2b16888ce",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1ec26b-adc6-4700-afb9-d3f7f1f87957",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d43f66d-ff76-44e6-bc12-c9cb0fd8c5a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db72bd3-566d-42cf-9d95-ebb7860dbed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dd96520-6364-4cc1-9667-dd4141be0f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d60112-67fd-451e-b1f7-6b4bacddf8a1",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf31f32-b52a-41f3-8864-c836b65334e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2fd7b31-2a75-44f2-a4c5-c0873fb15719"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba7738b-5501-4cf1-80ec-8885926578fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5657f9c3-cc2e-439a-971a-c47acff593cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7fe1221-7bca-4e0c-89f2-024e951470cb",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b341f96f-6dc6-4fd8-a05d-d52fab0f9ccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da7a85ed-b30f-4acb-97f9-007cb66c4d46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b74aaf-b45f-4a4f-9db1-c223f5f1e8cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7930ee75-0303-4a8d-9fd0-69e770f9f6ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9236d29-250e-4fa8-ac82-6ee39bf6173d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a351a837-c2df-4c83-818f-87886255b5f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98a36291-6281-4217-bd47-da766d8acdb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc516c79-9ee2-4951-849f-fe7f107663ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4443e1ac-a02b-4ad5-b051-96fc13092206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56255db3-f2c2-4b55-a9cc-5067619e7d03",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4733f5d0-0ddf-46c8-a079-bbe27085b2b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cab0bb13-3c95-4d2b-b436-640c27c9c327"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f10a88-e458-46ca-844d-0444c00efc62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "143513be-40cf-49ba-b645-00d576138c95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf30fc5-6530-4fcd-89b7-7d2cffd08269",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63b43ac-7806-400a-828f-132154b710bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9349ae13-055f-41fa-902c-6995a3a0f997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf65702-8c54-4bba-8c7a-2935dda24ed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc8d726-349f-4167-8fe7-7991be8ff802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29126c1f-c9dd-4c4e-9083-8442efa45581",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889518c0-6cfc-4bd8-9908-596c8db42bd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "485507af-45cc-4480-aa05-bf8810b2c17e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "657f1dd6-db1f-4b5e-b710-63517b16c29a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06535de3-0860-489b-bc55-2b71b6f462b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a26be9a-f6c1-4fe7-963e-68e5cdcd984f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f4a5a8-4a5d-48a5-8b0a-755762f0d43f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cafd0233-aae3-4bc6-9c9c-5f08bb9bc377"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a787a301-caa8-4b73-9465-238444a07075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0995d72-a3aa-45f8-987f-6d57293fdbc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139dd115-2684-4ceb-a4d4-4c090ad9ea6b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6876571-0f59-4dff-9392-2f1b1bdb7d47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82322d22-9dbe-41fa-9446-1968b5955911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "275445e7-484c-45ca-92ab-3ce723423334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8e461e1-120d-4e8d-b201-48a0a5f6551d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "decc1048-b2ff-4fcd-9639-91fde287cf93",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd60ae8-9539-4f08-aa2c-e0bc6c47608e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "302a40fc-d094-4030-ace9-9724e351169b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aacc16dd-2aa5-4531-b082-76241c34b025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75ea82d6-de22-4ba0-899d-57fdefa8faa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6156ef0e-bbb7-4693-bee6-8c64c226bdc6",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b3057a-5ef4-4b9c-a772-27162a5424ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac6e7c94-9d8c-477e-96f9-bed8532e4e9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33cc14c2-76c0-4586-9e8a-e74581ccfd0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2488f412-48b7-46e0-9635-f4dc639c2d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74619d8-58eb-45fc-9c7e-3bed95ff6c77",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47328917-a4f4-43d2-aa81-ff9832158ba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03c5624e-eb5a-4f1b-be56-8a68915acb3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa871fc6-c7ff-4542-8eb3-ed278f92378e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ea8b3d4-cbca-41c4-a6df-50179351af48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a8abe1-e9ce-492f-a4a6-fa38f9a96437",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3270d1-ab74-48c9-886f-0dbdc079ac97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "906f3f4b-f632-4825-912c-93967fe20777"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6eebcea-7be9-42ce-871a-18de896ba30c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62e45c20-bb2b-4003-a06e-23b30f9d8ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040277c5-2679-4516-82dd-14e0a634057b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d4944b2-b4a7-4aae-adce-e076e963a75e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ebd2140-646b-4490-90ca-3f51de1866a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29063a29-d676-48df-923c-d74fabbb62b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d8c1acd-6783-4fbb-ab85-7e43263acd9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b6b1ff-2f1c-41af-bc3d-96eb208b7089",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e257127d-db6d-42aa-940e-4bcbe02b8429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9af63600-4fd5-41ea-a9e1-c490417ac018"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d26a0ac8-2ec5-4187-b411-24a3521e0d5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9bf9d9c-1b72-40bf-bf42-d742681ae76f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc412685-ca1a-47ed-9ae1-352b7bb5c815",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ae1f7b-53ad-497a-9116-1f9ff76f74fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f40114d9-1b58-4ec0-aff0-724974f12a5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd528b0-2b5a-41e1-b14c-f719ddd4f128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cb362fb-c3eb-4158-98b5-6f790140eef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601d8d51-9799-4f06-8483-151ae823d3b8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc02d7be-63bd-4d9d-86dc-b2c7fef8ce54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dc03822-2876-448e-b55b-8d4850b4482c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12310114-92e0-4049-902c-117be141de96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2487bdd-1d9d-4d53-b7f0-e534bcb59411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e20f09e-a2be-4f4c-b3f9-4987f36b4dd5",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d16390-a911-4716-bbdb-abd04c7992a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfe73368-6591-4fce-9a27-e57c327ddcb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04417e9c-5d5e-4100-9a30-d9ee276b51f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "104e133b-611e-44f2-8e0a-d898b725baf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4264a34-933e-49a4-aa22-0785141af5b0",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e54e01-63f5-4d31-9a4d-efc4a0e00019",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe8f60f1-5e20-4a3b-9926-c1ba890f431c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "043dcf56-599e-45ec-b076-b19805cdd471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dec611e8-24df-4fe9-bdb8-26a3490d2e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "495101c6-78d5-4d2c-8d97-338589f58a1a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbcb15d9-d808-4a2f-a27f-47209d54a979",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fff7dff5-2633-49f3-bfc3-f3b82bbdf51e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb542e37-2ae3-4b77-8d26-e13a934f7b72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78497d14-5635-49a5-9bf7-2997894ef004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b88a682-8d96-4127-86c9-76f43df2330e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d62a5916-c657-4ae0-b9dc-01b9beff8e45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68b1eb83-6a2c-4697-a091-f02a3d111fc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "708fc0d5-800b-4171-a780-6ed4ae5d687e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db18a8a5-9479-468b-93ae-ca90dd19e546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da6e7cc2-165f-4601-8daf-073002b077e8",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8788d802-ee88-409e-aa6b-14833dde8bb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1695d410-b079-49e8-b52b-c0737cd13d22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f479a15-043b-4e07-aa99-95242ad7ca44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4596b36c-c7c3-4631-9365-eb25ff000551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429085d0-9a5c-421a-9df3-e67960002afe",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a095fb9d-a800-4687-96dd-c9674c725cec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e7b5478-8e01-41fb-8555-1a07e2e0017e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a47d202-d828-4473-a677-0dd2f5072e9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d45fa59a-a552-42e8-9099-ca229251dd1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91bfd599-78ed-438f-8038-5430963c20e3",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c76bb3b2-f384-4251-9e4d-36de28bd5bed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a779337-1626-40a4-83e4-e80ad124598b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c26738-44be-421b-8ce8-6306d8c5df0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "724a695d-6ee1-4a70-83a3-9a17f7b5b440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e64c8454-2c63-4c91-84eb-d25797160323",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac186bd1-84ab-402a-b1f5-30ddb1695a09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f79f81e1-2bb5-49a6-97d8-b690daf7f947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "945a9faf-e51c-4c30-a3dc-dbf821507d2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5393ee9-758b-40c5-94b8-9aabf9b66a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55308da5-fdb9-43dd-93fe-665a6df690ac",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7deaa3-32df-4fdd-a8a5-91dfdff508db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51b15128-08e7-45a7-b238-c02feaf13811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "960dd3f3-f2a6-4b18-83b1-02ecd1a27c8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1af3dc2-197e-46c8-a94d-10af29ba466f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3771caeb-11ba-48fb-a85e-6a0ea5d7c224",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832f4878-0512-4c47-93fb-3735a2819668",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b69dd48-b657-422a-a99a-87946dae6f62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18be4b7f-56a1-4c7a-8b7e-2c14c2a53fed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cd00eff-40b4-43b5-9675-a1ecb10777d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f884318c-ef7c-4a22-82c9-7ed5120ac36d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c5d47d-fb39-4ad8-99bd-a9e802f6e19e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edfe1f37-bef1-49e3-b92c-32a8d00c750f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6f1391-466d-4285-8345-e67ed2f5168e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cd1ad8e-11c6-4482-8d7d-b4cfd159699e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5067e2c4-d481-4388-b134-92243e0423ed",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd104496-9dc4-43dd-b4cf-39aea26b8868",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa16f30a-c120-456d-9d09-1f50ba9bf5a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff2f66b1-b29e-4f13-8f50-af45d2f0bd1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee1fd81a-504f-4b87-8fd3-fe3bd2da3efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c6d39c-f3bb-4203-b9e5-3e658bf1cd7d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab72bd5a-88d1-42d9-aa3e-a38648f3d62e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d16edef1-ab18-4c02-9fd8-47352b3bd2de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a770baa-47c2-45ba-9509-405dcac16ad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c07a3c2-5fb0-4e53-b5e1-9d423f61d2ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81546404-1724-4d41-a6d1-de797f72c9fa",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d5b238f-7fef-495f-a916-e617c8635084",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a32a0af-9dc4-4e4c-9a16-ceff656b5b68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a0d414-3b69-4d22-980a-2522e83e8a0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f552410-ad37-4208-8c6c-fbe71bebc0cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd785da-d68c-47f2-87b0-33883dff8ec2",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e293aa1-9c2c-4471-b4b5-01c650437bce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b61add5-33c5-4140-82c6-80475d069910"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c5d283-e8e3-4119-987a-f98c0571514c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cec5960-237a-4cbd-b832-acf1e56f4c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ba5db3-0a58-4c28-8565-3450c1b2209e",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b418c2ba-69da-4160-aa48-680fbf1bd1a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f8755cc-1025-4565-be78-0f770c7fc8c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00dd7054-ed62-44b7-8420-b47ae1ee2e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f814eb-f1c6-429a-bc82-fe04f1b56ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64aefacd-0ff5-4401-a063-121946fc0559",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6689e86b-523a-4965-83df-dd2d57712a47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be598bf5-a095-452b-bc9a-08a998a1f4eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aef9a08-a9ed-44b0-989d-ce2a48fb81ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "683f7ef0-d1ad-45bd-97cf-822fdf984592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d9398b-e42a-44ba-bef0-e0ff72a23d3b",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d2ce7b8-c10d-4b9a-b002-803c073b3c3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebc1d79c-f122-4279-a753-4cf5fd77bbda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "067bb682-28bf-4733-8ad4-6c1e9a95f8fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54193bec-a177-4138-9ba2-16f77dbaee2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23848443-2fb5-4b76-a710-d5f6a4e14e29",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2260b889-5233-4454-9c01-ce9ee8ea908c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d335757-eed3-4cc6-8e18-e91469514e79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16823d48-4114-4423-b6ec-234edde2754c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4ddf119-c529-4e4d-a952-4c3c708d56e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a646a9-e3cd-4e0c-bbf0-ca0b338c2e53",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9014d793-fe1b-469a-9e99-3fc3714b342f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86304d57-df34-4471-a5b0-6758471b1815"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30792ab-80c8-4acc-8979-7d81483f6028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "290ebd3f-fe0c-4fc2-b50d-c2dc860aac53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39fe6c05-fbe7-459f-9d09-bcbb2214e721",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b587b7-7b90-48a5-b9e8-beaf4299ed70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5668243d-fa3a-447d-b180-ab33fdeb9a21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c6a687-bf29-46ac-a059-b893ffb3f0db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a356d66-3003-4639-9ab0-d51d993fe82d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f8be73-58e9-4959-9908-3272d7b338c1",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d76b5f-7d50-4d82-b750-8ff86dce3c61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c48d5c9d-4ed8-4640-bdc4-924179a1768a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5594db94-38aa-444c-be1c-cf2186c0484b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14551987-871e-46cc-beac-1baad1a11aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ec79ab-fba5-4a98-9111-3fffe0ce61c3",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e37efc3-7a78-43ff-ae3a-c2cacb5dda5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8cee35e-bab6-497c-a69c-45fa730f279a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f379bfc5-3e5e-401d-9da7-03d9c69eb277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c37b230d-a649-47f2-9fd1-1247803b7022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ae11507-456a-4b6e-989a-c60ade0050ad",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf159f4-8939-4d4e-9577-c177ae5ac8b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01f8b7a5-2410-4633-9396-7b9e6dcf39ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf4f2f3-1e34-46f0-b7d8-1dcdc8175b15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aff6f04-1aef-4165-b4a7-d67ba71481a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d734ec-ed6e-4836-895f-915ac0f266a1",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df0b9978-c547-4de8-88dc-5bd6e04e87f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ceaab732-1157-4383-9504-099889d4c461"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58bc3d7d-d9a4-4a06-93ef-7d0851e511a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3b59e93-0678-4fae-bcfd-7ec0e8a132f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809a2998-5519-4037-afef-6a09c2c76b24",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f0a9ed-b0f3-442d-8b56-0f905fa63417",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "daf19552-6ad1-472a-b29e-83a33131d932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34309c2f-5d12-4df9-9ba4-4ff880b2c40a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da35999c-2900-43ea-9171-1d32b0f9d232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc187274-d556-4d1e-8bd6-b36c3e66d963",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f852fe-5a22-455a-b25c-16499c493e12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05153024-c18b-4928-b8fb-203837d25c9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a805121d-99e3-435a-9165-dcaa747fae82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afb3a9da-6dbb-4548-957d-b5873934707a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "858e85d9-291d-416f-a955-579e9b45833b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca914b8-1f45-4e32-baf9-d0e0b40707fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4ad1676-3ea5-4a6c-a325-e628c3eb9a33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1631090-a5ee-43b4-9ac4-e2355ec92a38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e22b9ec0-8307-4c42-9a1e-ac2cf71845db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee15c14-464e-4a38-9d0b-873d933fd8bd",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a2cdf24-3326-46ed-ba3a-16ebaeb42dbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d5fa171-55ff-4fd3-be16-8c7f7df920e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e04f406-c86f-45c3-bdfe-255d25cd5b78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8112e760-9fb0-4a09-a19b-317beb3d4639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147036e9-9893-4abc-a38a-63cc2a659806",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c8a09e-294f-4673-a1fc-4ed4e39e1437",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b787056f-400f-43ee-9ed4-012f7fd7fbbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb8c09b-3073-4451-ba0e-a78811df1147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53720a2e-026a-41ef-92e9-67591b87ee19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc8d52e-e597-465e-8c55-6bbb35c2c392",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73858cc4-bf60-4ca6-91a7-742ae266c4ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73b9fce1-dd11-4285-8f7f-2f13015d36cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e25ff8-caa5-4176-b96a-6e6f382360d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b785d69-41ce-4e72-8006-c1ccc4d1d5a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3de1e06-b304-49db-82dd-91fff72a654f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65549ad-d1ee-4ca1-8f12-b169d5436f65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d222a5d3-52a9-47b4-a6ae-bc880f496a36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "971eec7b-2128-4343-9db3-638de56b4c59",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "136f5eea-a177-4478-9d28-5ae54728f30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d911f12-c734-4812-9d48-dfc71459e51f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d44181-9ff4-4bcb-a86e-0804ec99c57f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79d588ec-50c6-417c-8375-e336b2604ff3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83af0e6f-ab4f-4516-8281-a30fda10e7d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85fd5d9a-6568-4480-a9ea-f9e4ec931048"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "72d4ca15-323c-42b3-8a19-0005dc1e3244",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f771be6f-0167-4656-8267-f36ae0096453"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e6e3c48-0660-47af-859a-f53010a7744a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d86e8ce0-68d4-4669-938f-0ff98d9dcdf0"
                    }
                  }
                ]
              },
              {
                "id": "917a0647-d0ea-4054-8d28-f179dbda7a32",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "597879ca-e823-463a-8853-23e45332b70b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74dbc583-e3f4-47e3-a21b-94341071f3d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "88e96f9d-d298-46ba-bf60-aada7367ca2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "658ab4a1-7028-4fcc-b642-c5a3f0d53b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "13f70dc1-cf2f-4723-862c-0c685f10a9ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f59fd050-94b7-44e6-be4a-ebe5fe282739",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "942b8da3-659d-4ec6-8fc5-c59753acd9ed",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c9050fdc-c41c-45d3-b163-8b3600143105"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3113ec-6821-4d3e-9002-2d38de979e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "737cb9c8-da3f-4b1f-beb7-cf28dcb22ba9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "729497ee-8c97-429b-8e6e-6ab2a878fb46",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "144a14e9-5709-48df-a03a-820f7253adf3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "af310bd5-5a10-4af9-a4e6-f26b8e45a02e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00b23fc4-d987-4da4-9fe4-d37e994d8d44"
                    }
                  }
                ]
              },
              {
                "id": "6477e8c9-41f0-4222-8a09-e3a1e145d30d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "51de8306-e594-4f43-ae3b-3d5e9519edcd",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25cdd399-71f5-43d3-9011-92bc56903e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "f3d45628-b4a8-4882-8503-43baeabbf148"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e774656-8951-4055-83e8-27013bdcd254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc6aaaf9-3e24-4ff5-b862-9c392a959628"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f650d17f-2022-458e-85aa-7be41bc73f82",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f23705d9-5f6f-4719-bced-d6ed4d4d254b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae44ed3d-a114-4cea-a27d-ba64796cc46d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "61b6e706-471f-4304-8b2e-8ae0a9fb53f0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0fc8b70b-4cbf-43ab-b454-224369ac2338",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0159db40-f9d5-4267-be8e-874f8d345444"
                    }
                  }
                ]
              },
              {
                "id": "9f4bd3f7-83ca-4ea3-925e-9358bc6ea3c8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "404f29ae-18f0-45d2-9ebd-8c9796af0232",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4263fe6f-1ebe-4e11-a5d0-313f50d2a01f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34b186b7-afeb-487b-af00-762e97d71f61",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dba1ba51-ca71-4ce5-beab-f09b03ddf2fb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "00ea7b5d-7bc5-4a87-b85e-7702a1d823fb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "deec90ca-2642-46a6-8495-6bc6f167128b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dfff8437-9b54-4518-b5ec-fc5f0c3c419e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cdb7b79c-dedc-4659-ba11-42afd7f7d477"
            }
          }
        ]
      },
      {
        "id": "b2a04866-5a9d-4a25-8db5-c1f8923b7c23",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a81a7cee-7936-4c5f-ba1d-ffa3ccac7db5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b3f6a11-c0de-4997-b67f-2cebd69f4f92",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e2e96189-5464-4384-a490-4a8d4d7f653c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b6c9e8-ba54-4faa-8623-475892848898",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ff3cf639-51cc-4b54-bfb4-072917bd08a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d11326-33e8-4dee-96c3-6a1eb8fcc3fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b79bcc24-4c62-4e79-b2c3-905f5f28b96d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3146d5-2efd-4208-951c-9d8a7e828cb0",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d1782e1-d100-42e6-855f-23671fc9d308",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dd54926d-418a-43ba-8643-fbc52b96ee7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e79bd08-3690-429c-899c-9b80289be866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "422afaa1-fef8-4728-9e5d-78a7af08856a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e105781-61ae-4646-961f-47a5e6474b27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b574d08-d11e-4609-80cb-7e3125136edc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c319f13-5643-4784-a7c7-20ee938dba7b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b171cbda-1e0b-454d-a334-1aa08c8438a5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "171b69bd-d9ac-4c00-af24-2f5e2c7c7ee7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8a66fa33-f4bf-447a-adaf-f88b7d200fba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6b675022-2c6e-422c-833c-16e727d3089b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "29876e26-b3d8-4065-96a8-2e9631f0e74d"
            }
          }
        ]
      },
      {
        "id": "b922173d-fb50-4add-bdf6-c42605d715f4",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "de8604f4-42e5-4e11-bd92-e5d10c3f550a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4c4d89aa-144d-4690-b920-971ab9246514",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d0bcab39-e100-4c69-b2e7-9c0db92ee6ec",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7727d75-d0f6-4259-98e3-922fb1c45298",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a0ba274a-bf5f-447e-90fc-b4b4bfb79ad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce68f188-d3c0-4c8f-8107-5c1e0410c9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c15c729-e1b7-49fb-8c3b-6eb740322a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d5236f-ba85-467c-9b22-9e8354d2bc8f",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e5bb9e-2e52-4e70-b6bb-40d7a9c16f34",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b2836b1c-b3bf-4670-9ed9-9302d4c673bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b498c9ab-da27-445a-8da1-75fc501622e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0c2e65b-c976-4545-8703-e9f9673d1496"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a43574f-b629-45d9-b6ae-ddd3c1939c1d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6c57e50-d487-42e4-8ad9-8ccff7d233ff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3dd1c0f5-2d33-4d6d-823d-671742fcd075",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae26f2c7-4b36-4c88-82c3-efce916196bf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "253681f4-6d89-4649-af08-361b33ac8948",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "84827f1e-8927-4d15-a628-ed064cd13b0c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e8bb5022-c12a-4c97-8a2d-f26d1e098942",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "abf523ac-43df-4269-b158-d135b0617813"
            }
          }
        ]
      },
      {
        "id": "4ac691d5-9a7c-4914-905a-0595b914b782",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "02af0ad7-e9ae-4d7c-8ea6-5fcf512cc1e0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "589d72ed-1550-4d2e-9f73-0d9e03b3ce1e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c398e83d-7f7a-4c8f-b959-bad7f38f3ec0",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2630505-338f-4493-bbc0-1998d3cc3ea8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fcd2ba80-de01-4019-9b14-2e38457a75f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fca434a4-c5aa-4741-a0a5-63018221818b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6e938f0-e169-4547-8e5f-d739b3c70397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b55a06-f46c-469a-b66f-143a1e270b2c",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b14a3c-4af0-4b75-85ec-f19601e8f458",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f6240ad7-6a6b-4f4f-83b7-462f231e281c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3063d7a7-3bbd-4f5a-a299-cf22a62ce912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e3b9a0f-d43d-4356-b417-b7d767bd741d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3ad4227-0f82-422c-b643-f4b38786a064",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c32d9ec1-7096-41bd-b74f-4a09a08f15b7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce7394c9-4407-4417-b7ee-5ea3056fdae3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d841ac94-c232-4021-ab4a-c89415aa80b3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2192c278-dad6-42c2-8e42-9cf4dea234fb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b01b8c22-2ec1-44ef-a04f-9557918969b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fcca474c-def3-4ae4-aad8-bc48602068e4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fa166cca-e0e7-4ea3-aafb-8b64b9b0935b"
            }
          }
        ]
      },
      {
        "id": "4bb50ac0-ace1-419a-883d-df689832f897",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "39e935cf-5ebe-44ef-9ff3-5bee3e8acf16",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b48c8513-b466-4ae9-9e1f-798fe2d8044b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "263b6c11-671b-4bd7-a9d6-0db1ec4d85b9",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c884b207-6b71-41f2-9e58-c5d8fbedec41",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0d32734e-49c0-4d99-a8cd-d1f0dc19d13c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 296.9076923076923,
      "responseMin": 7,
      "responseMax": 6459,
      "responseSd": 809.8351251587126,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1681346110965,
      "completed": 1681346201693
    },
    "executions": [
      {
        "id": "e173c194-fe0f-4228-9bc0-3ee15fea018d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "bb7a1a2d-4549-4aea-b4cd-8bbd4565c2fd",
          "httpRequestId": "5ef19989-0703-412f-9214-f445a023c2f0"
        },
        "item": {
          "id": "e173c194-fe0f-4228-9bc0-3ee15fea018d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a22eef5f-d52b-4f8d-8d90-1b77b3cedc4a",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 0
        }
      },
      {
        "id": "b413b97c-bc12-47a0-9ab0-5417a4875525",
        "cursor": {
          "ref": "9cdbba06-268f-4b3c-ae8a-9926e3bea687",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "dbd07218-5ff9-4fa9-bec3-bd6baabc812e"
        },
        "item": {
          "id": "b413b97c-bc12-47a0-9ab0-5417a4875525",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f613c54a-5a23-4c98-9698-4651533448fd",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "49aeffaa-eca7-449f-ba94-2c5145171111",
        "cursor": {
          "ref": "c91fe7e6-23a5-4c9f-9b8b-40534b4c81c0",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c7682bde-ae6c-4c0a-b1f7-7863640ae623"
        },
        "item": {
          "id": "49aeffaa-eca7-449f-ba94-2c5145171111",
          "name": "did_json"
        },
        "response": {
          "id": "863f0fc7-28ec-4777-b927-c42be559ee33",
          "status": "OK",
          "code": 200,
          "responseTime": 532,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdaaeedd-075f-4721-a8fd-95089a8cecfd",
        "cursor": {
          "ref": "328dab21-f9da-43b2-9fac-a77ee6c0238b",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "70ac7518-d638-40bf-b7e1-9274dbde125e"
        },
        "item": {
          "id": "bdaaeedd-075f-4721-a8fd-95089a8cecfd",
          "name": "did:invalid"
        },
        "response": {
          "id": "11129e49-6eae-4916-aeb7-f1c7713e0517",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1267,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "bdaaeedd-075f-4721-a8fd-95089a8cecfd",
        "cursor": {
          "ref": "328dab21-f9da-43b2-9fac-a77ee6c0238b",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "70ac7518-d638-40bf-b7e1-9274dbde125e"
        },
        "item": {
          "id": "bdaaeedd-075f-4721-a8fd-95089a8cecfd",
          "name": "did:invalid"
        },
        "response": {
          "id": "11129e49-6eae-4916-aeb7-f1c7713e0517",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1267,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "4fa9da61-cf89-43ea-8b50-2ed081ac4141",
        "cursor": {
          "ref": "ceac530c-7cb5-4d05-afea-db23461715c6",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "603b3391-c792-4ff0-9251-cf315b1d6b1a"
        },
        "item": {
          "id": "4fa9da61-cf89-43ea-8b50-2ed081ac4141",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6a4652f2-4e91-47f0-9743-818ea9494a0d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2542381-5770-46a2-b10b-b336d5d00a62",
        "cursor": {
          "ref": "1610272e-779b-44c5-a06d-6fc13124e949",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8129a5f3-f938-4cc5-b853-af9255f49afb"
        },
        "item": {
          "id": "a2542381-5770-46a2-b10b-b336d5d00a62",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a8d8f7ac-c428-4b9c-91bd-e95d6d075a37",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d0f1c01-c85b-43d4-8104-4069548c2a99",
        "cursor": {
          "ref": "72f9b3a3-96bc-438a-98ec-58ab095dbe56",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "922ab7be-7df2-45de-9c77-55c71acf21e3"
        },
        "item": {
          "id": "8d0f1c01-c85b-43d4-8104-4069548c2a99",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "fbba9995-6442-4250-bd00-bbe555d79946",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "11a8f46b-8eda-4ce7-a393-73e215a484a2",
        "cursor": {
          "ref": "88890bd5-726e-4f84-9054-f49f150b6415",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7eef5322-823c-4bc1-955b-d8068a527442"
        },
        "item": {
          "id": "11a8f46b-8eda-4ce7-a393-73e215a484a2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d2498516-019a-4088-8db6-d6b35fd70c92",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "11a8f46b-8eda-4ce7-a393-73e215a484a2",
        "cursor": {
          "ref": "88890bd5-726e-4f84-9054-f49f150b6415",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7eef5322-823c-4bc1-955b-d8068a527442"
        },
        "item": {
          "id": "11a8f46b-8eda-4ce7-a393-73e215a484a2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d2498516-019a-4088-8db6-d6b35fd70c92",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "223c0d02-2343-4180-b5c9-c3bcb0bd9b0c",
        "cursor": {
          "ref": "0ec18ba8-872c-45cc-9ac0-1391907bc2e0",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8fc676ee-5425-41be-9e9b-69df4c5b3184"
        },
        "item": {
          "id": "223c0d02-2343-4180-b5c9-c3bcb0bd9b0c",
          "name": "identifiers"
        },
        "response": {
          "id": "73ba94a9-b0fa-49c3-ac12-c049442438e5",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "422bb6b8-12b1-478c-b841-0fb235f48c7d",
        "cursor": {
          "ref": "68597c45-9831-436e-8f14-0fafc80a7b4e",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b206e23b-8529-406d-ba94-ca540d2b9195"
        },
        "item": {
          "id": "422bb6b8-12b1-478c-b841-0fb235f48c7d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "01ccd93c-babb-4740-be22-64f031c83462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "422bb6b8-12b1-478c-b841-0fb235f48c7d",
        "cursor": {
          "ref": "68597c45-9831-436e-8f14-0fafc80a7b4e",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b206e23b-8529-406d-ba94-ca540d2b9195"
        },
        "item": {
          "id": "422bb6b8-12b1-478c-b841-0fb235f48c7d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "01ccd93c-babb-4740-be22-64f031c83462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e46f3cbc-57de-4e15-a6a3-71e35db7ae88",
        "cursor": {
          "ref": "c91381c3-1641-48b4-8cb9-6d712d466c72",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "de07182e-5d7a-4722-8e9d-8d99dd46b92e"
        },
        "item": {
          "id": "e46f3cbc-57de-4e15-a6a3-71e35db7ae88",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "8c5cea33-5cb7-4c5e-8d32-c981d0c1fd96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c7a6ab9-128e-4269-8532-ea022bf198c0",
        "cursor": {
          "ref": "3a064bb4-0935-468f-b5c7-fe0c49f5819c",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2404650d-ea74-421a-957f-08075a48b768"
        },
        "item": {
          "id": "9c7a6ab9-128e-4269-8532-ea022bf198c0",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "d7162f58-c03a-40ce-ae97-e2c6da3ae2f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc439850-de2e-4121-a870-ea2335f829e6",
        "cursor": {
          "ref": "8b1fb511-a8b5-470f-abc7-7305bb3bae10",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f9a1501b-aa95-4e77-9099-7ed8caa0b780"
        },
        "item": {
          "id": "fc439850-de2e-4121-a870-ea2335f829e6",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "99d7532b-1b34-4a30-a84d-3182c617f160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "290ab528-a6a3-4788-969f-8b559df1512d",
        "cursor": {
          "ref": "c2651eb9-ceaf-4464-abc4-4502e039456a",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "94d98188-538c-4d49-b105-5e09f3fadeda"
        },
        "item": {
          "id": "290ab528-a6a3-4788-969f-8b559df1512d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "71d27ba1-7ac1-4e3a-9c95-11cf4387b0f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef096dc-0446-47a1-9dce-db6d1069070e",
        "cursor": {
          "ref": "56fde385-260b-4236-974d-a221c98b8894",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0677e01b-8acc-4aa3-a1f7-c571c9774fdd"
        },
        "item": {
          "id": "3ef096dc-0446-47a1-9dce-db6d1069070e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "57f8c47b-5ac3-4c08-8990-98476228da18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6922ae28-9b3a-441d-9bc9-d6a143a1a214",
        "cursor": {
          "ref": "921140f9-8fd6-43ac-b598-da3be9571d1d",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "73a5b166-0c99-408b-8247-59cffc1923bd"
        },
        "item": {
          "id": "6922ae28-9b3a-441d-9bc9-d6a143a1a214",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d32d5b04-db38-4d13-8798-700448d87ea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b5e31e-6106-45ee-8213-044bcd8fd160",
        "cursor": {
          "ref": "295dc591-985c-4603-898e-8c1526b008a6",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4848c7b8-e72e-4f96-9dc4-7ed5b8755f71"
        },
        "item": {
          "id": "e8b5e31e-6106-45ee-8213-044bcd8fd160",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "cc8f6f85-26b9-4573-90ff-c3c74be442e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b836dc-0d57-4909-a6b1-8a3f43ca022e",
        "cursor": {
          "ref": "f70ea149-4c9c-481e-9e07-08642e94c0fb",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "46fe77fd-dee8-47ce-abc5-e5e7a3505c26"
        },
        "item": {
          "id": "31b836dc-0d57-4909-a6b1-8a3f43ca022e",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "163a04b3-1dae-43c7-9345-bf3d42993a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be4e0cc-e1ca-4b7c-b3f3-4dbd3f8aab37",
        "cursor": {
          "ref": "5e1ed3dc-aa14-48d6-8cbf-69b48306fb32",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c077906c-427e-4c8b-9b25-fd078db4a61a"
        },
        "item": {
          "id": "5be4e0cc-e1ca-4b7c-b3f3-4dbd3f8aab37",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a8a97e03-3408-4da6-98eb-51480ed543a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "034b48bd-3004-4eda-9c60-f44acdfc2ea1",
        "cursor": {
          "ref": "a045271e-9757-4537-a623-927e95e509d6",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "28166f7c-7e59-4ca9-8480-a1f926d4a24c"
        },
        "item": {
          "id": "034b48bd-3004-4eda-9c60-f44acdfc2ea1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2ab9b1a1-5f71-4ff9-9277-43157621e7f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36bea0a8-232c-4517-9e5d-bf1b14bdabd4",
        "cursor": {
          "ref": "08d392ed-3b40-40ad-9d86-e3c3ce975e26",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "dea7de10-9946-461f-a63e-a038bdde7d2e"
        },
        "item": {
          "id": "36bea0a8-232c-4517-9e5d-bf1b14bdabd4",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "30a1f9bd-e2ab-41d8-a50b-cc0cd3d9a060",
          "status": "Created",
          "code": 201,
          "responseTime": 963,
          "responseSize": 983
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "5a54847f-5f71-454f-bab0-d6de78774182",
        "cursor": {
          "ref": "8a186839-6b06-45b4-95a9-bc46402d8f53",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "57d7f6d8-0072-43e0-8ac8-e3d35b9c209b"
        },
        "item": {
          "id": "5a54847f-5f71-454f-bab0-d6de78774182",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "bdb21322-c4ff-49bd-8a79-6c4c28a2c604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca1b434d-4679-431f-b71c-58c9e934cb26",
        "cursor": {
          "ref": "6c7325d8-e584-42e8-9842-09de0508c634",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "88cb652e-c145-4e42-9797-7e69f7aeb391"
        },
        "item": {
          "id": "ca1b434d-4679-431f-b71c-58c9e934cb26",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f482376b-4f75-4598-a18a-5f200f6d1be5",
          "status": "Created",
          "code": 201,
          "responseTime": 4074,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "fee0e5b9-9abd-4ebf-95bb-b1e69e029928",
        "cursor": {
          "ref": "d1e97d71-9a49-4c8c-bfe5-0f8409117fab",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "241848a0-0b2a-446a-8a61-19d37dadb06e"
        },
        "item": {
          "id": "fee0e5b9-9abd-4ebf-95bb-b1e69e029928",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "06aa1e97-125d-4692-aed4-acc7471cae45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c9ccd7-fd15-41ce-a9d6-56f23ba2045d",
        "cursor": {
          "ref": "942a4781-3472-4d40-ac0c-9d42e2f1560a",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7ff5ddcb-9488-4703-8805-f6e3e706a67b"
        },
        "item": {
          "id": "e1c9ccd7-fd15-41ce-a9d6-56f23ba2045d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "0695d682-9b28-4b0c-a3e1-0c9994cd1a40",
          "status": "Created",
          "code": 201,
          "responseTime": 3818,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "abcdde7d-e3fb-4455-83f7-a40b6330bf73",
        "cursor": {
          "ref": "97b05a9b-c837-4104-9ede-78d334d0b045",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "9fc297cc-f04f-4ab9-a1fb-94f1fbafdd40"
        },
        "item": {
          "id": "abcdde7d-e3fb-4455-83f7-a40b6330bf73",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c4c412ce-00d4-4141-8383-9d007203389a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "028e9940-4963-454d-ac78-a0e2d1ef97c6",
        "cursor": {
          "ref": "2fdbd7dc-2e70-4942-bb67-07f89e7a126b",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2bb11699-6bf7-4d6c-bb5f-6db99183b979"
        },
        "item": {
          "id": "028e9940-4963-454d-ac78-a0e2d1ef97c6",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3f7007b5-10e9-4419-98c7-c21fbb4c2f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d09171c-5988-4fa9-944a-b52a93359fd8",
        "cursor": {
          "ref": "3997c818-b9a1-4f2c-877c-10dcee47a4af",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3290f878-9413-495d-9657-01f9c2b68035"
        },
        "item": {
          "id": "3d09171c-5988-4fa9-944a-b52a93359fd8",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "afdeac99-2661-4eab-b8f2-c926685d9016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b809750f-adae-442a-8bc8-254a2f084ac2",
        "cursor": {
          "ref": "9aa9ebc9-0c3a-41e5-9faa-7aad0c0b91d9",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "64f13c80-2612-4f91-baea-67dbced5b406"
        },
        "item": {
          "id": "b809750f-adae-442a-8bc8-254a2f084ac2",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "0f5a107c-8fca-4a38-aa33-031a4f4ca878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2348e16-000b-45b3-94d0-55e66a4b4404",
        "cursor": {
          "ref": "4e2ffb40-1fcb-4462-80a3-acb5bfe2bd14",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b73ab485-4d95-45ae-8f3b-bf906caa0981"
        },
        "item": {
          "id": "b2348e16-000b-45b3-94d0-55e66a4b4404",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "cd667ddd-20ee-4ee1-b11e-f5a041b3eb33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2224183e-dc80-4215-be45-5b183f7d5baf",
        "cursor": {
          "ref": "bff0eff5-4c6f-4109-9d4c-aaa6997db599",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6b552bec-62f0-4d43-9124-8680cc9827b1"
        },
        "item": {
          "id": "2224183e-dc80-4215-be45-5b183f7d5baf",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "987f59e1-6c0b-4b30-aa15-c522ae643b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f60aff-7b84-469b-be63-1dbf02eff759",
        "cursor": {
          "ref": "dd9dfadf-bc21-4eb5-a20b-228c081b6443",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ad68b1b4-c39e-4fb2-b543-be12884db59c"
        },
        "item": {
          "id": "82f60aff-7b84-469b-be63-1dbf02eff759",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0fd24d65-4e6c-4cc9-8be8-dfea15c51eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31505fc9-fb50-4557-8296-4780698a22a1",
        "cursor": {
          "ref": "b8cb8195-c7d9-4286-a715-98343ef8d874",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c4c48d95-9ee4-446b-881b-72b8e2102c60"
        },
        "item": {
          "id": "31505fc9-fb50-4557-8296-4780698a22a1",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "236a1e08-844b-4429-b986-f0650aab8cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a4441e-5ac8-429f-bc97-5253bbd25d4e",
        "cursor": {
          "ref": "4973929b-b84c-4db7-abfc-ce64d33c5f66",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "987f795d-74a9-40bd-8ce0-3cd66812292e"
        },
        "item": {
          "id": "57a4441e-5ac8-429f-bc97-5253bbd25d4e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d26197ee-e071-4a65-85e2-2d4d3b618c4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e892512-2caf-4173-a34f-6fd8b08bff6c",
        "cursor": {
          "ref": "3800a54f-3714-4280-bafd-69db11062df9",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6864551f-9661-42a4-898d-de56ec68ad5b"
        },
        "item": {
          "id": "6e892512-2caf-4173-a34f-6fd8b08bff6c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "07479999-19e0-4418-b375-5e1f9399c81c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b437aff6-4f66-4580-a323-5c62f2da3fc6",
        "cursor": {
          "ref": "f352498b-ec6b-4a72-8062-d8e4ca2e4613",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2ac2017d-c0c4-4e93-b520-785df18ac652"
        },
        "item": {
          "id": "b437aff6-4f66-4580-a323-5c62f2da3fc6",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "3e7722a1-351a-4cc1-b049-f7785e204574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414baff8-d9b4-46e5-9e65-8f387e533bec",
        "cursor": {
          "ref": "869e2ef4-c311-4a28-bdca-471798720982",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "91bd99d0-2e8c-4c3d-932d-05576115db82"
        },
        "item": {
          "id": "414baff8-d9b4-46e5-9e65-8f387e533bec",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "607b3fa0-1100-478d-976a-3b98e841b630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75917c96-4112-4b8c-a173-8fcb8c676cb8",
        "cursor": {
          "ref": "cde31876-1a46-4785-9dc3-466db64cf2e4",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1ab9fa13-3e51-4b0b-98e0-ffe5b81e9775"
        },
        "item": {
          "id": "75917c96-4112-4b8c-a173-8fcb8c676cb8",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "5e33c16e-5821-4ca9-8d67-b82a873093ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ed1a3d-2b31-43c0-b7ac-442a27c29a41",
        "cursor": {
          "ref": "f536661a-6930-49b3-9c1e-0946d43201e4",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d2bd70e9-641a-4f60-8983-fb2ffdaf7d0e"
        },
        "item": {
          "id": "c7ed1a3d-2b31-43c0-b7ac-442a27c29a41",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "307e21cf-7883-4896-b133-8555e1903c29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4da31a8-ea8e-4289-9852-b7dd138ca9f5",
        "cursor": {
          "ref": "9e40dcda-3f14-4068-832c-ee0d92c407fc",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b30ae479-821b-40c8-81d0-67a7cf69b534"
        },
        "item": {
          "id": "d4da31a8-ea8e-4289-9852-b7dd138ca9f5",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f4b974f4-50fc-491e-8dbc-0f0854193c20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382bc075-8915-465c-81a8-53b1c1a1803d",
        "cursor": {
          "ref": "2a8078fc-fb21-490d-8ac8-1ab1a2177141",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3c81744b-08a4-421d-aac4-bedc0b045ddc"
        },
        "item": {
          "id": "382bc075-8915-465c-81a8-53b1c1a1803d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7f18dc41-66e9-460b-a897-a915bebafed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f64d94-d103-4fff-8c39-7b6ccd40153f",
        "cursor": {
          "ref": "3c7a17a2-a61e-44ef-8836-5ce9b68289f4",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "15f1cb76-2ada-461c-a299-512ffbcd103d"
        },
        "item": {
          "id": "35f64d94-d103-4fff-8c39-7b6ccd40153f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d6dfdf25-4e81-4701-a45d-8c42edacd5ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b5acbe-3a8e-4e2e-bc2c-051bed55a2a4",
        "cursor": {
          "ref": "1447ced2-326a-4ab5-b576-563aecdf355e",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f34adef4-130f-4d2f-8ac0-3150019c2ca5"
        },
        "item": {
          "id": "49b5acbe-3a8e-4e2e-bc2c-051bed55a2a4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ed320229-7562-40de-87ba-bc83d938d40b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "048d9635-4da8-4443-bd1f-1acfad043313",
        "cursor": {
          "ref": "f859faa6-c78d-4702-a57c-f81879b0d46e",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fd361faa-6675-4bdc-b5f7-27eef2326bbb"
        },
        "item": {
          "id": "048d9635-4da8-4443-bd1f-1acfad043313",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "910ec0a8-f016-47ff-8f86-348da1b14eab",
          "status": "Created",
          "code": 201,
          "responseTime": 2672,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "4f493a10-a361-4356-b7ca-e61fa9379743",
        "cursor": {
          "ref": "3ef7cc12-ff63-48ce-8751-3dddcbeb2a02",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b96c4e3f-cd7f-4bc3-b82f-8fd352536d11"
        },
        "item": {
          "id": "4f493a10-a361-4356-b7ca-e61fa9379743",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a028b3e8-4633-498e-842c-0a415f778288",
          "status": "Created",
          "code": 201,
          "responseTime": 2625,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8d4bc7d0-1898-4495-8d0f-495251214864",
        "cursor": {
          "ref": "a5c12ee2-661f-40d4-a13c-057ba5127ae2",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "9f66e5a4-f6aa-497f-914a-185b79a6ee66"
        },
        "item": {
          "id": "8d4bc7d0-1898-4495-8d0f-495251214864",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "09a39069-ec65-426c-98ce-287f7be087bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9772d21-8481-4eb6-b3bc-4a0280305639",
        "cursor": {
          "ref": "801999e1-2d39-4dfb-9381-598008934662",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ae0fedaf-0303-4384-bf11-6d19b0ec58db"
        },
        "item": {
          "id": "e9772d21-8481-4eb6-b3bc-4a0280305639",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "03ff0398-0984-4740-a68c-230f4ab86059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "192f9189-5e70-4109-af44-96c4b58629fd",
        "cursor": {
          "ref": "e6f297eb-c977-49b0-b7d1-3181a88c989c",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2353ba7d-6dec-4075-abfd-8a3eb120f90d"
        },
        "item": {
          "id": "192f9189-5e70-4109-af44-96c4b58629fd",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "69b2365d-0604-4be7-96cc-686f49945837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e93f29b-18f9-4d42-ab19-d54f638941d6",
        "cursor": {
          "ref": "19e53fe8-10bd-44bc-881d-7cdf84bbd322",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "70b3469a-43f7-4a66-b64c-c1a8bcb2966d"
        },
        "item": {
          "id": "1e93f29b-18f9-4d42-ab19-d54f638941d6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "5836e305-3e44-4e21-8024-d9fca754e90d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6ac9ac-d37b-4f9f-bc8a-94eb8cdfb0cb",
        "cursor": {
          "ref": "89f99d4a-9ffe-410f-bd40-0470b334c696",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2bf2ef2d-c0cc-4e35-9f25-692c11ffd5f8"
        },
        "item": {
          "id": "6c6ac9ac-d37b-4f9f-bc8a-94eb8cdfb0cb",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "985e911f-7bc5-443e-9cd1-dbe2a38696ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e76edcfa-0b7a-442d-9a51-e9d16134c3f2",
        "cursor": {
          "ref": "d1f281ff-98c7-4413-9809-4d1f9898cb16",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4ed81fca-d257-4663-87a5-80851b15630d"
        },
        "item": {
          "id": "e76edcfa-0b7a-442d-9a51-e9d16134c3f2",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3fd654ac-b978-461e-bc8d-cbccd21d80e0",
          "status": "Created",
          "code": 201,
          "responseTime": 1886,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "85d509a0-bd17-42f9-8e0b-3947905c042b",
        "cursor": {
          "ref": "a308ff0d-d3e2-43cf-ba46-7de986a9bed2",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1993cff2-9c72-4423-9429-4b51a3590c1b"
        },
        "item": {
          "id": "85d509a0-bd17-42f9-8e0b-3947905c042b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "14d8050d-60c0-4947-93ec-310234984603",
          "status": "Created",
          "code": 201,
          "responseTime": 2588,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "88b69023-40f0-48dd-8508-d52e42c19c8f",
        "cursor": {
          "ref": "cdf15801-55c3-4c47-91c9-853dc4b55101",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0d1659e2-9103-47e1-a7f4-451db14c8aa1"
        },
        "item": {
          "id": "88b69023-40f0-48dd-8508-d52e42c19c8f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d1abd2a8-f249-4cbd-a100-7c332a345ccf",
          "status": "Created",
          "code": 201,
          "responseTime": 2644,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "cfda2e43-f2c2-4cb2-8af1-e99adeb8548f",
        "cursor": {
          "ref": "e06e11df-2dfa-4f47-b8ba-490b8617f586",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e0994667-0c4a-4437-a9da-d61c07bc48e5"
        },
        "item": {
          "id": "cfda2e43-f2c2-4cb2-8af1-e99adeb8548f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c30dd750-d19a-4378-94f5-5690b6112435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc50c53c-480e-4f97-8b05-b353f0a4aa80",
        "cursor": {
          "ref": "59c36cb0-ef94-4b42-bfec-565e0a294b02",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "12b497b8-facb-4258-b38b-5890dc7b8ec1"
        },
        "item": {
          "id": "fc50c53c-480e-4f97-8b05-b353f0a4aa80",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9cc7083f-bc2d-4181-a0b9-7eb995a888a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47527273-1582-4b63-a0e9-c8c7fca639d7",
        "cursor": {
          "ref": "2e4e51c5-6fc2-43bb-925c-2b9fa82e32ac",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "042759aa-a9bc-4b70-9029-dd6ed1b6e569"
        },
        "item": {
          "id": "47527273-1582-4b63-a0e9-c8c7fca639d7",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "db277f8e-a35b-427f-a221-59e3cf4a9ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8097c6b5-3191-44c6-8969-b7e77d077af4",
        "cursor": {
          "ref": "8df1003c-0ba0-40c6-b6ff-1c977a6ecca3",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "88fb9fd9-7bf8-4ba9-81fc-16a88ebe967a"
        },
        "item": {
          "id": "8097c6b5-3191-44c6-8969-b7e77d077af4",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "126b82ed-c71a-46fb-978f-24674032923e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c2c225-7dbc-4781-a8ce-5158d8be54bc",
        "cursor": {
          "ref": "cb89f833-3f82-4324-b9fb-4748a43ea3ea",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7b2e3702-9922-4421-86c2-4a57f0692223"
        },
        "item": {
          "id": "31c2c225-7dbc-4781-a8ce-5158d8be54bc",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "06409be6-b159-4801-91d2-4b150f39a498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d862681-647c-475b-91e3-5149d436baf8",
        "cursor": {
          "ref": "a807e394-25f9-4152-b1ed-996d212a95dc",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "17fdb0e7-b314-406f-935c-b9ca268a3e8f"
        },
        "item": {
          "id": "6d862681-647c-475b-91e3-5149d436baf8",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c74bde6f-27a0-4f38-8cb3-8dca9cd62e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ff3137d-57f4-432b-9550-e4a439c46bab",
        "cursor": {
          "ref": "11d7e30b-184b-4e23-a20a-971c107df6b8",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e99f2224-7cc9-4e30-87f7-fc743339fdf7"
        },
        "item": {
          "id": "1ff3137d-57f4-432b-9550-e4a439c46bab",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a09750dc-62eb-412c-b9bc-3ed3e1ce0010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32987db9-98f2-4d17-8726-599226f6d60b",
        "cursor": {
          "ref": "4f80f9a3-2dd0-4d00-85a8-01c08763b588",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "bef69abf-64d7-4232-9e1d-81aea525b971"
        },
        "item": {
          "id": "32987db9-98f2-4d17-8726-599226f6d60b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e1d34d67-5948-43da-8cad-221298f01a23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2039ceab-0ad2-4686-a690-ac35d82ac969",
        "cursor": {
          "ref": "2790721c-2731-498e-a2a5-7a0956fc3f11",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "437f7708-451a-48e1-8c2e-bc28af658e93"
        },
        "item": {
          "id": "2039ceab-0ad2-4686-a690-ac35d82ac969",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "541f0938-cf57-436e-9ef5-416d2e2777fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e87549d1-fce6-44c5-8fa1-39ea5d8a60c1",
        "cursor": {
          "ref": "8b8ba75e-7179-43b3-8827-5b5ed02e8f94",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "fbb8f117-186d-4bbd-a0ff-4fd79b00d4b6"
        },
        "item": {
          "id": "e87549d1-fce6-44c5-8fa1-39ea5d8a60c1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "91ec4c3c-4dde-486f-acf2-270ae1996a5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c60c6f2d-ae89-4ed5-b66e-1744af8c418c",
        "cursor": {
          "ref": "35296df3-6f30-497f-a57c-471ae12206b4",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e47aec2c-46c3-4c8f-b90a-38a35b2e3548"
        },
        "item": {
          "id": "c60c6f2d-ae89-4ed5-b66e-1744af8c418c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "c654f001-c11f-4407-a2f7-7e8583ff800e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc6ad09-424d-4092-814c-86c580829ff5",
        "cursor": {
          "ref": "1727030c-1089-4ee1-9095-44d8dafb4896",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e9b7ccb2-9d93-4751-b13e-390275771d6b"
        },
        "item": {
          "id": "ccc6ad09-424d-4092-814c-86c580829ff5",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f58eb292-85be-4f7a-83a5-edf6032918c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0439dc-7687-4067-be53-f8c9bd57156c",
        "cursor": {
          "ref": "9639a2b1-3b1a-4ca4-8a79-98fc21f1a588",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "104fd0d7-3ed1-4fd5-8157-3a42e11868f2"
        },
        "item": {
          "id": "ab0439dc-7687-4067-be53-f8c9bd57156c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1d13fc15-bad2-4109-b113-26cf18b7e785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c8c0bc4-b951-476f-9687-821619d9abaf",
        "cursor": {
          "ref": "25e1a1c3-1717-4d7b-8270-e21550d845cc",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1a5663a0-2d16-459f-863f-12c4f80ecafc"
        },
        "item": {
          "id": "2c8c0bc4-b951-476f-9687-821619d9abaf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1fbf6582-3e29-4fe2-955b-049f2807d378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62cc6b73-ee6d-4844-bf4c-4bd271e8420a",
        "cursor": {
          "ref": "4856af9f-f06c-4287-acda-2a2c16dc9641",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "fb536457-5d6d-4e74-836b-c7504c485c76"
        },
        "item": {
          "id": "62cc6b73-ee6d-4844-bf4c-4bd271e8420a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "326e7e56-ae0d-42c7-961b-4017467931e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4d7ba78-ebe0-4add-a8a2-b12915bcb517",
        "cursor": {
          "ref": "f0a18b95-6627-4611-a2b2-cf88e2bd2b4c",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "792d6e71-9e7c-4965-9b12-a4e3e1ed89f3"
        },
        "item": {
          "id": "f4d7ba78-ebe0-4add-a8a2-b12915bcb517",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "77adba9c-5969-4d7f-9a84-19bdad27a774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff2b1375-1bce-42f5-b25f-390c5fda19ef",
        "cursor": {
          "ref": "6877b17b-c15a-4b4c-bf22-893c261a5766",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2d560919-3394-41cb-936c-d1418bb37aeb"
        },
        "item": {
          "id": "ff2b1375-1bce-42f5-b25f-390c5fda19ef",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5f5e9f66-3c98-4486-a581-96c613683edc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b75e9cf1-a8aa-47a8-a5aa-8f15ecda6955",
        "cursor": {
          "ref": "9471ef50-ffc0-49c8-8a71-4245354f118f",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "24643054-dcf4-407f-ac74-f08a23234c21"
        },
        "item": {
          "id": "b75e9cf1-a8aa-47a8-a5aa-8f15ecda6955",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c608564a-1c11-4e96-9310-3d9f295072fb",
          "status": "Created",
          "code": 201,
          "responseTime": 2089,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "e601ae0f-3fee-4817-918a-21c13de23d80",
        "cursor": {
          "ref": "660f7771-42d9-4e8c-bda3-01fded482e79",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "907871aa-761c-4097-84ae-9050d14978a5"
        },
        "item": {
          "id": "e601ae0f-3fee-4817-918a-21c13de23d80",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e9426363-0d3b-4fec-99f5-cdaa0f64acdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf2374c-e331-4b67-9085-a5254de749dd",
        "cursor": {
          "ref": "af5f64cb-43c9-47f6-8ca2-0b2a6b18b360",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "514cf8dd-b668-4dd6-a2fa-f37f6321d097"
        },
        "item": {
          "id": "3cf2374c-e331-4b67-9085-a5254de749dd",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "175187a5-eb14-49be-8057-911c3ab24cde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe3236fa-5703-4c6b-b362-d47c826d2c14",
        "cursor": {
          "ref": "742dda45-329b-4cb8-b351-92506fec56a1",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "462b4d1e-d17f-4d97-9645-9b12f68810f9"
        },
        "item": {
          "id": "fe3236fa-5703-4c6b-b362-d47c826d2c14",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "3d63c3a9-8258-4aa3-bfb8-4e7fd802db19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74a8784-cc77-4f01-9653-39fa2dc73df1",
        "cursor": {
          "ref": "43bcd27d-58b3-448e-81d4-a530c4a0e8aa",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "19504f67-4bc5-415f-83ea-87c42a786933"
        },
        "item": {
          "id": "f74a8784-cc77-4f01-9653-39fa2dc73df1",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "a9bb8cfa-bc35-4fd9-8f2d-78ea504059b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3fd37bc-b778-460d-8871-ed61e9335289",
        "cursor": {
          "ref": "dda8ab6c-dc53-48c8-8083-4d90debb40b4",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "080d4218-6a7b-4faa-96cf-74d9a525e69e"
        },
        "item": {
          "id": "a3fd37bc-b778-460d-8871-ed61e9335289",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ce5e5178-d20d-4043-a7ba-09a0ca0bd908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba378c5-e5b8-4b6b-9985-a7ff671a27e9",
        "cursor": {
          "ref": "c79d9807-8a80-4f25-893a-0d9d993162be",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f485ff56-1446-4b35-982e-58bd3bce42f8"
        },
        "item": {
          "id": "7ba378c5-e5b8-4b6b-9985-a7ff671a27e9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "162e4eb6-24ad-465a-89e1-2779a67ae1ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536ef5e7-07a0-4a28-8ddc-7c9d9870f4c7",
        "cursor": {
          "ref": "ae7843d7-c605-40bf-80dc-4153cfd1dfec",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b9493269-68cc-4f26-8917-e461d4d6e796"
        },
        "item": {
          "id": "536ef5e7-07a0-4a28-8ddc-7c9d9870f4c7",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "3a4eb85a-9640-488b-bd99-ce55bb058484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ebe4dd-4c00-4409-b6f5-d255f07e6203",
        "cursor": {
          "ref": "2b49498e-5c54-4470-b56b-347547e876d6",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "36a8f7b5-3a56-4746-ad29-ac35664e312a"
        },
        "item": {
          "id": "83ebe4dd-4c00-4409-b6f5-d255f07e6203",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f7d632c2-e9d2-4256-a188-1af36595b98c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6524782e-cdb2-40e5-b486-648802a47d7d",
        "cursor": {
          "ref": "f6dbe861-f651-443e-bd9c-6c33130c0872",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "41cb4282-4a11-4f30-88e3-547b527a45de"
        },
        "item": {
          "id": "6524782e-cdb2-40e5-b486-648802a47d7d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "4a80f979-370f-4bf9-9166-d35403f4f96a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a869c569-3a42-4f1d-938b-36b05a5b745a",
        "cursor": {
          "ref": "f2377e9a-ed6c-467b-9601-4e9d568dd58d",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6b2e9d4f-ab4f-4d41-8b1c-0490a2a281e3"
        },
        "item": {
          "id": "a869c569-3a42-4f1d-938b-36b05a5b745a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e4defff3-e129-48d1-a793-17924bce8cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "587ec4e1-e797-402f-8909-7d39b5277b55",
        "cursor": {
          "ref": "9870c4af-ae35-41c1-9310-c5b88fdec32b",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b66e834e-231c-450d-ad78-6c59573f7f74"
        },
        "item": {
          "id": "587ec4e1-e797-402f-8909-7d39b5277b55",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1367fe61-39b1-42a4-8b6b-fcb04eff2048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "262cdc5e-af32-4b49-9db2-963745cb3c32",
        "cursor": {
          "ref": "c64a0ee1-d2d6-411f-9d72-792c3d45f9cd",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "470b775a-913c-4c61-ad89-35cbb11cb50c"
        },
        "item": {
          "id": "262cdc5e-af32-4b49-9db2-963745cb3c32",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "29aa9107-c202-4677-9a5b-8a45aefefc69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef916f6-6d72-4ad4-8219-494fb4462a0b",
        "cursor": {
          "ref": "3b6240eb-f022-42c3-a0e4-c45e962281e7",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ae41948e-9f10-404f-864d-15ccd4c56467"
        },
        "item": {
          "id": "5ef916f6-6d72-4ad4-8219-494fb4462a0b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "7a3aa657-38f7-4ae3-8ee8-d1801277271d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05da42e8-783e-4264-82f8-79b436370d4d",
        "cursor": {
          "ref": "d5382da7-b729-4d8d-855e-a8d34ef0e717",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b0ebc7b9-2940-4bfc-a31c-9c37dbe64fdf"
        },
        "item": {
          "id": "05da42e8-783e-4264-82f8-79b436370d4d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6cc47366-42fb-44a2-8903-aa8bc4eaea93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "babe96a1-efe4-4159-8ecb-f16bd020def6",
        "cursor": {
          "ref": "caa17f11-a88b-454e-8f32-3e588976e9c4",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "68a7ea71-a12c-4383-afaa-fc44dce28c88"
        },
        "item": {
          "id": "babe96a1-efe4-4159-8ecb-f16bd020def6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f1c24390-56c3-486a-a8ea-40a14c334595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "690bff07-6745-4ad9-8184-c3704773b470",
        "cursor": {
          "ref": "1c7ea436-984a-43d6-ac95-6655e5ece83a",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "94188d35-71ba-418b-af56-c0881bcae4f2"
        },
        "item": {
          "id": "690bff07-6745-4ad9-8184-c3704773b470",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "28c3fada-e179-43fd-bc04-41f4f56d0afa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762900a1-f819-43cb-8ebd-8c7118a94ed7",
        "cursor": {
          "ref": "d3a5717f-809d-499d-b789-9b928512cd46",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f0d33542-a64b-4196-af72-bbf8faa30d4a"
        },
        "item": {
          "id": "762900a1-f819-43cb-8ebd-8c7118a94ed7",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d9b73dfb-d114-4fa7-b183-0e9df85bf8f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46dbf93c-a0d8-4db2-b92c-8a0a78e7fce8",
        "cursor": {
          "ref": "150d647b-391a-4273-8c9a-cbde9966f730",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "896357a7-d2d5-4c48-9dc8-778b5f38a6cf"
        },
        "item": {
          "id": "46dbf93c-a0d8-4db2-b92c-8a0a78e7fce8",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "132048db-5b9a-43ad-87a0-c9dca8050ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c359291-e4f9-405c-a8d3-e0f88b03d1ad",
        "cursor": {
          "ref": "416a793a-3d26-4f7f-981c-40bcf8ab4639",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "1aaed802-8e98-4166-80f3-9c310ff22934"
        },
        "item": {
          "id": "6c359291-e4f9-405c-a8d3-e0f88b03d1ad",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "481aee9d-4324-4006-9862-f849e6344e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c01812-db33-4985-91e9-1015750b3dfd",
        "cursor": {
          "ref": "2cdff278-6983-4339-96cb-4cf70024eb68",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "48c25813-0926-4b39-aac1-d38ab3ffee78"
        },
        "item": {
          "id": "a6c01812-db33-4985-91e9-1015750b3dfd",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a89e9f5a-3c9c-4317-9898-51faeb9378b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5962f111-27de-470f-819d-71541c2d9de4",
        "cursor": {
          "ref": "d4042e60-ebd4-4570-ab46-31b3d308a654",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2544c0fe-1680-4888-ab69-ae83fe6296bf"
        },
        "item": {
          "id": "5962f111-27de-470f-819d-71541c2d9de4",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "3998d8f1-3b21-49d1-a588-9ca3d517d761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4617ec43-7a7f-4ad9-9649-e0e49a7cc046",
        "cursor": {
          "ref": "a49063d9-7243-4415-87f7-d3f5be5366f2",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f2d86458-8f93-43aa-89cc-4fed93ca7006"
        },
        "item": {
          "id": "4617ec43-7a7f-4ad9-9649-e0e49a7cc046",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0af777cb-1104-4ca0-a55e-fec57277a672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a7093b-9f0b-4d96-ae77-86ad249d5af6",
        "cursor": {
          "ref": "2d7a96eb-63e5-4641-84c6-0ffd2bdf734c",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "752a547c-e8a7-4099-8aad-6d01ece01394"
        },
        "item": {
          "id": "21a7093b-9f0b-4d96-ae77-86ad249d5af6",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8721821e-9ee4-4e9a-9be5-a71d228ff759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ef89e4-f02d-4212-b620-d238086cb2de",
        "cursor": {
          "ref": "bb2ac679-2d35-47ae-9f57-8b00a976f559",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "23256ab2-8c3d-4d4d-a2a6-82f2c885fe3b"
        },
        "item": {
          "id": "e8ef89e4-f02d-4212-b620-d238086cb2de",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "cfa9f877-13f9-4fde-b216-9d33e918fcb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2aba817-6fea-4592-9e51-81310f10f494",
        "cursor": {
          "ref": "f21166ab-c639-4e15-91f3-d239f6308785",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b5cb13a0-4759-4d62-83a7-22075795a4af"
        },
        "item": {
          "id": "d2aba817-6fea-4592-9e51-81310f10f494",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "36faf381-54a1-48a8-8fa3-07ab95e90c94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13bae84f-ecb9-4765-a1b5-b8940706c5ee",
        "cursor": {
          "ref": "0e99b4c9-bbea-4fc6-9cb9-175b9f5f1fa5",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3908e635-23bd-476b-b760-070b886e1bd9"
        },
        "item": {
          "id": "13bae84f-ecb9-4765-a1b5-b8940706c5ee",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a7b50797-8b1c-4948-a08a-63ab482e6961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ea009a-f3b8-4ca1-94d6-a30f018f62eb",
        "cursor": {
          "ref": "e4c22550-60ba-4b98-8dda-ac7796de409e",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c1f1eb3a-e4ff-4d59-8390-eeeac990ea22"
        },
        "item": {
          "id": "c3ea009a-f3b8-4ca1-94d6-a30f018f62eb",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "be34852a-bb23-4a00-8a04-c278afa1fbe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3644400-98c8-4e3b-a860-df7e1b9afc7a",
        "cursor": {
          "ref": "62d23f26-8ba7-4078-9c91-c1cb08c4be1b",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "89d36bdb-d10d-427e-94de-193924323d80"
        },
        "item": {
          "id": "f3644400-98c8-4e3b-a860-df7e1b9afc7a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "68fc06fd-963f-4728-9afa-97db51eebc89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca245c48-d33a-47cf-b113-c2eef0f8adca",
        "cursor": {
          "ref": "a76da6ad-7c88-41ba-9bbc-10b692eb5775",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "4bf49644-f3bb-48e9-82f6-f7c2acc1f573"
        },
        "item": {
          "id": "ca245c48-d33a-47cf-b113-c2eef0f8adca",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b1492a1f-47a0-49b8-a2fb-fab371bc5d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27aa7290-c7b4-4e24-a9f6-3b7bd14a1018",
        "cursor": {
          "ref": "649c695e-d305-4458-a0bd-853a0bdcec5e",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b50ed4df-068c-4851-8dd4-12b2224378cc"
        },
        "item": {
          "id": "27aa7290-c7b4-4e24-a9f6-3b7bd14a1018",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e9ed6e6c-0181-4fbb-a452-34bf53867b72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3866d147-b788-45e4-aa01-d460200e677a",
        "cursor": {
          "ref": "f34c7e02-4102-41ef-b745-de83bd719a2d",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "cd00ff0c-7a5a-4a19-a3d4-5cd6103f5f40"
        },
        "item": {
          "id": "3866d147-b788-45e4-aa01-d460200e677a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "74596140-ab90-4c47-a7d8-a04fa2c5872a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "5413cff7-7d36-4d66-a07e-019b1d7d4ae2",
        "cursor": {
          "ref": "217e2875-e679-4c48-83c0-2971265935f3",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "93c3def6-5e68-49a7-8abb-0da4a3366795"
        },
        "item": {
          "id": "5413cff7-7d36-4d66-a07e-019b1d7d4ae2",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "ad2bd76a-5e60-4794-9996-79328bea1a2f",
          "status": "Created",
          "code": 201,
          "responseTime": 1978,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "4d7572b4-e20e-4fbe-9475-a901287504b6",
        "cursor": {
          "ref": "481fc848-7d7c-46b1-bf64-170ed5552f2e",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "448abe79-eabf-4a4b-a59d-3e7cabfefcb4"
        },
        "item": {
          "id": "4d7572b4-e20e-4fbe-9475-a901287504b6",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3ecc6ca8-e0ae-4b28-a455-dbcf450f6676",
          "status": "Created",
          "code": 201,
          "responseTime": 2245,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ea42e1-0c4e-441e-b906-6f3a95494ca8",
        "cursor": {
          "ref": "9293b25c-62fc-4fc5-ae33-3a19b7024cd3",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "03229fb2-dccc-4878-a8ba-b8ae841723ff"
        },
        "item": {
          "id": "33ea42e1-0c4e-441e-b906-6f3a95494ca8",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "31709d5f-be51-4089-acad-c1adc66268a6",
          "status": "Created",
          "code": 201,
          "responseTime": 2507,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "360b790b-d0d3-4d8d-9034-9da90eacb177",
        "cursor": {
          "ref": "e8653854-1df9-428c-8892-a02344445e29",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5a0dd009-8f0c-456f-b6d4-1a266b64bb52"
        },
        "item": {
          "id": "360b790b-d0d3-4d8d-9034-9da90eacb177",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4063ccd0-cd15-4ea5-a38c-9d2103552005",
          "status": "Created",
          "code": 201,
          "responseTime": 6459,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f80a21a-9063-4ab0-b9f7-3186ae47d9b5",
        "cursor": {
          "ref": "46c21cb5-5726-4fb1-a466-0a04b9db950f",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8323c733-332c-4b2c-81f2-13a1b2892d7f"
        },
        "item": {
          "id": "1f80a21a-9063-4ab0-b9f7-3186ae47d9b5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e91ad4cb-cb7f-497a-a9de-e27a47b219f2",
          "status": "Created",
          "code": 201,
          "responseTime": 4152,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6189634c-4761-403f-8304-2ca134d7a578",
        "cursor": {
          "ref": "d97a2530-404f-49d1-be48-f6ea84783a12",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4e9e1d90-32a2-4068-845e-c20783188ee7"
        },
        "item": {
          "id": "6189634c-4761-403f-8304-2ca134d7a578",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0e08da8b-c179-4e15-bc14-85ca946f107c",
          "status": "Created",
          "code": 201,
          "responseTime": 3526,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-13T00:36:10Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-13T00:36:10Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "07814a3e-63c4-4d0f-b495-a25e280bcd9a",
        "cursor": {
          "ref": "02ec5cf2-a840-43e9-aba1-407bd037b832",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c5a340b9-ba66-455d-9f97-353836583bed"
        },
        "item": {
          "id": "07814a3e-63c4-4d0f-b495-a25e280bcd9a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "312b5aa3-9c6d-4325-aed0-3ee2188defaa",
          "status": "Created",
          "code": 201,
          "responseTime": 4583,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e584f8-a074-462f-882a-32c0364b0963",
        "cursor": {
          "ref": "45c113c6-7210-4404-8b01-4258f89c3eb7",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "61ee0b84-52ea-4e6a-8de6-9748955814e6"
        },
        "item": {
          "id": "a2e584f8-a074-462f-882a-32c0364b0963",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0be5a07d-b8ff-42ff-8058-0caca1ae2862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e584f8-a074-462f-882a-32c0364b0963",
        "cursor": {
          "ref": "45c113c6-7210-4404-8b01-4258f89c3eb7",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "61ee0b84-52ea-4e6a-8de6-9748955814e6"
        },
        "item": {
          "id": "a2e584f8-a074-462f-882a-32c0364b0963",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0be5a07d-b8ff-42ff-8058-0caca1ae2862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97cb8874-3663-4ea4-a1de-a8c544d0f0ff",
        "cursor": {
          "ref": "4076903d-4c01-4596-b18a-2c97652bc143",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f83a5721-0b42-4ed4-8590-a865359c1d10"
        },
        "item": {
          "id": "97cb8874-3663-4ea4-a1de-a8c544d0f0ff",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9585b03a-2ab1-4f34-ac77-ceb85c216153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "961ef827-1542-43a7-8b1f-86932b97431f",
        "cursor": {
          "ref": "c2e98381-5bea-417c-8b04-b70435d7f9a2",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2087c62e-86a6-4f68-bf92-848c0430b26c"
        },
        "item": {
          "id": "961ef827-1542-43a7-8b1f-86932b97431f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "eb383869-15cc-4511-a3d5-2a7bce27293a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe54e365-9947-439b-a171-c509a168e532",
        "cursor": {
          "ref": "d7b3e1a0-6c9b-40e3-8875-c8684738f0ce",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "acadde38-526e-4c24-9192-0265644ebe5d"
        },
        "item": {
          "id": "fe54e365-9947-439b-a171-c509a168e532",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b8f9a595-c4ee-4bf5-a033-de92d8330c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717ae3ce-0d6c-4f86-92e8-d4932c6470e7",
        "cursor": {
          "ref": "663f1a10-eb32-4c60-a80d-7f1575bd1659",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4587a89b-a3b1-4500-82c2-03d778b50bf2"
        },
        "item": {
          "id": "717ae3ce-0d6c-4f86-92e8-d4932c6470e7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a6f5fa5e-a3ef-4970-ae28-6e6fbab5e41e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef87570-b36c-4bb9-8afc-71bba19fd575",
        "cursor": {
          "ref": "6613bfc6-e258-4475-bd80-e78cf53d1a63",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d0db9249-3d00-4577-82c2-2d4d99224a87"
        },
        "item": {
          "id": "4ef87570-b36c-4bb9-8afc-71bba19fd575",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "55399d1c-2148-4127-a827-843e767f8000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2413a891-5896-4904-a787-83a695dfde2a",
        "cursor": {
          "ref": "4a93f66f-a0c0-4625-99d3-2da8e0a2b7ab",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4a213ecb-c2cb-46cf-88b1-cfe308cc0896"
        },
        "item": {
          "id": "2413a891-5896-4904-a787-83a695dfde2a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "abc415bf-bc5c-4101-8fb0-a3e308322c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ac17f3-193b-4d8b-89f4-ccfa9b055e09",
        "cursor": {
          "ref": "7590a88c-0713-4183-8ba8-2e763e80bdc6",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b3b0689a-1c95-4009-8f44-257d1f19d300"
        },
        "item": {
          "id": "65ac17f3-193b-4d8b-89f4-ccfa9b055e09",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "987cea7c-93e1-4b5a-882c-bccd8559d93d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b7d09d-9264-456b-a5f3-f4ea2810439e",
        "cursor": {
          "ref": "f3a905a9-6d6c-428a-b8d7-031ee3a0b4b5",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1a7f7a6d-941e-436b-914a-7bd716fa1124"
        },
        "item": {
          "id": "e3b7d09d-9264-456b-a5f3-f4ea2810439e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "078a7823-6348-4af6-a3e4-753be77d62e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1dab372-a23a-4db0-a96a-176151efe7ce",
        "cursor": {
          "ref": "42a79349-05d8-43bc-9e5f-99a28715cd40",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ea05f1a6-c085-40af-8bbc-5b44482aed60"
        },
        "item": {
          "id": "b1dab372-a23a-4db0-a96a-176151efe7ce",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "316e2248-47ae-447f-b1fb-6c1070806705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae2c6b9-839f-4132-a87e-6651608aebc0",
        "cursor": {
          "ref": "1c85f63a-10c7-4372-9702-624b16e2202b",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "bccd8830-4bf5-4b0d-8bec-08fa77f9571f"
        },
        "item": {
          "id": "3ae2c6b9-839f-4132-a87e-6651608aebc0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e66ce0d0-b396-4c20-81d6-b79ba3b5b09d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e134e325-8d7e-4ef4-b3b9-189aac0bab2c",
        "cursor": {
          "ref": "a032acd1-522e-47b3-8467-329ee60039d5",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3971bf2b-38f5-4993-8159-9fdf44d6a4cf"
        },
        "item": {
          "id": "e134e325-8d7e-4ef4-b3b9-189aac0bab2c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f09d0818-02f5-457c-941e-a940da8e59ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d98e28-aaca-4a9d-8e5a-72cf96cb5633",
        "cursor": {
          "ref": "a51f20aa-5200-4814-b52d-9902e8b6ebda",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6e099fde-f01b-49b0-932d-8514d7c33156"
        },
        "item": {
          "id": "96d98e28-aaca-4a9d-8e5a-72cf96cb5633",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b9832cca-ba5e-4dbb-9b22-6da9fc910cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d44e1112-f19c-4782-b64f-6b0e7be7873e",
        "cursor": {
          "ref": "3e97540c-b92f-486d-bfd7-788d96883b55",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "da2699e2-38aa-4393-8301-e01cb448016f"
        },
        "item": {
          "id": "d44e1112-f19c-4782-b64f-6b0e7be7873e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3f636759-b910-4939-9ec2-ad776cadf9a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaf71609-6378-4d37-bfe5-40b6b30be2d2",
        "cursor": {
          "ref": "67d39844-d5f2-49c5-9b06-a2c939d20e4f",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3f802fc9-a4bf-491e-b7f2-a14a2ea488e0"
        },
        "item": {
          "id": "aaf71609-6378-4d37-bfe5-40b6b30be2d2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e77d44dd-61c9-414d-bec5-1574ae5cfa9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b23160-fe42-4b94-be9b-f866e7d6f121",
        "cursor": {
          "ref": "dd8141d4-7805-4e9d-bf08-81e517f048e4",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "719380f0-4c1e-46ab-8e46-5f8ea1bcfe17"
        },
        "item": {
          "id": "b8b23160-fe42-4b94-be9b-f866e7d6f121",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a3fcda49-a798-48cd-ba4d-01b699cf1452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfdfdbfc-8b9c-4d64-b6b8-cd67632bfea4",
        "cursor": {
          "ref": "f82bdfa3-9448-426d-a954-8d9277f1815e",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8e88b182-7093-41f5-a2a9-34abc5b1deba"
        },
        "item": {
          "id": "cfdfdbfc-8b9c-4d64-b6b8-cd67632bfea4",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bd18da8c-7567-4544-b734-8ec15dcd64c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "722a9e10-28b2-4877-885f-2e4a1b63b27b",
        "cursor": {
          "ref": "24435cc7-5aa8-4dcf-a31b-bda02b108c98",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5a4003c6-2267-42cc-8629-f2fa778edb78"
        },
        "item": {
          "id": "722a9e10-28b2-4877-885f-2e4a1b63b27b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d918742c-377a-45cb-95f6-fbe2e40b1adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3f42eae-efcb-47fa-ad8b-97ace18945c0",
        "cursor": {
          "ref": "bc0c4bfc-3720-4ffc-9c35-862464e6c909",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e01a09e9-6134-4ba1-84e2-257c7a585a82"
        },
        "item": {
          "id": "e3f42eae-efcb-47fa-ad8b-97ace18945c0",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2d9e2536-39bb-42bc-879e-c06f076e22ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7367a639-4de4-45f9-95fe-a90d4564e3cb",
        "cursor": {
          "ref": "ae9a7c23-5d6b-4158-9850-ddcc33e747a1",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "cf098b75-e13e-4ba3-9312-b75cd6b6df3c"
        },
        "item": {
          "id": "7367a639-4de4-45f9-95fe-a90d4564e3cb",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f40f60b6-d075-43ce-b3b4-28282c472cc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbdf7d1f-3b26-4752-9a16-b6b861452bdd",
        "cursor": {
          "ref": "bd0e290e-0bfc-42b1-a2d6-747dcaf3a6ce",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "12932948-9698-4aee-a9a7-bb79f4b50f42"
        },
        "item": {
          "id": "bbdf7d1f-3b26-4752-9a16-b6b861452bdd",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "700cf221-2126-4b0d-ac27-58777bf59e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f67df2c-643c-453a-a546-1156e0c6ce99",
        "cursor": {
          "ref": "3b6a8f73-5116-4bfd-8ecb-204fe666a19f",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e642f3c3-ca5c-4eb8-8a9b-c6a55478fc08"
        },
        "item": {
          "id": "2f67df2c-643c-453a-a546-1156e0c6ce99",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1eed2d07-6794-4ef5-bd76-c111c63eca3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c52a0054-7e30-4caa-b2fd-43e9fb96039a",
        "cursor": {
          "ref": "a870dce2-74a3-4895-a700-68e0c838e126",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "16c432c5-ce9e-4b2a-86f8-f524cc6204bd"
        },
        "item": {
          "id": "c52a0054-7e30-4caa-b2fd-43e9fb96039a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4868b945-0fd7-435d-a778-5ca0cf8e779d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0efdf98-6b47-4ca0-b6eb-1fcc0266d699",
        "cursor": {
          "ref": "c6bc8d7c-56de-410b-9939-afbd757105ff",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1319768a-515d-43c3-9337-1125be5a0a18"
        },
        "item": {
          "id": "d0efdf98-6b47-4ca0-b6eb-1fcc0266d699",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "77cc4a13-8eab-4598-ac0b-b678a013d77d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "befdf295-52fa-4026-a6b1-f54b0be4b0c3",
        "cursor": {
          "ref": "53440b25-9ff5-4b71-a683-b44df215dc6f",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "657edd5d-2b45-4e49-bf9b-201179e68b48"
        },
        "item": {
          "id": "befdf295-52fa-4026-a6b1-f54b0be4b0c3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "16850c31-9173-47bf-825b-06be090dc625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e74aa2d7-5342-40a4-98c3-99f5ca8ddf0c",
        "cursor": {
          "ref": "b5d5e4b6-c4d0-44c3-84d0-f974ef4fce2d",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "857377f7-a554-4ac4-b11f-11400e5067e3"
        },
        "item": {
          "id": "e74aa2d7-5342-40a4-98c3-99f5ca8ddf0c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d9988ac9-adda-49e7-ad2e-65a04bbc331f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67666652-35ff-4044-8d91-5505e42075aa",
        "cursor": {
          "ref": "f9c2f324-4701-4b4c-ad64-8812932335f9",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d65b13bd-727e-4959-9ad3-539f04f24bdd"
        },
        "item": {
          "id": "67666652-35ff-4044-8d91-5505e42075aa",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "bc5535e9-49da-4867-bdee-953d02597d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "809ae479-5798-4088-b628-eaecd0882859",
        "cursor": {
          "ref": "0c5c6f4c-5dda-436a-a2b5-7cedbc4bfe0d",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "eae8130d-eaa4-4cab-b738-4df1b953aa1f"
        },
        "item": {
          "id": "809ae479-5798-4088-b628-eaecd0882859",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9f8ec17a-b053-46ae-9d67-1bdaf04c0f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f78e3a8-0f50-4150-8260-83fe66df25ae",
        "cursor": {
          "ref": "26d90add-9ccd-456b-8d2f-a092d41dfba4",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4b3befb4-6490-4bf3-a228-6e81a2eedd33"
        },
        "item": {
          "id": "7f78e3a8-0f50-4150-8260-83fe66df25ae",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a6f16d93-f64c-45d3-9fee-0294a85bd894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569eacc4-7b1a-4196-8bcc-7d325d646974",
        "cursor": {
          "ref": "98a9adb7-0793-4a7e-8c0a-6acbf3873060",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "75b85473-024c-4835-97f7-5404c6346d52"
        },
        "item": {
          "id": "569eacc4-7b1a-4196-8bcc-7d325d646974",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "cc760da6-0776-40df-ab56-3caa08bf3b42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90458308-31fa-4b7f-bc71-493a7e760acd",
        "cursor": {
          "ref": "d4139da3-9630-4c45-b373-ec12b58e2485",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "afcf1375-24d9-4a65-9b11-426e74a4e865"
        },
        "item": {
          "id": "90458308-31fa-4b7f-bc71-493a7e760acd",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "297084ef-c216-4faf-9a66-a98010e66d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b56db56-ee31-4a76-9d20-1eaef87954c2",
        "cursor": {
          "ref": "b9a70f6d-bca6-42d8-939f-916c8cd272b7",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "5b9f3609-1625-4c50-a6e8-f821cd071782"
        },
        "item": {
          "id": "7b56db56-ee31-4a76-9d20-1eaef87954c2",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "fc266563-41ca-4985-8b05-63f4d88c5da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69456364-1b4b-4dd7-bc0a-eb8a4cdf6dc5",
        "cursor": {
          "ref": "d8d8ca29-3fee-4377-95b7-b1eff7bd877f",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3b8e1e45-a0fe-42dd-ba0f-d2580565b38b"
        },
        "item": {
          "id": "69456364-1b4b-4dd7-bc0a-eb8a4cdf6dc5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "717de739-15e8-46dd-9a20-9cf45914a8c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 108,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "f48a0a0a-eac3-4a01-a1bb-0f8353b19ee9",
        "cursor": {
          "ref": "eb18968c-1bac-4892-8caf-c106eb71708d",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d9f1d3da-0572-4531-9e9a-2bf22f0f21fb"
        },
        "item": {
          "id": "f48a0a0a-eac3-4a01-a1bb-0f8353b19ee9",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "ceef7ea0-7406-42a5-b1ea-a1927660b8d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "5201af31-b241-48e0-a60d-047ae93c9d2b",
        "cursor": {
          "ref": "38aec909-19af-48fb-829e-fa4b25bbf1a7",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0b279b05-bd3c-42d9-ad5d-753dbb261224"
        },
        "item": {
          "id": "5201af31-b241-48e0-a60d-047ae93c9d2b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "fab34c73-3b99-4c6f-930c-959ed517f066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5201af31-b241-48e0-a60d-047ae93c9d2b",
        "cursor": {
          "ref": "38aec909-19af-48fb-829e-fa4b25bbf1a7",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0b279b05-bd3c-42d9-ad5d-753dbb261224"
        },
        "item": {
          "id": "5201af31-b241-48e0-a60d-047ae93c9d2b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "fab34c73-3b99-4c6f-930c-959ed517f066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e85d98af-b636-438c-8b9f-c49e79bd2bf6",
        "cursor": {
          "ref": "3a44d8a0-80ab-49c6-a843-f3636afbcd72",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1da8f5f6-4be5-40d8-8665-26f76a464c36"
        },
        "item": {
          "id": "e85d98af-b636-438c-8b9f-c49e79bd2bf6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0f6744af-f562-4f8c-865c-38e84a0a8f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee145f73-7e92-4c73-974b-d6b8b1be40f4",
        "cursor": {
          "ref": "5d226aac-d177-4d82-8233-453aa00e5335",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "79aedead-1214-4424-b3ec-3bae4f75163f"
        },
        "item": {
          "id": "ee145f73-7e92-4c73-974b-d6b8b1be40f4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3cbbe2ee-5423-42fa-a163-e8ee5506d18a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d9f856-c03b-4c7c-aa61-e99c7e8e4643",
        "cursor": {
          "ref": "b6fbbee6-60eb-419c-b081-603a2ba72a8a",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "cc0b8283-e34b-4e2b-8d54-9ea6cd1d961a"
        },
        "item": {
          "id": "b4d9f856-c03b-4c7c-aa61-e99c7e8e4643",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a0cde340-1692-45da-a6e2-70de87a1d0e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de11c5c5-4e80-496d-a461-2d2d4d874b2a",
        "cursor": {
          "ref": "5837ee51-b2a8-47de-a8d2-09e28869a412",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "38e58985-fef5-47d9-8fe8-bf15c7dfca84"
        },
        "item": {
          "id": "de11c5c5-4e80-496d-a461-2d2d4d874b2a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "105695de-fb26-4e44-82b0-172689ee9d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b29fbda-ee17-41f7-99a7-ed636ca33976",
        "cursor": {
          "ref": "78e2eb6c-cf26-4326-b2f0-6a4ff93c4ba7",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "78a1a25d-f813-4a95-85fe-5474ba0c1b2a"
        },
        "item": {
          "id": "2b29fbda-ee17-41f7-99a7-ed636ca33976",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a94dff5d-3859-48c8-8f98-e5c0cbf60b2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117603f4-7600-4854-bd01-4f7cf9e3e55d",
        "cursor": {
          "ref": "aa50380c-cd50-4fcb-aeea-1692922af1f2",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "9344a889-208c-4c85-9214-116c4551d179"
        },
        "item": {
          "id": "117603f4-7600-4854-bd01-4f7cf9e3e55d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7878a6ee-6673-4299-b96a-4f02068ca140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3347590b-b930-4832-8475-2306b4b5ac00",
        "cursor": {
          "ref": "3388d5d1-abb9-4dc3-a053-0d13c6adb98e",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "dc8cc476-29b2-4189-bd40-2d4043c43022"
        },
        "item": {
          "id": "3347590b-b930-4832-8475-2306b4b5ac00",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "cb5531f0-7241-4de5-93ca-9bc1b41bf16b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d976af82-0e55-4a97-94e9-91db53252591",
        "cursor": {
          "ref": "99347f51-9175-4598-99c8-c10960cb3470",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5757a786-98cd-46b6-95df-348c5b20cb08"
        },
        "item": {
          "id": "d976af82-0e55-4a97-94e9-91db53252591",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "66be3eb7-5eef-4cad-be8c-47c1a2756210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97faeb59-e93d-4c60-81fd-084bc6b8503a",
        "cursor": {
          "ref": "68917fed-c1ba-48fa-a62e-14f0a68bd689",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "85514dee-e096-422d-a13d-40edb7b87007"
        },
        "item": {
          "id": "97faeb59-e93d-4c60-81fd-084bc6b8503a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "35061d93-d17d-4e9c-b6b4-4eb153533ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d3003cd-b387-42a1-9086-35ac758f4d74",
        "cursor": {
          "ref": "07184a6d-cb09-46ac-b66e-afb80e930c80",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0975b08f-81ef-4259-898b-012786ac81a8"
        },
        "item": {
          "id": "6d3003cd-b387-42a1-9086-35ac758f4d74",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "243de809-d310-4540-abee-f15bbcdbbc64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "436d0c43-3ef5-4fb5-b5c5-51eb8ddcb533",
        "cursor": {
          "ref": "899f1c84-5e97-40e4-ab18-8776ec029f4f",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9604cd0d-29e9-408c-abf3-48675aa6bfbf"
        },
        "item": {
          "id": "436d0c43-3ef5-4fb5-b5c5-51eb8ddcb533",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9b92d889-44b6-4583-9d69-9cb73639488b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b03d0b-5a90-4469-acb0-758b4308a08e",
        "cursor": {
          "ref": "1e54dc26-190d-4ba6-bec4-076044aa8f3d",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "fc770ce1-0b02-4a3d-8bc8-004659ff523f"
        },
        "item": {
          "id": "35b03d0b-5a90-4469-acb0-758b4308a08e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "311dbf47-b97e-4697-a589-564a962db85b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2186e8-790b-4f82-a561-411ca0e212d7",
        "cursor": {
          "ref": "3f75b49e-3462-4c9f-9b7d-59146bafee53",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "52a2eaad-4a0b-458c-989e-50f5056abc2b"
        },
        "item": {
          "id": "ca2186e8-790b-4f82-a561-411ca0e212d7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "31f6ebf5-7531-4483-904a-52684b481c47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9de5912-d3bf-4229-95a6-adf413a145b9",
        "cursor": {
          "ref": "54305d1c-c0d8-41ae-bb94-c0f81db12f24",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b8b3b1e1-4081-4cfb-97c4-a826048e3b38"
        },
        "item": {
          "id": "c9de5912-d3bf-4229-95a6-adf413a145b9",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ed2b6d3c-6f23-4907-99ba-0ea29dcd6092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c885965-9b33-45eb-a00e-e96f001faba4",
        "cursor": {
          "ref": "0838899a-6398-4afa-84d4-77529188a1be",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c58fbb05-b398-4a68-88c0-543c9fddfbdc"
        },
        "item": {
          "id": "3c885965-9b33-45eb-a00e-e96f001faba4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "61e79bf3-b287-470c-8bc8-d060d3d7e93e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5f4448e-0554-44b2-a723-e67abdff8170",
        "cursor": {
          "ref": "df9c95ab-1fb6-4224-909a-b7f05e89f643",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "97bb7b86-1b64-4371-8fd0-c700a884eef6"
        },
        "item": {
          "id": "a5f4448e-0554-44b2-a723-e67abdff8170",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "89367bfe-412f-4a6f-8adb-6b223607b5b5",
          "status": "OK",
          "code": 200,
          "responseTime": 243,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "cf9e11ca-c1a7-4133-b491-994e8c96036a",
        "cursor": {
          "ref": "9d2c468d-b0b6-40bc-bb8e-e8c4e5da1448",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "4e4e2916-beb9-4189-99c8-9e8e62d39a82"
        },
        "item": {
          "id": "cf9e11ca-c1a7-4133-b491-994e8c96036a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ceecca11-d75b-4fe7-9108-3b73703823c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad03ee74-878e-4d03-8f3c-1791893accdf",
        "cursor": {
          "ref": "103b1164-e729-484d-8e7f-1e478fb998f4",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "74fe6648-b906-4208-a80d-bda5b957f700"
        },
        "item": {
          "id": "ad03ee74-878e-4d03-8f3c-1791893accdf",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f21cc9d8-7964-4609-9c3a-66411060289c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d025b005-359d-44fc-a8ee-2e9cdf6037d2",
        "cursor": {
          "ref": "80c9135d-7c1a-4821-95b8-efd56ae2a410",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5e648854-d02f-4eb9-b53f-5cef247a6e5e"
        },
        "item": {
          "id": "d025b005-359d-44fc-a8ee-2e9cdf6037d2",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8314ebff-a2af-4a43-86c8-9e16bc665275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f88cf57f-eeaa-41cf-a73e-bc3924e602e1",
        "cursor": {
          "ref": "05d006d7-c6cc-4ec4-82df-3fbb761a1b9e",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "29ea6d97-cb2e-4d68-9bf6-ddb2a8e2b8b2"
        },
        "item": {
          "id": "f88cf57f-eeaa-41cf-a73e-bc3924e602e1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5f952aed-db76-49f3-9ddc-6cfaff8f4926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee318b1-539b-409c-8ee0-718218c0ddfe",
        "cursor": {
          "ref": "1f2f214d-5241-41bd-bab6-de7d6ef2ffec",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5abfcef0-e620-4566-99eb-3bc98e7cce1c"
        },
        "item": {
          "id": "7ee318b1-539b-409c-8ee0-718218c0ddfe",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3d7be26c-fa0f-4bbf-8bf6-9e30f74d334e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55cde089-4750-4106-8ee2-04dad8fe504f",
        "cursor": {
          "ref": "dc414c01-e800-48e3-a623-e12d982e3739",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "63094ea0-4b2f-4e61-8511-40fe00222a94"
        },
        "item": {
          "id": "55cde089-4750-4106-8ee2-04dad8fe504f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c2f16676-dff4-49b0-a0cf-248494a13a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2738101-21d1-4ede-8f65-bc1e288edd10",
        "cursor": {
          "ref": "572757b0-fd46-4cd1-92f8-d17b9a5b4341",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5bdaee68-7bad-4f40-bc42-8b9b5b27eb9d"
        },
        "item": {
          "id": "e2738101-21d1-4ede-8f65-bc1e288edd10",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ff76c526-ce0a-486c-9ca4-cf736c0497df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a78daeab-7028-4991-9636-5d7b8174e013",
        "cursor": {
          "ref": "73cb60a1-9e8b-443d-9209-1c9b30e60b9e",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f376065a-9437-44b8-b077-57b511d4c20c"
        },
        "item": {
          "id": "a78daeab-7028-4991-9636-5d7b8174e013",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b6fd42c6-f761-4b91-a318-818bfc689c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa969c7c-d6ab-4ada-a1d1-8afa5779ae00",
        "cursor": {
          "ref": "1820ccb9-ee7a-4a00-b890-db5cebbebb03",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "482adbd4-9d6e-4b27-af7a-55658d03a3f0"
        },
        "item": {
          "id": "fa969c7c-d6ab-4ada-a1d1-8afa5779ae00",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2bfa5e80-a5be-4b09-913e-edb4c77f17c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e495822b-b09f-4b5e-9956-b22191666743",
        "cursor": {
          "ref": "df1cbbb1-6b19-4a51-a6de-3eadb2eb1359",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ecb299a3-8267-4155-a5ac-3233cc0aace0"
        },
        "item": {
          "id": "e495822b-b09f-4b5e-9956-b22191666743",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "afd6e6fc-f187-4e3e-b7d4-643b2a6dc3cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be2b33d5-adcf-47ba-a541-da995662b27f",
        "cursor": {
          "ref": "1e884313-f3a1-4d0e-ada2-1893913f3048",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "dc699d67-5b06-416f-849d-c7eb034e6f29"
        },
        "item": {
          "id": "be2b33d5-adcf-47ba-a541-da995662b27f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ac3d96a7-22c7-4eb7-b05a-050d751f0eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac67d6e-e02d-47ff-b3f7-f0adff0d37df",
        "cursor": {
          "ref": "12bb0f13-c45a-4e5d-bd6c-73c6038766ce",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "963ee1a6-71e5-4dc8-b94a-1fb642f7a2c0"
        },
        "item": {
          "id": "7ac67d6e-e02d-47ff-b3f7-f0adff0d37df",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d17aee02-9f17-4f5a-8eeb-8e705b04bd6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18af7f2-ec71-437c-bb2d-8bd7956688bc",
        "cursor": {
          "ref": "bfc930ed-c5b0-4926-b18a-b2bd4cf8b2d5",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "6fa7c3a6-2cea-4018-9277-dd3a3ec98eb3"
        },
        "item": {
          "id": "d18af7f2-ec71-437c-bb2d-8bd7956688bc",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0e8830ec-f0ce-4e45-902b-08c1bfb85dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d4637e6-cea6-437a-928d-cb71573ab297",
        "cursor": {
          "ref": "b8b741ee-3140-4fbc-8fba-afb4f0bb764d",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "fbb8919d-8b66-4521-b773-fe2275510e40"
        },
        "item": {
          "id": "0d4637e6-cea6-437a-928d-cb71573ab297",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "384a1736-ee73-46a6-aada-3835528a50ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bba7a97-c403-4782-a236-beef35eb3243",
        "cursor": {
          "ref": "ee6b4f65-a53f-4645-8d5c-cadf4151bcf7",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "fb41aadf-2490-49e8-9cb9-66c834005397"
        },
        "item": {
          "id": "2bba7a97-c403-4782-a236-beef35eb3243",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e4114c33-6cd5-4ff2-ad85-eb0b59345a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa231a0-c5c5-4ba1-a074-3500f772c015",
        "cursor": {
          "ref": "46e126ff-14af-4771-9f31-c63e904b8075",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "67b2af80-4916-4516-93cb-853201c3767e"
        },
        "item": {
          "id": "5aa231a0-c5c5-4ba1-a074-3500f772c015",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "29b599fe-6be5-41a8-85f9-2062d43c709d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dedc2081-3838-4741-9c6c-d83e5f5afc23",
        "cursor": {
          "ref": "8b8f3b84-2edb-4b82-a38f-c0e65f3f1108",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "069b8ab8-3c7c-4d2a-b53c-20284e6b1a0b"
        },
        "item": {
          "id": "dedc2081-3838-4741-9c6c-d83e5f5afc23",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a44e3d3c-1c83-448b-93a7-ce3fa39caf05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "008ab982-89b3-490e-825b-23c999a3fdec",
        "cursor": {
          "ref": "fc36b6f8-d495-4edd-b435-52958d682f0b",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "1daecd2e-d2c4-46ba-a252-50b7cb2c7ebd"
        },
        "item": {
          "id": "008ab982-89b3-490e-825b-23c999a3fdec",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "37a19f1c-9ab7-48f4-a52b-b89d04dda38a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be1381b-0e34-4797-bcc6-80bfa60a0ba0",
        "cursor": {
          "ref": "d04884fa-9baa-43d4-a375-014e1e7fc1fe",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3e54d6da-d95e-470f-ac29-b4945d981487"
        },
        "item": {
          "id": "9be1381b-0e34-4797-bcc6-80bfa60a0ba0",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3e82706c-f7ed-45c1-ab0d-b71737d39a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f095ac-df02-41f0-bddf-b3a5bcaf835a",
        "cursor": {
          "ref": "55b628a0-cbc3-499c-8bfe-10eb8583942b",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2264fb06-508b-4f14-9e39-3b390653e081"
        },
        "item": {
          "id": "48f095ac-df02-41f0-bddf-b3a5bcaf835a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3e0cce5f-48aa-4f52-8052-664260faba8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98f00da-30c5-4f5a-866a-907b25b5c874",
        "cursor": {
          "ref": "9ddb8a97-63bd-4b2c-a08d-f0874592d30e",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f1d3f809-993f-4107-aad7-c485fbbb9599"
        },
        "item": {
          "id": "c98f00da-30c5-4f5a-866a-907b25b5c874",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "532306ad-ee64-4381-ac63-59882e127894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13730630-4c20-4546-86da-be9b15589294",
        "cursor": {
          "ref": "f4ff08df-6c82-4722-a8c1-3c3d5643226f",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "80a9932f-5aa2-4fab-b005-d56268d671e2"
        },
        "item": {
          "id": "13730630-4c20-4546-86da-be9b15589294",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "1ef6c7ff-c385-4248-b2f1-65b715f036e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e72b43a7-4735-401a-bcc1-489be9d072dd",
        "cursor": {
          "ref": "36edf27d-d55c-4a8c-962f-48fd9000697a",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "fcb6926b-2e31-4e26-977c-cc90dd86564f"
        },
        "item": {
          "id": "e72b43a7-4735-401a-bcc1-489be9d072dd",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d60efb11-b9d4-4966-b86a-8c583652cd1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbdc4513-689c-46ed-a589-260d4919e405",
        "cursor": {
          "ref": "81a9c69d-3fae-4d31-aee4-6fa06b954f5b",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9399e50e-4804-46b4-92d3-dd7a2a527ece"
        },
        "item": {
          "id": "dbdc4513-689c-46ed-a589-260d4919e405",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f8d17a5a-47c8-493a-985f-b4d02814894a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd0c72d0-b48d-4249-8437-788bbbda598b",
        "cursor": {
          "ref": "7778c6a3-f603-48bf-a83f-fd708c311035",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "807b7f15-c5f6-43ad-ab3b-e94609833718"
        },
        "item": {
          "id": "bd0c72d0-b48d-4249-8437-788bbbda598b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0c7b5a0e-e9d1-43a2-a03c-f30b6516b821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41152841-1431-48b0-a704-4bd5f6a9ce41",
        "cursor": {
          "ref": "9e02f79e-18bd-433e-a79d-b087cae3620c",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "cec1d13e-87f9-4964-b043-d08a2d91e008"
        },
        "item": {
          "id": "41152841-1431-48b0-a704-4bd5f6a9ce41",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "689a163a-8fbf-45fc-a8e7-dfeb2f1f506d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eee2f20-4859-45a7-8807-7d631dfa245a",
        "cursor": {
          "ref": "806c3e4a-2d4c-4d44-a967-063538cbb0a7",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "169e6a48-b4a0-4ea3-aad0-ad6316964e8d"
        },
        "item": {
          "id": "5eee2f20-4859-45a7-8807-7d631dfa245a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c974bf16-7525-4dfb-b7f3-cf4a0a88a9a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1811bec-c59c-4718-bc7f-6c510719e87c",
        "cursor": {
          "ref": "2ab9d767-865b-4581-b43f-83fd931d5625",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c717a291-cc76-4882-87c0-4ae1fa21ab0c"
        },
        "item": {
          "id": "e1811bec-c59c-4718-bc7f-6c510719e87c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c5895708-5bd8-473a-b56d-036db749fd17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3777368a-e19b-482e-9639-86128875c47f",
        "cursor": {
          "ref": "9b24db45-d40a-456d-bfc2-a36d9add93d8",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "19f92b9b-7359-4e1a-8c85-5611318937d0"
        },
        "item": {
          "id": "3777368a-e19b-482e-9639-86128875c47f",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "54298a04-c919-4f74-b51b-18f44a3501e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0ee14f5-7696-49ab-8a41-4d482389bf29",
        "cursor": {
          "ref": "14c8b58b-9a8d-43e0-84d3-4fe243425988",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a51410bf-68a4-4768-9f9f-b6828bd4fe6e"
        },
        "item": {
          "id": "a0ee14f5-7696-49ab-8a41-4d482389bf29",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f19233f4-9830-418f-b1c7-dbe43435639f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74eb2276-bf22-48ba-a8f0-1aa2b16888ce",
        "cursor": {
          "ref": "2a8483a1-9e81-41f3-9643-119db086407f",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3562e76d-8bd1-4a55-99ad-26bf8c7c93a1"
        },
        "item": {
          "id": "74eb2276-bf22-48ba-a8f0-1aa2b16888ce",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c63fed03-23b1-4e34-a6fc-fc1bba1f7bbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d60112-67fd-451e-b1f7-6b4bacddf8a1",
        "cursor": {
          "ref": "541029f4-7b06-4410-8a53-198f71270f5f",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "dfc77ba4-a357-4494-8261-4f4ec45257d2"
        },
        "item": {
          "id": "b6d60112-67fd-451e-b1f7-6b4bacddf8a1",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "0d7056d5-4dc1-4eb2-815d-14d1da742ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7fe1221-7bca-4e0c-89f2-024e951470cb",
        "cursor": {
          "ref": "6b8931f7-a3d3-4133-af95-35e13b023aa3",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "53c9fa49-882d-4b41-a3d3-19f25a62da47"
        },
        "item": {
          "id": "d7fe1221-7bca-4e0c-89f2-024e951470cb",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e7e6fcd8-d116-46db-b753-73c0aae14252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9236d29-250e-4fa8-ac82-6ee39bf6173d",
        "cursor": {
          "ref": "62152ff3-75e0-494a-9a24-bb2eae977f09",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "278ead44-6c5e-4267-90aa-242267ae7dbd"
        },
        "item": {
          "id": "a9236d29-250e-4fa8-ac82-6ee39bf6173d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ed98e571-4c36-424a-ab99-5226ff275226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56255db3-f2c2-4b55-a9cc-5067619e7d03",
        "cursor": {
          "ref": "975c0310-c128-49fa-a467-179f99e85f44",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a02ff4ec-9b3c-49e5-9cd3-474e15af0c9e"
        },
        "item": {
          "id": "56255db3-f2c2-4b55-a9cc-5067619e7d03",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0e2f98ef-fbc3-4efc-ae4d-5c8a547681e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf30fc5-6530-4fcd-89b7-7d2cffd08269",
        "cursor": {
          "ref": "27bc9941-1d3a-4252-89af-9523d8553137",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "88888fc8-dd49-4b9a-b6c6-17aa6f1300d2"
        },
        "item": {
          "id": "bcf30fc5-6530-4fcd-89b7-7d2cffd08269",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "82d2ef90-a2a1-40d1-9fb6-ae1814284e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29126c1f-c9dd-4c4e-9083-8442efa45581",
        "cursor": {
          "ref": "ba50f4fb-2286-4457-a0ca-8e42d9abee3c",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e4f8db4d-7e98-41f0-a78a-8522d6b2abd6"
        },
        "item": {
          "id": "29126c1f-c9dd-4c4e-9083-8442efa45581",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "80cb5592-0c1d-4851-9384-83d9b40eefc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a26be9a-f6c1-4fe7-963e-68e5cdcd984f",
        "cursor": {
          "ref": "c143b14b-4b00-4098-8a12-7fe39ceeb90a",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "531f0bde-9b45-4106-bafd-22c032257853"
        },
        "item": {
          "id": "2a26be9a-f6c1-4fe7-963e-68e5cdcd984f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7e388a1a-7a3f-4985-934f-cdefe4c9356c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139dd115-2684-4ceb-a4d4-4c090ad9ea6b",
        "cursor": {
          "ref": "37ee443a-97a8-496d-8532-4b2927109b8f",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "54a356c8-e569-4dd3-a4c4-7a8b4b87afb0"
        },
        "item": {
          "id": "139dd115-2684-4ceb-a4d4-4c090ad9ea6b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4709cc36-52cc-4ced-af76-e409241c49f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "decc1048-b2ff-4fcd-9639-91fde287cf93",
        "cursor": {
          "ref": "1b7484a8-4da5-4ff3-9429-4bc2ab5f8372",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f61515be-a4f8-49a1-92df-b43902beafc1"
        },
        "item": {
          "id": "decc1048-b2ff-4fcd-9639-91fde287cf93",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a242bbc9-e3e9-480b-a6c4-9b51e0d9e78e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6156ef0e-bbb7-4693-bee6-8c64c226bdc6",
        "cursor": {
          "ref": "fb113252-5d7e-4485-8eeb-83e4aeed0073",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d95ffec0-7b4f-4398-ba5f-5b43298f395a"
        },
        "item": {
          "id": "6156ef0e-bbb7-4693-bee6-8c64c226bdc6",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "aaa83daa-8142-4c27-9235-40e8969f56ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c74619d8-58eb-45fc-9c7e-3bed95ff6c77",
        "cursor": {
          "ref": "97bcd918-f99f-4c86-8f84-13a063b6a43c",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b57794f0-48b8-4643-9510-41b0f12886bf"
        },
        "item": {
          "id": "c74619d8-58eb-45fc-9c7e-3bed95ff6c77",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5c955c41-d74c-4ff4-a9cf-0ed58c4ca644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a8abe1-e9ce-492f-a4a6-fa38f9a96437",
        "cursor": {
          "ref": "c63fc8bd-855b-44cc-b24e-e245bbd0cfbb",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "fb26f8bf-a74e-4c0f-ba93-e5dffe4edb5a"
        },
        "item": {
          "id": "d7a8abe1-e9ce-492f-a4a6-fa38f9a96437",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "574f42dd-d56f-4651-bab2-1c8bc4f064a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040277c5-2679-4516-82dd-14e0a634057b",
        "cursor": {
          "ref": "6e1b3d3e-b962-4d6c-acca-8a9976b95648",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3bbd0b63-e31e-4155-8075-1bf13bbb265a"
        },
        "item": {
          "id": "040277c5-2679-4516-82dd-14e0a634057b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "7bb59f9c-cca4-4b2a-8593-4fc1a7e508c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b6b1ff-2f1c-41af-bc3d-96eb208b7089",
        "cursor": {
          "ref": "7be061ef-9e24-405f-a315-4c3fa5ffb9dc",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "931f1c2e-e44c-4b31-abb8-2c1273d01955"
        },
        "item": {
          "id": "04b6b1ff-2f1c-41af-bc3d-96eb208b7089",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "212fd450-c7eb-449b-8274-1b9fd72c13cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc412685-ca1a-47ed-9ae1-352b7bb5c815",
        "cursor": {
          "ref": "c156c66c-4a50-42a8-b9bf-0f3cae9bb423",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7b20be0d-cac3-4694-a8d6-b8c8ccb3e6e2"
        },
        "item": {
          "id": "cc412685-ca1a-47ed-9ae1-352b7bb5c815",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e15b9635-dafb-4101-af1d-bfb09fa50dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601d8d51-9799-4f06-8483-151ae823d3b8",
        "cursor": {
          "ref": "47a03c07-950c-4487-8ea5-bbf597da037b",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d6a2e597-6db9-4734-8ed9-a627919ba61a"
        },
        "item": {
          "id": "601d8d51-9799-4f06-8483-151ae823d3b8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "63ba40b1-fd01-4376-9e85-b4c0d7765185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e20f09e-a2be-4f4c-b3f9-4987f36b4dd5",
        "cursor": {
          "ref": "81f1654b-d24b-4e61-8968-b9d613c56583",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ace6bd18-cb53-457f-ac39-39c3362962f7"
        },
        "item": {
          "id": "9e20f09e-a2be-4f4c-b3f9-4987f36b4dd5",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "62c30b57-1c1b-4a30-babc-e8b2193a94e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4264a34-933e-49a4-aa22-0785141af5b0",
        "cursor": {
          "ref": "88f14391-1b67-4ff6-8134-3e51a46eefdf",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "80e04687-5c76-408c-904a-14fc91f7c3a8"
        },
        "item": {
          "id": "c4264a34-933e-49a4-aa22-0785141af5b0",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "acd8ab1f-7d4d-4540-97af-ff0a9f4ece18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "495101c6-78d5-4d2c-8d97-338589f58a1a",
        "cursor": {
          "ref": "1abf8e67-a9f9-41b2-b5dc-3a2df98154dc",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "ff85b6c8-e67c-4f77-8427-58727acfe923"
        },
        "item": {
          "id": "495101c6-78d5-4d2c-8d97-338589f58a1a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4140505f-d019-408e-9a48-df05e822abb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b88a682-8d96-4127-86c9-76f43df2330e",
        "cursor": {
          "ref": "fedd92a7-7aa6-4aca-b8bc-0841f5650da4",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "736bd304-906a-436a-bb23-4d6d2a54b23b"
        },
        "item": {
          "id": "5b88a682-8d96-4127-86c9-76f43df2330e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "edf6ba05-3329-4b46-89e8-ab1828f53864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da6e7cc2-165f-4601-8daf-073002b077e8",
        "cursor": {
          "ref": "22ff4132-685f-41e4-b340-048b4b59ee3f",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "523af90d-f612-4091-991f-97fc6a7f2b7a"
        },
        "item": {
          "id": "da6e7cc2-165f-4601-8daf-073002b077e8",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c6a1c503-f33c-457f-880b-26e90e86a43a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429085d0-9a5c-421a-9df3-e67960002afe",
        "cursor": {
          "ref": "19c2e607-1ec5-4ed3-8bf7-ac334205d9be",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "850ff390-ae29-4481-8202-f85717b06c15"
        },
        "item": {
          "id": "429085d0-9a5c-421a-9df3-e67960002afe",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "731184a5-7631-44d1-bc95-df5be15ce3f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91bfd599-78ed-438f-8038-5430963c20e3",
        "cursor": {
          "ref": "8ad7719b-3315-43fd-813b-15fb7f28de4e",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f4fa8872-39ff-41ee-86ed-df463644bfbe"
        },
        "item": {
          "id": "91bfd599-78ed-438f-8038-5430963c20e3",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "20e995bc-2314-42e5-bd6f-aabe7d2928de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e64c8454-2c63-4c91-84eb-d25797160323",
        "cursor": {
          "ref": "8cdd6605-b8d0-47d7-9d42-a10f930dc082",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2370d81d-1290-49df-9fed-8c3fe340c6fd"
        },
        "item": {
          "id": "e64c8454-2c63-4c91-84eb-d25797160323",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b9c68f29-fed8-4390-9ec6-a53420a312a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55308da5-fdb9-43dd-93fe-665a6df690ac",
        "cursor": {
          "ref": "a6df6539-242b-4a95-991d-148af5cef94d",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8431c31a-0b39-487a-9a89-8dc711af1f8b"
        },
        "item": {
          "id": "55308da5-fdb9-43dd-93fe-665a6df690ac",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "7cd60a33-2698-4634-9a19-9518eedf488d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3771caeb-11ba-48fb-a85e-6a0ea5d7c224",
        "cursor": {
          "ref": "7b5db635-88c2-412d-abac-1e35d99d9784",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "0acc29c1-e08a-48dc-b566-f4b991c79097"
        },
        "item": {
          "id": "3771caeb-11ba-48fb-a85e-6a0ea5d7c224",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a67e3743-3411-463e-b55e-0576017bb87b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f884318c-ef7c-4a22-82c9-7ed5120ac36d",
        "cursor": {
          "ref": "cfee4363-e8c9-4c95-b6b2-95c42034d76e",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "04a5d01e-a9bd-4a28-86e7-496a150127c9"
        },
        "item": {
          "id": "f884318c-ef7c-4a22-82c9-7ed5120ac36d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "93e78852-c17c-4ebd-be75-b3a5644dc144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5067e2c4-d481-4388-b134-92243e0423ed",
        "cursor": {
          "ref": "e2c7cc89-a46f-47e4-aa4c-927c3ffa61a1",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3cbe8d96-a48e-4289-b764-a4cbcf7f7720"
        },
        "item": {
          "id": "5067e2c4-d481-4388-b134-92243e0423ed",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "81b14a57-6d90-4243-a114-e5b39d687c9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3c6d39c-f3bb-4203-b9e5-3e658bf1cd7d",
        "cursor": {
          "ref": "94886096-e180-42bc-928f-30fba1e5e596",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5f1eb17c-a721-4d45-9750-1b97944765cf"
        },
        "item": {
          "id": "d3c6d39c-f3bb-4203-b9e5-3e658bf1cd7d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6db25cf9-d087-4d41-a040-0d041e830485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81546404-1724-4d41-a6d1-de797f72c9fa",
        "cursor": {
          "ref": "3eecb242-e855-47f5-9afc-277b6e0a66d5",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "cb95ea61-cf78-492d-8c00-3cbd157aef1e"
        },
        "item": {
          "id": "81546404-1724-4d41-a6d1-de797f72c9fa",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5f9bced9-5c15-4b15-a42b-5b05b6403c6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dd785da-d68c-47f2-87b0-33883dff8ec2",
        "cursor": {
          "ref": "c6ba66f2-9f21-4d71-8e30-492b6427fa1d",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c87eede9-25da-4867-beec-9d192ad4add1"
        },
        "item": {
          "id": "5dd785da-d68c-47f2-87b0-33883dff8ec2",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d727019b-cf72-45ab-bcd2-2db94fbeb938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ba5db3-0a58-4c28-8565-3450c1b2209e",
        "cursor": {
          "ref": "834ac5d1-e4c5-4039-b500-4796597387ec",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a7760467-0cfa-476a-addc-b6952684f9f6"
        },
        "item": {
          "id": "a6ba5db3-0a58-4c28-8565-3450c1b2209e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3f90ad3c-20b2-4a33-8151-101fddd717e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64aefacd-0ff5-4401-a063-121946fc0559",
        "cursor": {
          "ref": "15a8a607-ba47-45d0-9637-67d4fdf2f69b",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0da04bd1-e553-46ba-aeb4-f0e121f3953f"
        },
        "item": {
          "id": "64aefacd-0ff5-4401-a063-121946fc0559",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6294ef0e-5e83-46f9-b494-f875c7d2610b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5d9398b-e42a-44ba-bef0-e0ff72a23d3b",
        "cursor": {
          "ref": "ffc51f42-6b23-4f19-97c2-82c4ec3cc5f2",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9b570253-07cd-4560-9dd9-daf553c2652b"
        },
        "item": {
          "id": "f5d9398b-e42a-44ba-bef0-e0ff72a23d3b",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "fb149d49-99f4-4ff4-aabf-0ea4aa343502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23848443-2fb5-4b76-a710-d5f6a4e14e29",
        "cursor": {
          "ref": "6ea6a280-377a-4db3-9d5a-0e7625844560",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2caabdb4-ac24-4e30-9650-89e48910200f"
        },
        "item": {
          "id": "23848443-2fb5-4b76-a710-d5f6a4e14e29",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9187ef1c-acf3-41fc-b8e9-31f221d14af4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a646a9-e3cd-4e0c-bbf0-ca0b338c2e53",
        "cursor": {
          "ref": "f703ec09-ac2b-47f8-b853-3a5f2198f37e",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "4b256bbf-d48e-4dd3-ae7b-37514392b73d"
        },
        "item": {
          "id": "a1a646a9-e3cd-4e0c-bbf0-ca0b338c2e53",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ed000f74-0d37-4ec1-8244-4bf2bcc24e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39fe6c05-fbe7-459f-9d09-bcbb2214e721",
        "cursor": {
          "ref": "7d98da6c-9bbf-4749-aa7e-8c70f76fb964",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0aadd1ca-785c-4543-b3c0-9cd582c073a7"
        },
        "item": {
          "id": "39fe6c05-fbe7-459f-9d09-bcbb2214e721",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "51d9f2e5-056f-4f1a-b5c9-5318039b6b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f8be73-58e9-4959-9908-3272d7b338c1",
        "cursor": {
          "ref": "0e2147d4-7861-46b4-93f6-4830dcf2256f",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "80295ea8-aa9c-4495-bebb-3f8d8ee0dbd7"
        },
        "item": {
          "id": "81f8be73-58e9-4959-9908-3272d7b338c1",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "82855a44-76e4-4125-96a3-491c26ccd8c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ec79ab-fba5-4a98-9111-3fffe0ce61c3",
        "cursor": {
          "ref": "1746a08d-5ba4-42b3-a4e0-9bf01a953870",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1f8b5d96-b5bb-4aea-87a5-6eae0b9231c3"
        },
        "item": {
          "id": "b1ec79ab-fba5-4a98-9111-3fffe0ce61c3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ee5a5d21-85f4-4f50-b76c-3f8400adad7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ae11507-456a-4b6e-989a-c60ade0050ad",
        "cursor": {
          "ref": "c56b00b6-c6e3-434a-a959-194c9f024efb",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8fe562ad-05f0-437b-8325-15495975ba9d"
        },
        "item": {
          "id": "6ae11507-456a-4b6e-989a-c60ade0050ad",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6e4e3a01-5160-4a33-a458-d4a0c1083df2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d734ec-ed6e-4836-895f-915ac0f266a1",
        "cursor": {
          "ref": "3efbfed0-13f0-42ce-978b-0a643f95bb23",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "60ef1729-1d25-45fa-b665-29037b351fc6"
        },
        "item": {
          "id": "a2d734ec-ed6e-4836-895f-915ac0f266a1",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d57eaa3b-f841-4da3-a780-36f8f20a8ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "809a2998-5519-4037-afef-6a09c2c76b24",
        "cursor": {
          "ref": "84ca5565-5857-47e7-a910-01d431634758",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2b80239e-0e75-4cd3-9771-76c9a0fa325e"
        },
        "item": {
          "id": "809a2998-5519-4037-afef-6a09c2c76b24",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "3e4f2015-9690-4b27-bdf7-ba2fe0e98bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc187274-d556-4d1e-8bd6-b36c3e66d963",
        "cursor": {
          "ref": "3cf85e76-cea6-49b8-b385-fcae80cc58da",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9ab605a3-2312-4cf6-847f-7372de3e7f5c"
        },
        "item": {
          "id": "fc187274-d556-4d1e-8bd6-b36c3e66d963",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9d97bb91-0bc6-430f-a857-f44291e24137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "858e85d9-291d-416f-a955-579e9b45833b",
        "cursor": {
          "ref": "073d7553-09bf-4d70-ad77-631b1dc6c7b1",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "bf7e2e78-3989-4498-857b-f2c971f2ee68"
        },
        "item": {
          "id": "858e85d9-291d-416f-a955-579e9b45833b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7bd55d19-8168-44b8-ab73-6ff393be59ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee15c14-464e-4a38-9d0b-873d933fd8bd",
        "cursor": {
          "ref": "3a72a528-ee62-4fb3-b4be-0abc440ada41",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "dd7b2e17-1679-4ebe-88a4-7f4518244bd8"
        },
        "item": {
          "id": "4ee15c14-464e-4a38-9d0b-873d933fd8bd",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "54b39a4c-b950-43a8-9700-c735dcd8a9fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "147036e9-9893-4abc-a38a-63cc2a659806",
        "cursor": {
          "ref": "9f15b4f7-deb9-4973-8cba-307dc9beb7af",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ec6f6ab1-75a8-479d-9b52-2aeade4f8337"
        },
        "item": {
          "id": "147036e9-9893-4abc-a38a-63cc2a659806",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3be05b00-ea5c-4e2f-8f7d-d49f102272f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc8d52e-e597-465e-8c55-6bbb35c2c392",
        "cursor": {
          "ref": "a879f8bc-c66a-4104-bfeb-8351a44e6a3b",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e8769429-1059-4743-9e14-3bd778fdf68a"
        },
        "item": {
          "id": "bbc8d52e-e597-465e-8c55-6bbb35c2c392",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "426a7420-904d-411b-b6f4-b2fa1b4e9bb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3de1e06-b304-49db-82dd-91fff72a654f",
        "cursor": {
          "ref": "7d0672aa-a31b-49ff-949e-e2f03b71e127",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b490ada0-ebbb-4b3b-9f53-9d72ddbc590f"
        },
        "item": {
          "id": "c3de1e06-b304-49db-82dd-91fff72a654f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "802622f5-a21a-46de-b98a-de96f079a724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d911f12-c734-4812-9d48-dfc71459e51f",
        "cursor": {
          "ref": "609d7725-97a0-4952-8c8c-c5c10491bc5c",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4da2a577-6970-4884-978a-77836297e09c"
        },
        "item": {
          "id": "9d911f12-c734-4812-9d48-dfc71459e51f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "05839159-5cf5-4865-a0cd-f37120a03448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "597879ca-e823-463a-8853-23e45332b70b",
        "cursor": {
          "ref": "a1460103-a14f-4fa7-9e51-06e04d1bfb3b",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "086e9d89-1ffa-4119-b047-273910584ea0"
        },
        "item": {
          "id": "597879ca-e823-463a-8853-23e45332b70b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "161d2519-d448-4909-9d59-4beabbb4d306",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f59fd050-94b7-44e6-be4a-ebe5fe282739",
        "cursor": {
          "ref": "0e448b0b-af27-4e6f-9168-b547a360b9c5",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e396ff61-14b6-4260-b162-6d44d9a8d24b"
        },
        "item": {
          "id": "f59fd050-94b7-44e6-be4a-ebe5fe282739",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "b05d05cb-1851-4ad4-9695-05b8e5a2575c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "51de8306-e594-4f43-ae3b-3d5e9519edcd",
        "cursor": {
          "ref": "041afa8d-dcb5-4ace-b00e-cd39b9f46dbc",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "23ab080d-8cc1-410e-874b-56cfabb04f1d"
        },
        "item": {
          "id": "51de8306-e594-4f43-ae3b-3d5e9519edcd",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b41c2ed1-3f11-4554-92b8-776c2118c066",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23705d9-5f6f-4719-bced-d6ed4d4d254b",
        "cursor": {
          "ref": "27ab5c04-4ac4-4157-b073-aa847d13d6ec",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1bbc7e25-75e8-4a0f-a6f1-9935ff21bade"
        },
        "item": {
          "id": "f23705d9-5f6f-4719-bced-d6ed4d4d254b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0d4b8f89-7913-4e9f-9220-a95c32b5e819",
          "status": "OK",
          "code": 200,
          "responseTime": 2282,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4bd3f7-83ca-4ea3-925e-9358bc6ea3c8",
        "cursor": {
          "ref": "b207d1a8-c8ee-4731-b05d-c0035711d886",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7748f5ec-95f3-4931-bfc0-9ad3079a7a79"
        },
        "item": {
          "id": "9f4bd3f7-83ca-4ea3-925e-9358bc6ea3c8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a6f46856-21a5-497f-850f-bc72b44583da",
          "status": "OK",
          "code": 200,
          "responseTime": 2261,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e96189-5464-4384-a490-4a8d4d7f653c",
        "cursor": {
          "ref": "20eba831-2398-4448-8125-8f5d8425349d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0c238854-3732-4bba-bd13-0ce9212d2465"
        },
        "item": {
          "id": "e2e96189-5464-4384-a490-4a8d4d7f653c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "114ba450-465e-4563-b040-9ef1219a5eec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "e2e96189-5464-4384-a490-4a8d4d7f653c",
        "cursor": {
          "ref": "20eba831-2398-4448-8125-8f5d8425349d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0c238854-3732-4bba-bd13-0ce9212d2465"
        },
        "item": {
          "id": "e2e96189-5464-4384-a490-4a8d4d7f653c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "114ba450-465e-4563-b040-9ef1219a5eec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "e2e96189-5464-4384-a490-4a8d4d7f653c",
        "cursor": {
          "ref": "20eba831-2398-4448-8125-8f5d8425349d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0c238854-3732-4bba-bd13-0ce9212d2465"
        },
        "item": {
          "id": "e2e96189-5464-4384-a490-4a8d4d7f653c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "114ba450-465e-4563-b040-9ef1219a5eec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "ff3146d5-2efd-4208-951c-9d8a7e828cb0",
        "cursor": {
          "ref": "80867dad-7346-4472-9142-4a3a8afcfe62",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "52ada53d-83d9-4ba8-aee4-427aaa8b5d50"
        },
        "item": {
          "id": "ff3146d5-2efd-4208-951c-9d8a7e828cb0",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "4052cd98-65ba-455d-9015-001c5e415d50",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "d0bcab39-e100-4c69-b2e7-9c0db92ee6ec",
        "cursor": {
          "ref": "24d3859f-d4f8-407b-a758-17fd9e023c67",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e4f65b13-1951-4475-a268-451679f66804"
        },
        "item": {
          "id": "d0bcab39-e100-4c69-b2e7-9c0db92ee6ec",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1681d5db-6064-45c1-9a71-b06edd0334e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "d0bcab39-e100-4c69-b2e7-9c0db92ee6ec",
        "cursor": {
          "ref": "24d3859f-d4f8-407b-a758-17fd9e023c67",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e4f65b13-1951-4475-a268-451679f66804"
        },
        "item": {
          "id": "d0bcab39-e100-4c69-b2e7-9c0db92ee6ec",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1681d5db-6064-45c1-9a71-b06edd0334e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "c3d5236f-ba85-467c-9b22-9e8354d2bc8f",
        "cursor": {
          "ref": "a5dc7547-8a4f-4def-9975-8c6537dc12e7",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d4948445-5641-4628-ab24-1d962e25f44d"
        },
        "item": {
          "id": "c3d5236f-ba85-467c-9b22-9e8354d2bc8f",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "2a7a7abc-33f9-4c19-8b87-9ca437b7d935",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 176,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "c398e83d-7f7a-4c8f-b959-bad7f38f3ec0",
        "cursor": {
          "ref": "518e4d18-8218-49b8-b63b-b18f243ac6c7",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c00a2d20-bc96-4748-ae7f-65598d330dbd"
        },
        "item": {
          "id": "c398e83d-7f7a-4c8f-b959-bad7f38f3ec0",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "62909f7d-574a-43c4-ad7d-4701bcb93e24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "c398e83d-7f7a-4c8f-b959-bad7f38f3ec0",
        "cursor": {
          "ref": "518e4d18-8218-49b8-b63b-b18f243ac6c7",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c00a2d20-bc96-4748-ae7f-65598d330dbd"
        },
        "item": {
          "id": "c398e83d-7f7a-4c8f-b959-bad7f38f3ec0",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "62909f7d-574a-43c4-ad7d-4701bcb93e24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "70b55a06-f46c-469a-b66f-143a1e270b2c",
        "cursor": {
          "ref": "1d26d978-baf5-42c0-bb75-94db8f478850",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "16cbd8a4-f72a-4226-977c-17613eeaf039"
        },
        "item": {
          "id": "70b55a06-f46c-469a-b66f-143a1e270b2c",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "559c8012-f603-49ca-a16a-d3fc8031eeab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}