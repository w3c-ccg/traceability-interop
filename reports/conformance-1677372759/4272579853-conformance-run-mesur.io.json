{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ee1d83f8-3e67-46ea-8b22-668440492b15",
        "name": "Clear Cache",
        "item": [
          {
            "id": "74ed4194-5fb6-42a2-80dc-98d1765cc07a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9d3ab30d-092a-4c7e-974e-65afeb8365b8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e455aea8-35f2-4d38-bfba-674098f08530"
                }
              }
            ]
          },
          {
            "id": "7dd5434a-4911-4e46-8467-e86bba578eaa",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "087c05f6-94fd-409d-aeec-cb0c57fc2ac0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "45a9ef9b-a858-4b81-872c-c462449f8c40"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "cf594c6e-f51a-4db0-8f82-0e0d78a5a475",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "22ea65eb-f6f6-40a9-a11f-400b926f24cd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a57be9cb-abdc-42ce-a57c-cbaa1e922cfc",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b334df93-afe3-4d41-b1e3-3e1c2daae9d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a527663e-2819-4e81-8aea-538dbcef03f5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9f5eef80-4a57-481e-ac0e-0724e397f862",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b6dcd192-018c-4d3c-ae22-8b037a724171"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9758482b-5bf5-4dd3-ae62-fb7b1d94b2fe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dc2ec0f4-1f9a-437e-afa9-d8bd4011bd88"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ff997bf0-e338-4461-a70d-82218e741373",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "2f644a7c-d4c9-4df3-be2d-5e30f9ec5501"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6394ee22-0d8b-4ae7-8c46-62663305c054",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ec94f5f-e8c2-4864-8c87-e57f61a3673f"
            }
          }
        ]
      },
      {
        "id": "809f2e6b-2563-4583-88a6-bd5c384267e2",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f00dacb4-0fbe-4827-8652-d5baddfbb34d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "46309d1c-a612-435c-b4ee-3f24a6aaa8cf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8941c990-a72b-47bd-8097-9646f2ca5793",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36def5bf-a607-4dcc-b84d-0e99b4475512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf042b67-14fe-40b5-9dc2-52fd47ff2eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641ad79f-c1ca-4f13-942e-a472ad2f6650",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f58e69-9e9a-45eb-9491-eca88d620a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad0f6f44-5d2e-44a3-b09d-a614afe8abb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e577c39-63ca-46a6-b3ff-22437696a8a5",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5800b4-acb1-4076-9041-58c2aa7858a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d1d28a2-4f81-4904-bf81-368403d1264e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "92feca3b-afb6-4b29-9c47-a2b46e627cab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6b897ae9-35fd-4b0c-9d0d-1553176082f2",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ea46ed-5d1c-49e3-9c9c-f8c79f2c6898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "424a0b02-bc0c-4ff1-91ea-6aaeb65ff1b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34546a94-65e3-4203-9e3e-8a2531e315a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ebf387b-f49f-417d-8942-ddd9a8b77fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b728dfb1-bd58-4583-bd05-f81572951c4c",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7876ace8-3a86-4c70-a1d3-f72cad66d142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98087594-3e67-4293-8f6c-5c8542d72213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1611a800-1f56-4b74-9617-f568fa63c881",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "d8a8a6b3-ad43-452a-83e6-74aedb69f4da"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2ab9787d-bb49-4a5d-9a1b-00fba8161229",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9b5369ee-1664-4876-90c7-f2cf30e4db4a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cdf9af2-4fb1-4350-97de-dfb724036614",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "dd566e66-00fb-43b2-aa0b-19c4eb01e1c1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3eb2609b-177a-4abb-abc9-204678882147",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "a8a199b9-1935-46d8-9295-c3d4c68f7099"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "87330de7-2b01-48df-80c7-22db30144c7e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "80785500-0867-496c-bb16-fd4bc4dd5377"
            }
          }
        ]
      },
      {
        "id": "0c7c2adb-bacf-478a-bce1-947b900fb34e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d9fe4a8f-2f0a-4b9d-b8d4-d43cfbeb9084",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a30f9d43-77d3-46b7-bfdd-d50b57734bd8",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "991923e5-7b65-4f09-b6f5-db2b56c34cd6",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5632a769-0f73-4737-ae75-7e2a7ea7dbad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db7a319c-6a70-4f4c-8775-0481e852d6ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd4d9980-fa3f-49a8-9b9f-534fd7ea3c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4309e407-aef6-49b5-9631-b02bb80b91ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dcfc697-bceb-4f08-ab2d-c56ebba0530b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c5a55de-d461-479b-a418-e1a0d0a387fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ddb86a2-160e-4b0f-a318-ea4ef40be43a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f0a3bb-c148-4030-a4b9-17d1131f8ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d591acfd-1a71-4cca-9b9b-448db49e9c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227e454f-5fa4-498a-8f3e-be88446e4e26",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc386840-63d3-420f-93a0-dbec06d9ef20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "029d3262-ae60-4a56-a69d-1949bcb96514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427ab156-ffcd-46fa-a0a6-099db4c576a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d417e17d-635a-438a-8299-d15e879f3140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1a1baa-3039-4692-bb1d-2520c41d1893",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c54585ea-44b7-445c-9be8-e0900971a54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a082202-0bbf-4d31-a60c-56c62cc810cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "409aca0e-a418-449e-b0a0-a8ee53fabc96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42d27d1e-d34a-451c-bd7a-1ce26ac27432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa2280e-c365-4b19-af01-9d8893fd7e1b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b3a229a-ded1-4543-91c2-4b0bfec70241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e52540bb-76c4-4065-ba9e-ff9e16cd51ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96e728c-b628-423e-97e5-0fc82b6c68be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d2bfb14-17aa-4f29-abf0-a19a2d9f4f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5c3d21-2211-4c64-b9b1-8ebe32a99fa5",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ddcd16f-4982-4991-bf22-7d3c14dd2814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "413e34e7-3b65-4081-af25-95b88840109d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f163a74-1de2-4e34-a8fe-da3ef287cbfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0595380d-3ff1-4f9e-bb08-a51ee68eb5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "577fbace-4c01-4836-b8d3-3e00d6aa8504",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b8b84b7-17a8-4254-826e-e0e98a052ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d24ddc8e-0924-41fe-a222-7e5e79251926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d49dac6-02f0-4947-8575-8d917f4a091b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3299a339-5d53-4da5-9545-e9ad0b3a1d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74482878-267f-4092-91c1-be260caefcae",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b99b2c4-f8e3-4e2b-bff0-e3204b451e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89077613-5346-4858-974c-aa45828a8c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc0da09-870b-4827-9fa5-4470081d5bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e90556d-65df-4b00-b50f-0e63d7d52c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b4ea2e4-be49-4f5d-873e-fb22a0de0b10",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce1df42-2cdc-41fa-99f2-b73f34af51a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8998ece8-46e3-4763-b177-9d64c3a0256e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "876335be-9f3c-418d-af3f-8af832de1f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1115e17f-600d-4b2c-94f3-0fe6f6a7d8e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae0a1aa3-98d4-41d0-8abc-1fe895cdfc39",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bfef313-4f16-4e7b-94a2-8d66ea0182b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee1a126d-92ff-43d6-a1e6-47eccedd63f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f02a2c-446a-4ccc-8f42-8d4c707d06f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cbcc3e20-8dcf-4a93-a016-e34c6e2c3683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1156b6c1-7c32-447e-919c-c86854333786",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71493a6-7144-46ed-a845-0c8c0feff17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "082668c6-3d41-41ac-a032-868e93add47d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "facc5251-08ed-42f6-b026-85f41d58521b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "244c6bbf-dc16-484d-9f80-031c8748f6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b58a34-9e81-4fb8-8796-49066d4e8c93",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecdc2dee-c3ca-4ae8-82fb-22ea2ecae73c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1e4d94d-da9e-46cd-9b90-b828c06217e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54eaab1-e197-4ae8-853c-a7dbfc7ff91e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac497ca4-77c9-4c5c-81b2-e02a2a843c46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6373c15e-32e4-498e-bd1e-03cffb389e07",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e794d09-fdfe-440d-98f3-af17ee00903f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d86f3a3-693e-4bc4-9155-396604793230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f35c4a5-b5f4-49df-a4ce-eea1b0682c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55197d79-7817-435c-9b4a-ba6da1edebc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43ce867-80a9-44f9-81cd-9981179aa831",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35232bc0-60e7-429e-be4b-81985703b9df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58ac5267-1bd8-4121-b768-1a8902d190d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b153b1b4-e222-4640-ab32-cbf90ee981d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b352abbb-2d79-48d8-85ed-38f21fe46ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c4e42b-ebf8-49d8-9d41-eb67558e6651",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3086bf5-c08b-4131-95f8-a59f05b1c59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d77614-81f8-4e35-b4b5-ad4b57d03c15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e126eb70-7fc4-4c14-b555-4a2af7408902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc543a68-b3bf-4cfb-bcfc-d354805f9d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "497fa8e4-abec-4472-9436-2bb49b87819f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "377d4a85-65ea-41ef-8ff1-c1f654e7cc22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bd8376c-d727-4074-b395-09148be6cce7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d230e1f2-7ab9-4db7-b0f5-eeeb5556e382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "594379f0-ae61-4936-b6e5-8227a71a35b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "408c3d31-4467-44d3-80d1-9c6580955910",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b979e4f-4dff-44d6-8e66-4803d88e69af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "703aa1cf-4c36-405e-b255-a29a9556483b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e631467b-c69e-4cf1-8396-adb8c2d2b63a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5635108-17b8-4ced-9273-24331e88a339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54752e31-9afa-47ea-a9ca-53235576819a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d8ad52-6d57-4228-85e3-697ac84c5807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61f96d32-35d3-4ca9-bcce-bae3b02198e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba37ae74-1508-4b5d-8284-5c280d2fd016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "61f2ce33-e6cc-4811-9b17-309ff9320e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf8761e-32e7-458a-bd53-72ceb2d95649",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d88cd85-14ff-458e-adb6-9d49bdc96d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "345953f4-77f1-4614-b194-366abca6a829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf2a8b64-13d6-415c-bd92-70a0fb037915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fb3c1be-c875-47c8-b3db-de6276ce6e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d2d43a-ee15-448f-b05a-6b286639bacd",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9962c8-29fd-45f1-97ba-6e82d44e2da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46b2c78d-17cf-43ef-b18a-7cb1a63a5231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "470f8065-4a55-4f5d-b6d9-edc1a7bf3c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e2c0cf6-56ef-485b-aa5b-8ad8989327b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94a483e-0ca1-4ab1-9eef-331dd012d163",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13445c57-3cca-4c2f-8564-10a2afdf9499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec81897b-149b-416e-85e9-20c2aab37337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36202cc0-a667-46c8-9e69-53ee791d12ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5feebb8-5a3d-4fdb-972d-69f965c959b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744e471c-f433-4146-955c-1438bea0b7ce",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "109a4185-146e-4b62-9133-a24b420b0445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f226043-e846-4d22-b35a-44731791d5f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b1c009-f834-4469-8b68-b0843fe85ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "26397b9b-3a5a-461f-b2ce-46df582c1c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b74c16-4345-47b4-873c-54785230351b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce35f6b8-adf6-4bde-9ddc-2af6e802086d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3e4f0df-a78b-4ec8-8e0b-b01fdfbb87f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb424ed1-dc9b-4713-acd8-40f5be0d349d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "939de4fc-8067-4383-9b7d-b72422749a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d425ac6a-af9b-46d8-acae-183409a749de",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40833220-d824-4f8c-b465-9c63238a1adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bbac974-2333-4139-bf5e-d92341adaebe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347f768d-e9d8-4e80-9ed3-d1049b1a1766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b3ddac0-7e6e-424b-b986-60eb2a55385d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9aec8f-f5b8-49b0-8367-d297f1c4e4c0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e111458e-9f0b-4e04-b0ba-bc9ceb047aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc769b30-6cd5-4999-a8ba-984a52e9cf2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b625beb3-3f7b-4edc-9220-faa4054afe68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c358455-3ab7-4490-ba6c-641840a9398c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2bc2dce-6f62-4c2a-a8c1-af7351d49536",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e5d7dcd-4c50-4106-80d4-2eb141949143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adf0134a-1775-4afe-a626-0f558a88e65e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded17c4c-1f1c-477b-a517-a4fd34e331be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "12eaaeb7-171f-4220-9822-64a15fbb33b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "707b3d35-0b53-4de7-88a4-f0afd8621a1e",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef2f1981-e913-489c-b3f4-eb5dd0dbe8e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c07c49b6-f7d4-4d2c-8901-7cad8291e230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c214c9e7-4655-4e93-b781-1e7663910480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "17308bd5-9e34-44eb-9208-d13bf606bd3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b24254-0c83-47dd-a23c-751291e3a3e9",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a10ba1fb-285b-4e22-82c0-bf95be65b476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e918871-df3c-4451-918f-a4f87d18794e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ab947a-9268-4538-995f-02bb1919503e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e60354b-11c6-4a8a-b04f-c06ea15bcdc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f2758c0-0142-4086-8b45-f33de66db8d4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9acd27-fe1e-4204-a61f-796116907aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e44be910-1156-43de-8cf6-090c0219340b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f30b3fe0-b81a-47cb-8d6d-6b00d9994695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "986d450c-a25d-42c7-bb19-bb205597b477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c2dc620-7dc9-4d37-8cd6-4f0f6009d8a5",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc64a7b1-29a7-4372-aa57-76eeccf8e6a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d9bb9a6-11b7-41b0-8047-9736cb1334ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d62454f-8582-4441-809c-629f9a6e7a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "92a13632-bd02-4bcf-9ebf-6a25f1c474f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ab1f8f-a1eb-40ab-87c4-b98b09396de8",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bbe0f7d-ae7e-4b45-b14c-0e3ea857fa62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "585b973f-4399-4ffa-ba1f-cb45305aa4ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "639ad7fc-ffb0-4511-b1f1-ed2cc08e0923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "531a20a0-7e17-42f9-9761-06a49d905299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44833d6d-eb7a-4b0e-9a18-1e1365413c7e",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61059b1-f97d-4668-aad2-1253c6273fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f06ec5a6-3314-4233-99a9-8c1c5becfa2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844a87e5-2ec6-4ca0-aa5b-98967dfca63a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a246ecc1-429d-482b-9c30-496344e2a278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28509601-7da7-4f33-abc8-8b11a9641e23",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06ddf53-6c48-41ab-8f4b-dbaeb585127e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5927eadb-f687-4c84-a459-15cea688b54e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74909b43-9490-4a7f-ae59-f75140d61ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f381edc-ff97-4b99-aec7-61625b607252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a69235-a66d-4415-86d8-391b3ec11f5a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27b28b9-7fd8-4084-be68-acd67cf860e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8f76427-9ed2-4388-abc7-5d9949b08c2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c070f730-3a76-499d-904e-be6ce188ee09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a48cbaa-1949-4086-a7a7-8d6df3c460f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7b3bac6-440f-4aa1-ada0-b00b86dec56a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8d8523a-b390-436e-813a-d57233464e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "403a233d-fb77-4126-9e1d-83a590d64019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "094333c6-ecdf-4bae-9d6d-2af272bc3f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "318e9b68-e6bc-4ec9-9b02-69e8bd1c3a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8626ef33-9ce7-485b-a895-ba8dd2d473c6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd4dbb0-bc58-4967-b7db-af7aa6de06e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "177f49fb-3cd3-45cd-a05a-9104f9bab48a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0cf783-f621-4fd0-b9d5-702562cfa2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "90131602-2503-4332-82fc-a7f7e3a47945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f7bb5e4-a934-4edc-a4a2-d8bcc132d562",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee050a8-1381-40e3-835c-4507941fec2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e2f2933-4f35-4143-a4d9-e98f50268de5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9cbbb1-ca21-4330-a9eb-06e6b6e5089c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "36f80870-a356-4836-a25c-9a3a67130278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c793bd5-9792-4325-a720-7e63d1eb2272",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9389a657-56f4-4e43-9cbf-a24fcabc3435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd17908d-6792-4cce-8182-6502a873a549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec442db-e775-4e40-b627-8185ddb7cadf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "98fea984-7e12-428c-bc2a-35d21bf29ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "391de071-994d-424a-847c-508d0f92b715",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "667e5981-b62d-4d85-93ff-82b136d16c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a23f8586-b172-46a5-8043-38b04fde4747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194f11b9-6124-48db-a327-b0e727e49a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a80fe126-0942-450a-9909-92a90e91caa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67674d90-368d-44a7-9c40-4ab4b5eb9686",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6732e24-89e9-4bc6-b570-047f5677915d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc2df12e-b1f1-4c26-bfc9-3fb86abdfd52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae736f7d-98f6-41dd-bab5-31185e73f012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c519102-881e-4348-949b-c943590e0867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86469419-97b7-4553-800a-510d5d2945de",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab63a759-3653-4c3a-b756-1bc9a442dbeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4915346c-9c78-4af9-a637-d37ce6841866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748e5b80-5fbd-4cdc-831f-9a056322b757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d4166e1-7db7-4f50-b99f-87926f4e3a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c51cc26-c6b2-479a-be65-111999dcef94",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28497015-a266-40a6-ba33-16459fd1481b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96de7381-ae29-4103-a70c-76d55cbf9fb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a25bc83-f729-4c16-83a0-9422f839ea32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "9a0f5757-82c8-423c-9ee7-18eb28d54c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973f16ba-02f7-43df-a41c-e1a1dfeb078c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92cefec-f2ac-4387-aadd-593ad3785c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1f3e897-d012-494d-ab94-041d42974623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3197818d-2a8c-48a5-a2cd-1819adec03e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "70a0319e-310a-40bc-bf48-2187bd890f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c55e0f-791d-4a88-af6e-1086a5f9fcbb",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c163c2a7-876d-4c6e-bfc6-96e4f1675f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5878e37f-93b5-4d62-ba53-f13ffac4fcf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6bc913b-f663-4e89-b917-bfc4fe7d00a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fca81cf-211a-49ed-9987-d1e2265c930e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd36f86f-f3c8-4b33-92bb-04efbf52eaed",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd32cc9f-bc6b-4818-86e1-f5d1d01a146a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fa433fc-dc3d-4734-97fc-94f82d49f9c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5dc6a2f-915b-46d3-a981-4d3bb471c4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f3f79b5-1944-4268-bd9d-fad6853dd508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ddddfe5-1fa2-4d3e-923d-11825b07b970",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb89334-be04-40f6-a2ee-4af97813ebaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbdb26e7-3cd1-4dcc-b0e1-4ca2492c0658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6845b6d-3720-4f58-b6bd-2d9173e27d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c966784-8100-4ce1-a38b-75c11fa9957a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e63c152a-6acb-44be-bcd3-4d005d95ca7d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52fcb5f4-ab4f-4085-a155-33b2c4e7fc55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3074c2e0-9999-47f1-ae85-da1b7b70cd0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e780b00c-59f1-497e-83ac-e5acdf2fbfce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f545afeb-ef87-403b-aabb-c801442d4f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89daf0f-eafc-482b-a1e2-ae1d015fccb8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a599c3b-a221-40ea-8b71-7a507985c019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b52328a9-3aa2-4494-856f-fe77f9dc277a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af02a26-48d3-4d5b-a6d3-2e1a3a197555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b15a0ad9-edf4-44cd-ab0d-e24320434213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebad3158-39bb-474d-b0f1-a5f717e53851",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3424b51d-1fd1-4bcf-bc0a-0fe6161a0b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c93806bb-9264-4fc2-9d7d-5e856340fb04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece45648-fcc5-4b84-9591-be6524fb0619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d743518-445b-45c0-9bbd-65c0796c4bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca286f3e-3430-4dca-96d4-c20a2bb21c8e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44de0d94-c9f8-43ff-92cf-49285ca1e31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba0780ac-2178-4f48-b2b4-16f45a88044e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5dae9cb-a6c8-4736-ad63-a17d058127b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b813882a-a86c-437b-8d7f-4e0a2a65a482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311e58bf-0f86-4bcb-9f0f-0ff88f333ecd",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4672e9-9091-4862-b420-18c1abc68c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "334a1fe3-58fd-4ce0-aa87-b4af97ddb345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7be91a8-b9ef-4743-a4ec-fbda316e1ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "42f674f3-0140-4a47-bab2-c8315598643e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5838d36a-e1e8-48be-83d2-d6f3515d5dc7",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa1b1a1-0607-4dcc-be6e-c994a3e396ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73c792d2-6e3f-4e5f-85b7-0310862d2e24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad600d50-d89c-4ba6-8498-b0f004b8104b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8db81978-1dda-46c6-9b6e-d1404bc9d1f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6474e7c3-ae7f-4fb8-a5e9-5d3715025cfb",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b97b1f-e8ec-4c9e-915b-39f9f299bb0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "376a9eb8-c2b6-49ae-a554-089f0e0e67da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5244e6fd-0422-43ac-bb9b-b2ceb3b4a5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f49487e-8af8-4421-998c-64e8726cfda9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cab08ae-7d44-4f1b-adf5-a0bfbbf884c6",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2e4fb3-a58d-416b-aed1-e6b0d51bf1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efb63811-a87e-4977-a88b-8969beadad29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb55cec-b78f-4590-8f2d-14cebd2a2c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d74d618-1b6c-4548-bfe6-1b86ecc07019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f0bb821-91e4-4fe6-a547-4652c3dadfde",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d9e74e-7007-4209-bcac-52d6411711bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0179b06a-0255-4d1c-bd41-f7f10ade6b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95cdf148-825d-4fd6-b960-3db3ab3a66b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdeb91c8-8c98-439d-89c4-8c2f81ba7360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a8e840-40c6-4894-b805-1c560015a83d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0889f6f-ef46-48de-a21a-833607f17462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59d323b7-cd93-46ac-9230-912b6c6e2cef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b40d402-0217-43f1-80bf-aae101e4df9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "2618c4f5-e090-414d-9020-12d846b8b493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855a02f6-ca36-45fc-873f-c79d1a41822b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed5c19f3-bff8-4852-92e8-0147ddf240b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4922256-28a0-48cf-bc8d-711e31b36da9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3e4820-bddc-4308-8bd5-14450ecf3106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2500c2fb-9798-4030-b918-7f0805c0ed05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5434f8c1-51b3-4c76-9f61-f29ed1e35e20",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c73968-cc89-47f6-ba36-92cb45bd7059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e571596-303d-46bd-8761-0ca90d95e79c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e9e94d7-beef-4a4b-abd7-66fef8bbd6f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "328b7ed2-717d-4687-abae-cc2779b64f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da944cc-ee8d-4de8-9f9e-221a1d8aac76",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b66cb15-9134-4a58-abb5-adb3c2a711a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6a432a6-9e55-42f5-9d83-fb81a2cfd6d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ffac05-1a5c-415a-9e07-cae1ae22e305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e16346f5-af70-4bab-bc09-4c05648b4427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6947d1cf-c470-4c20-8134-d50c907048cc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76935fd2-229b-4582-8106-b9f1adba2e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c0fd486-151b-4279-b78e-8d1084185361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213fff27-b59b-4378-bcd9-72b3665be2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc8b5917-ca33-4cf9-b292-a4503793e7e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16322793-c6e0-47ea-bae9-cecc2a1b7972",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a634c10b-fede-40fe-a9d5-ece87bc8b076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c8ead81-b5f6-49b2-a3fc-5f8e86bc1aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9991e5fd-ea96-44e4-888f-bc5979119dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "92951f3e-5e8c-4a1d-bfb5-107c6d7ad7cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f541a1b7-1744-4821-9ff2-76ee2c3f7d1f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "193d0334-9c75-42c3-a1e7-47185399005f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24657ac7-1dfb-4591-9e20-3894c2db42a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d66b5d5e-e9dc-4e0c-8c76-ce1929a80934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c9adc26-87b7-4df2-98d6-3d67471b6a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6bb5004-30c2-4251-9bf0-62309751cf06",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "796bdd42-bdb7-4115-831b-522ad9bb48b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb920c72-bff1-4bde-b647-60a4291ce2cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55fe94b2-5115-401a-995a-5275f2287f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c671273-cd03-424c-8dc0-a4ac252739b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46d32f2f-baed-45bd-a753-1a9298c7dd74",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7482d5e2-e70b-4c1a-9c9a-a6d0ce6ef2b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac90db83-bc62-4244-acbd-b603bd5fbd4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deae8953-7d4c-4dc1-aea7-9492c1a4c145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c0277e5-596d-4e0f-ad1b-68d5646e1ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c400cb0c-cb45-4f15-95f8-0ae9a392c462",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72a4e45-8c28-4f24-ba13-99c77ab7afd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdae28cb-7864-449f-9bde-411c62afd0eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f7b55b1-368c-4235-87f2-9ef4ce08c9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0763cbf-4697-43b8-84aa-ac551d7cd291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf4319c-eeec-4f5a-9462-69879d003a9d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba421e92-504c-4f21-8e00-3a92e9b027ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb612957-bc5c-46a6-b6ef-7edd413a3b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05283a45-4088-4855-b559-c005c0f9aaa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0859e2de-fa5c-4598-9f77-eca68189842b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d445cebe-afbf-445a-b6ab-d2a1c2400c9a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c959856f-9b00-4582-9b46-36f0df09961f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d6906d9-f9f3-4411-bbca-ddde57117161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34adc2b8-86bd-41d6-be45-cce468e578fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9ef09bf3-8245-4347-9f3f-31ae83b516c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6330fae-5eda-475c-9ddb-8b763c1de0dd",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "667adbba-2b16-4409-9d34-81b30efb8e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0f320bf-6b32-4c11-8959-ddaca33ba08c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30133e6f-91e7-4bea-b0cd-7ef11ce61e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7761cd51-dadd-43fc-b80e-16aa465e6c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c736b77-9021-447d-8e04-5f620cbe34f1",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "536a3cc2-c7f3-44b7-8e08-a6fcd08c6a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b695f54-da20-40c0-a8e3-a1672fa9d0a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7717ce5f-b398-4eb8-8650-ee0b667c0009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "408304d1-7105-4691-98de-2db74f52a2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38abb590-924d-4f29-9d17-95ca047c357d",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff9b674-dd0c-411f-811d-7076db892320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d82fcde-6923-49c3-8da0-95f7f469b062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96917ee8-36cb-44c6-860b-159b23802ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8484a608-0e01-4feb-bf51-85570b1f5db2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d12b6e53-3877-4138-99b1-37bdab0b9032",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b6a19c-4fe5-4446-ae64-79b83bb3d65b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c26094a4-1923-481a-b620-b4e1e1c01bc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4248a2f-75a1-4eee-802d-999528ff02ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3efabe86-0359-4a45-a5cc-819c676d93b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152bd36f-e3ed-4929-8730-260338d04cdf",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c274980-af96-4b4b-80a5-54b999f5cad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db1c598d-126b-4b19-8c8a-0223ec03df6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3820a27-943f-44a0-a03d-40fef63b0685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "437bc538-f14a-484d-ac97-5f594675e6ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba4c72b0-092c-43f2-bcb4-bd3008e8bfcc",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c901e3c-16cb-40ab-833c-c7422664b10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17b06937-e901-46f8-bb8d-7dafa9b4f62b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bced2ad-490e-4cf3-b4f9-dfbd3c6ca9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "865a9331-3cdb-4493-adff-4567faaa266e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d624ec3-9edf-452b-9499-d6aee6cd31e2",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42bba4b8-ca60-4cc5-b229-32a12e532ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec2223d6-77e1-45e2-9e71-d222a086b34d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69887c3f-f63c-40a5-b4e9-22d411514bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "27000e91-94ec-4ad8-ab52-10ec696644e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb8002c-5195-498f-ae0e-420450cf39be",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08250334-ae3f-4fb7-9f9e-662c382c17c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd0ba7ef-5bfe-4283-96c1-a038d56af172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7a4884-6154-4e3d-a684-2d2c222465c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d24b5e86-7e45-4748-9b4b-f9b969250696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2af340-9981-4c2c-b2af-3d71ee60b1be",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ae39cc-05f1-4065-ac13-c3c4868064f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4063e5-fa6c-486e-9152-acb35f381f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a9c817-b367-4750-b5b6-3d2b8d61e0e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e723c204-4a1f-44a6-a1ed-5cd74768c84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b096a5-5e1d-4a8a-9151-b00b5cd4a536",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f53e4ffa-f1c5-4ac7-9d0e-cc3836604497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96592f7e-e417-46ed-8684-d2440b1c850d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52f99e1-a884-4cab-ad1e-aaffea3a81d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "332bd0b4-9494-445d-87fd-08d60bb2c898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "329e6b43-791d-42fc-8de0-e1d54dca8398",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a21e919-610d-4f30-a2d7-e573c8023abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e9efc1d-8ee9-49d9-9edc-7e74535f17c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec1a0dea-9fab-47e2-b818-d64b3e094210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdeaeec9-7574-40c8-a818-0b16d586f51c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19efdec-c226-474b-b7b0-2c1afb189ddc",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "874bb9d4-1706-4c81-b480-e300270b97d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc5f0f8b-c5ac-4f5d-8fd3-9576e9ceafcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "943f7fa3-bc61-412d-913a-f55e16a59432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "64000a90-96a7-4c41-937b-9adace932a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7795bae-9edf-4394-be67-7c02030571ed",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0047f882-8127-4a73-a759-be6e72596117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "751926a2-1cad-4f54-aa52-fc974c37bbeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92df732e-a3eb-407c-912d-42bdb07492e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3ec6a9c5-2b19-4383-937b-9673b62450b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e381d1-69d4-4b0d-9336-a1f5d265594e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efab69d0-b42c-4e25-85ad-dc678a1a0c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fb72b60-55b4-46f0-b75f-b50f2373ea84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f18e90c-a60f-41b8-ad9e-63c44b46df67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3418f09a-f594-49a3-ae12-bdd027caba85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e38576-a660-4db8-9c66-a6f8ac860d19",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f09dbf1-0ca3-422a-81df-13bfa329bb4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "620121de-89c4-47f1-86b0-4dc67e0427bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ba2017c-7dd0-4e38-aeae-dbb4f0c08ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e4f1f40-92c5-4a9f-b645-eb67bab0db79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35be056b-576b-4ef4-a3aa-fabd0d65337e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "846a17a3-3392-4334-881c-09560c0321c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dc72fef-f9cb-4fd0-8274-e2cc906fa062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb8bb20-4d06-4475-a39e-9f1f97841140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "16f6acff-8fc6-483a-8a40-c8c0533b8451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fa82c44-fcf0-46bc-b506-8d62f52d6c03",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e09ffcb-6e72-4470-a251-157075cec6db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "704dcc27-99d8-4c30-b909-c805c43e7a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b3df0b-1597-4e90-9aa0-336018beb792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b389b9a4-959f-4c6c-b092-cb45fb496925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "818e521b-97ff-41e8-b852-696ca1c34cad",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e05d98-eca4-4f05-b5c4-cc616a7a1ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23f0893a-beb2-4cf8-a817-b869dff73c04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f17598b5-8e9c-4aab-ae3b-4eab03a6394b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7235ec02-68d1-40b6-a7df-0eb610b5eed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f82b86-3209-43e9-aeb3-c588f877e1e9",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1693a7-7b36-4807-88e3-0106d8bb19af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "069990b7-3c88-4bc9-93da-5d69baecc2a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c6dbab-2780-4aab-8dae-4b9cc5e09c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f545c9f4-9a40-4cde-b033-fad3ac72db49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09da0c80-6ccc-43dc-bf25-bca2f52f9b7d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5962ff8c-d287-4426-a7bc-9aa90f212904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6993812-bb2f-4191-9880-b8b3b930c30b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c0edf21-df7f-4c64-8cfc-9735730aa367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4f79bf9-37b3-4b76-b37d-e6b8928fd88d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0111c3-1d29-4e79-95f3-a3c090800f07",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75983082-5c04-482b-9578-8f544477bb11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac701402-6e58-4635-be5a-c9e7177585fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47740b62-de1d-44dd-9b19-55fff5ae59d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b84898d1-483b-4448-b5f7-e207c7786709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b71f7d3-1b63-4373-98de-8a5b62b0f5df",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33978948-bccb-48ac-bd02-a24743a53873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37df2896-8156-4e23-9998-ebd9a6db45ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26a318c-0f60-4b42-a00c-173ef23d58d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee0bca62-92dc-431e-9cee-9cb0df13e873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2aa55a7-e4a0-46a7-a048-d67ea24565dc",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fce2f79-29fa-4f99-9ed1-ae915b8ddccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed08a004-5cd1-4656-a3cb-808dfbe6ea09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b735582-71ab-48dd-84a4-e746eab36002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "80e60555-9587-46c6-84f2-0cf73cc49276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf4bb34-c234-4bb3-ad17-1e91b4e5f988",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "593e856f-e9de-490c-996f-6cfe1753cf88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb25f568-7c67-4670-904e-343a6c3aba47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e09548e-9d1a-4bf4-8d23-1955a87b7cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2eba994-e4db-46e6-af6c-3afbd1ff0cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71840af-819c-46df-9839-453243ac39e0",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce00f88-a592-476b-b4e5-dd1488c121b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c766959b-f168-4fb8-8374-8d67bb740875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3562ba-8079-45aa-9962-9fc75230e76e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "65e6cb88-12cb-4212-b89c-612ff74dae44"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cb032e4d-5c93-4be5-bb8f-75d5ba3c6a0f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ed393950-4179-49bd-a0f1-7125251c8b1e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99382cb7-6482-4d1c-8e5a-1cfc04162c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c28678e8-0017-460e-a1d6-e31416eab7ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc0cd2c-275f-4d8e-bb4c-314ed1348168",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "0569d1bb-8442-49bc-9e48-ffd96cf81088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196d54a4-ec86-45bd-9fdd-2aee88485636",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2104944f-cc98-4d17-8aa0-5c7ffa493b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "47148ca4-06a0-48c1-8ab3-d127f8bbf9e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aed046b-9fe7-47e6-8629-413bf0a06720",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "85b4b414-5cb1-4b25-9ba3-5555c7917e9f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "207d3abe-dd4b-48d3-86b9-78c01ed9cd76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95343daf-ed71-4461-83e5-f9b70d2c2b32"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0ee9079-0844-4da3-886b-272f8d29769d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f552a04-471e-4ee9-8d36-74f851324517"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2d2e750a-0fb9-4f6b-92bd-3243c2b29502",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9725dd7f-2640-4f60-ba8c-68a9dfae3523"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1dc145ec-e515-4045-b690-dd36300741f1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1001f443-78f0-408d-ac1c-712ecf0b9668"
                }
              }
            ]
          },
          {
            "id": "2da77046-7179-489c-aa1a-590c45abb4ee",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9d8c691a-46ee-41a0-9b23-230080f6fcd1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dcd63a18-ef3f-40c6-a6f5-f1f2a0c8318a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3c26d568-7d6e-48a4-a12e-f922a9e89f9a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0061bb26-0c4a-453a-b7dd-b55b10f62d03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9ad1c419-3c1a-4dce-bf8c-f9077aa32b98"
                    }
                  }
                ]
              },
              {
                "id": "90ad05eb-5e3f-44e6-9c43-e26558a620c5",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d5c2cc0-a8fb-42de-8589-d5ef9d3f6bc3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "084069c4-6eb3-417e-9037-26ce9234aafa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c147d4fc-d01f-4329-ba81-d5162e646ea6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "56152bc6-8afd-4481-99f7-b0eea0717697"
                    }
                  }
                ]
              },
              {
                "id": "3cb67443-1cd4-45fc-a9aa-22c67bec89e0",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5542cda4-db91-44e6-b01b-fbe60114569d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9dda03d9-3139-4bfc-a2a8-6ec1ea366b92"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9e08117-895c-4aa6-b975-1d367701a45f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "33959ffc-dc2a-432d-b10e-57bc93fa5be5"
                    }
                  }
                ]
              },
              {
                "id": "db198420-24ed-4e84-91ec-30757330bbca",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eaad3147-8d9b-4ce6-9a50-118fe9a2f221",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "82275fbd-c3c8-4a13-b248-4c31d3d67096"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d0b367d-055a-4d0d-8b55-d32f7d3624ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7e5092f3-21cf-439a-afd1-4b57d9d197df"
                    }
                  }
                ]
              },
              {
                "id": "f2e4346b-a8ea-4c8e-9634-1c31754b99c1",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78e5f954-1bdf-426e-8782-edb02e92d4a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d2468398-6133-4dfd-9f0d-c45006eacceb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6da5e80-0379-4d62-a658-7bbb1d87589e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cb594dc0-38c0-415b-b9a3-c5ec0d57ec21"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bb0ff5a2-d1c1-4032-9a6d-875615e64c67",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3966817b-c53b-4149-aa7d-4df2292a16aa"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8a26f7c2-eaf8-483c-8c50-ffa2c4ccfc4c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "75aec4a3-638d-4f04-ad66-6531cdd4a904"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "467f31f3-475e-406e-bb91-b3518eb51896",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2f431e63-4d9f-4dba-8cab-d5ba7e2b7668"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e479109-519e-469c-a111-88021a5ff3be",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5d4d9002-0e72-4c28-91d0-568c82df5506"
            }
          }
        ]
      },
      {
        "id": "fbfa62d7-df17-4a54-8a7e-69466001c00c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c7694124-9398-4e2e-9b3e-0f0b108b8139",
            "name": "Negative Testing",
            "item": [
              {
                "id": "46ada2d4-24f4-4b98-988f-b26c0080ea39",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "37250b33-4cac-4a16-975a-b8bea4040bda",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9637b40-6214-4167-88e6-18ebf45049d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5ee19c8-8bb3-435b-ae97-8e2416a5c860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d45d63cf-59f1-41d4-abf7-f73556308479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "406a5b3a-7505-4e07-a7fa-a34d32dacb04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e4ed614-a186-4e0d-831d-e83c54b3d741",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1122b585-5a12-43e4-87d7-754e6416c24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c39fd2e-8525-4bbe-9457-655fe758175c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8db2976d-cd72-4520-988a-908e5081229d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "393395ec-fffa-4f52-af31-497b962dd6be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b9651f-8234-4fa8-ba2b-56f1629d7df1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e783ca5-7bc5-4033-b060-093151560a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba24ff8-dedc-4ef3-b4c3-30f42ceca721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed0d850-0290-434f-9947-617fc147f528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7807d3c-8615-45eb-b3ac-c57f5397ce4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf86f35-414b-4e3d-be70-23f872340065",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5f8190-b2e2-4423-add5-562f29b6b8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d94cda50-ddae-4ec2-acc0-55efd74af572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8762fd4-b489-48c1-8010-fdb2ac716fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b81943f3-6e9f-4e22-8dbd-6f0e5149b00f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ffa4135-190f-4fc6-91d0-a8c411bf940a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a963ab9-9048-413c-9d13-9ea6584d91d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11852d00-a0ec-482b-93a1-8bb88f4a3507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4917ad40-8a18-4fb1-998b-d40d04bbc537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7c64a7b-0c1d-4ddd-ab5d-2e5e882b482a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73bf8d09-ddc1-42dd-8972-cff92ad4b06f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c020582a-9867-40ed-9438-79ac4573bc63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4770f076-8eff-4830-ae1f-f6683674a91c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ac4e2b-3ebe-4ac1-bf1f-da2587d4b354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f3bf859-c651-4b49-a1cd-3ff8f557e7ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9414ca5e-9098-4a40-ae25-29d97449248b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "310b4b89-177a-4d8d-8aef-e537d3242885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b586aa8d-9b74-489e-ba49-d41a2eac5d3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e14380-1787-43ee-aaad-18f448db735d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e70f9faa-7d5a-4649-a4db-b93b61e24121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096a4a93-eba5-4ac1-972b-741f666aaa65",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192c41c8-fcf8-4b53-8f14-301cde507f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68cd50bb-8bbe-415c-948d-76498203ddeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05da5696-1afa-45a6-b608-2ef4a1c3513b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de4e6637-ea0e-41fc-8d7a-b12084143193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad76173a-cecb-4c19-ba81-a38ac231f8c5",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f01dbe5-c634-44df-afd8-e049e8fd292f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3391017d-fec9-4d7d-a9ce-5bed6928ce5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a05901c9-632d-4aa9-9f8f-610eaaecf426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a3fb946-493e-4fe5-902f-e4e4d0f74a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d785c0b9-7566-40d2-b14f-9611518f3d8f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6dd51f9-8dd6-45a4-ba19-f8e48ef5db07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4796106e-c70b-43f3-876c-c496d0a75e30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb95bcf-3bd4-4cec-b316-93d575154395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76750ff0-af5c-4728-ad1e-e22b7584cafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27057233-3f04-4f7b-a76a-a355e2f60b21",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15fb3d93-ac8a-4349-b322-a7bb9cf1feb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9f4cf99-6f9d-485a-b1de-7a625eb89aef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89ceb440-5c4d-428e-b791-e80f5c6b472b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e12e8bba-98ed-4ffa-b265-a6a552020f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f87a3ef-4592-4160-a6a6-f9c719f4e90d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a9c222-6a61-4a26-9bb5-005771850d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f79e8c9-61df-4caa-8894-5943bbaf32a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844267b7-449d-4a19-8817-25cf371f554f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2bc20b8c-f63c-4632-a3f8-976df2165963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe51e2a0-69b4-4c08-9b25-898c9f4d7323",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b37340-ee2a-4842-90db-b8dcef18901e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87bebd2e-ac23-477b-bf5a-2a067df92288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad27a38-eec9-48f7-bd01-b93fbc98c8c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "897da17d-251f-445a-894d-0609b97bcb5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065d2002-5f0c-4386-85e8-95cbf4e60c7d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d11db6b5-fcb8-4759-9cea-a11cdea15c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7bbeb54-52d3-405e-ade4-0543ea2ab3cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28df8bec-d1a0-49ed-b4c0-4183e16597d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cc566bd-2cde-4037-98d9-49659c113a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e11746-14c5-4ac5-9156-a614cf8eadc0",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "195d2fcd-e33b-417d-93a1-d10c65b4fad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23788a2d-72b7-4c94-b5e4-9f3bbe3b8d5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716975ea-1dbe-49fe-9de9-9c6efc9707d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "88d7aa4f-017f-47f4-bf40-79913fb27b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d49e0472-0f51-43c8-b4b2-35f6fa960924",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "776bf2bb-8c0a-4009-a91d-3e32d13bca1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbe74cdb-77d6-4f07-867d-c3e2d8d4cf53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f160f39-9d4d-4acc-884d-3ac60da4545f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "83255e63-f68a-4286-b872-7800448d690d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9a464f-8e3b-4f3a-abe9-e0edc7fb83c7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56509a80-ead7-445e-a1b1-0985b3948878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dea35ba-bd48-495a-84fb-64712d8fda3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60336ed-63ed-4b67-8871-cd3198aa90b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac5dd7c1-d955-4419-9712-1afbb2f0f10e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba6ed8f-1a10-44ea-9169-d1e2c3362e47",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b259338e-6e9f-4f10-940b-5efc647ed750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13279814-cf82-421c-aa94-0e1e2a574f7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb761453-7525-4be0-8733-927c4b7938f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "35f2f541-4a89-46af-b764-1196471c4ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d1dcab-fbb2-4614-8daf-37a32a0232c1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d4cc2d-95d2-46a4-b7a2-008ca447a5ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e0bdcbf-175a-4ed9-a1f0-de408153ca5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c0b5661-a3b6-4a07-84db-2014c47c5fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c21ce14-57db-4ec0-af96-c09296b35c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21e5e56-6fbc-4b69-a231-67bd698f01b7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f956e25-0e40-470e-af4e-3566f8b0c4c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af8a7de4-0d7a-4ca0-a9cb-41b21f72c4d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2cf0ad6-0c34-4d12-b331-608794b67aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed99d4e4-d777-4474-b123-bd83e7fbc620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a365f81-2b0c-48a2-a1bb-e2b7eec93167",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51ebd5d-3afe-496d-a2c0-42ae02a0b86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dbde0fb-6331-45bf-af04-dc39033354d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a6cdbfb-0e60-4d32-9d2d-b58e2f421ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c912f0f0-dee7-44ce-9c9b-2743aec85561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ab9a51-2a97-4708-b68a-836516ab176c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6e1252-36f0-48da-a117-2c8fca6d7daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "662ac00c-dfca-4ff6-ae2e-94e5560d44c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855373a1-a162-4f5a-8237-c17fc1e55c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbf7c0b4-7378-4c37-ada6-5e75dbacf946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe3ab9c-1cbb-4a5e-90f7-3489c95f934e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dddbce24-faf6-439e-a1ef-f8e5e1842256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22d80912-5578-4dc6-9cb3-0b66fc4c45eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd96b2ed-f3ff-41df-8ee8-2a85b3dcb02b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfa79010-13d4-4324-a662-08f69a32f3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6bc5254-ebdd-403e-af53-a4569e0a6a22",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d81c89-47bf-4f12-b2ae-6ecbddda155d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54564978-5563-449e-9802-7102600cba17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cebdd55-7241-4fa8-9b7c-f184c5dd89a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae334a6a-0675-4d7d-881e-8bba16c8d1b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78847ffa-ebb7-4c55-9644-39d7b432d0d7",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b9c91b2-08a7-47a5-a92b-f1598d69d3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "579627a5-196b-43c5-80bf-ebe9ed4af1e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c84f77d-754f-4ab6-81e9-b28ecceba4c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "103986ae-c191-4a23-b12a-1a542aa81cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "618cfb7f-938d-4d0f-b2dd-13ad81212bb9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26503559-4ae8-4b03-ae16-29af48a1c279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a85b8b24-2ded-4ff9-966f-0e3470648401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d97ce9-b7ba-4a80-8e27-ba8ae6de19a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "baeff5bc-2b5c-4ce5-8a86-8e2ff2f23447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721495d4-9636-4b2e-ae09-ecdb5268b746",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "623eb902-373a-41c2-80ea-dcc8cf99557b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61cba637-a59f-4e5c-b8c0-5e73df46de07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516ad2a0-cc26-4803-9bfd-1ddaebd819f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb3c3e0d-2bde-4414-8581-6ecf9d9719d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42673430-a115-459f-b0b9-ed8024495e8d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9debeb3b-93c1-4752-9a01-4bc1374957f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd3a449b-4b13-46c7-beff-95dd550193b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ebd0d5-1f0d-4efc-84be-33c8795d2d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6be644e-0e0a-4bc7-aec8-256c0e99925f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "900d57b5-f57d-4e65-a3d8-bb606c39b1f6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65316684-a4fa-440b-92fa-818aff0b4ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96d9d7a8-27e0-4e2c-97a4-0fa934c62705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e494082-cee2-47d7-94eb-99645caa6c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1445d16e-70a3-44a0-b7fa-2fedb3d79348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee8e5c6-5ff8-4def-86e4-484006df6584",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8bc85ac-0821-47ff-aa90-04d574059f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd72d27f-e051-48e9-859c-5d1eb213bf8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f673722e-886e-48fe-befe-3145fe33d787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bb5cc59-7284-4ba9-a156-a4de6f40431f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e045112e-98bc-426d-ba3a-2a1064b5aef3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dcd2cd6-bf01-465e-a1c3-abb8516b05ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b4cfe18-70aa-4993-8301-a106885908c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22d1916-54ca-47db-8462-1c631f2e5f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83b9ec41-c006-4de2-ae70-087df620ab15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "466f7d10-5846-46ad-b5ac-724311c88568",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3036ce5f-4680-46c8-916a-943c1e8b5f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db6b3eac-8c14-4478-897a-2a6af2bd29ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65273df5-9e6a-4faf-a615-8f260fde1061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "463b8923-83b7-4388-8126-31d292d37248"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "df1599ab-e2cb-4107-b09b-c78cd69e8cce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "25bac81c-2158-4e2f-9ce9-2b1abb8fff4f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6dd0cd-4d9b-4ed3-8edf-2a2cd87af9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ceb3eeb-f1c7-4b1a-85a4-56c237b85a1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2e38da-8baa-404f-8c65-882eeb117577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5a9f4dc-d454-4f13-8022-c169b2316228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e268183-204d-4a32-89c9-ff69fd06876e",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59c2187-8941-4423-80f9-cb7a45a5011b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "702a175f-24c8-4c35-aeae-4ba2f9d0c34e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "152aea77-bb3c-4d8f-b975-86a45bf410de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9a64f859-3b4f-446e-b6c1-4fc91f059ff9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c98ba1e2-c4a9-4a51-b923-5ede29a1da14",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8e71599-9269-481d-80cc-9587b437a3eb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "64554510-1ebe-4e4d-aa03-61daa28ba321",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb17f5c7-69d4-4806-8d96-53f04153b3cf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "21e8cd9c-5a00-4233-9d01-8199f1cfc028",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4250581f-3056-4789-88a2-bb25ac93e1e3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d491c99b-b350-4623-b57d-bf2f84cc800f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "02f4efa2-2b89-49c1-999a-b61ec892daed"
            }
          }
        ]
      },
      {
        "id": "f4b30936-e8f0-449e-a16d-8f46a186d0a8",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ebe0f86f-716d-48d9-a536-ef268e6a125e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cfd69884-206a-40a6-9647-91b710192f93",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9ba6c7b6-4acf-4f85-a939-5582920f75bb",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95029118-f8d1-4df3-917f-f63c7f10b63e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a521c5d7-55ef-4f28-a396-bbec0fa65dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb3e801-573d-43c6-b03b-7e871c82f035",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "140fd704-1342-41c9-8274-b8e823f1a058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "720b9529-23fd-4201-9c15-c0016f6278f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c7c3392-1aa6-4996-b75a-bb2678c0b646",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b84b66-72b1-462f-9f3d-fb8a719534f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d94ccd96-a42d-4606-abe5-7d94dc6043b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8a3ac8-2246-4f6a-ba4b-71da03f7bb3e",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "891d28ed-8ffa-4c12-9208-2626dfa47106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edd07854-2d78-421b-b5e7-cda83fcf1474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99bd6318-0af9-4c71-9305-4085c4aea3c4",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2106fcb1-546d-40a0-8be5-f2680bf07bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70eaeb74-4a25-41a7-bee2-e158646c1798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0b074ee-0c77-4d90-8879-ef19466a63a8",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4832b0-b045-4c8f-8508-ad1c86e490db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2707d26-a62b-4a0d-8867-a1397dd47667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae5ed5e-f1de-405e-a414-1a0db78db5c8",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa362c0-9edb-43d5-bc12-2be01731e94a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c15dffd4-7c40-46cf-8719-8ac2e69ceb94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "137a8589-51c5-4733-8c94-7ce086aac9db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a07e779-362b-485e-b489-c96581029a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e004167d-35a4-46fa-a718-e90cf6668fac",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95dde475-f9f9-4b5b-a861-83439b2be6b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c691940-a1ca-444f-8103-4deac695fada"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2df608-a46c-49cc-bf14-7a426f46a875",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "458a895d-3a6c-4360-b669-cacccf5675bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c9f8d18-782b-4d95-b29f-b5081deb7944",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d771fb1f-6895-4084-bdd6-ddcd4d4c9aad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0b9f91f-8a4e-49a4-9975-85053e6f8cf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "574ef5f0-7e1c-4439-8822-22f353e39d5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ee18331-f35e-4103-b430-d7fa349490ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc49f77-510f-4948-a119-f2cfb2b67bb9",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d88b01-06f1-43a8-9a57-210a0701481d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3450cae9-5ac1-499d-bd38-934687af26eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d9c11c-089c-49c9-b615-4fe32c7a31d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9141fe2-3df6-400d-ac41-71fa56e3e7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aabf53af-9c40-49f6-ab3e-eb8112ba2440",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350562b5-c81d-453e-9e2a-c0e9464399e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb8e63cb-0b32-44bf-b956-39d0cbadca4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "204c87cd-6430-4277-89af-0bf07bce7663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b103fb23-5ea6-4d8d-a242-1876bcc1b354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16cadcc1-e63c-4f00-b87a-7d4f2ae98143",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa82685c-5c1f-4a93-b383-41c7008e914f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b3a700-138a-409f-a272-62d18d712140"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a57200f-adff-47ce-9643-668a6a84caca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "557d3f64-3527-4d49-bb1c-934bba25ee55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "570299d2-f48f-4c94-84c0-a70ef3cbd154",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0c7d3e-6ed0-4e4b-b8d7-a1a15b9be65c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0261265-6d86-4a38-a52a-5ffb65fe7f92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7c3f63-8ea1-44a4-bb6b-562e68fb2032",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4485ddae-3620-483b-824d-700a25ec5723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9243534-73b0-4e3f-b003-70e331b1f0da",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a456db-a914-417a-be6e-d3f7db425bdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69fff0b7-9191-47ed-9a44-a939ee80b5a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9882e041-b6ab-42bd-a6df-b511cd91a71f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55cb721e-4af3-4be3-93ff-9ef0eb4526d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d99bee-d5e4-410f-8ff9-f18d0d39e006",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788e9502-6dba-4d09-a139-ec4fd78f8da6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "539efeb9-ebdb-4120-8318-e4d2b14f5a75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61da7ebd-ec67-441f-8925-70446ae4a05a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d42c6d-33d5-4b03-bb56-fe500c3fcc05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb8e8f9-e08b-4767-a713-b8366342a73d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6872c37-272c-4ddd-86cd-33952b138481",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf4d9656-15bc-490f-9818-e7b2e4d1d6dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df85cb20-95d9-4f4d-a5d4-7b86d22528ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e24199-b888-4bcd-b52a-6ebcf4cb7c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb42cee7-ffb7-44bb-88ea-d7970ea1e961",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b0562e-4dd3-413e-a73d-afb25b50f1af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f82ba80b-8a13-4a1f-a18a-3dc095d08fbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b02218-63d0-43a6-bced-7130d3b57a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f965f7d7-069a-4819-9512-061c70ff0968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0ebaf9-5707-47f8-8007-8e08d48c2302",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968650aa-3a23-47e7-b752-19fe457f9f37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba850004-fa73-4b29-ad05-52e3e72df8ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e3bd3e-436c-46c1-a9f6-20f7af7988dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abd9bcbc-dbaf-4851-8e48-b7ae641d3f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f6a467-4bf9-4588-8bc2-c1eb4f5867dc",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6477ffb-fd35-42c5-b2e4-1cf9faf3eae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bca4377d-21b6-41af-83c2-129f1cae49da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ddee4f-f591-4747-aecf-5a99eccc6f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e1586cf-f04c-4a2a-98c4-27bb07d406b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c57f6b6-d8fb-4365-8f58-b80926a8ca9f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13620180-9ed2-4a45-a282-f69478e93dc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a88a7042-bcab-4d87-8ccb-30ffca94af3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b20ca34a-a36a-4c4d-ba63-7c366b4bb365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5d88a1d-9f8a-4b1e-ab0b-6fce621eecc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f730277-2155-4f80-9b70-264503edc87b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e69142-fcd6-4115-b2b9-177ebcf51baa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea58a2b6-8972-4c8f-90f1-2233b1b3663e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "856d60fe-801b-47f7-8b1a-e65bcef25f20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe28dce4-6642-44de-8168-f41a03d0a9e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1a5e21-6eac-40d2-b9af-ec8e33c047e2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2432349d-dea6-462a-8d1b-ec7a46d7dd00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdca732a-33eb-48da-87da-e7737f9bc20e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9725fd-2eba-4dd7-8b50-485f6e349e89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3389b2ff-03e7-40f4-8254-28291c00409d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93922be1-3c3e-4d73-8904-2cac9e45fdcb",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59a4db0-36f1-46c2-b0a2-f86a192b5b2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abe0639a-8641-478b-8fde-5cbf7b0eda04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e4e147-2707-4da1-ac55-3b91e1cf14ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5482522f-cc16-4461-bc8a-358fc1edc6bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ca0b0e-0be8-4548-a29b-238df11674a9",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8ff694-ee80-45e2-8c5d-3659232f257c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7159382-ec16-4212-b6a4-dc0d2e3658d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d734ea0-e3dc-4918-bf68-c35e07dde3fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0d87c05-f38e-4c5c-a626-ce6c272b4ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7c8710-795d-451a-8fc3-5d938eeb0977",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "175d1f87-0632-4d8d-97b1-acda0bf611f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5faad48-6f78-4d66-9866-33ee7fbd63b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf13507b-5731-46f7-85b9-deabab5c4d1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bde2ff7-c362-45ab-9c02-929fe1c72644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a657c3a-0499-4f6b-be60-4d1667f33a10",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81189a52-593e-4d24-b369-020f2edf0883",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edaeb45c-2737-4e04-8aa1-f0d97bcac05d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc74f24-1ed7-4c29-bffd-5265d5edab9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4ebe2c0-ad27-461c-88c5-3a62a7727926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde744c4-c466-46c6-bd06-6d6c2dfa49de",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2dabde0-471d-4c10-ab05-e39f09333c2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85699348-bdf4-4101-b726-20e33fed62e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "236e521c-ac28-421f-9eac-703e683cf1d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "553aeb2b-0d26-4c24-a800-1b8489758aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4c8c19-3ee7-4418-a342-d3a8c9d6598e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d600db-bc84-4631-a1ef-f3f82d712ed0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2a8351a-3103-409c-a296-6ef0e617ed2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e625abd7-bcb1-4d7f-b2e6-90c59b49dde7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e84e929-aeeb-4583-bfe9-8494a25e8bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2153a6b-b9d7-4259-8924-330ead8b76cd",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c353cbe5-4646-4a9d-970c-a709c97add60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd2150e6-7adf-4fdd-a710-7bfb7c40b40a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8c170c-26bc-4cb4-9863-544cc1e12a37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e07e444-ef77-4c6d-ac26-062e3d0c3076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd77c1c-c68b-4406-a118-f7747ab8ac13",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd0d639b-30c9-4f0e-917c-504032c909cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55d71ae0-0f3d-4130-bfa9-a360d7f785ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd2146d-593c-4cc7-92d9-7fb77751a626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e2af48f-c7a0-4e04-9abe-c063ce4151b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c618eb50-a1f6-48c5-b535-b5f27fefe883",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ca16ca-175f-4786-8939-9ada60af88bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "058d67af-8333-44dc-afe6-8725cf98ad26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73270e30-6f9c-4ea0-bafc-0454aa3e6b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc4e3ae1-0b91-45b0-8d98-adeea670557e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c62870f-c8ee-4642-8a1d-9353578ea749",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c25e1a6b-9545-437a-8fb8-b613bb89d19c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b2ce9ed-f213-4b61-907f-5a4a6453ae83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8feeb6c3-1306-4efe-8d1a-43bf9598ba66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea51911b-3059-44df-8182-d29d2345f0d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d239bd-6b29-4812-9638-dab279b70a80",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "093a102f-a64f-437d-b256-d8da30c8a329",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee3e9a2a-df6c-483b-982b-3ec49cdce5f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5969ec72-9712-4cec-b429-a692c58be11a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb3f391c-c143-4a30-b4b8-6eb8c5f91c28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61028ad3-3108-4a05-8e9f-647beb01388a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f8e7c7-7756-4ba4-b58e-8c86675bbc47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00f99336-ea1e-4a44-8ed5-815b4270bba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2599d9d-05ee-469a-87af-273ff95bd29a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e95e1e2-73c8-4a4f-a7cf-8ac39be8408b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5352937e-017b-483d-a17d-aa042e794a20",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d33b65-c077-4bd0-8ab3-6d2e24c9ea5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea79cfd5-e4ec-4a35-905b-5a5ec0ea55d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a1873cd-6d31-49d0-b76e-56dafebd6c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27260cd1-2a23-4af8-9a58-3a1f5dfb0f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8411f5e-9701-4c58-9d52-6f1403aaf9c1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a6f3db-6ac1-4777-858a-71c1c725d44d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0413c7e-1a6f-46df-91cf-d80f80632ef5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44ba868-426d-42f3-b9a7-714b26530e40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "416b49c6-3407-4d75-b211-50a3f2dfe9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0140906-3072-4423-b44b-20438fee2848",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45135ace-44a0-4db2-bd35-884ec2acca84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "624a8e66-6af3-471a-95d8-bb5f239a35ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb574de1-cc54-4e9c-8933-412ff42acab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7733cb1e-0c62-42e9-ad31-2f67cb442d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa924642-9ce7-433b-ae0b-7b6c16101d5f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0c909b-88b2-453b-ba37-0adefc619c49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52526fe4-44ac-4802-92fd-37633e9c9dad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0812e53c-948d-49cf-8426-df9c9393702e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f94d5b35-1a4a-4071-81b3-bf569dee2ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f46782-196e-4846-993f-0d58d9779ad4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b612c2c1-72f4-4288-b313-2045a54d60ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cb36a52-ad4e-4186-b52a-74a796c744d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff00c0f-6f38-4303-a291-2c5af4fb66eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cd35e4e-23ec-4133-a754-778958f918e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afae2ddb-12c8-4b0b-8f6c-d46e74c6acb8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfcd7aae-4377-4bfe-bc92-acf23c63c4a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecda7a3e-95ce-4cb2-bc93-177dad9eb026"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca2eecf-126f-42a2-b1af-272cd1489bcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08cd0e2c-4ccb-4ac9-a2eb-fc09910ddf94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ab385b-ca82-4dfe-8117-c9ccbc22f43a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "395a6c1e-05eb-45e0-bda2-fd77b2e72948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "441a275b-2ef8-4df1-a5fb-ad8e091e2ee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "900fc5b5-0b92-4aa4-adce-c0e552320528",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52ee84ce-a659-445b-b3d5-63d163b89b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0e6f65-78a7-49f8-8ada-0265f5e171eb",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92258390-18df-4056-adbe-51da71dcfd27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2b850af-9665-43bf-ae8a-09d27c1fe465"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67231289-fc27-4e58-a673-945e2886b371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07b6236f-14ba-47f6-b711-9016c01af48a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f802294-9112-4b1c-af58-41558c7b98b8",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a42902-dec2-44af-aa89-a788e5939bbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "236c474b-6fdb-40ec-882d-f4fdc56361e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34a2433-f66c-49b9-8183-5051427675d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2d58b0e-61a6-46f3-9a0e-bf42e883b303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36ebfd2-26c9-4214-b6f3-693949bf1420",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e59d790-dcac-4053-8c96-54620cc7b631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8415d11-54de-4b23-8a18-6fa39db1c6e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69492a01-af8f-4cf2-8d6e-c2479bcde3a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9f80be4-411c-4721-9c53-d43efdec5b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452ea07b-f64b-44ab-97a9-806cdd56c113",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd557f22-8b01-49ad-907f-7952fe859cc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f08772e-58b4-4958-91ae-32eba4abc906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33088470-2c59-4e93-a42b-990838113493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9dfbfdc-0033-4f20-92ca-49d1b32c22b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d25e80-c287-43d9-94da-ff59e0457b24",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05590895-afe5-4b08-a556-892e17861696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3997cdaa-339e-4590-bfce-83477becbc6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2479571d-effe-406e-8c1d-8320d28b5abb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "735a90e9-f93b-4150-8395-2ac03b467b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68382205-7f64-4ba4-bf98-386ac662eaa8",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98374a95-6c06-4dcd-a155-5549e8220b0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5148151-c0bd-4d81-a174-f018a0d0a71a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9d89cf-f25c-48a2-8280-1a6d572c7d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff511946-2688-4bb8-9411-c640f4f3d627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6618ef10-49ee-44e8-be68-04dd16e4dab5",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea35070b-026f-4061-8c2c-9e2c8051b6a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "604350ef-6767-49f8-9845-4b4314431cd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1418047a-c1ee-40eb-a13f-cb80ae8159c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faf61b9c-703b-4fad-a748-0ec0578bae09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e97366-4565-441c-b88f-1bb94a5adb88",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6035e1e0-edc1-4456-8aa7-27f78ffd377a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "158cfec1-9b3e-49c0-aa41-bcc2e1fda42f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5436c99d-e123-445f-a19a-538871ba5fcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c33a72ed-e23a-4cef-88eb-5f941c6c84b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39829ce8-dccc-4ea1-9c93-9150a080ea9d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70a82f2-c7fe-47f1-b4dd-1a9a13650a46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b6bcfad-8366-4be7-a9d3-15c98bb1c6ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b4be9c-880d-4405-aadb-9f43483b3e10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e9335de-a184-4cc4-85be-cd056dc1b4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0112bdc1-1772-4fd8-9579-d658d2908d4a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81051b4e-21f0-49e4-93b8-51839dde1678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3d93c88-45d7-426c-94f4-42765fd80590"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1101d5aa-fbc1-4891-aeda-ed16aa9c5c45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77542771-e569-44f1-ac42-4a413b4ecfec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6dd78fa-6ae7-4ccd-b070-747a06635d6d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c58b06-1f2b-4b40-b49a-2bc4aeb6e8de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61fbc316-f781-4243-a6c9-d5499976b40e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd59897e-9bb0-4430-965a-a688a7beb1d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "473054bd-c196-4b24-958e-48b47d7aefa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148bf830-1026-48ff-ae69-40aee9dd81cf",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4dbaf6-e267-4f58-ae7f-fc0e88ec8b5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae24fb97-a0b4-4c80-ae59-1df1949c9f60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e8cf996-619a-4dfe-86ea-1bcc8ba93af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "884cfc78-3986-4585-927b-e97836f4ecd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc36115-188e-49ac-b656-3a299cfb99cd",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4727df4d-6f7f-4825-943c-e34e2d5172d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c386acdf-5f14-4b13-9c1e-222a2eaff72d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e87d7e79-a71d-4369-8afc-a6cbea256804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ad26048-dc1f-4dad-bcd0-fe386a5c5f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc40dfb-29d5-4b08-9b7f-54f21a242baf",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e578494-19f3-448e-9e4d-58aa57bf3b77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7abb8a88-0580-45de-beb7-ccd3dee12fe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee7c17d-5034-47d2-a3a8-d9b12a9201f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2006f11e-99ea-42b1-a9db-be03e865c60d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a7ca0f-2c9a-4530-a970-43e7662837e1",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f2326fa-2fc4-44fe-99ae-68862a274098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8e0ad9e-24bb-41d7-a36f-5cca4006f36a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f14b4f9-ca34-4e47-a1c7-b60ec91e6c1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40ae2654-a04c-45c8-95f8-fa916768227c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47f0c20-fd17-43c1-a3b4-28d6c4a1eec7",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8b9e65-fc45-49cd-b19a-1239fd3083a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b62eabf-c38c-4199-9e10-33c41217acbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b508e1-8edc-46db-a293-ad56a3ee263a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4dee3e1-c5d1-4044-a283-bb1f8af3bd17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c9bce5-7a54-4833-a75d-40240d6dcfaa",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36374a95-070a-41ab-8193-229b9d0e8c67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5baa4ad4-6d51-4589-880c-0dfb031a8527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bacae72-e6dd-481c-888b-a2ef55be732c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4b5dc3f-d221-40fa-95aa-980122596586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be208c46-8a3c-4746-8d55-ae37519e888b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e8757f-9d9a-4601-8d68-c92cd281e628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea1e07bb-f176-4dba-82a5-c1cc6f78e4b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8adbc179-1e56-4051-bb3b-7ac74f522a1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1106eabe-27dd-43f2-b1f4-fa913696b073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a61ba53-2f29-4609-b8d4-51249c751e85",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "895b7895-5ee2-4664-ba1d-604e66deafb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aaaa1fd-eae6-4587-92a5-b6e91f5d3532"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "867f9216-6b28-4289-8387-8a2380b11e95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6853e591-fd58-49e3-80e5-fe75e1eafd9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41891b34-1596-4e3e-9f89-a46073427266",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2737ed-e96a-4d65-a82b-72a563cff9ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57341c2f-c77c-4a3e-866a-0aff15b6876e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb51618d-08ba-405d-b594-550ef4934e6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d6f8f6b-e0ca-4847-b8f9-d4c86c29ac29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02076a2-f228-441b-a852-6b74253fcae1",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "302f6334-fa14-4a7e-8d4a-9dd102c04903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9638719b-e03f-47be-a706-d2a1ff96ffb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de9fb91-a7e8-48ca-911b-d6d1af6adc21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "919279fd-26cc-4718-8d4c-659f624a7ff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2691966d-7578-46cb-9634-febb72a07357",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0feae0db-a9a7-47f0-a3a3-457c0f4dc333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "612511e6-e0d2-4e24-b071-30e3b7d0cdbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd1c5e6-bd6f-4594-9e77-9566419ccfb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4b9667-2543-4bef-b551-e1cfa4cbc1c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42197f3a-42dc-48da-bc11-201e78103d0e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c4640d8-3658-41d8-b890-9b5b99ef14ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7630b4e9-0ce9-4075-bf6c-075bcbb6424b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b026e84c-769e-4eaf-ab15-cf7e75a0320b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3a70953-ccde-4ee5-bc4b-7d5199fa8d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff121364-f54a-46f3-99bd-69cd1f2fa064",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc953f1-d4f4-440c-bd05-6225f72be661",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31dceb1c-0404-4d12-be46-e5eebd1a92e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f4481f-232b-44ca-9819-4db7d268576d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d13b797-13ee-48c7-b98d-ee60a9fc2f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e965b994-93a8-407b-a1f9-f81b7bb25275",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1947c15-b58d-42fc-acfa-c735a7759aaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0304dd0e-1dd2-4699-ba48-1dfd5c09006f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4574715b-dbb5-499b-b9ed-73ffcb8f8a27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fb10191-9972-44e9-9612-3c150b42a7e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b2e9a4a-1462-44e0-8e25-25f5d22f1389",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d89e9712-0df1-419d-b308-59b5cc8689e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b19a17fd-a6df-4a2b-acce-d686efbbdb82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed93949d-f284-4cc9-8e1c-45727f93563e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d0162ed-c8b9-4a24-b9c0-120bfd0d9d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eba459d-7088-4649-869f-37167946be55",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8189c1cb-66b8-465f-91e0-e815544a469e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d29c9e4c-5a45-4cb8-8a9e-d53bc82eb828"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31347ea7-3172-4a88-8dad-ff34e01be3d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18773549-035d-4383-bf84-006c2e7af14d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a801107a-6bba-4be9-a6d1-d90f77d05ec3",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe701f26-d936-4563-8812-1d7e394af07e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de11d147-d9fa-4692-9952-fcd4c76f14b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1757ceb-32f8-40fc-b508-25eae354d576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5726d9b2-36a7-4dc0-b918-5c0f97f0ae99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f50eb7f5-63d7-4bfe-a62d-c943a6f05200",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "090c6575-af47-4555-82e9-1f4fc0108cb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f9af0b4-f497-40fc-af50-baeb7ce04582"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08bbbd6b-042c-4f12-a5f1-b0afc846defa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "992618a6-b378-471e-87eb-54dd714e4d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7b290a-e513-4292-bd1e-0752cbdbf18a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d35ba7-51f1-429d-990d-007a117b784b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7751b755-6e17-4d61-b453-49cf92c3e42f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2577a862-c874-4d52-bbba-5a921bc912ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59a79506-3cb5-4e95-b16f-3e0d2d2062f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd25a8f8-b047-4c69-a0ed-0c9f1ec0ca74",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ce13be-77e7-462d-b64d-b84c38a737c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09e080bf-ba9e-4662-aa06-1dfc8df4c01b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8472cd66-2422-4b27-836b-5fe0f69e22c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f71c0c29-e37a-4c95-bae5-4b1d63bab969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b20e32ba-97f1-4434-a1ba-37f366fe1594",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a24119-96b1-4f9a-9a01-2a93ccada522",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2159c90c-1f04-4c4e-8e71-142966ee87fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbea0ea6-f34c-48bd-9c28-80a94b274fed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "406fe9dc-ae7c-4bd6-b4d3-71f7635b4685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f4b610-3466-4b8f-b415-17fbad7cf465",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86998fea-9d00-49df-9eda-35144318ecbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90204791-81e4-43a5-8e47-31befa6972db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "578ebd0e-7621-4b7d-b4ed-812913e5f5fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5da145a-daf1-44a2-8230-b36629af722d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072c6868-7907-42f2-9d9c-3bcd60958a1f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496dd077-b919-46e2-888e-656a57f8cb83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3368c163-8ffb-4330-9571-dfd2fc15a46a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28046f6f-8d30-49fc-9b2e-4301ec71f4e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d074e1ff-dd2a-4838-aa2b-ec311bbc02b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a89779-c087-4693-8d72-cc84f79af8d9",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47cfd4ce-97d2-403f-af5f-4b591f4ca35d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb095d9f-fb3d-46cb-b199-158b4d151393"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cecc6e35-49c1-4082-97e9-47a2cac8a51d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad17d36d-e171-4232-b108-7f1f113ac4ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b66321-8b11-46da-a5cb-dc1145561f2e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "906f9085-7919-47f6-9da8-eec493d31423",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e372b93-9eab-4203-b5d7-36acbc11d2c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9bd32ec-e055-4981-b09d-6415de908a66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "045bdc53-38cf-4dc4-aea8-6b1eef939e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a1dd7c-a21b-43cf-9f77-1f12f262468a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ba486d-165c-441a-85e8-5d24be1ecca7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45a338cd-5164-4dfd-89fe-13047f7fb837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f88f324-eb57-4603-a1e6-dd83768683e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caeb738d-bb46-4d29-9ac3-7bbd48e6aa0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1454616-d869-4009-b4b5-eef4d9a9521e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc73094-6b8b-41c9-ae9d-30b020bd064d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4f9fe8f-25c7-4068-b62c-093ca26e6e48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ed8062-201a-4913-86bb-69e6bc9385f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e0f787f-5e8f-422b-9459-9ddf3f760a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84926907-7afe-47af-b10a-732d27a1c4ab",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f011f1d-cf55-48c5-ad66-1d18e141b6b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f54fcb3-6ef2-4ee9-a52a-0112ca6648a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5da6129-4675-4e44-a534-702855a606ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eeca130-4360-4882-8e58-ada9c82982e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c6527ec-ca4f-480e-8252-7874cc5c56c9",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a78c62-0b9f-4f05-b93b-e80b13d4030c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6aa5a22f-6f88-4da9-9bc8-f747a2444c32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df1ffa7-fb27-4f1f-9151-141c938b9f64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "552d016b-ada8-4bc9-9d9b-cc403748fd10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "049d0390-cf3c-4e70-b679-5508d4d1e1e6",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d8f446d-b768-4503-961c-a5a287a275f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0840ece2-d326-4f6c-a47c-e7e2f360c313"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "686e32b3-9524-42eb-9982-8d84254524c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eec89bb-3b68-48a5-b101-3a60c5f74636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b393fdf-2cbd-45e6-abaa-30f347cac49d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429a46f4-b483-469f-ae14-13bd0e77b65f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3394e5f-95d1-4082-9a2b-aa9e11223169"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f882e3e-5f5d-4582-9d6f-2f96b7edf11c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c55766eb-4d05-41a9-8307-66e3656446df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b2d758-837e-4822-89f9-e3edf9426c3a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09321f72-b7c1-4483-8c8b-551bb69c5470",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5279b10-e47c-445d-b562-80e74509f9b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0084e5a-e7de-4433-a11b-b79fa6626860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02019f7f-dc54-4c7d-8a6d-6268ba080611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67a42c4-6ad5-4f6a-8d36-dbc263f0ee41",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da0fa066-63d6-4d75-8be7-64d5560ba62b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31e57bd3-89a4-4998-9b46-d5b134ba8126"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d9c68ce-4289-4d8c-9a31-d526c4d68987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdd4674e-138e-405f-b919-337334579a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb0a324f-feba-4998-a581-0dce2b0ca751",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c6e1e0-083b-48d0-b9c9-f01c617753b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a9a0171-1174-4598-8a2c-a76e948c2ae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2de072-5ca1-45b5-bb99-eb277aecda62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d9619b-2b15-4cf1-83c2-da562cbf2ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce09848-f9c9-401f-a67b-57679fb63223",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f0f1af3-e7c7-408c-b30c-40b2450d8690",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3766c66-15b3-400c-b2a4-a2d2d01c15f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d30399d-6dc9-4c76-9dd1-c95623208f38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "873cdf62-f665-40aa-bbcc-4817728c3805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59dfd8bf-6ecb-4103-adde-52b14c64bc7f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaff9b16-4429-4971-9752-1344c5886a02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61f01dfe-9eef-48ed-a590-b63a22c7e92c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31eeb0a-dd51-4219-9325-f8c4d3f76736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdeb0feb-ee9d-43c1-bdf6-9af5f8fc4f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c0c8ba-41c4-4543-99c1-34897963cd14",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa18755-ce2a-4a3c-b6cf-beb80a66d984",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8242ebd6-c63f-441a-8b58-55e24f21472f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de0d539c-0346-4a35-8a65-99acac3f4559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af69d363-b1c8-4dee-af14-463c954cd0b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88dc523a-3b26-4b2f-b54c-578a0677d89a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d133543-ff9b-4cc7-adcf-a9d5100d7c68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a79f91bd-0fc2-4636-aaf8-4e3dc886abe0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68190811-b6e6-4c0e-b65d-8a26e8654fe4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "798349d4-c93a-402b-8386-8b74a2f316e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b8785a-fbea-43e9-8e1f-827f0e71a550",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe93b13-d66f-4814-a548-e75be08ce732",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d7db7ea-c341-4767-a3be-2a34b316c670"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c35760-28a1-4ecc-9fd6-ee46d08bf6d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0a2e027-424e-47bf-910e-0dd0730af6db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5310187-7a33-4921-b36e-21f33317ce8d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b729974e-6dee-4347-ab46-c0dfdc34d5e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "742e402c-4af1-461e-8244-00d299bc12e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09dd8f96-e953-46ef-b861-d7c49bd62733",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bbde275-d1f1-4bfe-914a-b6b1c9585cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a216c371-1bb0-45a5-99f1-eb306b7c7357",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8200213-6ea1-4f8f-b096-94e0307f5bdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59c161eb-bbfb-419a-afa3-a53e6e5190dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab4de535-05e4-4c2e-86f8-7cb6c9f29910",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "130d514a-7e35-460b-9464-5fb4ee27198b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d8c75a-b96f-4dc9-8db7-cfec5cbd24df",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf8857e-6487-46f6-abc4-cae25a15219d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71a592fa-3919-4d7a-8d8c-4472bd3e7b18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb58637c-50bd-4c63-bee0-a595b5413aba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baa5c929-1fc8-4e50-84e4-2263a2852ef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f1ede5-63ec-4dfd-8a0a-9d79f4e991ce",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66a84d2-b655-4307-9396-3b6fb07f04e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "043c725a-c711-40ef-9c58-e0cbd40d3c69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afd49ca-93bd-44d7-b23d-1abc6051a60f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "331f483b-d723-4008-92b2-db85f86840a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8df4a4b-fbb7-4789-9155-92bf5bf08aae",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b06078af-7442-4731-8563-813675da7404",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0718924-dac6-45ca-a6a8-d765fb8ea61e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db007f35-34d9-4816-9638-9b2be81eb085",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f35361ec-ede4-4dd3-afcc-fd385eabb609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c12dfc57-32f8-4ab4-807c-ab9693673225",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eea032c-4109-4801-82cf-59ee988f90db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cfdca31-4bf0-4c13-9c62-9e2f33c9a8e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd84f8a9-a29d-4c74-bae3-3438cccd73fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3225a138-b1c2-47a7-9a80-a5daae52dc2f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43b97fa7-0121-4a38-9ddc-c64f5a2c9bd1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74db84c9-844e-4662-90ec-75ee094543d3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4085ca99-65b4-4178-9eee-b36973126a45",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9181c76a-8e72-4e47-9cc2-6bf198262d62"
                    }
                  }
                ]
              },
              {
                "id": "029a43f2-492d-4fed-aea4-caacfc49885d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "776c1cb2-b60a-4990-a31b-7cc7238b9472",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c293bf27-659d-4b33-b43b-55e5bb6830b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "44bd3558-50f6-4da7-9772-912e970710d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ea4be0-c117-4b85-aacc-ce7bd1301540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d762ebed-0d5f-4008-b952-cc226caeda19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e6176a9-1bb1-4eba-80e0-18bb24fc986c",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7edecf44-ace9-468e-b3de-156935b6bb43",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7f8cb0ee-af9a-4d35-b3b8-a22d1bc7bcba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a763c9-3f21-4be5-abf5-e1ef92af2eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a958080b-2b81-4eb0-8be7-d59635308115"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2135a351-c3c1-4a3c-9cd0-515e86f2db93",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "30a09d17-61e9-4b84-9a1d-944344781118"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0094ce69-5ce6-4704-b301-25f17c2e42a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f56fded-244d-46ab-a8e0-1764e6ef375a"
                    }
                  }
                ]
              },
              {
                "id": "7fd26a16-4997-44cd-8007-93d2b42adf44",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "0b231e0c-1e19-419f-8289-86b17b6aea1d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc40288a-8799-4aa3-a43d-dbb1787d5b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "71dd5d65-3d4a-462c-8474-8e38ab357e7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7bed0a0-bae4-489d-bbfd-a2cb270479dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ae7c55d-a084-4b46-be9a-81713bbc3777"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3b2b96e9-2487-4d4d-9c10-cb0f33122e5f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c7763ded-9cff-426c-b13b-96101cff4ce1",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "35421e38-1c3b-4f82-ad98-b706147b5a0d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "814e3c80-42cb-4f0a-a6a5-8decd02916da"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63cb4418-fcbd-49ae-93e3-48dbe13e066d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a798f2ba-8895-48e8-8037-e6cf79a17806"
                    }
                  }
                ]
              },
              {
                "id": "ee26ca82-bb2a-4fb9-b719-1a0e93a9b1db",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "86f42da1-61b5-4785-ab01-5240ec75b9da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f1eec840-aab8-4b9c-a1b8-3ed6982d9359"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bca6ea22-0ecc-4931-bb60-086cf979b005",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "185b1fc0-be9b-4b84-9f07-5637d0ba7cef"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fbaa4920-0c1f-4d1a-9a39-f572ece9a6b1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3b08bdca-3e68-4657-920a-a695464b3af5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f8bb5237-6a82-45b4-b1f3-dc6c6a8f45bd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "01b2e739-a89a-4aa6-a096-85ca1096be2f"
            }
          }
        ]
      },
      {
        "id": "4a4f697d-38be-49cc-a25d-305fed2e7813",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "6c65d7df-7e95-44f9-8aec-938bb7190bf3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "40fed1b8-4eae-4b97-b426-738e38141cbe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "496b4373-993d-460a-beee-c543efb83b3a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c228fa16-195e-46cb-95c8-0bb3d41e3fbf",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "30d7b548-921e-4459-9f1e-38e2af6898d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88e81a2-c8fa-4444-bf86-ef4402cdb018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4b099ca-e260-41eb-9687-c6a01b0c1874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "865e4bb2-78fb-4148-836a-6452ec613ff6",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fc09c5-b381-415f-a506-ce8546e1b178",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c19fb294-a1b0-4f70-b6a4-5c04d6ae117f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "835e0e9b-a1e7-417a-99b9-575ac67ae3af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aff5c495-8aeb-4262-ad99-11843ddc18c4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9304991b-b78d-4314-bacb-2ed3b474883f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41052474-49d2-43d5-ba73-94c637586043"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "49f19730-0c7a-43c9-810e-c57f19211168",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "425e1c86-1863-41b9-9559-79650c99246d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f287e75-76d5-4e0a-9288-debce2a456b5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7ab9558d-4c92-4ade-8d1e-e35851783328"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ad1f3d88-ea12-4481-a7f4-7c407dd3c85f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1c93ef14-5fb5-472d-b3ab-49d190535bae"
            }
          }
        ]
      },
      {
        "id": "ccb8e10a-c497-41e6-b9b5-a46992a7419e",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "529067f0-528e-4527-9797-0d0521524fa1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e56a721d-aeec-4462-b545-90fb8a38899d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6c336b49-c3c1-4d6b-9515-2bb4031d4ada",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f7f4001-624b-4e15-9b78-72063d064cbd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "87e594c0-ef28-4995-b9e5-0abb882ef927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a975629c-1155-4188-b004-77d1cc86b0d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b800a2a6-feb2-4284-bb07-d14837df270f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a506f5ad-fb5a-4be5-89ab-a16e5d38ff70",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d9791d-bc9d-4e4a-b506-3a2dc6e4c433",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dd6282b6-f6d7-4682-8653-bd7bb4a8793d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e5a73b4-cca2-4a4e-bf1e-5aa546ad9f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a01c437-85b9-4155-9a43-516d7b0aea28"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88e3fbb8-6950-4459-a88b-ab170d69b6b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "efced2ac-c65a-4083-b2a8-b7f68e03920f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e066b870-cf07-4212-bf76-3157d73b9e76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c162c58-3d06-451e-ba42-d99474ff4ea6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fd3db697-a34e-4413-829d-f2bbd48ce6c5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "41d49a9f-59dd-47fc-b3bc-d81bb66373c0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "68e64a21-c872-43e7-bb9f-5a43a28513cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8d9a5d2e-e1e7-44f8-a32b-a519ec99b3a9"
            }
          }
        ]
      },
      {
        "id": "40f5f357-bfef-4412-af8b-215f81ee4c2d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "64d8093e-11ac-4245-849b-7c9c265fafab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6e4d5063-3027-4e8e-9225-d3c0ca24b1cb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "924782b8-d07e-4b0f-a95d-434e8293e615",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7edca855-0cb6-48c6-8afc-d35df185f262",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bb8e12f4-553c-47b1-be05-ee0bb860a188"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0fb97b9-c976-47b9-a1c0-a91fd297232f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "42b25494-9212-4e05-b99f-ce28af8eb911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6fb20f-de69-47d1-921b-51a3bdabe084",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003b6ce9-c8f5-4797-864b-4f1c697c98a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "25af6175-98a2-46e6-aadb-335b89dd1257"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99028c3a-a40a-4f17-81f9-d9c2202c9b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8bb008e-9baf-4d5e-9234-04495e56b9dd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e759404-6146-4b09-8120-ceb3664209b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "903aa6fa-ad5c-471b-9665-c1d143a32247"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "476da88d-3f9f-4891-9220-204431c689f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95252117-eb29-46ea-8af0-0737499c231e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20b7cae3-e01a-4ddb-bbaa-b8758dba0a7e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1160bdf7-2065-43d9-a3db-3cd473104209"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40803e73-2b3d-46d1-a05b-9a7d665510fc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8724a44d-b02f-4822-9492-1c5d2115a8aa"
            }
          }
        ]
      },
      {
        "id": "63db6b24-68f4-47f9-b072-817a0595fd57",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79aaeeaa-f7b6-4944-9e36-9112fe4a3729",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "48794e0f-057b-418d-8a91-735834fe9bd9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3682fb62-aed9-492c-91b2-2ed600a7c07a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e748bebc-dca8-44f7-ab34-ae541bb88d25",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22152b0b-49b0-4df1-b14b-5d5d92e5dbd0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 35
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 19.44787644787644,
      "responseMin": 6,
      "responseMax": 257,
      "responseSd": 38.911345941522946,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677372390436,
      "completed": 1677372408317
    },
    "executions": [
      {
        "id": "74ed4194-5fb6-42a2-80dc-98d1765cc07a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0a2568db-7e1a-40f1-ae3d-9d35129f7c44",
          "httpRequestId": "0fabe50d-6462-4f35-9c4c-e495af3cd5c9"
        },
        "item": {
          "id": "74ed4194-5fb6-42a2-80dc-98d1765cc07a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "18bf7dba-122f-4927-81b1-3562b8d85e85",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 0
        }
      },
      {
        "id": "7dd5434a-4911-4e46-8467-e86bba578eaa",
        "cursor": {
          "ref": "351e0852-3b41-4887-86e4-8261d55a0c5d",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cae58baa-30a6-4105-af8e-adf6f7962517"
        },
        "item": {
          "id": "7dd5434a-4911-4e46-8467-e86bba578eaa",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "2f9ea1e9-1c80-4bef-9d0c-85edd7facd10",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "a57be9cb-abdc-42ce-a57c-cbaa1e922cfc",
        "cursor": {
          "ref": "dedfaca9-0840-47d0-99a4-d0d3ed4ded16",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d41211f7-7b9c-470a-9601-ea3c2113c3c9"
        },
        "item": {
          "id": "a57be9cb-abdc-42ce-a57c-cbaa1e922cfc",
          "name": "did_json"
        },
        "response": {
          "id": "84d286b2-0305-4a9f-bda7-84c6ea40f907",
          "status": "OK",
          "code": 200,
          "responseTime": 221,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8941c990-a72b-47bd-8097-9646f2ca5793",
        "cursor": {
          "ref": "6f061211-c70d-406a-80b8-d68762465a30",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2eaab431-e7e7-412b-aab0-a88aee2e288e"
        },
        "item": {
          "id": "8941c990-a72b-47bd-8097-9646f2ca5793",
          "name": "did:invalid"
        },
        "response": {
          "id": "d6ed5d82-8a89-4660-b18a-c7d2eea7fdcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "8941c990-a72b-47bd-8097-9646f2ca5793",
        "cursor": {
          "ref": "6f061211-c70d-406a-80b8-d68762465a30",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2eaab431-e7e7-412b-aab0-a88aee2e288e"
        },
        "item": {
          "id": "8941c990-a72b-47bd-8097-9646f2ca5793",
          "name": "did:invalid"
        },
        "response": {
          "id": "d6ed5d82-8a89-4660-b18a-c7d2eea7fdcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "641ad79f-c1ca-4f13-942e-a472ad2f6650",
        "cursor": {
          "ref": "1fd62613-eb5a-452c-9d49-238c11f68152",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "63dbc3d7-781d-4a01-ac6e-e1b1f29f70d7"
        },
        "item": {
          "id": "641ad79f-c1ca-4f13-942e-a472ad2f6650",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4a5ccceb-73de-4d6c-9439-aac453199070",
          "status": "Not Found",
          "code": 404,
          "responseTime": 49,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e577c39-63ca-46a6-b3ff-22437696a8a5",
        "cursor": {
          "ref": "0cb733b3-69d8-4e5d-9340-5a88e083ae15",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "34a267f3-b68d-4094-9368-3950cfb4b804"
        },
        "item": {
          "id": "4e577c39-63ca-46a6-b3ff-22437696a8a5",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2cd08612-9c68-4844-a164-ccdbf02bc360",
          "status": "Not Found",
          "code": 404,
          "responseTime": 12,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b897ae9-35fd-4b0c-9d0d-1553176082f2",
        "cursor": {
          "ref": "0534953d-3243-4bc5-8f8e-b831afb46faa",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4bfe7332-d05d-4e20-9b44-f906dacc15fe"
        },
        "item": {
          "id": "6b897ae9-35fd-4b0c-9d0d-1553176082f2",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8e13baa7-15ce-4a47-927d-4f2b10d75375",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b728dfb1-bd58-4583-bd05-f81572951c4c",
        "cursor": {
          "ref": "50734704-561b-429c-a18e-ca1e32850fb6",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "40814b29-54e8-44e4-b262-0018bf1cfb66"
        },
        "item": {
          "id": "b728dfb1-bd58-4583-bd05-f81572951c4c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "65843f10-c37b-4580-89a5-58568a5c1eaa",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 16,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b728dfb1-bd58-4583-bd05-f81572951c4c",
        "cursor": {
          "ref": "50734704-561b-429c-a18e-ca1e32850fb6",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "40814b29-54e8-44e4-b262-0018bf1cfb66"
        },
        "item": {
          "id": "b728dfb1-bd58-4583-bd05-f81572951c4c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "65843f10-c37b-4580-89a5-58568a5c1eaa",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 16,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b5369ee-1664-4876-90c7-f2cf30e4db4a",
        "cursor": {
          "ref": "f2138a76-31dd-452f-8bef-026ea3a0644d",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e3df78c6-5a08-4f15-8637-8445440207c8"
        },
        "item": {
          "id": "9b5369ee-1664-4876-90c7-f2cf30e4db4a",
          "name": "identifiers"
        },
        "response": {
          "id": "0d0b3442-9388-44e2-a673-851aa9a1ddc4",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "991923e5-7b65-4f09-b6f5-db2b56c34cd6",
        "cursor": {
          "ref": "e1271f0f-158e-49cd-aea4-bf1e8b8ba3ac",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cf85e58b-d46e-4257-891e-101040cfe9ca"
        },
        "item": {
          "id": "991923e5-7b65-4f09-b6f5-db2b56c34cd6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6bc1c207-e676-41d5-9f13-ceadf4765cff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "991923e5-7b65-4f09-b6f5-db2b56c34cd6",
        "cursor": {
          "ref": "e1271f0f-158e-49cd-aea4-bf1e8b8ba3ac",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cf85e58b-d46e-4257-891e-101040cfe9ca"
        },
        "item": {
          "id": "991923e5-7b65-4f09-b6f5-db2b56c34cd6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6bc1c207-e676-41d5-9f13-ceadf4765cff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dcfc697-bceb-4f08-ab2d-c56ebba0530b",
        "cursor": {
          "ref": "133bdbee-5c40-4ecc-b956-593bd42792a7",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7ed1b8a9-03c6-483f-a5c9-51803b65ac00"
        },
        "item": {
          "id": "6dcfc697-bceb-4f08-ab2d-c56ebba0530b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9b1e3f81-eee1-4b78-866e-a870f825a930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "227e454f-5fa4-498a-8f3e-be88446e4e26",
        "cursor": {
          "ref": "50e0c4ea-9b8f-4503-bf00-6e35d0c10659",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "929c4a18-0743-4c57-95c9-9922367aa4b1"
        },
        "item": {
          "id": "227e454f-5fa4-498a-8f3e-be88446e4e26",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ec7c44b3-2cc1-4482-b0ae-53176fecd953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1a1baa-3039-4692-bb1d-2520c41d1893",
        "cursor": {
          "ref": "db80042f-9601-4abf-8cab-efdf598a4684",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ae89046a-3ddd-42d4-a989-2928997b0271"
        },
        "item": {
          "id": "4c1a1baa-3039-4692-bb1d-2520c41d1893",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7a0063e0-273e-4177-84d2-77a2d313137d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa2280e-c365-4b19-af01-9d8893fd7e1b",
        "cursor": {
          "ref": "a903e636-d4d9-43f6-b298-a6623e1f2d74",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "405eb7ce-ee3b-4eae-90ef-c36ac5757fc5"
        },
        "item": {
          "id": "4fa2280e-c365-4b19-af01-9d8893fd7e1b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "2f5a2377-900d-41e4-9abd-5ced02f1741e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5c3d21-2211-4c64-b9b1-8ebe32a99fa5",
        "cursor": {
          "ref": "2e1346a4-d2a1-4f5a-b196-df03aedadfd4",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8b0c2112-060d-46bf-9ca7-08bc30731ed2"
        },
        "item": {
          "id": "9e5c3d21-2211-4c64-b9b1-8ebe32a99fa5",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "23627996-852d-452f-b6af-9230d496ae3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "577fbace-4c01-4836-b8d3-3e00d6aa8504",
        "cursor": {
          "ref": "6e670671-fc7e-4c1e-a5a3-f97970f31f30",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "304252cd-464e-4740-acbd-315c782c5a40"
        },
        "item": {
          "id": "577fbace-4c01-4836-b8d3-3e00d6aa8504",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c2f54394-a58d-4009-b798-c4660def9a9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74482878-267f-4092-91c1-be260caefcae",
        "cursor": {
          "ref": "991e0dff-f4ed-4550-b332-558a6dc75e03",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cd705fbb-34a9-4acd-af9e-fbedbfea51f8"
        },
        "item": {
          "id": "74482878-267f-4092-91c1-be260caefcae",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a004cf44-b52d-415c-885e-b436bd3eef6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b4ea2e4-be49-4f5d-873e-fb22a0de0b10",
        "cursor": {
          "ref": "89ab7240-4336-439b-8143-44b34cecf2ab",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "039a14e8-964c-4254-954f-ef7476d9d7b9"
        },
        "item": {
          "id": "1b4ea2e4-be49-4f5d-873e-fb22a0de0b10",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "bccb38af-bf21-4943-9eec-7911adab2f9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae0a1aa3-98d4-41d0-8abc-1fe895cdfc39",
        "cursor": {
          "ref": "53141517-b40c-4417-b849-b025a8e6021d",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "828925f2-1cba-4acc-aaff-94e7579ec464"
        },
        "item": {
          "id": "ae0a1aa3-98d4-41d0-8abc-1fe895cdfc39",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f3d1a01e-9897-49c5-861b-92c9cd28c22e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1156b6c1-7c32-447e-919c-c86854333786",
        "cursor": {
          "ref": "023fe96c-afbf-4e1d-a0a6-74d4cf44b1ee",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d3a989dc-381b-46a1-a3b5-e63feca87778"
        },
        "item": {
          "id": "1156b6c1-7c32-447e-919c-c86854333786",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1cc60e0c-02f4-46d7-82f9-e2cae0fead91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b58a34-9e81-4fb8-8796-49066d4e8c93",
        "cursor": {
          "ref": "1269462d-cd86-41ce-963d-f1615ac283bf",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3b38049b-84b7-4b08-b79e-2b1e5744c620"
        },
        "item": {
          "id": "63b58a34-9e81-4fb8-8796-49066d4e8c93",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "82148e5f-06bf-4699-a8e7-d86dfcc1ff36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6373c15e-32e4-498e-bd1e-03cffb389e07",
        "cursor": {
          "ref": "f4b13fb5-d94f-4e9e-a09f-ca6b842aab8d",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "83324240-f390-4fcc-9827-1c6c79a5605b"
        },
        "item": {
          "id": "6373c15e-32e4-498e-bd1e-03cffb389e07",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "5671d1ef-a587-4522-874b-e912a5a084b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43ce867-80a9-44f9-81cd-9981179aa831",
        "cursor": {
          "ref": "45b6382c-24dc-43e0-966e-b9068b155dcb",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d219c2be-0632-4c88-8b97-cc7b6cbd20aa"
        },
        "item": {
          "id": "e43ce867-80a9-44f9-81cd-9981179aa831",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a30a96f8-40df-47b0-9f14-dbc4d34326aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39c4e42b-ebf8-49d8-9d41-eb67558e6651",
        "cursor": {
          "ref": "20cf9f47-1d03-488b-8943-02354fe0708f",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "84605370-81c6-4fe4-a7b9-f6dee69d0580"
        },
        "item": {
          "id": "39c4e42b-ebf8-49d8-9d41-eb67558e6651",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "940cedae-d8b4-4a03-a359-6b7752109b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "497fa8e4-abec-4472-9436-2bb49b87819f",
        "cursor": {
          "ref": "e073af4f-4527-44b2-b924-f73e6965996e",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "cb90cebb-c73f-444a-978a-84e7b11ab5e3"
        },
        "item": {
          "id": "497fa8e4-abec-4472-9436-2bb49b87819f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1474867c-0c63-4a6b-932c-a88d90c30bc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "408c3d31-4467-44d3-80d1-9c6580955910",
        "cursor": {
          "ref": "5d0b754c-d46d-4400-8926-55956521aac7",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f910e363-98dd-4aaf-9924-c8da4b943be4"
        },
        "item": {
          "id": "408c3d31-4467-44d3-80d1-9c6580955910",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "91b6b2cc-0c71-4dd0-8dac-1904c7388a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54752e31-9afa-47ea-a9ca-53235576819a",
        "cursor": {
          "ref": "107fa1dd-3d24-422b-a007-13e26fc16c36",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "58c97416-3af3-4b94-8984-215258ab4745"
        },
        "item": {
          "id": "54752e31-9afa-47ea-a9ca-53235576819a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "19900452-69e1-4895-92ff-e0edada5031b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf8761e-32e7-458a-bd53-72ceb2d95649",
        "cursor": {
          "ref": "157d18de-d9e7-496d-b5d4-20e6e24284e3",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "60a6e1d9-0f82-484f-87ce-96364a42a1d3"
        },
        "item": {
          "id": "7cf8761e-32e7-458a-bd53-72ceb2d95649",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4802f0bd-0d2e-4177-aa84-650b7853fc22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d2d43a-ee15-448f-b05a-6b286639bacd",
        "cursor": {
          "ref": "28df72d0-20e5-40c1-8ac3-f6053c821424",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f9badc60-c34c-4e56-98bf-c261e028804b"
        },
        "item": {
          "id": "d3d2d43a-ee15-448f-b05a-6b286639bacd",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "70af9d4c-a66b-442d-a27a-1f58610b0349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c94a483e-0ca1-4ab1-9eef-331dd012d163",
        "cursor": {
          "ref": "7b19b0db-1c81-46b6-a744-d878ac0aeec7",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d85e965c-8e29-4510-b798-8c12c6f7b07a"
        },
        "item": {
          "id": "c94a483e-0ca1-4ab1-9eef-331dd012d163",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a20970a8-66fb-46a7-85d3-aa9938e8b0b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "744e471c-f433-4146-955c-1438bea0b7ce",
        "cursor": {
          "ref": "3935b870-5d95-44af-aa06-b77e2dac702a",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c1df8d15-4023-4783-965f-6d75d446501b"
        },
        "item": {
          "id": "744e471c-f433-4146-955c-1438bea0b7ce",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "60ddbcef-5b19-4d75-ae3f-7fb3a31f40d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97b74c16-4345-47b4-873c-54785230351b",
        "cursor": {
          "ref": "fd002e8a-62ee-4bd6-b303-daf5efb91661",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0d912f0c-7045-44a6-bc9f-c18d553df446"
        },
        "item": {
          "id": "97b74c16-4345-47b4-873c-54785230351b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b01f90c3-8466-43f6-9868-06e089522262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d425ac6a-af9b-46d8-acae-183409a749de",
        "cursor": {
          "ref": "080205bf-38f8-4585-b355-ae669f504b09",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7a76f4bb-fbda-4ea6-bba3-6610556745bb"
        },
        "item": {
          "id": "d425ac6a-af9b-46d8-acae-183409a749de",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "bc189319-ade1-4558-b46f-353fe19ae561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f9aec8f-f5b8-49b0-8367-d297f1c4e4c0",
        "cursor": {
          "ref": "c647ac47-0a22-432d-98d1-49edeea86a25",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "83ca2e45-156c-4c62-a148-505680dacc61"
        },
        "item": {
          "id": "7f9aec8f-f5b8-49b0-8367-d297f1c4e4c0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4043502d-2953-44cb-bc44-0bdc2ed36ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2bc2dce-6f62-4c2a-a8c1-af7351d49536",
        "cursor": {
          "ref": "b156e4a1-73aa-4c2f-a32b-553b246f9c4e",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "cf5f4b6b-3012-420c-b72d-097f8d869d9f"
        },
        "item": {
          "id": "c2bc2dce-6f62-4c2a-a8c1-af7351d49536",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "19c4b29b-4446-41fb-b447-43e663cbd08d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "707b3d35-0b53-4de7-88a4-f0afd8621a1e",
        "cursor": {
          "ref": "b8b36584-1d30-4216-897f-a6eb4d4f3d20",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e5f1c35a-8523-4c5b-ba96-2186c8aa2187"
        },
        "item": {
          "id": "707b3d35-0b53-4de7-88a4-f0afd8621a1e",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "fea855af-6cbc-430a-817d-15dcda0206be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b24254-0c83-47dd-a23c-751291e3a3e9",
        "cursor": {
          "ref": "484504ef-3ddc-410d-85ca-4817442b0a3d",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "47c9167e-ae46-470a-b02b-b11aafb43de5"
        },
        "item": {
          "id": "54b24254-0c83-47dd-a23c-751291e3a3e9",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f307833b-967f-44ef-8ab4-a518fb5a441b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f2758c0-0142-4086-8b45-f33de66db8d4",
        "cursor": {
          "ref": "1d98a728-1a1b-479d-9114-392df8a73e68",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "dff07f35-c975-42e3-bb31-d2d0b30162cb"
        },
        "item": {
          "id": "3f2758c0-0142-4086-8b45-f33de66db8d4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "8b54a11a-27b7-40f8-bdae-a7a34b41b57f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c2dc620-7dc9-4d37-8cd6-4f0f6009d8a5",
        "cursor": {
          "ref": "6095d609-082c-4b03-bc7a-d933e1b2dfb3",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9c4d220f-40cb-4484-9137-a91a68a89bcb"
        },
        "item": {
          "id": "9c2dc620-7dc9-4d37-8cd6-4f0f6009d8a5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "80dfb250-a17b-42f7-8e2c-2bc36b0d03a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ab1f8f-a1eb-40ab-87c4-b98b09396de8",
        "cursor": {
          "ref": "aa7d1c0a-0fd1-4c73-b422-83ec39e920bd",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ed961d91-ccf5-4a0b-9dc9-2a9e207e3813"
        },
        "item": {
          "id": "61ab1f8f-a1eb-40ab-87c4-b98b09396de8",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f0e0b1c6-a3fa-4e59-8108-d8a68e94faee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44833d6d-eb7a-4b0e-9a18-1e1365413c7e",
        "cursor": {
          "ref": "08723a58-070d-46bb-a858-eb31d8a3d35d",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3f75c157-bb09-4a3e-97c5-bbf73c9925cb"
        },
        "item": {
          "id": "44833d6d-eb7a-4b0e-9a18-1e1365413c7e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "658d61db-10f5-4819-b492-98d38a4cf0fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28509601-7da7-4f33-abc8-8b11a9641e23",
        "cursor": {
          "ref": "a7d74614-1af8-449c-ae08-afb52bda8336",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "aa86e7f1-4216-4b1d-947e-219d2ec6a61f"
        },
        "item": {
          "id": "28509601-7da7-4f33-abc8-8b11a9641e23",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8b850cb4-9613-42ed-b683-5c9c20a6227e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a69235-a66d-4415-86d8-391b3ec11f5a",
        "cursor": {
          "ref": "5aa4fb6a-fc18-4d8e-854e-074838e7537e",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0e14c8f3-73cb-45db-91f0-5dc68c4ee32e"
        },
        "item": {
          "id": "e2a69235-a66d-4415-86d8-391b3ec11f5a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "26c50dba-efb7-4b1a-af6c-6ed48d63b07c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7b3bac6-440f-4aa1-ada0-b00b86dec56a",
        "cursor": {
          "ref": "68a566a1-b670-49c0-82ed-e2cc44ac705e",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2113da41-0a0d-4726-9d23-b0e55c18aa03"
        },
        "item": {
          "id": "b7b3bac6-440f-4aa1-ada0-b00b86dec56a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "eda58439-6732-40d8-85db-e248649babac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8626ef33-9ce7-485b-a895-ba8dd2d473c6",
        "cursor": {
          "ref": "c02b50ab-919b-41c0-8a86-d33b2de27f7f",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "aaf2c1bd-3e15-4047-b76b-aeeb8a324306"
        },
        "item": {
          "id": "8626ef33-9ce7-485b-a895-ba8dd2d473c6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c69e8a4d-af80-4898-96b5-b444629ce3a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "3f7bb5e4-a934-4edc-a4a2-d8bcc132d562",
        "cursor": {
          "ref": "90fa6eb2-8ba0-431a-82b4-5f5888aa8107",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c0fbd26f-da67-4725-9568-b209f57ef87a"
        },
        "item": {
          "id": "3f7bb5e4-a934-4edc-a4a2-d8bcc132d562",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b5ec39d2-f263-4a8f-938d-6ef9848fcf71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c793bd5-9792-4325-a720-7e63d1eb2272",
        "cursor": {
          "ref": "294c3311-a144-43c1-8cdf-cf3e6c5b54dd",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a90fd228-e7ea-4c43-bc3e-a851cf9f35f0"
        },
        "item": {
          "id": "1c793bd5-9792-4325-a720-7e63d1eb2272",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "48c63821-7870-44f2-9fe8-6030d0ca9e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391de071-994d-424a-847c-508d0f92b715",
        "cursor": {
          "ref": "c20876eb-7feb-4510-8446-68f0961b8477",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6aa5cff2-8a1c-4a4c-a955-ca9bce5436ec"
        },
        "item": {
          "id": "391de071-994d-424a-847c-508d0f92b715",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b655214b-d8d0-48fc-9033-84d31da40030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67674d90-368d-44a7-9c40-4ab4b5eb9686",
        "cursor": {
          "ref": "4e22bfa6-5e03-4540-a4ba-662b97b90067",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d370a57c-ab35-4a7a-a699-2709c9d30673"
        },
        "item": {
          "id": "67674d90-368d-44a7-9c40-4ab4b5eb9686",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "820e5beb-e1ed-4b3c-aa4f-439b50d51a3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86469419-97b7-4553-800a-510d5d2945de",
        "cursor": {
          "ref": "6558ac93-0583-4ee1-a0b3-de891f93d5b8",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f0b38280-0fd4-41b0-b90f-bf4863190bba"
        },
        "item": {
          "id": "86469419-97b7-4553-800a-510d5d2945de",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "da1f404d-f664-4735-a222-7fff9a3a59d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c51cc26-c6b2-479a-be65-111999dcef94",
        "cursor": {
          "ref": "40241d04-6522-498d-8978-6da6ae844094",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "fc688e58-f489-4f55-9cae-b71741d31f82"
        },
        "item": {
          "id": "3c51cc26-c6b2-479a-be65-111999dcef94",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "5b389200-13c3-487e-84b1-d66dd6e75f5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973f16ba-02f7-43df-a41c-e1a1dfeb078c",
        "cursor": {
          "ref": "0cd9d3be-7e53-4f80-9c95-e382ad9fdc58",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "72a489fd-b153-43e7-b276-3433bcb84831"
        },
        "item": {
          "id": "973f16ba-02f7-43df-a41c-e1a1dfeb078c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1325d758-3470-44f4-bce4-b61f107ac261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "e0c55e0f-791d-4a88-af6e-1086a5f9fcbb",
        "cursor": {
          "ref": "40325a19-f683-4e06-941a-a8730f0c93f4",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "93ff05e5-fed6-44de-b25f-c177362a2fc3"
        },
        "item": {
          "id": "e0c55e0f-791d-4a88-af6e-1086a5f9fcbb",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f7ecac37-967e-459e-a162-a4131c89faf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd36f86f-f3c8-4b33-92bb-04efbf52eaed",
        "cursor": {
          "ref": "02e973da-5aa1-49e6-8c56-f060b5022e47",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "916e006d-3170-4ef6-b906-2a0211453d4c"
        },
        "item": {
          "id": "fd36f86f-f3c8-4b33-92bb-04efbf52eaed",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "38ddce56-3a41-474c-9edd-2a363a8b68d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ddddfe5-1fa2-4d3e-923d-11825b07b970",
        "cursor": {
          "ref": "7780d5c8-ba68-4658-b455-1717ca938cbb",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0f1f1268-b5f9-444e-a137-0f1f50cac92f"
        },
        "item": {
          "id": "6ddddfe5-1fa2-4d3e-923d-11825b07b970",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "75b4836f-26a5-484e-9a58-d2fc0be48c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e63c152a-6acb-44be-bcd3-4d005d95ca7d",
        "cursor": {
          "ref": "846eac20-a796-4750-b04a-200e35605ec8",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "891167c2-23a3-4866-913c-0b7b01f94a44"
        },
        "item": {
          "id": "e63c152a-6acb-44be-bcd3-4d005d95ca7d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "13082eff-936b-46a3-bbfa-ee0681343d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89daf0f-eafc-482b-a1e2-ae1d015fccb8",
        "cursor": {
          "ref": "19ed97ee-bfa0-43ed-b68d-91a160363f59",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "260f72f8-669b-498b-8723-68dd24801c93"
        },
        "item": {
          "id": "a89daf0f-eafc-482b-a1e2-ae1d015fccb8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "9cfc2aeb-a462-4f95-960b-e866d7c8febe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebad3158-39bb-474d-b0f1-a5f717e53851",
        "cursor": {
          "ref": "b641b71e-8620-468e-a4a7-2779801dcaf9",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "58bb5a9c-81f4-44f0-a77f-cfe392f503b7"
        },
        "item": {
          "id": "ebad3158-39bb-474d-b0f1-a5f717e53851",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "43a55024-3429-4b29-859a-bfafbb9ca15f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca286f3e-3430-4dca-96d4-c20a2bb21c8e",
        "cursor": {
          "ref": "1b6d28cf-cc6e-45db-aa5e-0dd53f8258ee",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3d47e263-6b3a-435c-a2e9-95d5b96d40ad"
        },
        "item": {
          "id": "ca286f3e-3430-4dca-96d4-c20a2bb21c8e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a3823e84-aa48-4dab-9ee4-706761a51f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311e58bf-0f86-4bcb-9f0f-0ff88f333ecd",
        "cursor": {
          "ref": "78a78439-1f0c-45bf-872e-473f513e82f1",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "50eaedf1-ca77-4de9-8e82-49a5538c7b00"
        },
        "item": {
          "id": "311e58bf-0f86-4bcb-9f0f-0ff88f333ecd",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1d6cc904-2b81-47af-b35b-cdf57371f3eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5838d36a-e1e8-48be-83d2-d6f3515d5dc7",
        "cursor": {
          "ref": "b584444d-ef10-4048-96c0-0181c4aa1280",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5b86cb86-bf8e-41a0-8cbb-94bf141223df"
        },
        "item": {
          "id": "5838d36a-e1e8-48be-83d2-d6f3515d5dc7",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "60d7ede1-0edc-49a8-9c9f-865cc36b1ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6474e7c3-ae7f-4fb8-a5e9-5d3715025cfb",
        "cursor": {
          "ref": "15dfca01-f5f4-4fbb-896c-ac3ee6793b92",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1c8bd6d0-eaba-446d-bdeb-a614419d59dd"
        },
        "item": {
          "id": "6474e7c3-ae7f-4fb8-a5e9-5d3715025cfb",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9840cc2d-4375-436d-96d5-ef57809db257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cab08ae-7d44-4f1b-adf5-a0bfbbf884c6",
        "cursor": {
          "ref": "74b81f0b-0a08-4586-ad43-626235216267",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "aa5121c0-addd-4e4a-b27c-af23eaa11efa"
        },
        "item": {
          "id": "0cab08ae-7d44-4f1b-adf5-a0bfbbf884c6",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d5847158-1b5e-4372-8d55-ab9f26d151a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f0bb821-91e4-4fe6-a547-4652c3dadfde",
        "cursor": {
          "ref": "4150a161-4e1d-4b67-82d1-868b2a46fbc5",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "864db7b7-8ccd-489c-9b79-2b5fef327989"
        },
        "item": {
          "id": "7f0bb821-91e4-4fe6-a547-4652c3dadfde",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "fddb28b7-f904-4a27-848a-d29d6491914d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a8e840-40c6-4894-b805-1c560015a83d",
        "cursor": {
          "ref": "7ccaf764-ba48-476e-8da0-f7069c026dbb",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9cdb3f8a-21fa-413f-a0e6-8406d75cc551"
        },
        "item": {
          "id": "00a8e840-40c6-4894-b805-1c560015a83d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a016eb69-a047-44b3-b670-c6692c29fccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "855a02f6-ca36-45fc-873f-c79d1a41822b",
        "cursor": {
          "ref": "7b2f92a4-0b58-400b-a2b5-f605b4d96a1a",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "978bc97b-b3cd-4f86-bb9e-7d0b68f92f45"
        },
        "item": {
          "id": "855a02f6-ca36-45fc-873f-c79d1a41822b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "6a5f9ea8-097a-4d03-8eb5-188087e9c18b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5434f8c1-51b3-4c76-9f61-f29ed1e35e20",
        "cursor": {
          "ref": "7d11ea93-d9d2-4826-8f35-b89a7e6a235d",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "73aab616-a93a-4057-a4ed-69db19112df7"
        },
        "item": {
          "id": "5434f8c1-51b3-4c76-9f61-f29ed1e35e20",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "0f43acd3-dfc6-427a-b741-d55969f2bd37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da944cc-ee8d-4de8-9f9e-221a1d8aac76",
        "cursor": {
          "ref": "ae5a8331-b38f-42ac-89ab-bac5428941e3",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ff0407fb-d73f-462c-93d5-7de27db8b489"
        },
        "item": {
          "id": "0da944cc-ee8d-4de8-9f9e-221a1d8aac76",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "eeecd1ac-8f1d-46af-baf1-6140ec493237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6947d1cf-c470-4c20-8134-d50c907048cc",
        "cursor": {
          "ref": "549628fc-06e7-4cbc-a7eb-b017d77a53cb",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e9160e3d-118e-4f24-89e1-74b2faaa8b1e"
        },
        "item": {
          "id": "6947d1cf-c470-4c20-8134-d50c907048cc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "9d73412f-2380-4821-86d4-3892a7567cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16322793-c6e0-47ea-bae9-cecc2a1b7972",
        "cursor": {
          "ref": "769f9d3a-81d8-4fe3-b4aa-5ba01116a11b",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9bef15a2-558d-4d18-a8c7-2566bd18144f"
        },
        "item": {
          "id": "16322793-c6e0-47ea-bae9-cecc2a1b7972",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5e6d0255-fc30-4cba-8035-f2f4ea3ad350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f541a1b7-1744-4821-9ff2-76ee2c3f7d1f",
        "cursor": {
          "ref": "3c9e197d-1cb7-47b4-b552-b4071fa622da",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "686d51bc-2b32-4251-ad16-7160ad3da628"
        },
        "item": {
          "id": "f541a1b7-1744-4821-9ff2-76ee2c3f7d1f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "919a5ee1-4459-4575-a4a9-b87fc21e11ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6bb5004-30c2-4251-9bf0-62309751cf06",
        "cursor": {
          "ref": "92e7f7ac-eee2-452e-b74a-15a5a4f45fa2",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "132d693e-4539-48c5-940b-47bbf4ec0146"
        },
        "item": {
          "id": "e6bb5004-30c2-4251-9bf0-62309751cf06",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e9516acc-8477-4e24-b09b-49ab5a5b9135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46d32f2f-baed-45bd-a753-1a9298c7dd74",
        "cursor": {
          "ref": "0ba734e8-023c-4545-a0d9-7f5764eee7f9",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e6a3c49e-49db-42bb-8c35-fefb43ba4b39"
        },
        "item": {
          "id": "46d32f2f-baed-45bd-a753-1a9298c7dd74",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "193f394e-e97f-4ec4-b8fb-56dbc88f4b81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c400cb0c-cb45-4f15-95f8-0ae9a392c462",
        "cursor": {
          "ref": "30617747-d113-4844-ad85-2c6ef657a279",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "73c06743-4f4b-4e8a-a1a6-31c41ffe0824"
        },
        "item": {
          "id": "c400cb0c-cb45-4f15-95f8-0ae9a392c462",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "073fc06f-b1c2-4ab5-b159-5aa8292d4362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf4319c-eeec-4f5a-9462-69879d003a9d",
        "cursor": {
          "ref": "1b85d89e-52cc-49d9-ad78-b162e606e5c6",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "fd9afd90-cd07-43c6-a525-62c4a22ed007"
        },
        "item": {
          "id": "bdf4319c-eeec-4f5a-9462-69879d003a9d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "481005c9-781e-4dc7-b2bf-9ce53a66498a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d445cebe-afbf-445a-b6ab-d2a1c2400c9a",
        "cursor": {
          "ref": "d05dc674-a200-4833-be48-de31f04a19dc",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c3c6eacf-f378-42c6-a052-f13c35a0d353"
        },
        "item": {
          "id": "d445cebe-afbf-445a-b6ab-d2a1c2400c9a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "e19ab5c9-2b4a-4d9f-bd76-9a516afd57de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6330fae-5eda-475c-9ddb-8b763c1de0dd",
        "cursor": {
          "ref": "f660f4ea-3f76-43ee-8346-f75abf205602",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c6ce2191-fbee-4914-ae74-7438027d45c3"
        },
        "item": {
          "id": "e6330fae-5eda-475c-9ddb-8b763c1de0dd",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "511d76a0-69b3-4741-9204-39544cf3ed55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c736b77-9021-447d-8e04-5f620cbe34f1",
        "cursor": {
          "ref": "1eb6d421-b8eb-4f01-9ab9-965822c22ea1",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3cf8f424-78c4-4919-ad8f-6b6b49a4f3e4"
        },
        "item": {
          "id": "2c736b77-9021-447d-8e04-5f620cbe34f1",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ffca020f-3436-443b-870d-8a9ca1b26b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38abb590-924d-4f29-9d17-95ca047c357d",
        "cursor": {
          "ref": "45bbe519-5683-4e6b-9cb4-5a55b9ccc8c8",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4d2d522c-6b18-4858-90fc-e55533cd207a"
        },
        "item": {
          "id": "38abb590-924d-4f29-9d17-95ca047c357d",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "405f1856-0afb-4100-a7a8-9244d3f2344d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d12b6e53-3877-4138-99b1-37bdab0b9032",
        "cursor": {
          "ref": "8c87abfe-cbd3-4878-979d-189bc77fc250",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "0da42294-7a0d-401e-9a90-c809a1c8a370"
        },
        "item": {
          "id": "d12b6e53-3877-4138-99b1-37bdab0b9032",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "829fc394-d0e5-41bd-990b-7789dafc478f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152bd36f-e3ed-4929-8730-260338d04cdf",
        "cursor": {
          "ref": "2e383210-db81-43fe-ab59-0bbc8a9b98c7",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e5e45e55-6466-4293-805a-1bc717ff26d1"
        },
        "item": {
          "id": "152bd36f-e3ed-4929-8730-260338d04cdf",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "cee0d0e3-fc02-427a-9372-0a43f14b3be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba4c72b0-092c-43f2-bcb4-bd3008e8bfcc",
        "cursor": {
          "ref": "3353e1c0-4ea8-4c04-9d7c-2913109550ba",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "fd6ea144-aaef-4646-a29c-70f77b8333eb"
        },
        "item": {
          "id": "ba4c72b0-092c-43f2-bcb4-bd3008e8bfcc",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1afd004d-7e74-4496-8847-b43e2a6cf1bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d624ec3-9edf-452b-9499-d6aee6cd31e2",
        "cursor": {
          "ref": "28c8d9c0-c175-4b59-83a1-17171071385e",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f6a33b8a-8904-44f6-8547-8562fd4c375f"
        },
        "item": {
          "id": "6d624ec3-9edf-452b-9499-d6aee6cd31e2",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "65fd6031-54c0-47bd-8232-3c4056cc5d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb8002c-5195-498f-ae0e-420450cf39be",
        "cursor": {
          "ref": "dd1ec03d-884f-4669-9c66-bda980a5f357",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "0d317b2f-9a8c-4dd3-8652-b12a43747ce8"
        },
        "item": {
          "id": "7cb8002c-5195-498f-ae0e-420450cf39be",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e0c710ef-a725-4931-b525-9f83a5a6ba83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd2af340-9981-4c2c-b2af-3d71ee60b1be",
        "cursor": {
          "ref": "c5361dca-8757-4d6a-86eb-e95372efdeb0",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9d4a8b51-3445-4915-b8de-9967a1979024"
        },
        "item": {
          "id": "cd2af340-9981-4c2c-b2af-3d71ee60b1be",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f46f6043-55d1-490a-92b1-723ad365619f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b096a5-5e1d-4a8a-9151-b00b5cd4a536",
        "cursor": {
          "ref": "db2e49ba-582c-4319-a4f0-e078ecfb9ee6",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "be1644a8-9229-491b-a9ee-e806e01335f7"
        },
        "item": {
          "id": "f6b096a5-5e1d-4a8a-9151-b00b5cd4a536",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4adaec3c-1b18-4f7e-b0ea-7a00f721f08b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "329e6b43-791d-42fc-8de0-e1d54dca8398",
        "cursor": {
          "ref": "acc8437c-cbda-4d66-9773-957a408533ad",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4ac90603-463b-48dc-bc48-7ffc77fbb260"
        },
        "item": {
          "id": "329e6b43-791d-42fc-8de0-e1d54dca8398",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "6fdb8b24-8bed-44e3-84b3-09ad0105c996",
          "status": "Created",
          "code": 201,
          "responseTime": 29,
          "responseSize": 859
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "a19efdec-c226-474b-b7b0-2c1afb189ddc",
        "cursor": {
          "ref": "a2d3b1fe-869b-4c98-b716-a6f6ef99d863",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c5fbb6e6-b339-48da-89bf-0937f6412e65"
        },
        "item": {
          "id": "a19efdec-c226-474b-b7b0-2c1afb189ddc",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8909614f-401a-40d8-aacb-279d097ab922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7795bae-9edf-4394-be67-7c02030571ed",
        "cursor": {
          "ref": "4cc7dc09-67be-4b3e-8174-c49cef8ac441",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "8063e74d-66d9-469d-887f-58ea46d27c5a"
        },
        "item": {
          "id": "f7795bae-9edf-4394-be67-7c02030571ed",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "30342998-e579-4727-9d9c-da05c0ff3cb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e381d1-69d4-4b0d-9336-a1f5d265594e",
        "cursor": {
          "ref": "37a68534-f7c9-4ecf-a958-3e81b2b63744",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "1507f15e-e797-4685-902e-907d9a79acd2"
        },
        "item": {
          "id": "63e381d1-69d4-4b0d-9336-a1f5d265594e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ac442290-4a53-4032-8501-580f9e36f28a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e38576-a660-4db8-9c66-a6f8ac860d19",
        "cursor": {
          "ref": "6b6f8c51-1a9a-4bb9-a8f0-3f0669551fec",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6f357657-3c47-4c60-b3f6-ac182f36887c"
        },
        "item": {
          "id": "06e38576-a660-4db8-9c66-a6f8ac860d19",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "61a0fcb9-823f-4de1-8a66-e55857da4013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35be056b-576b-4ef4-a3aa-fabd0d65337e",
        "cursor": {
          "ref": "d6d56b6f-e851-46d9-bb3e-c36d7a928349",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6b4c1e24-c346-4573-890a-4916369b84c1"
        },
        "item": {
          "id": "35be056b-576b-4ef4-a3aa-fabd0d65337e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a0a9aa35-406b-4c86-a5be-ca0a7b5e4ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fa82c44-fcf0-46bc-b506-8d62f52d6c03",
        "cursor": {
          "ref": "dec4c872-4d4a-4899-a92c-702f64846f4d",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "13909fa5-fae7-4aba-98e8-ef9f84c5e3a8"
        },
        "item": {
          "id": "0fa82c44-fcf0-46bc-b506-8d62f52d6c03",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6085dc97-c94d-49ab-9ade-fd2cbf006e81",
          "status": "Created",
          "code": 201,
          "responseTime": 28,
          "responseSize": 860
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "818e521b-97ff-41e8-b852-696ca1c34cad",
        "cursor": {
          "ref": "87fff663-030d-423f-b03e-e6ccc2169924",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e8c7f103-6143-4bc9-98d6-93704388ed99"
        },
        "item": {
          "id": "818e521b-97ff-41e8-b852-696ca1c34cad",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3cd1af8b-bbc9-4903-8af4-fd8e7626df76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f82b86-3209-43e9-aeb3-c588f877e1e9",
        "cursor": {
          "ref": "89d1acc6-bb23-497b-adbb-65de81108577",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7c2390b0-22c0-4329-8040-430142dcd8ce"
        },
        "item": {
          "id": "93f82b86-3209-43e9-aeb3-c588f877e1e9",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "64b51d13-28c8-4751-acd2-c0bb3d8f4c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09da0c80-6ccc-43dc-bf25-bca2f52f9b7d",
        "cursor": {
          "ref": "5c7017e4-cdbc-4a31-8cf5-bb74bdd298d0",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8935303f-e30d-407f-a461-0e8d194e985a"
        },
        "item": {
          "id": "09da0c80-6ccc-43dc-bf25-bca2f52f9b7d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "af3e597d-a69d-43a2-9e5f-c13f613cd6a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a0111c3-1d29-4e79-95f3-a3c090800f07",
        "cursor": {
          "ref": "1810eea9-c381-4688-99f7-d8242f8ec991",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7a17a779-49ce-43cb-80bc-6f0a5db83bf2"
        },
        "item": {
          "id": "5a0111c3-1d29-4e79-95f3-a3c090800f07",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5e52bdcb-dc9b-4653-a46e-8874f63acb9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b71f7d3-1b63-4373-98de-8a5b62b0f5df",
        "cursor": {
          "ref": "27fba1b2-6b39-4611-aa14-730d5892c0d5",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d870b4d4-7691-4d1c-b716-40e4e997012b"
        },
        "item": {
          "id": "6b71f7d3-1b63-4373-98de-8a5b62b0f5df",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "14c2425f-159e-4dba-bf2d-3b4c962a4cd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2aa55a7-e4a0-46a7-a048-d67ea24565dc",
        "cursor": {
          "ref": "fc4ffb20-16ca-41aa-8df2-4a4a7955e412",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "754339d8-83e6-4a76-9953-f35401ca803a"
        },
        "item": {
          "id": "c2aa55a7-e4a0-46a7-a048-d67ea24565dc",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "23bf4cc6-9926-432e-8cfa-8afbb51e7cb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf4bb34-c234-4bb3-ad17-1e91b4e5f988",
        "cursor": {
          "ref": "4f62ec6d-8c99-4d47-9b3b-37108a95e292",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ddf0fcb6-8ad2-4bb0-9b73-e84f70a06372"
        },
        "item": {
          "id": "dcf4bb34-c234-4bb3-ad17-1e91b4e5f988",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d8e7af6c-d685-4faa-9a61-b798896ff4d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c71840af-819c-46df-9839-453243ac39e0",
        "cursor": {
          "ref": "9d6aa364-082f-4cb2-b470-846092f06875",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7b4ed82c-6a77-4cc9-8eea-1f711189f330"
        },
        "item": {
          "id": "c71840af-819c-46df-9839-453243ac39e0",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2a752247-a3dc-4b3e-82ef-5fb52bbd18ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed393950-4179-49bd-a0f1-7125251c8b1e",
        "cursor": {
          "ref": "5e9cf419-15f5-4dd4-a321-219565572340",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5cba8444-da55-4a83-a8f3-8c9d8ee435d3"
        },
        "item": {
          "id": "ed393950-4179-49bd-a0f1-7125251c8b1e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a046915f-3b19-4fd0-bac0-bc4d990963d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "196d54a4-ec86-45bd-9fdd-2aee88485636",
        "cursor": {
          "ref": "288b93f7-7d89-4552-b574-4268cf6e5b07",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "cecabd4e-fa56-4a25-a1e2-5dee061d9f3e"
        },
        "item": {
          "id": "196d54a4-ec86-45bd-9fdd-2aee88485636",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "a762169f-13d4-447c-9c7b-24947c9dbff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "9d8c691a-46ee-41a0-9b23-230080f6fcd1",
        "cursor": {
          "ref": "2c56cc49-5941-43a2-8006-e41a3f91c241",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "dffe37f7-b239-4781-94dd-168ddb97a43a"
        },
        "item": {
          "id": "9d8c691a-46ee-41a0-9b23-230080f6fcd1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "409aff05-983a-4acf-892c-729824a68ac6",
          "status": "Created",
          "code": 201,
          "responseTime": 29,
          "responseSize": 862
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "90ad05eb-5e3f-44e6-9c43-e26558a620c5",
        "cursor": {
          "ref": "8853202d-bf04-4354-bac9-4e2eea1ebfd8",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "90bc91ec-0a15-4e62-8b61-73d72ae4e015"
        },
        "item": {
          "id": "90ad05eb-5e3f-44e6-9c43-e26558a620c5",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "beb95bcd-0a65-4488-a0cf-65680f3860e2",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 860
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb67443-1cd4-45fc-a9aa-22c67bec89e0",
        "cursor": {
          "ref": "0d54276f-0e7a-4bb7-a2c1-b951a2ace2cb",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "27f01cba-f39b-4363-b471-d7b6801c1d35"
        },
        "item": {
          "id": "3cb67443-1cd4-45fc-a9aa-22c67bec89e0",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "acb98164-01da-497b-abf7-b995483fc9e6",
          "status": "Created",
          "code": 201,
          "responseTime": 27,
          "responseSize": 882
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "db198420-24ed-4e84-91ec-30757330bbca",
        "cursor": {
          "ref": "414afa4b-f9ed-4a56-80fe-f1af0793df7b",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "16125a8c-4505-4b69-b4f7-5f849f023a50"
        },
        "item": {
          "id": "db198420-24ed-4e84-91ec-30757330bbca",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "25232f4d-92d8-404c-8338-0067631080c1",
          "status": "Created",
          "code": 201,
          "responseTime": 34,
          "responseSize": 850
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e4346b-a8ea-4c8e-9634-1c31754b99c1",
        "cursor": {
          "ref": "25f3a458-283a-4e1f-a02c-9e829cbea064",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "bb777fc2-60ab-4881-947c-c4743ae9ec91"
        },
        "item": {
          "id": "f2e4346b-a8ea-4c8e-9634-1c31754b99c1",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a322d6ef-c84e-44a8-8280-ddd6a7a83289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "37250b33-4cac-4a16-975a-b8bea4040bda",
        "cursor": {
          "ref": "11039296-f54b-439b-af6b-2f881c68cd34",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0e98e555-accd-431e-8d3d-d985011c29fa"
        },
        "item": {
          "id": "37250b33-4cac-4a16-975a-b8bea4040bda",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7af52edf-e590-4777-af99-fd18e235dd28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37250b33-4cac-4a16-975a-b8bea4040bda",
        "cursor": {
          "ref": "11039296-f54b-439b-af6b-2f881c68cd34",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0e98e555-accd-431e-8d3d-d985011c29fa"
        },
        "item": {
          "id": "37250b33-4cac-4a16-975a-b8bea4040bda",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7af52edf-e590-4777-af99-fd18e235dd28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e4ed614-a186-4e0d-831d-e83c54b3d741",
        "cursor": {
          "ref": "1de288a6-a778-4e4e-97a2-57a2040cef64",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "999b4704-d336-45dd-a6df-fe11763b1ac9"
        },
        "item": {
          "id": "5e4ed614-a186-4e0d-831d-e83c54b3d741",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e46aa7f6-b952-4b52-91ab-e124949e0a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24b9651f-8234-4fa8-ba2b-56f1629d7df1",
        "cursor": {
          "ref": "d422e7ce-1101-4dfe-9357-14ee7093e1af",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "92af9cf0-b25d-4d87-9d1e-720742e4e403"
        },
        "item": {
          "id": "24b9651f-8234-4fa8-ba2b-56f1629d7df1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d76d142c-2591-4a38-8b69-01c1984b41e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bf86f35-414b-4e3d-be70-23f872340065",
        "cursor": {
          "ref": "b1912cd3-4375-4709-a505-d08e837fd5f2",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3554c59e-51fa-4f13-a5bf-893500a7e119"
        },
        "item": {
          "id": "0bf86f35-414b-4e3d-be70-23f872340065",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "83bfbd14-9d11-434b-b842-610f712edea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ffa4135-190f-4fc6-91d0-a8c411bf940a",
        "cursor": {
          "ref": "604764eb-3790-4b05-8895-f1f50778c24e",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "56aea40f-2f60-42bb-a26d-226e3ad4d592"
        },
        "item": {
          "id": "2ffa4135-190f-4fc6-91d0-a8c411bf940a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d42a96aa-9a90-47be-9844-73f234a2982a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73bf8d09-ddc1-42dd-8972-cff92ad4b06f",
        "cursor": {
          "ref": "346807b2-bcb1-46f7-99a7-8e7cacb40385",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6ef2606e-0121-4fe4-8912-fa189631e6ea"
        },
        "item": {
          "id": "73bf8d09-ddc1-42dd-8972-cff92ad4b06f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "80d931ba-0d19-49de-bbe8-893cdf4d4faf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9414ca5e-9098-4a40-ae25-29d97449248b",
        "cursor": {
          "ref": "bba2b376-168b-4a00-a212-3c37f3686dfc",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "834c415e-6ffc-49cb-95de-3cbda9ebff74"
        },
        "item": {
          "id": "9414ca5e-9098-4a40-ae25-29d97449248b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "bb656248-b9db-4777-9300-b78e41d1f978",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "096a4a93-eba5-4ac1-972b-741f666aaa65",
        "cursor": {
          "ref": "50714be0-f1f0-4317-8601-19dd5454ef49",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "01122ece-618f-4c40-8013-8a83b1cb127c"
        },
        "item": {
          "id": "096a4a93-eba5-4ac1-972b-741f666aaa65",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3eb41fb5-69bb-4725-83e3-89b7dedf2a33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad76173a-cecb-4c19-ba81-a38ac231f8c5",
        "cursor": {
          "ref": "ffa2a84c-fed7-44d8-857a-ea40ba00f8e0",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ede28538-d1a3-4a4c-a07e-8ecdd067e789"
        },
        "item": {
          "id": "ad76173a-cecb-4c19-ba81-a38ac231f8c5",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7ce02341-3c29-4b34-bb86-7d8172c7f407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d785c0b9-7566-40d2-b14f-9611518f3d8f",
        "cursor": {
          "ref": "b20f3475-d6e1-4007-a18c-a022e3750501",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8d443791-b558-47fe-8751-3c39755bc21b"
        },
        "item": {
          "id": "d785c0b9-7566-40d2-b14f-9611518f3d8f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "cc049df4-e15d-42e6-815b-1dabfeb2a630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27057233-3f04-4f7b-a76a-a355e2f60b21",
        "cursor": {
          "ref": "6524ca41-1895-4948-885f-3f9462644464",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "bba8667a-ce88-4449-a44b-678a723d1f76"
        },
        "item": {
          "id": "27057233-3f04-4f7b-a76a-a355e2f60b21",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "806f0018-c3fd-4d3d-b04b-4a8dee26fa0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f87a3ef-4592-4160-a6a6-f9c719f4e90d",
        "cursor": {
          "ref": "68c583c7-363c-44a1-b86f-f451d2d7f209",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "dbb8a8be-a85b-4298-8852-49814e749d0e"
        },
        "item": {
          "id": "8f87a3ef-4592-4160-a6a6-f9c719f4e90d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "cb2ec086-4200-4760-9cbb-e58af7993b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe51e2a0-69b4-4c08-9b25-898c9f4d7323",
        "cursor": {
          "ref": "c2034bce-e5da-4048-98e6-dcac547f23fe",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ecf1db37-4599-4d37-98a9-5ed37182f589"
        },
        "item": {
          "id": "fe51e2a0-69b4-4c08-9b25-898c9f4d7323",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4ef4b934-16bb-499b-b9c7-41687700c5d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065d2002-5f0c-4386-85e8-95cbf4e60c7d",
        "cursor": {
          "ref": "2ee10a31-44e7-486b-8bd2-5d07cb7cb665",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f39c3043-0aa9-4308-9c1a-c63b4288fb04"
        },
        "item": {
          "id": "065d2002-5f0c-4386-85e8-95cbf4e60c7d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "65548fe1-8b7b-43ee-8fce-3a406624c2d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e11746-14c5-4ac5-9156-a614cf8eadc0",
        "cursor": {
          "ref": "1c9c997b-5a24-4627-9a0d-8020bbda1757",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8d299557-a465-403b-bfe6-a1328adc7fd7"
        },
        "item": {
          "id": "78e11746-14c5-4ac5-9156-a614cf8eadc0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "669f7e8f-f42b-4d64-bf73-07de7c664a80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d49e0472-0f51-43c8-b4b2-35f6fa960924",
        "cursor": {
          "ref": "8cf081c5-40cd-4146-99c3-0a4e72f0a137",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3345e5fd-1ae6-4105-936e-ee86f2b05c97"
        },
        "item": {
          "id": "d49e0472-0f51-43c8-b4b2-35f6fa960924",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "bd68df20-d74b-44cb-ac66-0c28702ed606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9a464f-8e3b-4f3a-abe9-e0edc7fb83c7",
        "cursor": {
          "ref": "26b9bb03-1f94-46c3-9dd5-ad6478e84966",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "70a39dfa-7f12-4e0d-9c84-30726f64d308"
        },
        "item": {
          "id": "cb9a464f-8e3b-4f3a-abe9-e0edc7fb83c7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "40489771-f6fb-4c1e-b5bb-e515bd8c086b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba6ed8f-1a10-44ea-9169-d1e2c3362e47",
        "cursor": {
          "ref": "3d6b3b55-af7c-408d-b05e-9a8b8b08dfa3",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e430634e-2175-45fe-ad15-43ff2782a21e"
        },
        "item": {
          "id": "3ba6ed8f-1a10-44ea-9169-d1e2c3362e47",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5d4fef96-bb9e-4867-a974-45fa5ad7a478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d1dcab-fbb2-4614-8daf-37a32a0232c1",
        "cursor": {
          "ref": "998eb3c3-d048-43e4-8c28-91e48b7d103c",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f8500cd3-b84c-4588-8212-5fdb7c9bd217"
        },
        "item": {
          "id": "c5d1dcab-fbb2-4614-8daf-37a32a0232c1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0b35e239-5eaa-4ad3-9c6a-cf6a28b771ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21e5e56-6fbc-4b69-a231-67bd698f01b7",
        "cursor": {
          "ref": "a6e0e86a-6e27-4db0-9133-4d27fd62893a",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "be1c750f-a6bf-4c7c-980d-79f68a7e16da"
        },
        "item": {
          "id": "c21e5e56-6fbc-4b69-a231-67bd698f01b7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ceb1d840-e65e-454e-96ca-04e08deaa171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a365f81-2b0c-48a2-a1bb-e2b7eec93167",
        "cursor": {
          "ref": "db9059e6-dc64-43ff-b20b-baa8fcb8a49d",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d11a0354-98d0-4143-801d-d6bf2094fcff"
        },
        "item": {
          "id": "8a365f81-2b0c-48a2-a1bb-e2b7eec93167",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5c113597-0b9d-45f3-b7c6-44aabe27155a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ab9a51-2a97-4708-b68a-836516ab176c",
        "cursor": {
          "ref": "dcfc11fb-220b-403c-bb2c-797a163d28d4",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6be3beb9-5073-4ff6-b316-ded2fcad1aa6"
        },
        "item": {
          "id": "35ab9a51-2a97-4708-b68a-836516ab176c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f8751f5c-f9be-482e-860a-df95538df267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe3ab9c-1cbb-4a5e-90f7-3489c95f934e",
        "cursor": {
          "ref": "8df16391-f52a-4942-bc77-07d71a479a6c",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "804a5454-65d9-47f8-9b30-8340e43fef5c"
        },
        "item": {
          "id": "4fe3ab9c-1cbb-4a5e-90f7-3489c95f934e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6a9d28d8-b55e-4980-b4a2-9df89e8605a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6bc5254-ebdd-403e-af53-a4569e0a6a22",
        "cursor": {
          "ref": "644d560e-dd1b-485c-b7f8-bf2d1f23d67a",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "026dab4a-2157-4485-ad46-6bfc3768a0b9"
        },
        "item": {
          "id": "c6bc5254-ebdd-403e-af53-a4569e0a6a22",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9e42441f-f80e-40f5-904d-6aaec58510fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78847ffa-ebb7-4c55-9644-39d7b432d0d7",
        "cursor": {
          "ref": "dacacf8a-66d6-4843-b2d2-62dc6588ca6d",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "799f3dd0-12c6-48aa-a034-a4e4f27dd821"
        },
        "item": {
          "id": "78847ffa-ebb7-4c55-9644-39d7b432d0d7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2600b258-0506-47c4-9a41-2fc3fecfe654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "618cfb7f-938d-4d0f-b2dd-13ad81212bb9",
        "cursor": {
          "ref": "ffc09386-7928-41d0-849b-a4d0e90e73ef",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "50b751a6-05e9-4f72-b2fc-5abde7de105c"
        },
        "item": {
          "id": "618cfb7f-938d-4d0f-b2dd-13ad81212bb9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6da4e1ea-096d-4f85-a768-8508c2db6828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "721495d4-9636-4b2e-ae09-ecdb5268b746",
        "cursor": {
          "ref": "f1bc9fd3-ff40-4a91-9399-24b608da15a2",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c1b59a2a-f482-46cf-ad87-e7589fd38f73"
        },
        "item": {
          "id": "721495d4-9636-4b2e-ae09-ecdb5268b746",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8f561da8-4deb-4381-911b-bc20300ed8e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42673430-a115-459f-b0b9-ed8024495e8d",
        "cursor": {
          "ref": "80f1e76f-bf59-4d31-8b38-961e71c6ee0b",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "78712ef4-ec2d-4d13-8590-5ebd3183be01"
        },
        "item": {
          "id": "42673430-a115-459f-b0b9-ed8024495e8d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b2073119-92a4-45bf-9201-06dadedf86b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "900d57b5-f57d-4e65-a3d8-bb606c39b1f6",
        "cursor": {
          "ref": "6c7674e8-52a0-4c17-bd10-bdd1dc3ccf36",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8574cb93-9c20-452d-8d39-bb182dec25d6"
        },
        "item": {
          "id": "900d57b5-f57d-4e65-a3d8-bb606c39b1f6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "171c9a9f-c64b-4479-8219-65c76f023a80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee8e5c6-5ff8-4def-86e4-484006df6584",
        "cursor": {
          "ref": "dcfcc73a-5c93-4288-a4c5-ae1ac9182b29",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "8c93e43a-cd35-4db2-9559-38cde4be1dfc"
        },
        "item": {
          "id": "4ee8e5c6-5ff8-4def-86e4-484006df6584",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d511a285-756d-4f1b-8c0a-7d4b50ab328b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e045112e-98bc-426d-ba3a-2a1064b5aef3",
        "cursor": {
          "ref": "f0df9cea-d37c-42c9-a42f-9d6a3724dee8",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "df2ad07f-6c54-4bf2-8e8e-1ff76222cf82"
        },
        "item": {
          "id": "e045112e-98bc-426d-ba3a-2a1064b5aef3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d0ae25e3-b00d-4206-9752-50f14f48f18e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "466f7d10-5846-46ad-b5ac-724311c88568",
        "cursor": {
          "ref": "ae448b6c-fa5f-41a7-84e5-ae6219747783",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3407bee9-eb07-4a3e-913f-21bcd56e0c62"
        },
        "item": {
          "id": "466f7d10-5846-46ad-b5ac-724311c88568",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b5985065-47fb-4d9a-b2eb-28c9af60dc13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25bac81c-2158-4e2f-9ce9-2b1abb8fff4f",
        "cursor": {
          "ref": "aacad2f7-d125-48d7-89f6-1deea517ea5f",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c60067d4-95c2-46e8-abe6-90fd1b8e4d3e"
        },
        "item": {
          "id": "25bac81c-2158-4e2f-9ce9-2b1abb8fff4f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1db55f66-4950-4040-b809-1f14b6bc1bb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "3e268183-204d-4a32-89c9-ff69fd06876e",
        "cursor": {
          "ref": "3d365ec2-421f-4aa4-b73e-ecb6836e6d55",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9fbc698e-43c0-47f4-b6c4-551f07bdb25d"
        },
        "item": {
          "id": "3e268183-204d-4a32-89c9-ff69fd06876e",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "f611f180-6121-4a74-8b44-b9446ecd9d06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "9ba6c7b6-4acf-4f85-a939-5582920f75bb",
        "cursor": {
          "ref": "ff1ddcdf-1bd3-47a7-904d-7c0e4d2fbe93",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "97cfe686-120e-416d-9365-73ea4e6f690d"
        },
        "item": {
          "id": "9ba6c7b6-4acf-4f85-a939-5582920f75bb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f8b3860a-85e4-440d-ac0b-b868b368a392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba6c7b6-4acf-4f85-a939-5582920f75bb",
        "cursor": {
          "ref": "ff1ddcdf-1bd3-47a7-904d-7c0e4d2fbe93",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "97cfe686-120e-416d-9365-73ea4e6f690d"
        },
        "item": {
          "id": "9ba6c7b6-4acf-4f85-a939-5582920f75bb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f8b3860a-85e4-440d-ac0b-b868b368a392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdb3e801-573d-43c6-b03b-7e871c82f035",
        "cursor": {
          "ref": "6567aa58-e8d6-4140-af55-29c549e59390",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e7b1d752-4b97-49e7-a375-602251bf7b5a"
        },
        "item": {
          "id": "cdb3e801-573d-43c6-b03b-7e871c82f035",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "831da799-0d74-45a2-b8a9-6818b428f08a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c7c3392-1aa6-4996-b75a-bb2678c0b646",
        "cursor": {
          "ref": "ba64b1de-0252-4854-aca5-75f87504740a",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b27c0fef-9056-48a7-a371-67865d7152c4"
        },
        "item": {
          "id": "9c7c3392-1aa6-4996-b75a-bb2678c0b646",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3a8e7359-ceb8-4ae3-b3c5-1b506b3be52d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f8a3ac8-2246-4f6a-ba4b-71da03f7bb3e",
        "cursor": {
          "ref": "537dd0a9-d285-40af-8cc8-acf549c60766",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8ce200fd-e49e-4483-89e4-516c9c81e79b"
        },
        "item": {
          "id": "2f8a3ac8-2246-4f6a-ba4b-71da03f7bb3e",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ef30c525-33c2-40b8-b8bd-80703e2b6ca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99bd6318-0af9-4c71-9305-4085c4aea3c4",
        "cursor": {
          "ref": "a0ffa942-8bb2-4bde-a139-834d5998961f",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "fe8199dd-3cce-4dce-bb0a-62448bdc78c3"
        },
        "item": {
          "id": "99bd6318-0af9-4c71-9305-4085c4aea3c4",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0dcf2dd7-2cdb-4fed-8872-459f24f70243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b074ee-0c77-4d90-8879-ef19466a63a8",
        "cursor": {
          "ref": "ba9f278c-65b9-48b9-a04a-0717c28553c8",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "505edce6-c8c4-4671-99cc-4f782ddb5e71"
        },
        "item": {
          "id": "e0b074ee-0c77-4d90-8879-ef19466a63a8",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3edea9b3-5aaa-4dcf-800b-d9784a1453ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae5ed5e-f1de-405e-a414-1a0db78db5c8",
        "cursor": {
          "ref": "820733af-94da-4cf3-a751-6b9070a847a4",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0837a338-d683-4f6f-bfda-12f8c745ecf0"
        },
        "item": {
          "id": "5ae5ed5e-f1de-405e-a414-1a0db78db5c8",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "639bbf5b-aa7f-4345-bd2a-8c275c30dace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e004167d-35a4-46fa-a718-e90cf6668fac",
        "cursor": {
          "ref": "61ec467e-53c1-4371-a9c4-07e500098572",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "3c97dde8-e735-4bac-bdf1-74939d8f0caa"
        },
        "item": {
          "id": "e004167d-35a4-46fa-a718-e90cf6668fac",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "2b36f3c1-8ce5-470e-ba35-c4fe001682d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c9f8d18-782b-4d95-b29f-b5081deb7944",
        "cursor": {
          "ref": "68d155c7-7b1b-4e8c-b2cc-9735ae1d3dbe",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "947a08e8-8de1-4f8a-b47d-72fc8916d5fe"
        },
        "item": {
          "id": "3c9f8d18-782b-4d95-b29f-b5081deb7944",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7c621a07-0e18-47bb-a9c6-7ba52f765609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc49f77-510f-4948-a119-f2cfb2b67bb9",
        "cursor": {
          "ref": "6e95f00e-557c-4bc7-ba1c-23ca1f0197b8",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ec01484f-811f-41b4-9ebf-5d472c1e8b3b"
        },
        "item": {
          "id": "3cc49f77-510f-4948-a119-f2cfb2b67bb9",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4a73ce94-0669-4a6c-91b2-866b0fc25400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aabf53af-9c40-49f6-ab3e-eb8112ba2440",
        "cursor": {
          "ref": "a01d3ee3-3ecc-437e-bf60-438215e1f124",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "524e0a96-f942-46e8-ab8d-94c04da680d6"
        },
        "item": {
          "id": "aabf53af-9c40-49f6-ab3e-eb8112ba2440",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f8324cba-bd0c-4ca8-972d-a98336934f4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16cadcc1-e63c-4f00-b87a-7d4f2ae98143",
        "cursor": {
          "ref": "cf7c6a0f-8cb3-4795-8f9c-40d408399f7a",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "cbe6cc3e-c438-4ada-90c7-13f435397a42"
        },
        "item": {
          "id": "16cadcc1-e63c-4f00-b87a-7d4f2ae98143",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e7b11945-ba73-4f09-9fc9-9ef95f1ead4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "570299d2-f48f-4c94-84c0-a70ef3cbd154",
        "cursor": {
          "ref": "3fde2a8d-b72b-4685-9975-57d07e79128d",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ea239f6b-bf65-4581-8b61-caf4bdf89d6e"
        },
        "item": {
          "id": "570299d2-f48f-4c94-84c0-a70ef3cbd154",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6ef00eaa-02d9-4347-bb28-aa61259221b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9243534-73b0-4e3f-b003-70e331b1f0da",
        "cursor": {
          "ref": "30e8363a-69a1-4882-8dec-965e4472a791",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "89546f1e-f958-43ad-b66b-b3d94cd793fc"
        },
        "item": {
          "id": "e9243534-73b0-4e3f-b003-70e331b1f0da",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "58bd7e1e-3122-4950-bd93-1f5c4eea6931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d99bee-d5e4-410f-8ff9-f18d0d39e006",
        "cursor": {
          "ref": "69682e06-38af-412b-b101-2540ab1b4c98",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "117b41e2-6933-4cbf-8bca-f9cd52d0e378"
        },
        "item": {
          "id": "a6d99bee-d5e4-410f-8ff9-f18d0d39e006",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "798a9e74-c9b7-47c9-8123-0fcbeddf57d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb8e8f9-e08b-4767-a713-b8366342a73d",
        "cursor": {
          "ref": "f51cc9aa-c348-434c-8589-ff19f9d6e112",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "2b97bb89-51ca-4542-a992-93839fa74d3f"
        },
        "item": {
          "id": "6bb8e8f9-e08b-4767-a713-b8366342a73d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7b09e23f-e733-4028-966b-538c762e5425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb42cee7-ffb7-44bb-88ea-d7970ea1e961",
        "cursor": {
          "ref": "573fdc86-ac6f-4e5b-9e3f-71b79e71c269",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9086c8f4-455b-4866-a93e-e1764c1bffc9"
        },
        "item": {
          "id": "bb42cee7-ffb7-44bb-88ea-d7970ea1e961",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "22ef36f8-85ae-4997-8562-cde25558de0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0ebaf9-5707-47f8-8007-8e08d48c2302",
        "cursor": {
          "ref": "b4d4be06-cbf1-4f3d-8084-80a5a1c7dd10",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "769d9ef3-b9e7-4496-8698-fe36ac7badd4"
        },
        "item": {
          "id": "de0ebaf9-5707-47f8-8007-8e08d48c2302",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e298a404-b927-46ae-a34c-2c83f238f358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41f6a467-4bf9-4588-8bc2-c1eb4f5867dc",
        "cursor": {
          "ref": "97391297-4b06-4843-bd68-f4fb6008f78d",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "6f3457c8-bc3e-41d0-a592-dd7b533e1c9f"
        },
        "item": {
          "id": "41f6a467-4bf9-4588-8bc2-c1eb4f5867dc",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a9ad4afe-9042-4e3c-954e-fbf7d0651e4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c57f6b6-d8fb-4365-8f58-b80926a8ca9f",
        "cursor": {
          "ref": "7965670d-ad82-4d43-8472-3e7da69c9965",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3e5486d8-6246-4025-95a4-ac6501cf02dd"
        },
        "item": {
          "id": "8c57f6b6-d8fb-4365-8f58-b80926a8ca9f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8386b304-d728-4d28-9fea-6e75f09247ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f730277-2155-4f80-9b70-264503edc87b",
        "cursor": {
          "ref": "8ff940da-714c-43e4-8fee-cb32e3b8da33",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "170c4c14-bfa3-499b-8d39-a59c5584043b"
        },
        "item": {
          "id": "5f730277-2155-4f80-9b70-264503edc87b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ec00b58e-b313-4486-9df5-95e1f1081f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1a5e21-6eac-40d2-b9af-ec8e33c047e2",
        "cursor": {
          "ref": "accd98a3-921c-4282-b27b-31749f115214",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b473787e-ea62-4f3b-8389-e55562c87d97"
        },
        "item": {
          "id": "9c1a5e21-6eac-40d2-b9af-ec8e33c047e2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0d34cf51-10c4-4578-8876-5251debdf26b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93922be1-3c3e-4d73-8904-2cac9e45fdcb",
        "cursor": {
          "ref": "9ac44b40-702c-4754-8232-7a1ebbe87c91",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c661d499-abc3-447f-8332-dfc135e18be6"
        },
        "item": {
          "id": "93922be1-3c3e-4d73-8904-2cac9e45fdcb",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "811abf45-ae4f-4597-b04d-b77a27682abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ca0b0e-0be8-4548-a29b-238df11674a9",
        "cursor": {
          "ref": "7675d69f-b146-43eb-a732-f15a469c29a9",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4df16bc1-49f8-437e-8f34-cd3496164bc7"
        },
        "item": {
          "id": "96ca0b0e-0be8-4548-a29b-238df11674a9",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "79811a02-c11d-495f-9de5-c79c6977474d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7c8710-795d-451a-8fc3-5d938eeb0977",
        "cursor": {
          "ref": "20d08cde-75a0-4f0c-957d-8905e60d53c1",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "55b74027-7eb8-416e-9a44-ca7407d44f2f"
        },
        "item": {
          "id": "3c7c8710-795d-451a-8fc3-5d938eeb0977",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "399ac78b-7d33-481a-8ba8-0e9992ef3e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a657c3a-0499-4f6b-be60-4d1667f33a10",
        "cursor": {
          "ref": "75e1da95-fe97-42e0-89e8-7c2ef130cd11",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e3cb248f-aaf5-4be0-9a71-7b065d8f301f"
        },
        "item": {
          "id": "7a657c3a-0499-4f6b-be60-4d1667f33a10",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "437f1762-c496-4383-97a4-f9dda66fe721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde744c4-c466-46c6-bd06-6d6c2dfa49de",
        "cursor": {
          "ref": "8548dbc2-a0cb-4a99-9bf8-d023f20c99a6",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "fb1f9f2f-cc94-40ce-b22d-6b4557715556"
        },
        "item": {
          "id": "dde744c4-c466-46c6-bd06-6d6c2dfa49de",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "bcbfce5b-f729-447a-9019-223b2acaf2dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb4c8c19-3ee7-4418-a342-d3a8c9d6598e",
        "cursor": {
          "ref": "9a9a6d4b-63ef-4cc7-9970-00bf60edcba5",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f6fb372b-5dbe-4ad0-ae36-20bb726b38b4"
        },
        "item": {
          "id": "eb4c8c19-3ee7-4418-a342-d3a8c9d6598e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0ab4a223-dad0-4b86-afc8-0654a0ed5fab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2153a6b-b9d7-4259-8924-330ead8b76cd",
        "cursor": {
          "ref": "e4a3a7eb-6698-41bf-b137-bcef73735f86",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "649a2719-0b36-42d1-9188-89597ecf5a23"
        },
        "item": {
          "id": "a2153a6b-b9d7-4259-8924-330ead8b76cd",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "14e33e6f-19b7-44a0-9582-459842d72f9b",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "4fd77c1c-c68b-4406-a118-f7747ab8ac13",
        "cursor": {
          "ref": "11621966-709f-4b3a-bfcb-6af9fe981885",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ff71aeae-7c2b-4b07-8fb8-5e3beea83a9d"
        },
        "item": {
          "id": "4fd77c1c-c68b-4406-a118-f7747ab8ac13",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "1b59d87d-b48f-4818-bfd6-74be343562cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c618eb50-a1f6-48c5-b535-b5f27fefe883",
        "cursor": {
          "ref": "24c87e37-5254-4835-83da-ba7df06dab96",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c27bf89e-adc4-4339-b735-c05cf22da6a8"
        },
        "item": {
          "id": "c618eb50-a1f6-48c5-b535-b5f27fefe883",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "27be4e4d-4d4f-4801-b5eb-1ef0b8ad7641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c62870f-c8ee-4642-8a1d-9353578ea749",
        "cursor": {
          "ref": "67c9acf4-934a-4ddb-9ddb-47cc08763841",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "de895f33-04df-41c1-b013-a708f7e1b3b5"
        },
        "item": {
          "id": "0c62870f-c8ee-4642-8a1d-9353578ea749",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "167817db-d433-486c-85e2-c75f23ce568e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0d239bd-6b29-4812-9638-dab279b70a80",
        "cursor": {
          "ref": "6ddd2bce-0668-467d-bb2d-2b16d03cbd29",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a2798da1-4e8d-49a2-bc26-96ab9e76cc88"
        },
        "item": {
          "id": "c0d239bd-6b29-4812-9638-dab279b70a80",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "364eed2b-95c8-4ee5-a26b-b73cfe3b8f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61028ad3-3108-4a05-8e9f-647beb01388a",
        "cursor": {
          "ref": "b64bad11-f74e-4726-9cf9-17194b77c02f",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "0a151d2a-6fc7-4ce4-8890-5ea48f4c4d4f"
        },
        "item": {
          "id": "61028ad3-3108-4a05-8e9f-647beb01388a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "33dfb661-c442-4930-94ed-31ca7f372a39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5352937e-017b-483d-a17d-aa042e794a20",
        "cursor": {
          "ref": "b8dc231d-23ac-4b59-ac33-9465ca392b36",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "6dd5c9d8-a2f4-49dd-bbc9-c08716321be5"
        },
        "item": {
          "id": "5352937e-017b-483d-a17d-aa042e794a20",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1b9e2c16-1e1d-4ba0-9099-42e6fe8b5521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8411f5e-9701-4c58-9d52-6f1403aaf9c1",
        "cursor": {
          "ref": "0c19851b-3598-451a-b40d-acc4bd4b0d61",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "56c76f26-e786-4dd8-b60b-733468fa4d52"
        },
        "item": {
          "id": "f8411f5e-9701-4c58-9d52-6f1403aaf9c1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1a1ccef6-32bf-495e-9e8a-86dec935ddd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0140906-3072-4423-b44b-20438fee2848",
        "cursor": {
          "ref": "9dd96ca3-f0d7-44d7-b331-90583e597eb3",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "97c63138-7f17-41d4-994d-e76340682e1c"
        },
        "item": {
          "id": "d0140906-3072-4423-b44b-20438fee2848",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "91cf2c0c-2228-4578-bf78-9183e3ee1b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa924642-9ce7-433b-ae0b-7b6c16101d5f",
        "cursor": {
          "ref": "77fdb830-dc55-43be-a02d-ab59e98bf145",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c33a6949-aba8-47fe-9bed-13ff52332d7e"
        },
        "item": {
          "id": "aa924642-9ce7-433b-ae0b-7b6c16101d5f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8edb19dc-9b7a-45e7-9a4d-b3afd26d7275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f46782-196e-4846-993f-0d58d9779ad4",
        "cursor": {
          "ref": "c394dfbe-80c4-4d25-8e76-40948da12a1d",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "52031f0d-239e-4cf8-a4ba-78fad85f9fc7"
        },
        "item": {
          "id": "e8f46782-196e-4846-993f-0d58d9779ad4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "1d087d77-d10e-4e99-974c-de8a5299b633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afae2ddb-12c8-4b0b-8f6c-d46e74c6acb8",
        "cursor": {
          "ref": "6163a276-41bc-4684-a9a2-babba7c1caca",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a63a5589-9fb6-4227-9f86-47174bd1742b"
        },
        "item": {
          "id": "afae2ddb-12c8-4b0b-8f6c-d46e74c6acb8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d3750c8f-20fe-4aa8-8dac-fe0ccc88ccae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ab385b-ca82-4dfe-8117-c9ccbc22f43a",
        "cursor": {
          "ref": "80923fe0-0db6-42db-a899-4b0ae0a962ed",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "10cbafc7-6e8f-46a9-a6dd-f4a7baf06210"
        },
        "item": {
          "id": "f5ab385b-ca82-4dfe-8117-c9ccbc22f43a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "46ab3bcc-f651-485c-b4f8-b5bbd87aa04f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa0e6f65-78a7-49f8-8ada-0265f5e171eb",
        "cursor": {
          "ref": "8c31e978-45a9-43c0-89bc-7e930db2cb57",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "efd57348-7c8e-4689-a983-e22ead1575a3"
        },
        "item": {
          "id": "fa0e6f65-78a7-49f8-8ada-0265f5e171eb",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "421e13e7-2f2c-4a6f-9366-cd675bbbf643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f802294-9112-4b1c-af58-41558c7b98b8",
        "cursor": {
          "ref": "2dbcac92-2e32-4d7a-9181-9c93eb99780b",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f1b1cd7b-dc93-4440-9661-f7b9195209ff"
        },
        "item": {
          "id": "1f802294-9112-4b1c-af58-41558c7b98b8",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "63486885-3d80-4479-8590-101f6dcd21ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36ebfd2-26c9-4214-b6f3-693949bf1420",
        "cursor": {
          "ref": "77953443-b6ab-4c46-bbe0-53af5b2059ab",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8fa70503-a597-443c-8a16-4dc4dad76cc1"
        },
        "item": {
          "id": "c36ebfd2-26c9-4214-b6f3-693949bf1420",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "97c4ced7-d0ea-460b-a72e-f1450b1a458d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452ea07b-f64b-44ab-97a9-806cdd56c113",
        "cursor": {
          "ref": "f0800d97-c12e-4df2-938f-552ca90778d4",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b3192e35-0088-41cd-b043-42e30a88e74b"
        },
        "item": {
          "id": "452ea07b-f64b-44ab-97a9-806cdd56c113",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d2841294-7bfd-4fcc-af97-7bb5648e9a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d25e80-c287-43d9-94da-ff59e0457b24",
        "cursor": {
          "ref": "8ed81c64-5562-44ba-b865-23bfcc9e0f0a",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d4bf0d29-3fb1-4d6c-814e-89d2690db33d"
        },
        "item": {
          "id": "d8d25e80-c287-43d9-94da-ff59e0457b24",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "066da7d4-f631-41e1-a961-b508a0f6514a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68382205-7f64-4ba4-bf98-386ac662eaa8",
        "cursor": {
          "ref": "53b83b46-719e-499e-83bd-a38429892a4e",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ca766283-bd13-4d06-a77a-6be6f631e12a"
        },
        "item": {
          "id": "68382205-7f64-4ba4-bf98-386ac662eaa8",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a65cea88-1d36-42d5-9fb8-ec0280a67878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6618ef10-49ee-44e8-be68-04dd16e4dab5",
        "cursor": {
          "ref": "c0772593-d29d-4745-86b0-1fc1b0ba3546",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "af69fac4-5332-415a-b7d8-ac71ba5ad3d2"
        },
        "item": {
          "id": "6618ef10-49ee-44e8-be68-04dd16e4dab5",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9595dd60-e367-40d4-9fc4-0a725fab5b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e97366-4565-441c-b88f-1bb94a5adb88",
        "cursor": {
          "ref": "0b10b7f2-b78d-4768-9d58-d420d1374183",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a126ea46-07b8-46a6-9efe-37e8b7cb0322"
        },
        "item": {
          "id": "c2e97366-4565-441c-b88f-1bb94a5adb88",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "0be87424-2f1a-47f8-819b-c4c475d08abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39829ce8-dccc-4ea1-9c93-9150a080ea9d",
        "cursor": {
          "ref": "3e2635df-bd66-4dd6-9af2-f43b61162b8a",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4217d937-a06b-4ac3-9a1d-29de9e8edc56"
        },
        "item": {
          "id": "39829ce8-dccc-4ea1-9c93-9150a080ea9d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e6b759df-12e9-4a71-af34-3981764ee3f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0112bdc1-1772-4fd8-9579-d658d2908d4a",
        "cursor": {
          "ref": "02b9b953-143a-4599-b483-1d957eb63d69",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9e04a490-5b3c-4efc-830c-862c395c6259"
        },
        "item": {
          "id": "0112bdc1-1772-4fd8-9579-d658d2908d4a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f91900bb-c872-43d2-88ee-e8f658ff2bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6dd78fa-6ae7-4ccd-b070-747a06635d6d",
        "cursor": {
          "ref": "1f77c831-0710-4abf-b1c7-3404f5496ace",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8d7c2817-7642-45b4-a61b-1965617a1052"
        },
        "item": {
          "id": "d6dd78fa-6ae7-4ccd-b070-747a06635d6d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "224483f3-3c51-41e4-a8fc-7f87a3b3abf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148bf830-1026-48ff-ae69-40aee9dd81cf",
        "cursor": {
          "ref": "37df4995-215a-4a0b-9764-2617bcc4f5f2",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0c051aca-66ae-44fd-bb2e-50bbc63d9a5c"
        },
        "item": {
          "id": "148bf830-1026-48ff-ae69-40aee9dd81cf",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d11f32cb-7707-4b1b-be40-5055e567de96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc36115-188e-49ac-b656-3a299cfb99cd",
        "cursor": {
          "ref": "b150c0a9-a352-4d80-b990-80af98112a25",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a57c7b9c-1396-4d0d-a28a-c681baa497e1"
        },
        "item": {
          "id": "7fc36115-188e-49ac-b656-3a299cfb99cd",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "21f4bb19-9a8d-471e-935f-c628a8c4da40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc40dfb-29d5-4b08-9b7f-54f21a242baf",
        "cursor": {
          "ref": "49d908cb-34c2-4316-9ebc-722fc915885f",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "aeecea47-17db-465e-b0e5-6a00684e1d3c"
        },
        "item": {
          "id": "2cc40dfb-29d5-4b08-9b7f-54f21a242baf",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "926b817b-6579-45b2-9a44-4dde89e957e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a7ca0f-2c9a-4530-a970-43e7662837e1",
        "cursor": {
          "ref": "de5c5252-ea00-49fb-b2f0-02508027eae1",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8fcadf2c-8ff7-4b22-b14e-59fe95adf57f"
        },
        "item": {
          "id": "15a7ca0f-2c9a-4530-a970-43e7662837e1",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "54fa1ffa-7b0b-4f7d-94b0-3d13766ce3c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c47f0c20-fd17-43c1-a3b4-28d6c4a1eec7",
        "cursor": {
          "ref": "8f70962e-a04b-47e3-9658-3a600d198d22",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "942cee5a-b181-4898-9010-75d3bae43e2e"
        },
        "item": {
          "id": "c47f0c20-fd17-43c1-a3b4-28d6c4a1eec7",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f34fef61-5e44-43a2-9665-0b00e6a14c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c9bce5-7a54-4833-a75d-40240d6dcfaa",
        "cursor": {
          "ref": "2a3d4b84-fc90-481a-ac90-97dff9ffa906",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "42f6724e-c59d-4211-bbd4-c67ed7d59c96"
        },
        "item": {
          "id": "91c9bce5-7a54-4833-a75d-40240d6dcfaa",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "2a6b5a76-648c-49a7-9022-b85b175cf0e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be208c46-8a3c-4746-8d55-ae37519e888b",
        "cursor": {
          "ref": "9dc905b9-1314-4856-9bd9-a5fae274c634",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "dd2adbbe-aeaa-467c-8344-add87d7a5544"
        },
        "item": {
          "id": "be208c46-8a3c-4746-8d55-ae37519e888b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "49b6254b-d857-4777-9754-ca716af61588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a61ba53-2f29-4609-b8d4-51249c751e85",
        "cursor": {
          "ref": "d3f3c943-010f-450d-b9ed-4a2a65cafe1a",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "68a99bb7-0e08-4709-b36e-0cc4b34b4071"
        },
        "item": {
          "id": "7a61ba53-2f29-4609-b8d4-51249c751e85",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e500cd8f-34ad-4eba-8f7e-08b2c0df1b51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41891b34-1596-4e3e-9f89-a46073427266",
        "cursor": {
          "ref": "35e7ffa9-bc69-4c56-a24e-d6bbd91a054b",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "bb8d4ac3-2191-4adc-a9b6-86327955e395"
        },
        "item": {
          "id": "41891b34-1596-4e3e-9f89-a46073427266",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ccecd41a-3956-40d2-9870-386e4d973793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02076a2-f228-441b-a852-6b74253fcae1",
        "cursor": {
          "ref": "e5db7224-1819-4e76-86d2-2735712f2278",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a2ca782b-cf63-48ab-bedb-e9857696d840"
        },
        "item": {
          "id": "b02076a2-f228-441b-a852-6b74253fcae1",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "88e7564b-7b88-4613-9214-1d142e41538e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2691966d-7578-46cb-9634-febb72a07357",
        "cursor": {
          "ref": "2167084f-a14f-4a59-a840-d1563cea0fcd",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6e08994d-89cd-44d5-9f6e-213afecd378f"
        },
        "item": {
          "id": "2691966d-7578-46cb-9634-febb72a07357",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1e274d07-de98-46da-b908-b8e1efca5cb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42197f3a-42dc-48da-bc11-201e78103d0e",
        "cursor": {
          "ref": "79a9df6f-6382-4687-8db8-a63172244bbe",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "70377268-ee43-4f20-b6e7-76b469a96546"
        },
        "item": {
          "id": "42197f3a-42dc-48da-bc11-201e78103d0e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "438e28b3-b511-40fc-8941-e313562330f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff121364-f54a-46f3-99bd-69cd1f2fa064",
        "cursor": {
          "ref": "859e795f-04c0-4d5a-a081-372e5dd80db0",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a9cc9809-39b6-41c8-ade5-8f073a47e807"
        },
        "item": {
          "id": "ff121364-f54a-46f3-99bd-69cd1f2fa064",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b63c2617-c1da-472d-a642-d99a16c8bdc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e965b994-93a8-407b-a1f9-f81b7bb25275",
        "cursor": {
          "ref": "1b3d87b6-1272-440a-9545-c374012bc3b7",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "bf7aceea-bb5d-4de4-9962-ba119f03116d"
        },
        "item": {
          "id": "e965b994-93a8-407b-a1f9-f81b7bb25275",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "853ef3fc-d4e8-455f-b727-039e411aaa2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b2e9a4a-1462-44e0-8e25-25f5d22f1389",
        "cursor": {
          "ref": "ff79bc93-1a53-44b0-9f57-3e469e120c8e",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3c728a38-c561-4b20-9971-a804fa61e313"
        },
        "item": {
          "id": "4b2e9a4a-1462-44e0-8e25-25f5d22f1389",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5ec8ee13-6f3b-4e43-beb0-6886d24d5d73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eba459d-7088-4649-869f-37167946be55",
        "cursor": {
          "ref": "4961d7ad-f52b-46f6-85cf-314f4f8ee96d",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "035bb36b-cd35-4f81-b4e1-df3ac8c1c212"
        },
        "item": {
          "id": "2eba459d-7088-4649-869f-37167946be55",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f746e432-6663-4ecc-89da-1c2835070bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a801107a-6bba-4be9-a6d1-d90f77d05ec3",
        "cursor": {
          "ref": "0d44f819-eb0a-4a55-be5d-6493926921e4",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "05c086a5-ad67-4a66-933a-234a73151279"
        },
        "item": {
          "id": "a801107a-6bba-4be9-a6d1-d90f77d05ec3",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "061c6699-627b-4e1b-8454-95ead77b5ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f50eb7f5-63d7-4bfe-a62d-c943a6f05200",
        "cursor": {
          "ref": "d82aa0bc-0b51-455a-bbec-c26a8e94c92e",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d0785b25-51f4-4db2-962e-45afbfc3a94d"
        },
        "item": {
          "id": "f50eb7f5-63d7-4bfe-a62d-c943a6f05200",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "97b26269-1a05-4837-8825-c46046430b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c7b290a-e513-4292-bd1e-0752cbdbf18a",
        "cursor": {
          "ref": "cba6a04d-454f-43e7-8702-1440564a6e17",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e4240780-5c75-4044-9a0c-daac7e6b01d8"
        },
        "item": {
          "id": "0c7b290a-e513-4292-bd1e-0752cbdbf18a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "78c32044-ba7c-44e7-81c1-aae9242eb26d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd25a8f8-b047-4c69-a0ed-0c9f1ec0ca74",
        "cursor": {
          "ref": "98a6941c-8ef0-4dad-ae16-837a22bcf0f3",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6d5685ae-59e0-4d99-af65-1589c05e1a0a"
        },
        "item": {
          "id": "fd25a8f8-b047-4c69-a0ed-0c9f1ec0ca74",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f486fbf9-f107-4a21-93ae-3cc977820a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b20e32ba-97f1-4434-a1ba-37f366fe1594",
        "cursor": {
          "ref": "c8358d41-7825-4dc4-b948-d72ccc707c08",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "830dc998-79f9-490e-92e7-7de8451c030c"
        },
        "item": {
          "id": "b20e32ba-97f1-4434-a1ba-37f366fe1594",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "f1aa3759-5d2e-4a1b-adf1-5c6e51367c45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f4b610-3466-4b8f-b415-17fbad7cf465",
        "cursor": {
          "ref": "4fbcd80d-ea5b-4cd5-868f-617d67217425",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f4cc33cb-c0cc-4cdb-b8e1-7241f7de9510"
        },
        "item": {
          "id": "15f4b610-3466-4b8f-b415-17fbad7cf465",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "011c7a5b-d845-4b79-a6d6-316c8895feb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072c6868-7907-42f2-9d9c-3bcd60958a1f",
        "cursor": {
          "ref": "63e221df-b736-4d95-a166-13b18e7b5251",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c103c04d-6da4-4449-b229-3c9f76593a8b"
        },
        "item": {
          "id": "072c6868-7907-42f2-9d9c-3bcd60958a1f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2de9eb7c-601e-4b9f-a151-05eed0117eb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35a89779-c087-4693-8d72-cc84f79af8d9",
        "cursor": {
          "ref": "47192a3c-c037-4982-82c4-1b8df91225d3",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d8309726-34f6-4f11-81a1-ce2fe3d0aea6"
        },
        "item": {
          "id": "35a89779-c087-4693-8d72-cc84f79af8d9",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9fb913b4-7eb8-431c-a28c-0c19a8cea060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b66321-8b11-46da-a5cb-dc1145561f2e",
        "cursor": {
          "ref": "413f5469-7dc5-4b02-ab08-f7625566c006",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d2e563fd-9214-415e-ae24-7fd91faf29e0"
        },
        "item": {
          "id": "51b66321-8b11-46da-a5cb-dc1145561f2e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "7c12e8a9-02d9-4f11-8d81-85c6a4a14be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a1dd7c-a21b-43cf-9f77-1f12f262468a",
        "cursor": {
          "ref": "d162a12b-4e27-497c-8bdd-48449c45b7a0",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b1810022-4d15-40a7-a920-c1ff973426eb"
        },
        "item": {
          "id": "21a1dd7c-a21b-43cf-9f77-1f12f262468a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3c157233-5c4c-44df-ae17-35b2a64fcb7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1454616-d869-4009-b4b5-eef4d9a9521e",
        "cursor": {
          "ref": "32683811-a4f0-4b52-9957-4592e558a1f5",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a2240217-d8f8-4f2c-a8aa-1952f7af72da"
        },
        "item": {
          "id": "a1454616-d869-4009-b4b5-eef4d9a9521e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d4b70e4c-f12c-41e6-9835-a648bf96bcf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84926907-7afe-47af-b10a-732d27a1c4ab",
        "cursor": {
          "ref": "491f6dd9-46a7-41e8-b27b-f81b6fe505a8",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ec33366d-2a02-4a2e-8843-29c25af4de6f"
        },
        "item": {
          "id": "84926907-7afe-47af-b10a-732d27a1c4ab",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5c7e20a3-3f46-4f98-884c-486fd936926e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c6527ec-ca4f-480e-8252-7874cc5c56c9",
        "cursor": {
          "ref": "af8b5367-b911-4c37-a1c0-d8b752e99c14",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b828e274-e194-46da-8991-ca38bfc7ddd4"
        },
        "item": {
          "id": "1c6527ec-ca4f-480e-8252-7874cc5c56c9",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b2f48e75-090d-4d6e-9bfd-bcc4c89a6420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "049d0390-cf3c-4e70-b679-5508d4d1e1e6",
        "cursor": {
          "ref": "53be0b12-4371-4192-899b-1fef3d363595",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "67a23754-8fb1-45ca-8767-5dccf53c4579"
        },
        "item": {
          "id": "049d0390-cf3c-4e70-b679-5508d4d1e1e6",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "bc7e35d7-dbf4-4939-9ec2-2fc15aaf041d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b393fdf-2cbd-45e6-abaa-30f347cac49d",
        "cursor": {
          "ref": "ab621070-e500-4c75-b167-f9b64e9a09f5",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "73808c7c-aad5-498c-9ce4-1bd7790befb8"
        },
        "item": {
          "id": "4b393fdf-2cbd-45e6-abaa-30f347cac49d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "20c12a8c-4df5-4fdf-a8df-a9aef16fcb22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b2d758-837e-4822-89f9-e3edf9426c3a",
        "cursor": {
          "ref": "fd6fca87-5ca4-4d78-bb6d-5a3a1ef6a23c",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "15cb0586-35ad-4500-a67c-526df4a20788"
        },
        "item": {
          "id": "f8b2d758-837e-4822-89f9-e3edf9426c3a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "4645712a-75cf-4d60-bc2c-32b8d035e825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67a42c4-6ad5-4f6a-8d36-dbc263f0ee41",
        "cursor": {
          "ref": "3a508412-0741-472c-bf77-f3ca0de7e496",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "513026e8-fe17-4086-bc96-081f5848493f"
        },
        "item": {
          "id": "e67a42c4-6ad5-4f6a-8d36-dbc263f0ee41",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "2db6ad32-7881-4afd-a226-f131704cce9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb0a324f-feba-4998-a581-0dce2b0ca751",
        "cursor": {
          "ref": "aae5a273-fde3-443e-aa8e-97eae6db44cb",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "12c9aaa3-9042-41f9-a0b4-c660c5997362"
        },
        "item": {
          "id": "fb0a324f-feba-4998-a581-0dce2b0ca751",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b2080211-04eb-4ff6-9557-12504d3c9ac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce09848-f9c9-401f-a67b-57679fb63223",
        "cursor": {
          "ref": "7e1cad6d-6337-4128-b969-193d63ed8b8a",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "492a398c-0d15-4ed8-a9c4-475675bbfbea"
        },
        "item": {
          "id": "fce09848-f9c9-401f-a67b-57679fb63223",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "51a9fb7e-2e8e-4e7b-bb53-cdd9230d4db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59dfd8bf-6ecb-4103-adde-52b14c64bc7f",
        "cursor": {
          "ref": "7082c3a5-b23d-47da-94e8-d1bd7cf684fd",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "5adad0f6-6627-46aa-8c8e-503412c0e53e"
        },
        "item": {
          "id": "59dfd8bf-6ecb-4103-adde-52b14c64bc7f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f6487f59-f6b4-46b0-b53b-a096dfd93cfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c0c8ba-41c4-4543-99c1-34897963cd14",
        "cursor": {
          "ref": "207b6b43-63d8-4da8-956c-4a0d7f614411",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ddef5bd3-0cd7-4007-a814-fe34f343a807"
        },
        "item": {
          "id": "98c0c8ba-41c4-4543-99c1-34897963cd14",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e5c2c983-d5eb-42c5-8fa5-246e8e7b7d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88dc523a-3b26-4b2f-b54c-578a0677d89a",
        "cursor": {
          "ref": "ced2e191-6894-4971-8c4c-7db51b1ac692",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d4b7d723-f91f-45c5-aa8c-b3b0904e3278"
        },
        "item": {
          "id": "88dc523a-3b26-4b2f-b54c-578a0677d89a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "325338c9-3961-4e1d-9202-5afb00131f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b8785a-fbea-43e9-8e1f-827f0e71a550",
        "cursor": {
          "ref": "f960b770-804c-4aba-abff-df5f5fbcb9e9",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "aa118101-b3eb-4829-8d13-8a467a37e3d9"
        },
        "item": {
          "id": "33b8785a-fbea-43e9-8e1f-827f0e71a550",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6bb44397-f1a6-4311-91b3-f3cf271f3312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5310187-7a33-4921-b36e-21f33317ce8d",
        "cursor": {
          "ref": "ea25567e-20fb-4c6c-9d5f-aa272b02410d",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e4f1caa0-d1eb-4a03-bd02-933244d64218"
        },
        "item": {
          "id": "d5310187-7a33-4921-b36e-21f33317ce8d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "72be3fd1-b24a-48b2-b8a2-4ac4e8394246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a216c371-1bb0-45a5-99f1-eb306b7c7357",
        "cursor": {
          "ref": "6b90870d-2edf-46ed-8711-40a875fbe196",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "787b6aa0-a0f8-4dc1-82e1-ce6fd264cf6c"
        },
        "item": {
          "id": "a216c371-1bb0-45a5-99f1-eb306b7c7357",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "23f47a53-05fd-4185-b3e6-d9f5dd619c4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d8c75a-b96f-4dc9-8db7-cfec5cbd24df",
        "cursor": {
          "ref": "3c11f298-ef27-47cd-a36e-59088abc710a",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7fb59f74-6e86-4801-861a-0d231323302e"
        },
        "item": {
          "id": "b4d8c75a-b96f-4dc9-8db7-cfec5cbd24df",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "fc2bb4d1-9747-409a-a23e-94e80f808794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f1ede5-63ec-4dfd-8a0a-9d79f4e991ce",
        "cursor": {
          "ref": "9aa97c74-1f96-4deb-98dc-60fb7c728862",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a09d71b8-ba4f-4cbf-93bc-2477a62410c1"
        },
        "item": {
          "id": "b5f1ede5-63ec-4dfd-8a0a-9d79f4e991ce",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "26d1a299-919c-4670-9909-10b9c3b4fe87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8df4a4b-fbb7-4789-9155-92bf5bf08aae",
        "cursor": {
          "ref": "f2b07da5-c03d-4fdb-b28a-01a5c7ace6d4",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9c5f6784-6b2a-49b2-9948-c1ceb00a7c35"
        },
        "item": {
          "id": "b8df4a4b-fbb7-4789-9155-92bf5bf08aae",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "cf62c263-4fe3-4a23-ad12-69a64520e1fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c12dfc57-32f8-4ab4-807c-ab9693673225",
        "cursor": {
          "ref": "7b4bd191-6002-4d44-854a-fba4a36f089f",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "cedc1bb2-2762-416f-ae1c-c3c8db1f676a"
        },
        "item": {
          "id": "c12dfc57-32f8-4ab4-807c-ab9693673225",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c14a65a3-1802-4a37-a0c2-984c82435ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776c1cb2-b60a-4990-a31b-7cc7238b9472",
        "cursor": {
          "ref": "11ab1a97-2b38-4281-b608-c47a8e7f9ef4",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "1ad568b9-92d6-442e-aeb0-731f20d2fade"
        },
        "item": {
          "id": "776c1cb2-b60a-4990-a31b-7cc7238b9472",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3bca96af-523b-4fa7-846b-a1aab10473f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e6176a9-1bb1-4eba-80e0-18bb24fc986c",
        "cursor": {
          "ref": "c5fe0663-a083-40bb-81ae-58bc703eb629",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e4850f82-f28d-4ca1-b5f2-66003f88c912"
        },
        "item": {
          "id": "4e6176a9-1bb1-4eba-80e0-18bb24fc986c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "58793502-4ebb-42e9-99ca-1fb79d7d4479",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b231e0c-1e19-419f-8289-86b17b6aea1d",
        "cursor": {
          "ref": "3aeff9a2-3220-460d-89b2-44666ae95063",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "be1d39cc-c689-4916-87da-76cf0bc46b80"
        },
        "item": {
          "id": "0b231e0c-1e19-419f-8289-86b17b6aea1d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d78eeb18-21a5-4bcc-b3f3-0ed8a5f3723c",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:242)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7763ded-9cff-426c-b13b-96101cff4ce1",
        "cursor": {
          "ref": "44c075ce-bdd1-4844-b447-ae740d476d80",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "42cc21b9-7f11-43e5-a1d7-62cb8893c4da"
        },
        "item": {
          "id": "c7763ded-9cff-426c-b13b-96101cff4ce1",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9edcd654-a628-4b3a-913d-74fb4061f40c",
          "status": "OK",
          "code": 200,
          "responseTime": 26,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee26ca82-bb2a-4fb9-b719-1a0e93a9b1db",
        "cursor": {
          "ref": "38366190-3eb6-4f18-8ea6-e73af8e8c7d6",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0f003d5e-a556-47bf-987c-c2a3c84aad28"
        },
        "item": {
          "id": "ee26ca82-bb2a-4fb9-b719-1a0e93a9b1db",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4550b719-5a00-45d1-b439-e64b1f99f5f2",
          "status": "OK",
          "code": 200,
          "responseTime": 25,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "496b4373-993d-460a-beee-c543efb83b3a",
        "cursor": {
          "ref": "6fcd1a63-6c18-4119-8365-4d69366aa47f",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "dfa83783-170c-4de7-9b4e-ac0c4b4a18c6"
        },
        "item": {
          "id": "496b4373-993d-460a-beee-c543efb83b3a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c99d8408-e45d-4924-acbb-9199c9ac9650",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "496b4373-993d-460a-beee-c543efb83b3a",
        "cursor": {
          "ref": "6fcd1a63-6c18-4119-8365-4d69366aa47f",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "dfa83783-170c-4de7-9b4e-ac0c4b4a18c6"
        },
        "item": {
          "id": "496b4373-993d-460a-beee-c543efb83b3a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c99d8408-e45d-4924-acbb-9199c9ac9650",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "496b4373-993d-460a-beee-c543efb83b3a",
        "cursor": {
          "ref": "6fcd1a63-6c18-4119-8365-4d69366aa47f",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "dfa83783-170c-4de7-9b4e-ac0c4b4a18c6"
        },
        "item": {
          "id": "496b4373-993d-460a-beee-c543efb83b3a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c99d8408-e45d-4924-acbb-9199c9ac9650",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "865e4bb2-78fb-4148-836a-6452ec613ff6",
        "cursor": {
          "ref": "f2efe001-fe3a-42a8-b5e7-68412617a195",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e8122844-7c95-4cb4-80b6-ee07dfb88be3"
        },
        "item": {
          "id": "865e4bb2-78fb-4148-836a-6452ec613ff6",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "c519ee2f-bf87-4ad6-8bf7-f9ef578542b4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c336b49-c3c1-4d6b-9515-2bb4031d4ada",
        "cursor": {
          "ref": "d4b317cf-b469-44d6-9624-8e0909378e4a",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "eb605c90-1c81-4867-9a04-7a1cab32cde8"
        },
        "item": {
          "id": "6c336b49-c3c1-4d6b-9515-2bb4031d4ada",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "65448780-ef27-47e7-98f7-b089094e5f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "6c336b49-c3c1-4d6b-9515-2bb4031d4ada",
        "cursor": {
          "ref": "d4b317cf-b469-44d6-9624-8e0909378e4a",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "eb605c90-1c81-4867-9a04-7a1cab32cde8"
        },
        "item": {
          "id": "6c336b49-c3c1-4d6b-9515-2bb4031d4ada",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "65448780-ef27-47e7-98f7-b089094e5f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "a506f5ad-fb5a-4be5-89ab-a16e5d38ff70",
        "cursor": {
          "ref": "0b68d56e-c5aa-4d3b-b091-2d2c6acd31c3",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d6957c82-a7e1-4ce1-9c87-ef6aceca74bd"
        },
        "item": {
          "id": "a506f5ad-fb5a-4be5-89ab-a16e5d38ff70",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "bbc84287-826c-4c5f-a348-8b8915d00df4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "924782b8-d07e-4b0f-a95d-434e8293e615",
        "cursor": {
          "ref": "01b78ecd-4694-42ab-9b8e-9e52d16579f1",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "1e95af98-b9ee-4c20-a562-716a1215b1f6"
        },
        "item": {
          "id": "924782b8-d07e-4b0f-a95d-434e8293e615",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0e52beba-ea7d-4fc8-a061-8a77d31648fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "924782b8-d07e-4b0f-a95d-434e8293e615",
        "cursor": {
          "ref": "01b78ecd-4694-42ab-9b8e-9e52d16579f1",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "1e95af98-b9ee-4c20-a562-716a1215b1f6"
        },
        "item": {
          "id": "924782b8-d07e-4b0f-a95d-434e8293e615",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0e52beba-ea7d-4fc8-a061-8a77d31648fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "dd6fb20f-de69-47d1-921b-51a3bdabe084",
        "cursor": {
          "ref": "1c610571-5583-4977-982b-c95a5b98adf4",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "861990ab-f97c-48d1-bc98-4d6ec47ece64"
        },
        "item": {
          "id": "dd6fb20f-de69-47d1-921b-51a3bdabe084",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "a7bd16ea-f1db-462d-9187-550e2be619e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}