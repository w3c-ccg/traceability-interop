{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0ecd5cda-cc6c-465e-a185-7bc7ca426ce3",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d97d62f6-591a-4f67-b0a6-f4ecf0bffce4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ef1cad04-fbab-4b40-a1f8-5c561d90f2d8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "935cd956-54de-47df-a88e-0166c3157b87"
                }
              }
            ]
          },
          {
            "id": "fafdf89d-99ef-4705-84d9-9a7fbf302e7e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f16b8f79-2f47-44eb-bf2b-af405a2eb228",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "151f98a5-9e59-4872-ad73-45c1ca59b785"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5f2ffca9-b72d-4917-9fa0-d7f42f1b1441",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ea40e27c-f60f-4302-9644-fa8ccafd51d4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cc2ca581-2ec6-4850-ac5e-a8946590abca",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b57f398-33a2-42a5-8c0b-2a739415a7fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7672cc1a-5dd7-4a7e-b6f6-03aefe2e7307"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bbe37249-8daf-471c-b60e-409a94453966",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "be89a2f8-1598-478a-89bc-f6272073da19"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1c1a8abf-1021-4b3b-9f7f-c638021a680f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a01f5701-f6a0-4975-9025-99759a1615fa"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "89ad8193-5325-4edf-82cb-744622303f10",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3a086253-e8e7-4c52-ad5f-b2164bf0f0bf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f815c95e-e9ed-4e60-9e4d-e46605938591",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a29ccb29-1d71-4756-8c2e-ea0f1efdab2d"
            }
          }
        ]
      },
      {
        "id": "14b1c84c-a47c-42c8-a169-426ccdc953f4",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "917fbdbf-da9d-4a29-968a-b2d31333d636",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d40d4e05-34e6-4e7c-b25e-ca47b324fcce",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0c351975-74fa-44f4-af3b-885120da62ab",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d07364-3883-4158-9f71-e25d6ed2a41d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2dc1e049-c5da-4ecc-a0c1-3c1c30b03681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b57e371-15b2-450a-9ef8-069edefec342",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ede1dee-7376-48de-8030-98b6e5abbf94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b552e63-147f-4da5-83eb-4b25eb874b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dab35c2-7956-4ced-b5d1-988ff7fe464b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3f5c6d-5f00-49ac-9eda-3a415638acc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "04ec5ba2-e608-4e48-b0e2-8d3a19de2ad3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4db3d5d8-2d12-4f76-b6ba-f36548e53c1e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aa697b9c-d408-433b-a2e2-119a55ca5285",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94047b8-c714-4bf1-be8f-8809aaaf3f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c393b034-d348-401b-9987-61000f4a3e17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b74d19-c403-4f18-9d47-007ce19cdf5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90de2b3f-74b4-4cd9-a4f8-2a4ca9edb7d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30dbca2b-b277-4056-a334-82c05a0c5187",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f41b516-a9b8-4a58-80fd-571c72f67397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16939e95-f99e-468b-824f-9ef5bf0c4100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605f58f9-fac3-418c-af31-17b7dc3a4bdc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "fd9863ce-9a38-4894-994e-2c26aca661a4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5af1c455-ffb2-4c30-a6b2-a9af21e8c253",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9220a572-9545-43fa-a04b-6e2b604f9bd0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "80484c8f-49bf-464f-a9b3-a33e3101bae6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d3dd775a-7132-4ebf-9de6-6bfc8be0a7a8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5be3c4d9-6d65-4394-82b2-7dfdaefd60c5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "2e1851a5-d71d-44b2-b68e-594091f6be19"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d8f85a34-2d44-4f69-b895-8b6d365a86b2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d561ff7e-f033-4549-84b1-8709bbdc4f92"
            }
          }
        ]
      },
      {
        "id": "a9e36577-4208-4752-9788-4b15bccea13b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "48b4ac5a-f77a-4597-895d-8d34fac78139",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dcaf3a5c-2004-4184-98c4-56f8e6077287",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "993f9f58-72d2-42a3-900c-81c3a399ace8",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ac1db6-c216-46ef-b11f-b3d6c2891227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "613864ef-f8a3-4444-988b-90ea33284796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e504ba4-ff96-4660-9570-f39933df6af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c5085d5-00b2-4207-943a-9d5ed565fcb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "031e52d8-719c-4a1c-a1ac-5fc0396490b5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7274cc3f-4bf9-4b6b-a9c9-620a59f80519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3ace12a-8207-47a3-993a-ab2995ad0ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab51bbf8-f90c-4c11-a206-af49bc7c4c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d57e6ee6-eea3-49d1-9d2b-8cc4de6934ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9723aa1e-7d2e-4859-9347-f344f9475e05",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5cb8ef2-9d3a-4414-9558-0f60456cc80d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba299dd7-5240-4ee0-9fb0-016432178f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4bf110-3b86-4a74-83ea-aefbf9f5eb5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aca4aa8e-b85b-41ae-a1aa-01b2f5566f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23dc6424-b2b0-4737-8bc4-5bbfcf162993",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07bf4132-9d3d-4139-b719-270b175f8d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc2127b4-5fd3-458a-bb25-6e3e78f1be4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5310a346-2b72-4ee4-b11f-c897d6929d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e0d0951-4fd7-4c38-9df0-c7218d271b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "271caf5e-992c-4855-8839-8c451d03a036",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c141242d-f348-4c7f-99f4-82dd0774c48a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f6fb5eb-2284-45bd-b6db-8c80e3df0f14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8889cd76-b0af-4a7e-84b7-6f2a56c1df70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3494c99c-b297-42e4-9197-733c4877c017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13cf05cb-aa92-4138-baf5-a5c8de54fbbf",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2adec955-dc68-46a1-b2c1-4614ce639663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59a0f49f-608a-4c9c-898b-3a726514cc9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "800f344a-e9b8-4c10-9fb4-05f2157b6365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e792201e-8543-47f4-8298-267e20b08d8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8a9224-3baa-4004-b9c0-c65c73bb1373",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d07977a2-adc4-4ee8-817a-99d6fba66d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ab3cadf-e3de-498a-9204-b61d81e9e87a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72706aee-7cfa-4a7f-a678-1171d7f8c394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98645923-e4cf-4120-97c8-99721f9315ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff267341-1dfe-40cb-83c7-b10a9512fe76",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7977e807-9126-407e-aedb-bd9cdaf6352e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77ff8189-75f9-489f-aaf7-28109a91c936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e34b953b-6f6b-4bb9-9425-3e844e1f42fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c18a57ba-6fa1-427d-ae01-7ee391cbd36d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6750f8da-c9ac-4083-8dd5-1248dddabfcd",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6100ed6-f21d-4199-a667-6431d6d7caec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71876e7a-67cf-4b78-9e54-612bc3ac1c3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "500243b8-ecf7-4402-8d11-b574ce79b52e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7bcb0df8-73fa-41b3-a113-a4bd95c13d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d911c51-ff62-4596-9e68-5daa17ecb66d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb0c2c6-608a-4bff-bf8e-f30f3badbb63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7352c83-3ed2-46e3-bdd7-4a51b509f76c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6a7913-c7ae-4ecf-9992-ff1a1fad2488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e660f3a0-9549-4465-8fda-d691a66cbdbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "793fe8e9-2c29-427b-8dbf-d9f30fdb3106",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "260f9f3e-d274-4df6-a6ac-a87914a76d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e37388c-8bdd-4b99-9d1a-c9e82e6fac3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547bfdaa-9f5d-4c3a-95a1-1f98ec3c4347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a678ef32-91ca-4e87-a444-a5fdfe6ef567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3195b3a1-c47a-4922-8ab1-5158fa476ffb",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a00c01-4a6d-4ce1-a395-fc12bc93b36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d4ffef7-358a-4dd7-b857-5526743946e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b12f797-a0e3-4b60-9366-69de9a123f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c22a1aa-bf6a-484a-9ff4-02564fc761aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a57fa1d-05a1-47c1-82b9-b5a969a65d01",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dfec669-196d-47b4-9392-152084cede60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee7e0fcf-61a0-45ba-a0ac-d4675a148207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb94c62-7d55-42c2-bc2a-cf8a8d1d5ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d26c2045-c4a5-4ade-8647-1a8845a77add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec3b564d-f1bd-4946-8094-bc8d141db739",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44f621f-7646-43e9-b652-a4593fd2ff5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7ce6100-5f08-468f-a6f5-7470d0e451b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72fecb4-edb8-44f7-a3f6-d20043dcafa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2620716-912d-442e-89c4-3f67ef7f21bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874c8959-0338-4716-98c6-df906828786a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abfb12c-bfc5-4ce1-873c-21d2592f6aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "233fb7bc-9442-4202-ad43-53608b0235ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9ef4c1-df2f-4c8d-b22c-6662b1702417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6265ce7a-7007-4b15-a385-088468b5950c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b53f61-158f-4f5b-9f32-c3e754f808f8",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0163a66d-1321-4701-b789-6d6ab4e89d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efd790b1-2c51-452e-b3ca-39c0ef9a0c65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb50c05-5fcc-4332-9a5c-82819ab51a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74c1e96e-bbbd-41e1-92ec-11d55c295c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "798f5fab-e209-4963-9044-f4dd7cd1f7af",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db3c370-e744-4f4d-a1e8-4eb63a6de8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db82c393-fe44-4993-8051-42e4510029ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5e49f0-71c7-494e-8302-a5abe84f2e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09dc6762-4598-45db-80f7-20c4ac03a095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147f0d24-af65-4334-a3a6-7b405dd52385",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea015250-64b5-4dba-ab87-e9ef77631c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67e41e8f-fc51-4d88-bbb1-e871da15c8d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2eef146-81b4-4b23-a1b6-ea3fa3577966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5441aa61-4e7a-4cba-ba02-3927efd21373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "164df82f-af52-4035-96a3-fef1dd3b7d6d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b93a8f4-e8c9-4ee7-8229-364ff274a111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "828b8c96-6ba4-4b73-922a-682f68e52134"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee5731a-76d9-4c94-ba0c-0014c49f7f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4aed374f-bc12-4ebb-9c11-09fc06cfd9ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0f83af1-914b-4475-b8e9-9a4e5250df14",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0957b9cb-0ef9-4aa8-a553-29436b3c049a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c41126c-1143-4e4b-ba8a-40c43a276724"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6daaa5bd-702a-4fc8-86eb-711a42796c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a25c5952-07e7-4f6d-8019-544ab27ee53d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4c3eda-1e1f-4498-918b-458810ef8847",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db44477-9cab-41e2-8151-64e9239c2bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e87fdc-abe0-4d4a-ae56-5fdcd631d7a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec6d5088-abce-4c92-b171-dde048629643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a029337e-d104-4b2d-8909-7f6f43417a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b87daa-29ce-4ba9-a929-7f192f7b5fe7",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7eeb9e0-bc23-4366-bda9-dc526af9383e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "028a470d-3eaf-49d4-a123-49aa0b214d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e543a2df-fe0f-4873-9d6f-7de6b8bec008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eab4e072-0a28-4f9a-a850-3130d837164a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fec3c9b-fce5-46a8-9cbd-bf825b4dc1f3",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f886a37c-f85b-4676-ab8b-f74d68b3ae72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "440bd58b-37fc-4429-8009-4d897a35e36b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b2ea349-34ce-47db-a2a6-9fd2dadf2688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e6fcf455-e8d6-4d1b-9cdd-09f0298345df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef8cafb-ac19-4401-9ef3-13edd76465eb",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c24869-b848-493d-b54c-b3dce84ff19b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a074a9cd-ee0f-4647-85f2-7eeebfd67f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b062ad7f-2b50-4a33-b34d-043864761541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "77228911-8c1f-4522-8299-21d98c9191e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a9e586-0261-4531-a0c2-cd67a8434879",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d811ea00-db94-434d-b3d6-fd82bb8b0a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76cd6882-a47e-4254-9ce8-7487cf3d9a18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f820ef6a-6e58-4ea0-8fde-c656422c8bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "30a87e3e-e6ab-497d-8c85-d32972695840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d749b7-c058-41ad-8ae6-afe8ebd71d6c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9fdf7f-1802-476a-baf9-7cd4b45d1189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69342cef-6152-4b87-b7c9-a6bd5974d0d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c6802a-1541-412c-b0f5-ecd29538bc85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c77fb03-70c5-45dd-b31c-7bf1047601dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a5f680-29a0-4296-86f1-e38c172c35ee",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "196c4bd8-d8da-47b7-b679-3e906b2fd25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c36793fe-b983-4490-9f02-ff20bf7690f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4fe6dc-7b35-4139-b016-193f27cc207e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3236dbfe-a1d4-41b9-9349-b52c5215bef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd328c60-1b45-4339-9d4d-6de02f956689",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ed6c2e-00cb-4e00-aaa8-d3455c0f26e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a55126e-9cb1-42de-8b77-6cce3a269f99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "409d663f-3ccf-48c6-b2ff-0e61c7a1915c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "40bd6809-f01a-4880-8f72-df378533a7d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5886a6c9-1a0a-4361-8bae-23afb9406780",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e48b79c-7b1b-450f-886f-ca9052ae72a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca02e5eb-a21d-494a-8f81-8ecf73c53426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0782dec-e299-4b9a-be1b-3404e9a079c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c799688-c134-4f49-a64d-506d8c0c7ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebecbecc-ff73-4476-82d5-76824ac85a00",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46dd2a37-1aa1-47ac-b2db-1a04c7ffd0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c5fe64e-d9f6-4558-a9a7-11d9e51aa77a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b0927a-134b-42b3-80fe-2c0015ffee55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cd2bc3e-c14e-46d8-99a6-5c786d2e5dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ec0093-0eee-4a65-9e69-552e78b65e6a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c52782-9aac-4db2-959f-340325ba9130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b34ea679-2dba-4963-8d3c-33be33ca4146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc4ea7ea-b44e-4c12-a353-124db2970511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e94e7e1-54a9-4a5d-9b03-67bbcbe70240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "570e4d97-73ec-4a29-bec1-24727fed1ff9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e170ff1-dfde-4b26-86a4-1cad07e25857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b21c5c29-a13e-45f7-82f2-effadc006eba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5edeb2ee-c4ce-4789-866e-83e5b3ddba50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "852e72cb-8579-4a6a-82a5-aab472a13918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41623387-fefd-49e4-94a5-036aedd16cf7",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f79027-a026-4353-bf5e-b389877bd187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c776376e-76ff-4be8-8c4c-36ec539772af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f49b7fba-311a-4571-8bd0-57ea8313195c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a65c9db-70ed-427e-9f5c-8dc6b574becc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f184bfc0-46ef-4860-9e33-c63ad4ace899",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d149d4bb-2b0e-4c85-8178-5b14e5418bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "974794ec-0603-4d34-9cd5-578743c2d06c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07611545-7f29-4831-9558-289451b53946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab4187aa-3120-41ce-948e-92e775802a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f1e0d0-7ca5-44cc-b1a1-f3942ed5de0f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec36b142-70cc-4cbc-be9c-7bd4eab79f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cee24de-2aee-4c75-a2fe-51bfab0d0f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23be33cc-c255-4c9e-9d75-87781cdde2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "63716290-3ea1-4b6d-8162-aff5a12147d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c38622-0d0d-4f44-b196-11d0e2de67a3",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "404bbf1c-4dd3-4525-849b-47e2d030a281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05ee2ab2-b026-4728-b170-f0ca1085464b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "132e0084-adc1-4d26-b538-95d75154f9df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "310c25e7-c443-4f87-94dc-f524717990ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf849b86-2041-4f31-b642-618956f22cf1",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b84143-13d8-444a-85cf-37c748d5cdef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2975c44c-2c12-4f69-a4d7-2840557ada5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de31aa86-352d-4f51-b474-492fe089ad3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9455930c-e65c-4a03-9e28-0685de3d4d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0cd0933-8610-4ed6-b3c6-f5e70a8201cf",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f9ac9f-577c-42e0-9791-10dc32e53b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17baa02b-8575-4d06-953e-f70af49d5f2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f638f091-c5eb-4b6e-aa94-851ddcb0622b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc8d1959-19b7-488c-8066-711a893b16d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35f35df-9fb0-4a12-a1ff-17d6b6ca7065",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca5e897-70fb-4d4f-bf79-ac3d5e72edff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e14051b-7905-4a7f-9e82-067fb871aadc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cff4530-0353-4a3b-9227-60357e281f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a92e8d0-b052-4be2-84f2-84e391a74554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba41fc4-328c-49ff-a338-66d8c3862562",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcfed590-fff6-422f-a11e-5cd53b5bcfe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e6a267-cead-499b-913d-ed7566590f26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e13c2761-e628-463c-9bbb-dd06390cdbcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd71aa87-680a-440a-9020-a12d8eff76f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c192aa-080a-40c3-a740-716076967af0",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "917a3ba1-b402-4fcf-a85a-75b63547fd5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8a33b83-4d65-4502-8d15-6e9b530aa80d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05365462-0f50-4b7c-8dab-763dc6de7e40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "de452df5-0d57-498c-845c-949720244c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa5cbdc-edb7-49eb-af5b-e73cf8de6cd8",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80adcff0-e912-4c71-be85-b2121a6d0c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eca4f16a-f2e1-4610-b366-19af82878fa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8242fc5e-a62b-4197-82f8-d0050aa72708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "89135153-2964-4883-a371-7a926125fa83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f62f99c-b0d9-4256-a30b-0cbb3a9cdde1",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "710c40eb-415d-4ce7-8e65-bef2d036a130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40e90f63-b456-45bc-88db-9878c388607a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979ab277-7957-444b-a896-a5c2a8d11d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "89942fed-7a03-48b7-9eb3-0993b80cbd19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99a2e0f-0c40-4657-bfa4-39501527ea7f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7c2b9f-62ee-4464-b40c-da4b8d153d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d719f996-1bd1-4efb-95a1-27b41e6620e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87898699-9610-4003-ad2b-aa11bd714cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cc8c8fb-2c9d-4176-afd8-9a5e4841cccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe8114f-2c6a-4d21-9b3d-28c74dcbad09",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb929cf-6828-448e-9433-a835cbf6128c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4617ef52-c47f-465d-be3c-c8937fec4d2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71cf4d49-ea95-4ff5-ab8b-e212bb09e1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f20d6a8a-71da-4344-b7be-fe628dfa6476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a3b1d5-8893-409c-b495-2a4a1b073f03",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a83713-c31f-4646-aced-fbdf516d708b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77aee34b-caf8-443f-abc4-017aa754b2af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f3728c-0ea2-41f8-8448-1f6e923f1659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cfbb0b8-a3f2-4db1-ab9f-5a1c5bd64df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160af3f1-7ba5-4bf4-8023-13b264134620",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d427ac-18fd-452e-b40d-e6ce0e7c49cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785d29ba-37e3-4daf-a671-c59d9ba89110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c57a61e-cb6f-4c21-86eb-3ff05ef4287c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ce3f7d5-8c1c-4136-a34c-7b02261c5f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3828ba9a-65c4-46a2-aaeb-d67e296bdc69",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e47041-d6d9-48aa-a8e9-059333b9d42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "665b0f75-f850-49ec-9233-8b6ce4c45c47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f1b8fe-994f-4bca-8a9c-166f8bbf3d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5210a556-2de1-4c4c-8717-e0f7cb5aa251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ef5d4f-b377-4c04-bdbb-5ce5ffa4b670",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a165ba-c340-4f2b-b420-b44658cf1d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a688ee-890a-4338-86ac-695915f2199b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e88b8a-aa25-4a92-a17f-e6d8cf1cf67c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1afd3122-c227-486f-a49e-47bc3d4c8c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487cc6e0-6670-4a06-8b1b-bcc32c2524d9",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8739bcb2-df47-4ad8-82c8-b51e9e1f6405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0415c78-35c2-46f8-b658-e6c1da2fa0cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad3f9e9-2a83-491e-ac77-c54201391eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fe346324-768b-4f62-b5ca-9cbd23d81d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382bed7d-387f-4dbe-85e2-fd3804e9980f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e2f8f0-3653-430d-b25d-e7247e6131fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3c7ccec-0535-4ec1-bc14-90001b575aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a73cc6-3bd4-43bf-ab6a-731eb6906499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3f4573c-55b6-4bcd-a1f0-cef7ea5c132a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02094035-8baa-4120-8f3b-7d319c806484",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66bf63d5-d851-4a2a-86d8-465f8580aa26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8d7a0ba-0385-4a93-83f1-c2cf006af4c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8f032db-fff7-43fe-8549-ff8f4091c6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "54300eb3-00e0-40d4-a36a-8328c840b300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef35675-b3c4-4f50-8bf7-28fde91e9a77",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "062d8653-f9de-4095-8e53-2a9f99121284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcfe10bb-be06-4fe5-a697-af8bd0a6a1bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b841e5dd-aa4e-43c9-bfb7-c108f84cb8a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7db2e63-518b-4e11-9b6c-f5a9fb737088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9799ae68-0cae-4d33-a815-c69c126f57fc",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71215875-a328-4c33-816f-04bc51b41681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8474143-28e0-4a7e-95d0-d994c18945fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31d00e4-59eb-4871-8bfe-72a7b7698b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "536c646b-a9f7-43ee-bea0-f0feddc85cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f798ad9-0dfc-4d78-9ed1-c36edaa20c28",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dbb6e0a-49df-4918-aae3-cfa0838d525a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd470181-e772-4654-9f17-1cd9cea972ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e660c4-f77d-4535-825d-dcf3fb84efe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b85377d0-3ea0-4333-9607-d04e81529c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb47563c-1973-4175-8cfe-5556777beadd",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "536066f0-b0f2-4b91-9bdb-b42fd00a4970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a09a3a66-72c2-458f-ac80-6cfa082dd3d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf45383-915f-428f-8f15-d972c87390c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "27de2770-dfc7-4e3b-a4d9-8a702ba5fcc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f24f3a-bcbb-4834-af1f-9549a4cfd903",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f29780-6a0e-420c-8436-183d895d193e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f0095d4-fe33-4d72-98ac-d9c0bda20670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25947a16-e1d6-4586-9682-20527dff235a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b079c9b-c8dc-4274-8af4-2b6a8b96232b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b997d52-8b57-45f7-a33c-be889151f01f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a36dc99-dc40-4878-974c-e0900902e48d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e58151e0-956c-45a9-9135-126906b525c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b24281b-9944-4e3a-ba92-8f5c4759bec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e066b7c-5e94-47e1-a57e-f087ad1a7d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85785c97-53cd-4166-9106-81cb5b24cd28",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd874651-9f32-4a64-b692-7a393db40f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dff238fc-4eea-44a6-9fc9-50e756d30635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82285a5-9973-45f6-b843-715b6ef59466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6308ebd5-c8d6-4cad-ba78-966b62811973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "638d991e-5c34-41e0-a082-224262cf2008",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7e622a5-e0e4-4b5f-a03a-d6b753cc87dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8968c01a-c083-4182-92a5-67175b39dca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04eca61a-0280-496f-851b-e095e1f3bac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "532ce9fe-0759-486e-af87-0fa6549dd39c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec3b1f7-2fcb-4d0d-9545-bf1acfbad2d5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f0f7d8-9e31-41d4-8688-7c667bac8eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea515fa3-e413-4edc-af44-b4547c4ebee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44fb2f7a-0171-47cf-acaf-9b2d947ff84d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c649ede4-638a-4463-90f0-f2d5666e6216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edfaa390-46cb-4966-ab2b-5711d0c55cba",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81f7140-5a83-4e97-93e1-4d9fba196c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3b33794-2e9f-4611-8ca5-00fadabb58f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "491acf0f-89cc-4f4d-974b-2da74761a480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4b0e0d7-af3a-451a-9f66-9864ffa411c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb5f794-7276-4416-8e64-989fb2b3fed2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d5010f8-f7a4-4a9e-a073-5cfc66836cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d834cf47-d9c0-4010-8389-1db823267098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3834c89f-32a9-4c9b-ac2a-e4d8799e4995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "52c7a0e8-3a7d-43a5-b3ef-39ef8b67e75d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a00d429-8e4c-4be7-ab2b-0ace34e64461",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e532a88-d3f1-4a2f-832b-c956dd9712bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b756723b-bcc6-4086-85cb-0971d3d254fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52fab8f9-98f1-4133-b890-c59f0b2cd568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "13c5b250-fcea-48c0-8cf5-b01e88d03b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa2fa57-876e-4a18-9d27-628e8a24192e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "808f14aa-da2c-4ac0-8c4c-3f8bd2c3c247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3bcaaf1-80a6-4850-8089-f2ebb26b5925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc085232-edfc-4548-87b2-0ec0130d6ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89ecb725-100d-4f1c-8481-52894b7d0935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c17ac01f-74e7-4b25-abd1-72ef0a29697a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "111638e3-0f6d-4338-852c-56942f767790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3930f5f8-7630-4389-8c54-e03f6d16fec2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7f4185-5614-4003-b0e5-80290568feff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "45489ea0-c728-4137-8890-7e91ecb70ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c091a5-86b6-42b4-88a6-fb048bbc747c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad5acb7-f954-4056-b497-91737c4b8db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9740bdc-7af4-4cdb-9eee-d39b4b7a5786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c936ac9-3fe5-42f1-a7c0-16b54ab6b9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "726565a2-7485-43fd-85db-ba0556ecd40a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d652533a-d6a0-4665-960b-8020957d2f41",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf5f83e-c404-4807-8f0b-89bf164c080d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e269261c-005a-462d-bf04-aa0587541173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb5a9c9a-381a-45cd-b2d6-0ba77b9db25f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "eeb712db-cf55-4697-93c1-362c5eec12bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be103ff2-ca5f-4029-8dae-61d399591bef",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3316799-32db-4471-a89d-d3fdea0e649b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e15a67f-0948-49bb-a352-cf8fa9197e26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0ea3370-a60d-47c3-a604-3c4b99e61e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c30b0ac-d105-40f8-807c-fdda2e608c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb2a815-d10e-425c-a69d-528b0d58a3ad",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad1ac8a-a1ad-4231-bbc8-4e0d521ef055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c80675d-793f-4c29-881f-0935f3527a7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b8f917-4d47-4f2f-9b3e-846da265d16e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8be9407-e579-40e9-86c1-f62c9c5fb0d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e783b88-1b8f-421b-a08a-9b8fd44edd8f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db9122e-f055-4f6c-a3da-c3ab2aaf3125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "719b1e29-2fbc-438e-9039-a249edf053bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c11388-8e6c-44b1-a3a6-0a6f43040ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "866ddcf6-1c1d-4bbc-8a03-dc73acc03e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7a0c7e-0d99-427e-b934-d99b688c29c0",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a731c6bf-90f7-4f33-b3d0-bb3edf34bbee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45524e61-dcf9-4ff0-a4a3-3c3e09f41bf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088a67e8-f9fb-497e-a0b6-82eff59f36cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5f2a107-3342-4638-8255-15f26ba48cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f1cb5f-903c-47d4-9fc9-0490032468b0",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e92483-1487-4e1d-962d-97166842f7f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fda1aba8-5829-4095-a94e-5835c180bbc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5843b67-4ec0-479d-b1e7-fe79cdc34061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "008bb470-658f-443a-9409-7bd9c3b874c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0f643f-05d4-40d4-83cb-07c55eeee819",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae85a8d-4443-459e-af2c-9da766eab435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3814e761-ea19-4773-a32e-ccee4ec0c124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf0cea22-8720-405a-a2d5-76e6037131f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ebe527ee-3dbd-4a09-b118-2234d39016bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb45f2f-4921-40db-addb-658ef08b8bc9",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab59f21-04fc-4bfd-8764-744c5b5effcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06afa484-6c72-45c5-8c2f-3f350408db89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e061e5-1490-44ac-be81-df94b05e4e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7872ac75-049a-41b5-bc2a-be047cadc0bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9729305-3643-41a6-b82f-789b0b1873f8",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1087b5-d080-4fa0-bb93-c59de3b86a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4aaf599-53ee-4f14-a017-c0d32bb85372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c30ab6bf-68de-4927-9f0c-50d5bec4a03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "86d8666a-e555-4fcd-bd61-32b09922792d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84dd575-de57-4762-bea6-43971411e3ea",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05f0b9d-cc23-419f-bb53-88690625ebc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a46da01-4cca-4e32-8e42-49697117de12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c992f0-5e5d-45b3-8ef4-5e7b860bb861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8d60544-1e18-4950-9ef7-71db86085677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31f5a17-ef3c-4d77-9378-23a65685a3a6",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b633538-39d3-4ed4-b6d2-60bc99ff69f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34093f28-9eb7-443a-8168-a3780657f874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "437717df-31f3-4bd5-9f08-bbf4c4292278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4130de7-8575-42c9-a8ba-c1fd197bbdcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a75dc8-0e99-4958-8be4-0c2502c124ac",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ece14d1-cbdc-4e5f-b10c-358c25a9e301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e66579ca-ff00-4cbb-8bcd-4fce845c5f37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0bd7f32-b09a-4ae0-b66f-b98a7a2f0615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "05d280a0-8e4f-4cee-b8e0-766202cab180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef98c4c1-d170-40b4-be23-2c40ecd74ae4",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e98833c0-ce8b-490a-a8e7-b449abaa5921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2189504c-2a17-4b53-a2b0-e8a312560a35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "738298e5-2549-4744-8f28-ddbd09116538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ce817e6c-3584-49ac-82b2-44e86597cfb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c0ef0c-de0e-4370-b1f9-72fc7580b472",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "623d7a94-e185-43dc-83ed-8bff1be8ddcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d26be27-d587-4cec-aaed-2239bcc41981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a20380a-eea2-4761-8028-41f9574b6984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d364876-7284-498d-bfe4-908bd6e26265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffdfd2f7-aacb-4ce2-b58a-bf37a5bf2eb0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "340dc8ea-8c77-4265-b365-1b7f9469fd6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ad34a67-607a-48a5-b220-b31c6f8ce1db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc80d46-e79d-498b-bae6-b0ed51537eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e7fb9c-4adb-437c-b801-769db86d228a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d630e290-8898-4bb5-a3bf-71c9a908889f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7164ac-09f1-470d-9b1e-b05a19e7fd28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e1d4934-ad47-4055-99ce-364da882d371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d7b89f-cb0c-4efe-95cd-59d72ccb11f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d40749c-7f6d-4d97-af73-2e7ccc89c73c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568f697d-2765-4c8d-bd9a-ec64805f387e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a695fca-6c01-491b-bf8d-f0631a136695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c12e0871-37cf-4137-bd31-245d44b85e99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3c7ba1-38ba-4408-b55c-2c85e36f0eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a262e0e2-5e26-4b9d-9f61-898a698da8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc86b59b-21ec-4c99-850e-c66bbb40036a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67cab6ff-96a2-4d56-a38b-3b08fa44e2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a8997d-ad18-4a2b-becb-c712d1760324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f290688-e792-45e0-b128-da6ff837438c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "58b3a49e-0d16-4ec8-b251-3e96976427dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d384c2e9-9e22-492a-bf44-901adab61a57",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "345b9d07-c1d8-4f64-9435-06c0dd2e03a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0e43f21-7ae3-463d-9eab-ffc753e631cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9683b6ff-839e-49f4-8bf6-84ecc54ab4c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4789a710-96d5-45d0-9596-57e377534a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b379710-4d19-474a-8ed4-7f0d19879e7c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f61e8d-7e64-45cf-81e8-b8dbf2253113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "973ed2d2-b2c5-4824-9df4-4d92988a6127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd48863-20fd-48bb-886a-3b764df021c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "52cd8282-a360-4c3e-87e0-b7528e7566b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319dafc9-765c-4a4a-aea1-fb7b7d9e158e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e55077e-6afa-4b4d-8169-567a2cff0e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61204a29-d589-4ab9-a720-4fdb5947a33d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d26e405-0a8a-41b3-9e8a-d6dadf89a830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c081dd60-515f-484a-9820-1f99d29017bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d19dd5c-3516-45ee-8ac7-31d8e8378376",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76258221-3a86-48da-88a4-b6f3b67d3c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e5f3e58-c48e-4661-a61a-6250b34b6ec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8843bc5-60b6-4a30-9dec-29eb7cc5345a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "93010d94-0782-4211-a301-cf7ef1433b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "201c71e7-56ff-4be5-a671-1085b29a9bd7",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "427eeac0-8f2f-4200-b332-4d451faf54d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8edd9ffd-b3ec-4d4d-977f-a96aab5b8e0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b951bb0a-2763-4005-884e-d611d2fedb56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e19bafd3-d5bb-440b-a02e-efb61340d1d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3516de3c-ee94-46ca-948e-2098f614802c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a5cfb2-d4a7-4bc3-884c-1ff54e321553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38ac79a5-c18e-451b-903f-15f7e161824d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2731a94-5ec7-4f39-8d03-ebc828115f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4ac44df-0413-4244-be0f-a3d79b06b05b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df5ec7fb-27bd-4f38-9428-b7fdeed4047e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6440de3b-559c-4bf6-9058-0015029a76ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c9ebfa5c-1832-4763-9bb9-7fb6c46fd0b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba074cf0-b248-43f6-88d7-dac2d52d70a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "90c7849d-77aa-4fe5-b688-41ee3a405314"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7d855137-2203-42b9-807b-ccd63f86f3f2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1843df0f-1f25-40e5-9a09-cebdf3c60fe0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d9590a-109e-4255-8720-0fa54cdf28e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7eabbbb2-7b33-4245-84b9-e2da11e98290"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3311c75-ab08-4b8a-a6c5-3b74742a56f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "aa6207ce-ac3d-4399-a82f-1eaa70d1dd4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c392ce-3c13-46c2-944c-3a03ec8a6db2",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaeb1d78-99df-4d27-949b-a8deed339389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9a584b77-ea51-46f4-bc16-d73a9cbc0355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b04d42-7020-441f-b95d-fb3deb5585d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "dd0d1fd2-1997-4577-9bb6-a1d713150d0d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d169d635-ebe6-44c4-8d61-a8bb9962a713",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "addaea9c-1af3-42c2-b1c9-5577d66e054c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c95acd1-96c6-4cb8-b3e6-e696e78d3a25",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43ba2973-781c-4f91-9db2-009229a9fd41"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7b653856-3c0e-4d9b-8fd5-b2966925f865",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "95056166-ea97-45a3-a7b1-c0032b701057"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "13a984c5-28a9-4f81-b672-bc3502aca93f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2e12df64-55d7-403d-a5e4-f0f62c27a291"
                }
              }
            ]
          },
          {
            "id": "9b203900-8744-445e-9ade-932f15671469",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fdc45b00-f6ae-4a6b-92cf-b48306d8a753",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "023d4b79-31b2-439f-824e-d0f79e466b51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1cb611f-5786-4a11-b054-412df69d3b20"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "475576e9-05cf-4fb9-aa64-4fd807050c9f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8dc8c4f3-91bd-4e96-9528-dd010984b679"
                    }
                  }
                ]
              },
              {
                "id": "33da0497-e40e-4dc9-bc4e-356c78c77a5b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aaf613d1-3e41-4181-aa0f-c6c1453a59c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "49a05003-dd23-4736-acfe-70edc4c33335"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ba71246-81d7-4fe0-be0d-5563f1958dd9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a44eaa31-ebb7-47d7-9e34-e76170fda150"
                    }
                  }
                ]
              },
              {
                "id": "b42513c7-9feb-4ba0-b565-00005a5fa208",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "87b68f5e-479b-407f-aabc-37946a6818b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f263dc86-3a07-4cb2-9522-512f9db5d12c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fcb97827-fb1c-408a-85c3-c127ce2de966",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7d7fd9dd-ba36-41f0-9281-c82cdfddc7ee"
                    }
                  }
                ]
              },
              {
                "id": "3b46a35e-dce3-4a69-ba03-17fdad1cd9c7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1319c9b3-fde1-4c3a-b9be-1daaa3863c44",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cfa49aab-647f-4d9b-9456-b7a01b5740d2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd7901a4-aead-488f-a523-35f0bd37a039",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e45e7d6e-0583-48ff-806e-fbd25c4e8bc2"
                    }
                  }
                ]
              },
              {
                "id": "500979a6-53dd-4cad-9de9-f39ae5b4db98",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b91a5d62-4b07-4133-8e86-c4ea77c6d669",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ac32ca59-37a4-40f9-b8b5-316f0377bad1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14d4d978-c2a9-44c8-abb5-8109d7ec5315",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ef708074-8c1a-4815-a78b-68d8ef8fd62d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "993bb797-fc86-4ba5-a941-c93b1f18033d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4232dc14-b94b-4a2b-aa24-644f8b657de0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4c12f3de-cca6-4d89-89df-6ee0e3f20fb2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "202f1f54-4fd8-4a6d-96b3-06a309023439"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a9c031c-3835-45cc-8e30-ecb30f541252",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1102ae32-0c7b-4392-80a6-344418187f14"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9fbbd944-875b-420e-8210-2662f291b51f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6675245d-eff8-4d00-98b2-d0a37678c186"
            }
          }
        ]
      },
      {
        "id": "4f63dc29-0701-4196-a8f6-0c435ca77ea4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "fa11606b-a844-4ce6-bcb5-0e0ffb3d26b1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "db70791b-42f2-4744-8649-9d0c14a1bd0f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a6fb2a9f-fadf-4562-adad-0eef8065a223",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b35f21-bad4-4f8b-a572-4ce79dca8a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae33701c-dc37-460e-8dba-22127e2619fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d910b50f-cea1-4207-8a7a-03860f4ec696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "70d6e6d5-b102-4065-b134-ef55b1f77b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183dfb4b-af4e-40ba-a618-5e4da3def063",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33024473-5e08-4b9c-9fd1-53709317ffab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f55aca0c-c898-44e8-811b-f2109c1dea8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f912f7-6ba3-4b2f-b0d3-53793cce8e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a37e533c-9241-4921-9d12-4fd6e06d8142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8762bc8a-97d1-41e2-8483-5967bf7476b6",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5803461-a13d-4501-bf2a-27adac26e512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59c177ea-3db8-4c8f-8612-349b9e625f40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294629c4-d9da-4c5a-afbc-a63ff07af261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bc5a86f-d94c-45f2-8cc6-e2bb4c3986c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f304598d-f483-4c05-9b51-b961fd5688b1",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1621893c-9425-4a0e-a9f2-9858b09ff89d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2966b7c1-2645-47e1-8ffb-f9c420924afd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9dd67d9-0262-464d-b0dd-237392cc5cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4108825d-80fd-4ca8-b971-494a8aa82f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b442280-3d8d-40f1-9a84-8c44b2f5c373",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3b6a97-e26e-48b2-a55a-d34776284faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09bc9a16-99a9-494e-9e98-89aed15cf08c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f75c17a3-4bf2-480e-9fc4-72af0ede00c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ce2c9cf-eb1f-43a5-af85-b6ed3e5c4338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3625e20c-72e2-4e72-98d4-c56ef443ad6d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "211d5eda-d609-466c-b644-301e021b53ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb0ecd1-17f3-48fd-a0e3-7d1afd683519"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab03dd06-4979-431b-81f7-11d3d21cb21d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8ab9cab-5790-4a6a-aaa9-8a268492416b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39aeef25-1cff-4a42-a737-40d8555f5eca",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac4f8f3-741f-4323-a25c-56e85a65ecaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a0baf0d-7370-435e-aa4b-50c0daf5b510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60412e9-ecb2-4ef4-af73-a60c8e3bfcc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "042ab846-04e8-45e1-807f-6f451be1c1c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56cdea2c-9d91-4495-a57b-95e5fcee9056",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b88baa43-343a-4c9a-87f2-2b4ee1291b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fe4fe79-16fe-4526-88f7-7d3cd19ed759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48a4e1d-0889-49a0-9c92-11f60976ca41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d45b0921-c0fe-4c04-86c2-bc7d828325a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d88c0c-38ce-443e-8857-9b7b0d3bab14",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ad7b34-12ee-4ac1-88c1-00eb0652dd63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "998a370d-3e15-414c-8c47-c002fcd36324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "138d4f87-01e2-41e5-a55b-49b5bd62d04d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1d8fde2-0f28-47ee-91f3-77389c71295c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a738890-8715-44a3-8a22-08bb6a94ad6d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b31da5cd-330c-49ef-a8dd-cb1f68d2cbbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f6d2a34-30a9-4788-b356-68d169aeef00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f642a5dd-3304-46b9-9f5a-3fcaf6e82ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "58919c84-1028-4b4c-99c2-aa0654b9396b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752cce33-1de6-4b5b-b0e4-1abb21125bac",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad29ae6-3e79-4d81-a801-bd33c98bd9b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c537b780-662a-4eb4-870c-fb45254fa69c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c7fc4b4-2bb1-4a06-9835-1dcf682bc1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2175c998-5292-4cc3-9140-4688180c020b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d71c26-848e-456d-9aec-da9f91725a7d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b6e9cb-8044-477f-9981-eae2e5d5e76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "956a1d09-5023-4f7a-ab2d-8d28ec13e7d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f76e5b-3402-4117-9a72-74c585019783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "882819b8-786c-4ee1-96a4-6d5afc29bda7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e370c05b-fe67-4430-8077-b656f0b1ef36",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25eb5f20-7731-436b-a2f6-376d5e95073f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6ccd5a2-0dc1-42d7-afd8-54e02bf312d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb6fcd2-d6a1-4bf1-9d50-e7f4da20c8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d24feab-ebaf-4cdb-910e-7d89b9968df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4146d808-9e41-46b5-a36e-5b8da8bec8d1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6372b50d-4901-41a0-8f9c-98a7f284d602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a0cf77e-2bae-4298-ab0e-7b80e5aea175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a5e131-bdca-4d47-a9d5-ccb6a2873b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "16cc12bf-2c4b-4705-b4c6-0d80b94ea05c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d06828-4660-4f16-aa04-87a8d2ee23df",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b44ec2-71dc-4c03-a00d-59b62cc1248b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cb22200-1c94-4dd0-8a63-4c0d941bb38f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "695c00ff-6d14-4ceb-80d2-8fb1f87771ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5645843-776f-47db-a476-53aa37d9f6df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61b50c16-3cee-4f10-83e0-c3019954a9c9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b7eb49-0675-4f0d-8dd3-7e94b5f9f0b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0fd0091-c8f8-4333-87e9-ad9cdcc0df59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8748795-6923-47ed-b2ae-5fc9c9019977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "652241cc-51b8-418c-abe9-caf042e9acc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f1770e8-2656-4262-b33e-ab03fe5ce560",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b266c8-805e-46de-9071-c65b33b908c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de799407-9bed-4681-a64f-06fdca5b10c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d1d86a-07e2-4f47-9598-2bb4cbd94576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba78646c-8c2f-4ce6-a7fc-b65ee86713d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e84d5b02-83f1-4574-ac6f-b1d0ff2083f5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a56aa9f-7106-454b-9c57-4d5ee16ff98f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cc8b182-9449-436f-8cec-3313fb730ff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b23d45-aeca-4993-95c4-14ea2f5cac2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b179a1c9-9421-43fc-baeb-04085d8a8adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69f0b532-feaa-4593-aa8d-5397dfd19012",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e02fbc7-4fb0-4e22-8d03-cb6d82de8513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab11237f-1843-4149-874b-e498b264059c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eceb198-f66f-4123-a356-2ae90b383cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83aea2c8-a9d4-46b3-bf0d-208a476580b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a20ef9f-d8c5-4c76-9e99-0e3dfa74a52c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a066b4-508a-4364-9799-80ed974dd2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b26ce68-5209-4e2b-a1ac-f2e971dd6917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ab8444-a78f-4097-ae3b-f83c086315c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a6ef1b4-c72d-4198-a5f5-e9a0eff39cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df75934-b756-4eaf-a3e4-3c629ba09e84",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a0ee27-5de7-40ce-aa6b-b1ec462e87d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c378615-920d-4c49-9d48-5bd183d3267f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6caecae0-09b2-417d-a3b2-ca5ceb5a6889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd121895-6b0c-42f4-9088-d6115811aa3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b1953e-84e7-4442-96ef-7af06131cb7a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d7a6e1-927b-4ddb-a0aa-2839cc6634a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31f1849d-0310-490f-9717-311e91c43d96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ce81a9-6210-412c-812c-6376813430ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e177764-428c-4f60-8549-add13a002d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2abfa541-b937-491e-9b79-10b11727ad22",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e260d3c-ff08-42c5-a831-e38e2caecf18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cdacc5e-2964-4b73-abd8-ae042083d90b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2157a598-8b4b-449b-b5dc-88e98d0b8244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb76224c-ed9f-4724-8408-b8ab306a6930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a2bf2f-4abf-4327-b7c7-e0e9c54f67da",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "133e3ebe-a129-484f-a30f-77076b0a4a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "169a8ef6-74bb-4649-975b-c5ab34b21699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8b81c9-924b-487e-a936-a84ec55828c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba021841-23d4-42f8-ba16-94950ae8e53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9345f1af-34f8-46f4-b814-ff8dbddd1609",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead5bbcd-e525-484b-a695-6ab2a837e3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ccd25a2-ab9f-4f84-9609-a2b7212936e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e74c725f-bcca-4671-b28d-0a85c9315679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0ab89ac-00cf-4ce1-aade-6f1e4114af75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5508792-da33-49d1-8da0-c18b675b5f40",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a0d260c-7138-4a88-a009-4094d1b8ad8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3e6689c-1ea2-4288-9d63-0639f0ed764e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d424bfdb-d758-491b-bd9a-aee1a925a0ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10322dc5-9625-4cf3-a65b-1ec1cc0eb410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8903734b-d14f-4864-94aa-dec1200a2a9f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77df767-0def-4a47-a084-e468a96dc38b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf2bc63c-2f02-4cd8-bc77-1f03dd430ac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd23e46-5d21-46d5-8ce2-af80e09b58ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b14924b-3b76-44f1-baf0-84eda71c87a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b6ab71-1f20-4ef6-97e9-f87dc68e65b7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ab0269-39f8-4b63-b7dc-64fb51e9337a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b598c9c9-0a10-4642-9f14-f501964e3678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76cb5f1b-dbbe-4501-95f1-92f96f5feaac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4eefc3c8-c79b-4853-b994-65454ab1497d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506d05d8-1e9c-4377-a54e-cf1cb1842f5e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7123c489-9967-40ac-a57b-e9b0a153dff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cec55f0-0a3c-4b03-bece-7c3d6f946c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a32fe9-356c-40d7-9b16-cb1c87a8f46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3266bae-895d-471d-9ae2-2347f8e23d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb63616-7ad0-486d-95d7-90783990f654",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1beb0fc7-0890-4fb8-8850-d956be0385c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3f71e8d-5dcb-484c-9234-603e56a1418f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873a678c-8e5c-4438-9600-0cb9e71a1cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7468b246-6b7b-4915-9fb5-c793160c272a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38164d74-f9d2-4b70-82f5-faddc9cb7a1e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1bd8e8a-2bd5-4b83-a0ad-7330318f9422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6248052d-4256-44f6-8afe-dea5f67f2bc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff5afdd-6c90-4c87-919d-060e56dafd4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbb0d2a1-8d65-4858-bf43-a1ebed75111a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62822295-0f7c-4bfa-8dc4-bf61edd24bcb",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d58bab5c-33b6-40f0-9e00-5f4aec9d1ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f501903b-be5e-46f6-b975-f0f37817966c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c61d8c-7923-4aca-a1b6-83204a199e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3e2c605-797c-4856-9539-759e40772796"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "af03c9db-5792-48a9-9471-b79d8b62f737",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fe72923a-76a3-4860-b85f-1e619f1101cc",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10da523f-4cac-48fd-8f19-fd18e2c5fd0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae4869eb-c934-4e60-9c17-d44a425a82ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11046158-26fd-4be1-a247-f0c5826d538a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a45e6b3-d2de-48c8-8342-c297c17a11b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d70191-1b7d-49a0-8cb9-e80672a66d69",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644122ca-0c1d-4bde-a02e-5429e468d788",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "cb2ecb00-1858-4c5c-8e32-184447a6f660"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "492ba4e1-6a15-4152-b1df-797282a1fbf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c1c2195-3dd3-474b-b988-df8283cc240b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dfaf8dd1-387b-4049-bc42-007433791482",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "685fbab4-ff41-4b37-8740-6be885521c4f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0e91aff-bad2-4c94-add3-984e758daba9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49f754a6-5b1c-410c-a9a3-58ec26d4eca7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "38b5fde0-727c-446c-b969-4f0a1ea7aefe",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b5ba5810-8e72-46a5-84b6-a3bef4102743"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "595f9d5f-c494-4631-bab1-794721a8e89f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "931b143f-7a0d-4f9d-845b-90fad7938607"
            }
          }
        ]
      },
      {
        "id": "b37557ab-ca8c-4c7e-9cd5-b8ee789110c9",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3d457839-5681-48f9-a9ac-051f0011d5f1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8644df68-f42f-43b0-b2d2-b361baa4dc50",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "324dc2a7-4091-4246-b0a8-d8614038c7ce",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b97f88-295c-48cc-9fdc-9aae2f8fd9b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d6d61cc-4346-4d75-8d92-da3078b68feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10386e71-8532-45f5-a28e-1c47617879f5",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b450ba-7073-42cf-b1d8-8bf332a0447b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b76dd49-9409-4adc-b2fd-9eab31d56042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48af71e2-29eb-447e-8dff-2579ccd5b2b7",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d6084c-25f4-4aed-91e6-1bb605d48efb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c5c819b-402c-49e5-acfa-82aec0a8fcf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9863754d-9029-49a1-b36a-21dba0b8f24e",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09abaf5d-7b77-4744-b0bf-28263f81aba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ad95e29-ddd6-4c29-89ee-60f4fac2b211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb4cf9f-b473-4a2b-8e19-4846eb4aad77",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a71bd1e-c3dc-45ce-91a9-597ada18e992",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11b4ef26-a8b3-44bb-ae22-80af6e71bf77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2ec0ec-cf49-4453-9696-c649a123cd73",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6283f2e-6c44-4ede-acdf-7c33519a5914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c179d029-34b9-492a-bf5e-3ccc4947679d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d02393-941e-4dae-8803-5fb79ef33b02",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf0832b-c9cd-466c-b375-5a909dbcf757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c9a7c6d-01e5-4dc2-b9db-11bde1f31b7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c120404c-cb8b-40a6-b2ac-c5c83ce6d0d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2156492b-1b73-46a1-8c77-5fd062e948df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c63208-52eb-4a75-b83f-b9ac618d95ba",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5747156-bca9-495b-bf62-448869a2bad6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8089b38-0d99-4952-901f-a0f571868bcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84dce34e-6d2a-4553-8317-23eeb908c61f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8693737f-f430-4ed6-b15d-b5013ec6f497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b8fad04-80c8-44bc-b653-51dc9c19aea9",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f227a251-c7b6-4620-ad6e-d7f7c26d5067",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d87a66ee-c51f-4de6-86e3-0ff025d11c26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "509fab3e-3696-4659-b95f-6d196df74bf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "202018ca-01dd-43c6-a609-6a3a17928668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6069abea-b566-4bb3-b2ad-bcd7aa0c548f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416a770d-69e2-428f-bb64-30e7b3780e9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54e2cec7-4783-4048-b9a6-1a7c924576f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6874cc26-76e6-4a8d-b4e2-35e299252c2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "527e6425-96c4-488a-8bea-ad4dbe1a9ac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b47a62-4228-431c-a1d8-9897b98a2ed3",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ce98b2-00bd-42c6-a87c-c672c4a5f801",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1805c793-1ec8-4793-ba97-c65b76ca4ead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "987e9932-2154-4244-b9c6-0a6f14d384ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7c32d20-7f58-4b2c-8efb-5abfbb312ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc8b3b6-d7ca-4797-a2ba-78ba44641f3d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c894dd9-46bf-4bd7-abf5-a8249c4e4e81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2281fac6-fa91-4abc-835b-e0b17ecb01bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb444c2-9926-46bf-b6c8-74efbe18cdbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51d1a27d-985f-4a21-981c-17b4d13250c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2368ff28-c521-4372-af20-8bd1e1576b89",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48fe53b1-0c7a-444a-a812-4149759aeea2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce500010-c350-45c8-b3d1-4a0e6bf700a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "539d9c80-3a46-465c-8c86-fcaa54273747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cdf4fe5-28ca-4b2e-a9a9-e47ff0281a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec8d467-3f1e-4a4d-8c10-5a01469092a6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caed1f1e-1277-49f5-b396-5c581fff17af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32fb3912-685a-49a5-a0df-05da91be63d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "721f13e3-4fbe-4fb5-864e-cad5731eca8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6c107e3-b60c-4836-b098-e1451c4a4452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e63a75d4-ae92-4a91-a46a-c4c244380a42",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23bcdb1e-9428-4573-9555-1ba3eec0b161",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6678f4d8-aca2-4b99-bd41-e16a8954c81a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1299f3e9-63dd-431d-b5b4-0ca000882dbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c647f504-993e-4cec-9d56-c54e2a6c32ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d98c88-2324-482e-8042-e760e5c566b5",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7573072-de95-491b-ab6f-afe322973a2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50cdca8d-39c0-4ec2-b17f-08c6476a41de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d257b38b-164a-4023-a4ac-7c6a2279a9cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74030251-1593-4667-b78c-552feadc081f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b45249-ad54-4520-88f5-a8cfb57ad941",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a68779-0887-46c8-b1b3-987e62fce851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abcab7c2-b0c8-4de2-adf3-61210ee503d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f34aac7-2293-4581-9f43-2e9a31fb62ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a0e0846-92f9-46cd-9b32-81f49ef5e7cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d955f7-0b52-4f71-8aa7-8f91a1d992f7",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa32b9fe-af6e-4988-92ac-82e6156c3f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d14f84e-fa4c-4ec1-bc08-02f2af8c8f8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6887a010-940c-4fd7-b711-d62c33d81c13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f8d14b-ce84-420a-b677-b5172d53fb20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "456ddd4e-376b-4e89-aa95-d2647fe5a8bc",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72f2cfc-6483-4a81-ad5b-ac030f58dbd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0902627c-5121-48ef-ad1a-7b3fd20388b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0ac58d-f0cd-4a81-9b42-ec569c4bc5a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "287fe21f-7df2-4605-b2a9-b41614c98ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a8a61b-162a-483b-a40e-c6d4a93bfdc9",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a3f9ad-f607-454b-940f-7d5bed381e0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00f02204-c893-420b-8a62-983022534519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0fd033-01bd-4119-8b11-3cc896c65fa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69a09fe2-bc3d-434d-bc19-2c586093ad29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983f5645-c23e-4d15-b49d-60fdf029ac31",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da3ade8-d519-4fe6-92b8-8713062175f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a647251-a82a-4ba9-949e-62caf6e7c695"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8cc4b0-45c0-4ea7-8c60-6ef1de33d201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b57b2578-1120-468d-9dec-caedbbc34792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ad9f58-ce09-4fad-b5d6-4e4faec998e2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d5c5c4-fdaa-4e32-924a-2ad10c60a75c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad5ae526-f4a4-402e-80f2-0d344626f294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8dc9945-4f9a-4518-a2c0-a5be87e56445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09f297bc-1630-42f6-9779-ae9ca87fdf96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ec15024-c6ac-4b3c-99ed-4f2c5bccbc31",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a0a8021-ec3e-44c0-93e7-c3f7034c97eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f98f7051-f9e8-4b2a-b793-c3f6043b5807"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4047470-63aa-46c4-823c-1159f83b6625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccac424f-e8de-4036-896d-c29c87d3ba80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5348431-a049-4ae7-a8a8-77d6f45ae26a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "415fd4e9-6d7e-4ffd-9456-088fb3bc1d8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac4c5fc4-56f5-4019-94a5-b9ffcde6de4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b855a5be-158b-48b2-acd2-df2810c9a5f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1466db4-18ef-411b-a6eb-ea05529270a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a0bb71f-e335-44a9-9f78-2f63d270559d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a93c15e-b8b2-4b61-9c39-fed47409e2fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64532104-10e7-414e-a77e-94230341b3bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "432d7b70-4f07-48db-852e-b26d20c281c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb4e3e5d-210f-4fae-8229-a93a931605ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dda69556-e271-4796-8f86-e18e70d96a0e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e657ccf-a2fb-4152-b891-9209d00c6522",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b960fc8d-0983-4709-ad93-103999139d65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba0fe60e-a1fb-42d7-bb43-d944a28a336a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43767175-0080-42f6-b38e-36b9bab2ae02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a28e6e-514a-4e7c-909a-87ebefc059d4",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "957945a3-5205-4bda-8e18-9002fe8703a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d84301e1-2c0d-43a8-a50d-38c62a55d19b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98fb75a1-9163-4558-a1c3-5b42ac409937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc0cfc26-9082-455c-9db7-a3056022f313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d196668c-9dc5-46eb-a067-4b6a0fda985a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6cd582-59d5-449a-9c98-b3fc9f7b5fdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4194f40-b66d-4417-b2e8-f05580f67eae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a6435f-9c2e-454e-bf9a-5234a1561381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8730d68-c557-4509-8444-e33e41b69a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e156ac8f-6ea2-43d8-b8f6-fb5589f39187",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7e5240-0d97-43c7-b0f7-d6ff4ae5676c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83e5e64f-7f41-48be-8ba4-f25bc6bf0ad3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "038a1430-f974-4226-8bc7-689f6a829a5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27717a3b-75a5-41c2-8c39-435f9e1bd58d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9138f402-6191-4cf5-9f15-a6334315bb73",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ac467d-6ebe-4874-81b7-144d759bfd64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "794517b0-dd11-4595-9f9d-b2c251f300a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fea48dfe-1222-41c1-a132-acd433282489",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f256165-9566-4c84-b447-98e941225859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3613f43f-61c1-417b-b682-29543fc84a26",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d31306e9-0ed8-4150-b88c-63701208a808",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a94371a-86e1-4812-8865-8d6edd6e8055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6189ab-f6c2-47a5-8975-a114c102abe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f552c66-d6e9-4dbf-8136-507afd17c420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb9ec8b-c750-4b86-8894-9532b681b1f2",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86993118-eded-4ce8-9e2a-2d8b9417ad08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a61ae1b-e322-4aae-bd7d-1aa2c9c02db9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5fc807-d817-4539-99e9-459e0311ab44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cffad79f-ce26-46c9-b6bd-3181d917fa10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3f56aa-f012-4f41-8bab-13b677db6b86",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25cad50b-d4ce-4659-841e-2ebe642a1b36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e578f254-9077-4e4a-b1be-815a7a40754a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3dda81-ce1f-465f-bb61-a5f0f010edf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b37e306-7b5a-4e0d-875c-7e0d3b05e249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed303fb-aa70-48a0-95cc-f1644abc6c9c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4104a912-7ac3-4ba9-93ee-1049019ec3ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e0b916c-25f5-4247-9085-27f43540b98c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84987f1c-67cc-4106-886c-c7eb76fa6497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dd84a9b-fc77-42ed-81cd-d4e3e019440c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2520567f-d52e-46c4-a81f-b0466b6c2aee",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "086b20c3-3cba-46ac-afba-20d63623953c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6b21b0e-24d1-42d2-b1be-b34fd3722d9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c68119f-b531-42bc-b3be-2c79b30a0a87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45e8cabc-afc0-47d2-b95a-937582c14fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d2a61f0-e671-49f7-aca8-499395d22115",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a7d8ce-83ce-4d38-a9e3-0d41cf01bf3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95bdcd41-c7fa-4262-a93d-cbab55ae4dde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe776ce-0f94-44bb-aedd-77e45f186225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6059ebcb-0440-4f19-a142-304d3333b001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41ab12b-0b33-4728-a8c6-a3f5a86982b3",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "122c72df-b581-4258-92b9-13c7aa07bd5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aea5254-3d38-46d7-a610-b8fa66bdb8b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7376d20-86e1-4340-9a14-b275fd05eaf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9879cd3-ec22-40b3-b51d-c9f1e58ae71a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7be16e9-32a3-4efa-a901-5fa79b408557",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56f30e7-d151-4fe4-871c-3c99cfa8ec4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc3ce2ce-2ee1-439c-bfb3-447c08e9add0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbaa762-ba01-4172-b0f2-fe48e114685a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6779e1f0-77b6-4f7b-b6f4-f790c91bb0dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a588ae29-8d31-4514-b64c-3dec81257666",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7531e8a4-5107-486d-aad8-270a8163bd77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be8cebda-e8f7-4ebe-bcda-8ef21d55ce5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb7e851-b88e-4f1e-9ea6-9291c4d78e6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a924a77d-663c-49e5-901a-c3c3cb6beb59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a47e35f8-be35-4bd5-b5b6-50c0ca4888ab",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70bc77c-06a2-49e6-a549-869be06539d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aec0f3fb-de19-478d-ad20-3da35ee92065"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2cb068-7a16-4fc9-b6bc-7dbd0a746441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eb2a3e0-a244-4259-ab60-3e2f21ed8a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77bfc207-bcfc-46e6-92f5-ea2b629eb11a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f2dfa44-1d69-4d3b-9cac-dfb46d4de185",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e20aa907-f8f7-47e4-9ada-eaf7fe19f350"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db3fc73-db68-4774-b617-ab12ce48afe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7b6806e-ab41-450f-ad8f-2ec2f8e0ee4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5924012-714e-4785-9336-b6b0863c4caf",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b6b937f-fa97-48d0-a2e0-fb3ef56d811b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1407c046-612f-4d05-b31a-bfbd5f24a5ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1342150b-5b00-4774-b075-56e3b16fe547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ce37f2e-b0fe-42a8-997e-16a0b7b5ddcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe4fbfa2-3a1e-4e18-bae6-a5c9b7f60ffa",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e164dc9-3142-4387-a48e-03794f404ac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5e1fd5a-a07f-41a4-93f6-0e9a860c848b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce5b883-f68d-4896-ba7e-546c831293cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64e1ebf4-b414-4e3a-90fa-7b288bf0161b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46824898-5458-40ba-a9a1-1620889a7ec7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcec6029-b0c0-455e-b008-575bd8037212",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1989e48f-ffab-4778-bd09-2b325d1e6f6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf4cd41-d751-421e-9118-7bd490ab6a68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59fc57ba-0dd0-4222-ac35-e31267bf0eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "025a4801-b360-4084-bd57-f31828246d3c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63dae064-6591-4f04-9dd4-097e8c4a06f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "891e1f8a-dcc6-4be3-8c0e-3a02d36fce32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc88d65b-eac6-4bc6-ad9a-815c80057d00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afcedbb3-fa8e-4319-93b2-3bfb498a1c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "782eb567-1954-4c4e-af37-e3f85b1f0778",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025a055a-a787-4401-ad19-3b306308fcbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05ba8bf2-5606-4f47-855f-05a2c03efe17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e463a0d4-6fd6-43d4-9b31-dd92b927bf30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be8906bc-be2b-41be-9eec-f35d9430a5cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2641cd56-5169-40ca-b164-af40eb2caa6f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ffdb6e-a56c-46fa-afc4-9868f6f6640c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de4cb89b-fcbd-4f49-b462-9fd3870f44a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c5c84c-d802-4af2-bd86-e1fa512e6e4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28761a69-a5d1-4236-b773-2109713ae7a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad17fc0-717c-4d12-968d-b500de0d2a6d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff8715ae-f725-4c97-80d9-75b7d96f09f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdae0f4f-54af-45f0-bd8a-ab451d224564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a8f51b-9201-4018-bb32-0b21d3dac6e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f277a668-3d40-44d6-a80e-6b510daae8bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f1dde6-1646-43a4-91d0-e95dfd307fbf",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20fddd4e-7845-4bea-b0dc-9e3f872c6bd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ac3b2e3-5c61-4196-8448-227c21d5398b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "468d3c89-7360-474e-a672-841c7bcc1c7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e84a536-f6e8-4945-9092-511a1e1c14cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10f7719c-55d8-4eca-b853-7ebb66264afe",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d58213-d0e0-4ea0-98f4-87699302bfb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e755dc09-54be-4201-8c3a-7bc223d9d816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b03115-9f92-4726-ba6d-9683905e8541",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba40eefd-ab1d-4325-a212-d86fbf2d0cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2554a115-2004-4d5f-bcf6-0c5d701fcbd7",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159ff3bb-ef2d-468e-9822-07f821e2f7b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c784f4a4-9327-43b9-aad7-3c520ed47749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac0652f-7d2c-49ad-8a26-e3aebb9f3e7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec7ccc4d-447e-462f-ab19-020efe51d159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f186bdb5-5039-48c0-bfb2-721166c1a77b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e6f2fa-6be0-411a-90d1-9761e13419d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21853434-b885-4e21-9440-8ad5959fed24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3806d7-ce3c-43cc-b75c-3ab1c758c882",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67fe5338-87d2-48ff-917d-521c079eec44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3facb059-a051-4bf2-9755-ee78f140adcb",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b133ca4-5a36-4df6-a80c-0a255eeaf1d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f685efab-76db-473d-a8d0-fe8db43c3d35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad373f95-baf6-4a19-9bce-ff6208ceb377",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38dd84b9-aff6-4320-b811-34b2bf63010a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea544c94-316c-4b7b-96fa-53165bd6e201",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b4b450-919c-47eb-9865-a52b88382273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "060b7e7a-a506-434c-8897-d7d75f78f4d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b5e5ab-8ed3-49f8-a0eb-df1992e37aef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "784952d8-5dfe-4a95-8e01-3cd40abaa651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f78ab2f4-1789-4a3e-9c10-23cd28cd1441",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a5884d-e63e-4132-98bd-26c7f428ec78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b411fc87-c06e-4439-a3bb-6765627fb44c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e8fe56-6d00-4ec7-bb2e-ecf0128a330b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56e713ac-03b7-4439-bdc4-ccdfc7ed8763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1592fa35-4585-4b41-b120-160246b21e6b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18633252-83fc-4bc3-bdd6-26fac7274d57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2612fbf2-d828-48d4-8601-0d71cd20afa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ef1fdb-2cc2-4b42-8d0d-3dfe60d16dec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "152fe127-6a71-4983-9da8-293135cacd98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06cb52cf-bfbd-489a-bd66-467026e47c94",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe2b128-a923-440d-9ba2-ffd409bd59ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1433b2f-a256-4bb0-a84e-931674275c0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a516a8e-1a30-4667-a18a-6d80e962ddc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abeb284b-cd1e-4cce-8b9d-603e63b85212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e87d4b4-9f75-424f-a7d0-fd2bead10058",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7b99f8-814e-4d92-aeff-0e7e8842803a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bcc1d0b-28e1-4936-90bc-df40983f152c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e17660ab-92d3-43d7-93f3-159f3b1d159c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab71e182-69b5-4ada-9967-ee0b4cd16735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f575c9d4-0a14-4c45-87d8-16e456fb77ea",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abdd5357-b3bd-4083-bf5b-96b87e9fb5d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ea405d3-edac-4452-90a2-928b31a16001"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "452abe2c-6f43-45b9-b523-9fa28853603b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "285dca6d-e160-44c9-96a5-6f9f687ec123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "993be1d2-64ae-45a2-815e-1f9f15eb8cda",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30cfc4ad-ddd5-4152-9284-4f3043054a0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f6ee2db-848a-4cb9-956b-447bf684e62e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "298c5073-ea74-4b6f-8f71-41dca360ceeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59653e4f-ca00-4bf6-a32f-df5d5ba79fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc93697d-e7e1-4c4b-ad9c-cbff675be689",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7542a30c-7185-4d76-8483-250e67f342ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d48678e-f989-4b6d-888e-9dc86def1766"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70279a47-3f0d-474d-b358-af3c1104cbfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dbef803-5c26-4abc-9d34-4e35ffb0807b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c2b2b0e-6c25-4b46-9dc1-6237410006be",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af7dceb2-471f-40b6-9675-6ffba0b40745",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1957d4f-bcab-4f77-9110-c17a42bdb3a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f55fd573-5d1f-4285-a8f8-60746778822e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92239c13-b710-4dab-988e-507c989029b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e96af5a7-c454-4fd6-97a8-c67bc265a40e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25439cde-3e0d-47e4-9a57-f42f8e9ddbd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df8b229a-00d2-40d7-b7db-65055ff4d0e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b431ff-cc3c-4bdc-b97a-aa998373e876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c96da18-8cfc-40a4-b23e-ce824a0d2f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9637e6b5-ac6c-4d1c-afca-8237610495eb",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60048601-53d7-41d7-8b51-16ada8e985f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2939bbf-976e-4e0b-89a6-5d89847fa8ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83f1a8d-be21-4422-adb6-00ec8854e03c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2481b26-0581-469f-9e91-53e8148c786a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e310d20-65bd-44a7-ab2a-7502084f6430",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a77b375-d0ff-40d3-aae5-f13abc85a65a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3b3b615-4e62-4d77-b450-531a3351f190"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ceba4c-5490-4bde-b638-47aa7662a465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7827f64-2918-4524-ad93-bb748508ac1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4421c2c0-9386-4ed4-ba35-3d2b6343379c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "684ff67e-19e6-40af-b1d5-fe1ace1ee1bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b117eafe-a067-4a93-9c6e-0b2461fc0b64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06c297a-c52c-4ba6-9dda-d30dbb04bc07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d822f798-85f5-49fc-aaf4-91d58f1705df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d1ddbb-1be9-452b-be1a-7610476516e8",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67404b66-b303-4f0e-a7a0-fd0a2987b982",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17d08c03-c075-44d9-9e18-748d7b85cc11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "221c8dfd-477e-4414-a50b-0004414f2e94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00adf28f-2cfc-4a6e-a923-c28341f2bc20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f339df97-dc61-4640-9418-0fa89793354a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfcf9a8d-d254-4fad-b666-2e4761d70387",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c16899cc-ee35-41f9-b7db-4008c59ed48e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6eb4c27-d186-4b5b-89ff-97c64d0ea430",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47666f8b-2dbe-4045-b943-43d0ed3be650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a272b76f-44fc-4a80-ba8f-ebafb17c7cd7",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6390cc-727f-421d-84cf-c377bcc0a34a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cef8b3f-90a7-4197-a7f8-d5daf25841db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d6629e-ddee-46b4-9a45-cb4af3d76c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbd777f1-7d28-4dd2-8e4c-f42e788b2f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab580ad-beb8-412e-ac35-dedb5f4c07d8",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a3860a6-2c5a-4339-bf87-8c501c5a28b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa9315a8-b8f2-4c1a-bc9d-09f880e01a4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f449f2c9-9dcf-4239-b94a-eaa70663ab5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "969a6ef7-dee8-4acc-bdd2-60c06a74e028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94962f27-e7b5-4f7f-b32c-a307f5eff64e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b6ae6c-c512-4a17-9dc9-97e9b551a392",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46b15fa4-a1a0-43e0-8054-16415084f8fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea31750-63aa-4ea6-9631-94ba737fdb64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d792506a-4b4e-44da-911c-2bb80c25c61c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33eb156e-cf14-4933-ba35-3e062dc9b81d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99071bc1-f97b-43d6-9d2d-3249ef202764",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b55ea93e-191b-4542-a0c5-7eef56292835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40154eb8-21b4-4578-9c83-0f25db49b8cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a26c16a-f5a8-429b-a338-081d245266cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88a94da-f113-45e9-8a7a-a017e69d0a99",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f324cbe0-511e-4ca3-921d-c52136121e85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ca1f059-c646-4ba9-851f-070bdede2e5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3012990a-fbd9-4b6a-b015-5fe563649834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c2056ee-fbcb-4a26-a9b7-c2900026b626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bdf919c-e8fe-413f-a8f5-1d4b1c7cb74c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e17de8ef-3b08-45bb-a11f-7605bf4671d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3b5f21d-fc9e-4e59-87e5-dc47b2c0b34a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42e894e-24d0-4eb9-b12b-c54c6b2b73c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9859878-e4d9-4bca-81d2-6a3e383b3d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d3e353-a220-42db-81ab-23a8669f05e9",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b508a7-1e75-4d2d-bcc6-5a524c43b6f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6bfc559-cc92-4770-95a2-2098b51fc123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8990588b-228f-40f5-b66e-be4d6d231133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d62c89c3-f7c6-4cf7-9f57-f1dc4c53be55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f61c866-46d9-4253-a8c3-e02b0d177527",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c956e48-112a-465a-bb19-ff783891fa2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b35b4df-77cc-4322-a007-3de0a27e67f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dfe220c-cd63-4965-9c81-021a15d72118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feca9a76-61bb-4809-8fae-2d2682f00306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b4df3a-249f-4665-842c-4f71f1f57999",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1a96f7-60aa-4133-b054-b6a39d8743bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0eb40841-2502-4f1b-ac54-e0a963d6475c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffc4656-df98-4998-a20c-6bc77471d470",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd91c718-143b-45e5-9e60-b5e6c51e87b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ecd612-824f-48de-b58a-2b1b560856f2",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22334995-acb4-49b7-aa7f-a54a3ed106f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fafdbf5c-aecb-4e54-b48d-30f0c402d4f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c50d1e4-4f00-482c-827d-5f9845800bcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62379bec-8ed8-4425-a43b-1c7e49e23fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "246fb4e0-9477-4a12-a3d0-e8f08bef4afe",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9f225a6-2260-45e2-ac70-ab639a214645",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edbd997c-bdc9-43d2-8792-7a03d57d8e82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abdba487-a764-4f4d-9cb6-4555948f2031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "673e1431-a29f-40e2-8086-37d1ebc48d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342e47d5-f74f-4230-a01f-21cf3db4d064",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f805ef-b0ae-4d6f-a16c-f54ce59ebc8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bafb8b75-0036-45ec-9c1d-93e87462fb32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d71a4dc-2ad2-4ab5-a1d1-b6acfb3a1cbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a4d8d81-d638-4976-bf75-7704f56594d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83c6cf2-3fe6-43d2-adf2-ac8271c21186",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09f56c4f-5d18-4785-a95f-bde77220ad52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ad3dda0-18ca-4f1e-8019-b4f68ba04341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df1f3277-6e76-4e0a-a783-ba9da906051e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbd06ed9-3242-4387-b26c-0f76112cce38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c67961c-0f2f-4986-b9f2-e6a33e6cae70",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e7ee25-1163-45d8-8fce-8cc1305079fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa1393fb-38ed-4a8b-975f-5a2b1f3f6299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8307c024-335a-4495-8808-85dd614b3218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9801d745-c977-4600-840e-223c692eee94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c68b8ab-53c0-4d99-a97c-bd7b889fa036",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dcebf39-a340-4ed6-83db-c27d659622d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbdd597b-9190-4019-a23b-8c0d5d333560"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4dd9a93-3811-4695-8a22-91e1efed1609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84e6a2ac-bd9c-49d6-afe0-d08fcf7a4f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a575525a-c645-4eb6-9290-84a3ca6e94bb",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8d6b70-fc21-425f-9119-7fa1db2a83c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e5a1286-a3da-45e8-8b3f-fa59ffde7e83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3803e551-3dd3-4edf-8eb6-364067bcb2ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5338039d-0089-4cfa-9737-433f8a6ad1d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7224c73c-2935-4b87-9d5f-afe1580fccef",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48aa38c3-0981-4a33-a4dc-3294c4b94487",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "349a7f62-a6fb-470a-9dee-4633abb4fbb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61bc6b5e-ed58-41f3-a69d-a368b61c5baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76fe03b3-b3ef-40fb-803d-676e6a45e9d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671c60e6-9d11-4294-99ab-fb2fa3c89533",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02887d90-49f9-4fc4-b7b4-11820051232d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13060ab6-f43a-4e50-9070-959a19396dcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "210d6c77-ae0f-48db-95e7-aa8bd196a6e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9945b8ed-5a98-4dff-a7a1-2d4c5bf5a186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b01acf-3609-4568-8c68-b730118dd106",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611d9c7b-f2a1-48b7-bebd-d36b0d51bdee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2284ba45-43f0-4589-9f77-c25d0ce935a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2bd1e1-d4bb-47a3-9fcd-ba004b1aefd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26239a62-fe9f-439a-94b6-cbc74666fd11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e038145c-7995-4a10-af8f-906db3ce2cc4",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4800713e-93e0-4d4e-ae6d-4e2e109f6a72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca306da5-4979-4520-855c-dcf458376cc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbbe31ce-5e48-4407-8345-4e1289a6b756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "972f7949-8148-4c06-b776-e3f43503192c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac554bc9-e000-4de6-bf92-429b07b86de8",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2a19df-aee0-45f0-83b9-ac6d9d1634b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2644774c-6324-48d6-af78-d50f65ef67f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd6bc14-a08c-44f7-9219-32f413502230",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be17ed1-03a8-48ff-b37d-9c2a850ddc8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5303fa-142a-4cb4-b4a7-2ad71093455b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31cd99c7-c176-4cb7-a9ad-b6ed103e34ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85bbf873-67fb-45b3-a522-f7c42488bcc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b116b72c-837b-4cc8-8ed0-c2463664faf6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c48d40d6-50c2-40ed-af6a-5f7ba75000b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147e84b3-6f18-4fa3-818c-ea34055a4766",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7570e976-d627-49df-ba29-bdc0a4defa9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dbeb80a-7cb5-40d8-b12f-36b83b843d99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f689f8-4e9f-4ad2-8b03-d5acbd4260ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccba45aa-2c18-47b3-a09a-2568197ca268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b63737f0-1c53-4fba-9da1-2a38b4c89f90",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf4200b-b039-4a1d-bc4f-4765de6d80f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f88cbed-1fc2-45c9-8ba8-4ebdd89e1106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece6b20e-7801-425d-9c84-b279e76fd741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38a54a0f-68b1-43e8-a9b2-b2a05985bd6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067e0f70-38e8-48e7-a7b0-5043722f1a28",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47aa4986-ba68-4bd9-ae79-e74a92953c23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81c464d7-6c7c-412d-8ba7-1e7d138aadf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d132132-9a7e-49d1-8191-23846735cb6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "452f016b-9322-4ac8-a38b-51c1ef455c46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55924b0d-2daf-4f98-a9bc-a5a32f556c23",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e8d168f-347b-4383-a457-264e6965fea9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5e1cacf-633d-44a5-af0f-3587f8d08014"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2100e690-a674-400f-a0cf-a48907863f80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "764d41ae-37ad-4c29-a676-5162f9a5d8bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93fbefa5-a18e-4086-874c-9cfd74c852b8",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f7027d0-e1a8-4ab1-90e9-91eef6597a35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88c035b1-1478-4465-849d-c64a3689905e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d863c3-10d9-4913-95da-dd6c21da477b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0c716b8-1c55-4d7a-8c34-bfa6ca085e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15350410-7464-4366-80c8-2e43fc9e4d60",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4de6d5-655e-483e-87ec-ac4fa4bb71b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f763cbb-f02e-4ed6-b8f7-3b848814c0b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35df89b-d508-4790-b817-9362cd04ca5f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "630441ab-1e0d-4589-8523-eaa5a7b032b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d1ad25-1e0f-4bc0-974f-c8e010d6928d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8575733-1af1-407b-806a-b1855d8ff6a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1767d774-a83c-4452-99e3-e88919574dd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "690aa777-48f2-42cd-b693-dee00ca9db19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "253007a0-006c-4dcb-9ea1-a92aba859ec0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4ee72a0-abda-4196-8241-799eb0d7076b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ecd95d7-35ce-4262-9ec9-15d89620cf3e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e8626f6-1a01-418d-9896-7a2b08f282c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fb6111e1-629a-4b62-8ef8-47efc157c5d3"
                    }
                  }
                ]
              },
              {
                "id": "162d6f1e-cadf-40ad-9084-e1ce4dca16f0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "97723968-2b99-4958-be9d-84f21b1add85",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1653800-1940-436a-9b86-4342cf6122bb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7173cc3b-7ca0-452c-8d70-60dc8afa4323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d04a1947-cd96-49ba-b6e6-a45e0227f694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c5746a4-b733-4a6c-aac7-900df2f56d22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f69f84db-fe82-4d50-94fe-a60d28288303",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2703c69-adb3-40ee-9fa5-5b42e3d07fae",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7098e699-fef2-48c9-bf3c-d883fa11832d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "326939f1-b722-4f9f-a150-c7a7b34b61e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84eefe5f-1d43-4bae-bd40-1148fca8271b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d279f28f-a38a-4276-a5ca-bf0b0b9f8b30",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c51a76b8-9b73-4ae4-9c7c-ae7755b65a3e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb7fc688-2226-42c4-b5e9-facc8b399c8b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d0185ed-162e-49bc-a585-d9b251bd40e8"
                    }
                  }
                ]
              },
              {
                "id": "9f54aa2b-0648-48fa-b3db-ecfa5b177265",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "af71b716-c803-4c57-8aeb-9a221fc0ff8d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2ca52b-ef75-4f51-814c-1fdccfc0c8cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e2d96b02-7572-413c-b14b-9cb64af3e79f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c12cfd-a5e5-49ef-a55e-870038f5b465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a52717a-25a9-4762-8bfc-b103e3eb3802"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0fcca0de-f911-40fc-9465-3591abc9e3cb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "465b066e-7beb-4a97-bb69-c72d25349637",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "22364239-7d6d-4959-bbc3-19e463e5645e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8b474128-37db-4f75-a62b-6946c2f2e454"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd7fb4c5-219c-4bd0-9d9d-986c7214e9fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19ea9dcd-c7c6-4319-bd45-bd71e1e3ab06"
                    }
                  }
                ]
              },
              {
                "id": "588f368c-9e2b-45bf-b789-f5e7a46b9414",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e410caec-a854-4f6f-83ae-1a2842c6d2f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ab219f69-f873-4377-8e5a-a1510a0aa5c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "feb7eda0-6be1-49c4-be11-0705313ee5b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5f39fd7-f503-46d0-bbab-33a0a59fb01a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "440e8316-e7d6-4490-a267-568d59acf029",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1208bf8f-4589-4023-bdab-9d355a45bb4d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5e33f992-f07a-469d-9ff1-d4a7eb3434a9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a24fa56a-cb07-4c91-bc92-c984718ffbe9"
            }
          }
        ]
      },
      {
        "id": "96a5f0d7-307c-4595-86de-d0ad5b5ae8a4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b9115956-c4bb-4280-99b9-6dbd21510ad7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c55e78e8-082c-4aba-9bfa-c552119d3245",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c9add1b1-34d2-4d79-8837-a4d325bbe035",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61991dd6-a748-48d0-a94e-9f26da06147d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "28ebc63d-0598-425a-b0a8-6a02fdb6ebbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f03c40-578f-475f-8c37-2ebb224f9969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "648eb9a0-1555-4d6c-b94d-dd6a496c0e01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f3d7f1a-60a4-489c-a789-c6186016c252",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50dc2fe5-7bf6-452f-ab51-afb7ee807294",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "86c6d932-3517-4cad-9ef4-61a35cd665a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3830ad-67c7-4a07-b9a0-46741cafe3fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb57aa5b-b019-4916-807d-661335a77b7d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b499dddc-f6ff-4671-8307-5a5f3e2bdc96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5775cd8d-a714-4d7e-8b23-e7d2e35820ae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "55e835df-1d60-4eb6-a3e6-ecbc473bc6d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0dc8a748-5188-4b1f-8de2-7ba81c1b9621"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "981af630-1f30-4f60-9dd7-8759ea67335f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "037c6705-cee6-4674-88dc-b22c7cd50392"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0a3d328f-1725-48e8-8189-badbac6409da",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b9d7bb59-4713-41de-bea2-98c508f300f4"
            }
          }
        ]
      },
      {
        "id": "1063e809-0a0e-4d91-b3dd-622925905781",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c70f3603-8c4c-4934-8ae9-32cac35a1f1c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0ecbf76d-b57a-463b-bc47-3b753515f638",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3adbe951-2566-4d96-aa80-14297192f242",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90208eb-016f-45bf-a1ca-9559439d9c8f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3a6c8030-2def-4014-9a5d-6dff0ccc981e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ba3146-f745-4e73-92c4-2bf3f4c4a90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e576d583-46e3-421b-b2f7-e75f5474462f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a915420-b094-4c38-a4c5-82a4ab45f36a",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3ddd6c-0f68-4aa5-94c2-46b7786e5ba6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a57dcdb7-82bc-43e0-becd-064512e1658d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "767957bb-4e32-43cd-a2dd-4e87e428a47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e5cea49-c159-48a5-b753-19ca95927a0c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75b0ac24-ea8d-4767-969e-670f5a44182b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f802b1c-3bb8-42ef-890a-b36fcb673153"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "55295ed1-0fb5-4cc6-ae64-f42ed6871026",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e44d4b69-d170-4e39-bfb0-f7428972e435"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "844eeede-01be-4749-ad6a-6cabd1bced34",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f6cdbcc5-6fcf-4478-b60e-cb7d848bb9ec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3fc82b2a-b410-43b2-9d7c-dfa4abde474d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f16b17ca-6e69-462b-9301-0724ae54f2f6"
            }
          }
        ]
      },
      {
        "id": "6461554b-5445-43da-b518-1c07cb168887",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d91d0f5d-474e-4ce5-a4a7-19413022757d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0f020a7a-c759-4b70-b17c-133cf1862025",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8c7080d2-4690-467b-978a-7756f18f28db",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d552eb5b-7241-4c65-9650-c1cea4063396",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "433b9356-405c-46a2-b33c-91dea91253df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08695b2b-fb01-4fe9-9a8a-879f5817b416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0da981a1-8818-46d2-9e64-ffc6d637c496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae3aa992-c66d-4882-b737-ecd10be7b1ff",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e16dbe-ea98-446f-a3bb-447595c43b7d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "863c98b0-76da-4189-8d1e-547415eddd2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d13bfe8-3ea3-486b-83a4-e8134f2f6fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e68deb3b-40fa-4a19-a7a8-0a9dc7b65aff"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ef78c39-15b9-4478-bf6d-1ecd03a1d213",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86f6965d-250d-42a1-9c51-f2dd22ad9a61"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf1b03fc-067a-4ff0-9d5f-b26eb1a47c1a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a6535b7-7c89-47f8-9fb5-ef67140556e8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0c4e428-2258-43fd-8410-d1265e82ec69",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9a547291-0118-47a0-b0b7-429209a88f06"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f0066c94-92b4-4edd-b8d5-dffef8be7b4a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "edb7d95e-070a-42ad-b041-174e66ef7dc0"
            }
          }
        ]
      },
      {
        "id": "e19b8c3c-65f1-4672-aa33-656521efa38d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "65df1d09-0ddc-4202-9425-4eef402ec918",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba1ce77f-f08e-431a-b966-bf1617930177",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c0f84b11-b4d6-4b4e-8c7f-6c1e60d50c58",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51f34532-7cd5-4643-90fb-0aaf7e00dd5f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2e0491a9-c0dd-4b56-a388-7c3c628c76b5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 228.1698841698841,
      "responseMin": 16,
      "responseMax": 4184,
      "responseSd": 650.79215325465,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677372391097,
      "completed": 1677372461164
    },
    "executions": [
      {
        "id": "d97d62f6-591a-4f67-b0a6-f4ecf0bffce4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3505a92c-d347-4cfb-8310-7e95c787164c",
          "httpRequestId": "e7d61526-7d6c-4541-aa56-13631352f98a"
        },
        "item": {
          "id": "d97d62f6-591a-4f67-b0a6-f4ecf0bffce4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "55e88ec3-31c3-4d4e-a699-24e1df6676ce",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 0
        }
      },
      {
        "id": "fafdf89d-99ef-4705-84d9-9a7fbf302e7e",
        "cursor": {
          "ref": "88098a7a-5200-4530-ac0f-d8c8141b9b96",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7495c2f1-7652-4df9-991f-ddf0f59f0ba2"
        },
        "item": {
          "id": "fafdf89d-99ef-4705-84d9-9a7fbf302e7e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8c2970d2-bf8c-41fd-8f44-42cc0133c989",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 0
        }
      },
      {
        "id": "cc2ca581-2ec6-4850-ac5e-a8946590abca",
        "cursor": {
          "ref": "281c2f34-0047-4156-8cab-5edd70148c73",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b4e7d45a-129e-48ea-a613-69a81af9da09"
        },
        "item": {
          "id": "cc2ca581-2ec6-4850-ac5e-a8946590abca",
          "name": "did_json"
        },
        "response": {
          "id": "15c07c4e-00c8-4fc9-98ac-fa56b2667c10",
          "status": "OK",
          "code": 200,
          "responseTime": 376,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c351975-74fa-44f4-af3b-885120da62ab",
        "cursor": {
          "ref": "8d2691ca-9c9b-4dc4-993c-1762174d3783",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4898039c-f921-4493-a942-7db371f2ba88"
        },
        "item": {
          "id": "0c351975-74fa-44f4-af3b-885120da62ab",
          "name": "did:invalid"
        },
        "response": {
          "id": "6999a6d1-9628-4b0b-9227-861f9a809339",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1119,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "0c351975-74fa-44f4-af3b-885120da62ab",
        "cursor": {
          "ref": "8d2691ca-9c9b-4dc4-993c-1762174d3783",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4898039c-f921-4493-a942-7db371f2ba88"
        },
        "item": {
          "id": "0c351975-74fa-44f4-af3b-885120da62ab",
          "name": "did:invalid"
        },
        "response": {
          "id": "6999a6d1-9628-4b0b-9227-861f9a809339",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1119,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "3b57e371-15b2-450a-9ef8-069edefec342",
        "cursor": {
          "ref": "c4f1fc7b-fa45-4906-bfec-4209042ed205",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "64389dd4-1333-45e7-9a00-6e31cd7aa1a1"
        },
        "item": {
          "id": "3b57e371-15b2-450a-9ef8-069edefec342",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6fcc58d2-96ca-44ac-be42-2a77ab7d2019",
          "status": "Not Found",
          "code": 404,
          "responseTime": 50,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dab35c2-7956-4ced-b5d1-988ff7fe464b",
        "cursor": {
          "ref": "afa7ce8e-de21-402a-957b-a56d6500e5d3",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ed34d75e-21f7-449d-9771-1c33baadb523"
        },
        "item": {
          "id": "6dab35c2-7956-4ced-b5d1-988ff7fe464b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "dc952eaa-568b-4b06-b649-7e3c8b199204",
          "status": "Not Found",
          "code": 404,
          "responseTime": 50,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa697b9c-d408-433b-a2e2-119a55ca5285",
        "cursor": {
          "ref": "231f794c-2fb4-42da-b4de-7d3d33c3af50",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9c06125c-b799-47bf-ba72-7627074cb877"
        },
        "item": {
          "id": "aa697b9c-d408-433b-a2e2-119a55ca5285",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6ca9531a-0802-4977-8c6b-ad1c37b97c37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "30dbca2b-b277-4056-a334-82c05a0c5187",
        "cursor": {
          "ref": "4a7a1528-5d73-4fba-a6a5-5cea36fa7359",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a9755ea2-674e-4402-ad57-179d10a5b7a3"
        },
        "item": {
          "id": "30dbca2b-b277-4056-a334-82c05a0c5187",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3534db6f-654a-466c-9bc4-7e62136fc4af",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "30dbca2b-b277-4056-a334-82c05a0c5187",
        "cursor": {
          "ref": "4a7a1528-5d73-4fba-a6a5-5cea36fa7359",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a9755ea2-674e-4402-ad57-179d10a5b7a3"
        },
        "item": {
          "id": "30dbca2b-b277-4056-a334-82c05a0c5187",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3534db6f-654a-466c-9bc4-7e62136fc4af",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "9220a572-9545-43fa-a04b-6e2b604f9bd0",
        "cursor": {
          "ref": "8fba95fa-484f-4949-8b86-6a7d7d276fb7",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b3523992-be07-4988-9c77-f2865f8b6351"
        },
        "item": {
          "id": "9220a572-9545-43fa-a04b-6e2b604f9bd0",
          "name": "identifiers"
        },
        "response": {
          "id": "323bcf95-02a4-4bd4-8b91-99f9dd3cf24e",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "993f9f58-72d2-42a3-900c-81c3a399ace8",
        "cursor": {
          "ref": "c240c697-27a1-4358-9658-594743a58c00",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c7063e49-d30c-42fd-8e0b-26a796f974aa"
        },
        "item": {
          "id": "993f9f58-72d2-42a3-900c-81c3a399ace8",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "cb43e5b0-ab3b-40c9-9fae-6f719c14d65a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "993f9f58-72d2-42a3-900c-81c3a399ace8",
        "cursor": {
          "ref": "c240c697-27a1-4358-9658-594743a58c00",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c7063e49-d30c-42fd-8e0b-26a796f974aa"
        },
        "item": {
          "id": "993f9f58-72d2-42a3-900c-81c3a399ace8",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "cb43e5b0-ab3b-40c9-9fae-6f719c14d65a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "031e52d8-719c-4a1c-a1ac-5fc0396490b5",
        "cursor": {
          "ref": "9a5e162b-8e57-4b75-bf6c-20889e5f8821",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "26e7c3bb-e9e4-4b53-99e0-9850c4e1b926"
        },
        "item": {
          "id": "031e52d8-719c-4a1c-a1ac-5fc0396490b5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2a8f723c-00c5-40a9-8287-64c0593c0e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9723aa1e-7d2e-4859-9347-f344f9475e05",
        "cursor": {
          "ref": "ad0b87a3-909b-477b-b56b-993acee0e004",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "81a00520-2eaf-442a-9de0-887925118f53"
        },
        "item": {
          "id": "9723aa1e-7d2e-4859-9347-f344f9475e05",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1c3a0762-9f47-4add-8f6d-6a6a5fa59293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23dc6424-b2b0-4737-8bc4-5bbfcf162993",
        "cursor": {
          "ref": "5b9bf385-b432-476b-9665-8081e529d0e0",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c5ce5efc-ea94-4330-8563-acf823dd32b8"
        },
        "item": {
          "id": "23dc6424-b2b0-4737-8bc4-5bbfcf162993",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d5b6674b-8e40-4d0a-bac1-4c8e354ca86b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "271caf5e-992c-4855-8839-8c451d03a036",
        "cursor": {
          "ref": "5d04e2ee-12a2-45b1-a52e-90074c2dd92c",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "630c5808-8b22-4ce5-ae0a-878556cf93a5"
        },
        "item": {
          "id": "271caf5e-992c-4855-8839-8c451d03a036",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8bdbee01-a3fd-41e8-b9bb-bb97620e26be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13cf05cb-aa92-4138-baf5-a5c8de54fbbf",
        "cursor": {
          "ref": "3f2dad75-61ca-467d-8351-342a4c3efffb",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "800814b7-a78f-4eae-8e4f-6fada86153af"
        },
        "item": {
          "id": "13cf05cb-aa92-4138-baf5-a5c8de54fbbf",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "cf7c62c2-fd60-4883-a588-e50a04f8daeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c8a9224-3baa-4004-b9c0-c65c73bb1373",
        "cursor": {
          "ref": "0ea049f2-eb8a-4469-92aa-e189ef628a4f",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2e618feb-0496-44cb-ae92-c4103ac5a26c"
        },
        "item": {
          "id": "8c8a9224-3baa-4004-b9c0-c65c73bb1373",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0947d192-4987-41ce-9cf6-db7126c5a20c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff267341-1dfe-40cb-83c7-b10a9512fe76",
        "cursor": {
          "ref": "f126e077-ec04-4b8c-bd43-2f1f01d6661b",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "37727cbc-42e5-40e2-9460-cc0eeaeafab4"
        },
        "item": {
          "id": "ff267341-1dfe-40cb-83c7-b10a9512fe76",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "20f2c0b4-0c6c-424f-91ee-ed554c4aae1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6750f8da-c9ac-4083-8dd5-1248dddabfcd",
        "cursor": {
          "ref": "2dd2b546-900c-494b-990e-d845f32074ec",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "52241b5e-37c8-4fb5-90eb-ab5ed03fcccc"
        },
        "item": {
          "id": "6750f8da-c9ac-4083-8dd5-1248dddabfcd",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "dbdcffff-b42e-4fba-af76-51eae8d01a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d911c51-ff62-4596-9e68-5daa17ecb66d",
        "cursor": {
          "ref": "c3ef44eb-083d-48a5-b09f-0d7e51d12eaa",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "29ceccad-dcc3-4f74-9dca-f1727a45e2dc"
        },
        "item": {
          "id": "4d911c51-ff62-4596-9e68-5daa17ecb66d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "68a3f472-37b3-4f1f-8e46-9b840d5270e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "793fe8e9-2c29-427b-8dbf-d9f30fdb3106",
        "cursor": {
          "ref": "feda4379-baa6-45f0-b21e-ee8f98cb80af",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "666785a6-9dd3-49d9-9bdb-febef9be1830"
        },
        "item": {
          "id": "793fe8e9-2c29-427b-8dbf-d9f30fdb3106",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c4843bc9-d89f-4b58-be8d-76050ab1593e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3195b3a1-c47a-4922-8ab1-5158fa476ffb",
        "cursor": {
          "ref": "46365c8c-8a4f-4ec5-aa68-4c84499125c3",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6fc75d58-cbe5-4c29-9e70-9b1f8ca096a8"
        },
        "item": {
          "id": "3195b3a1-c47a-4922-8ab1-5158fa476ffb",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7b885b5d-adcb-44a4-afda-f4bfdb4ea0a4",
          "status": "Created",
          "code": 201,
          "responseTime": 561,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "1a57fa1d-05a1-47c1-82b9-b5a969a65d01",
        "cursor": {
          "ref": "2ecb6d8a-d73f-4359-aa79-7fc73dadd0ef",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b8fb808d-16bf-4494-bf47-9af0b10427b7"
        },
        "item": {
          "id": "1a57fa1d-05a1-47c1-82b9-b5a969a65d01",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "11509daa-1a2b-43d4-9bb4-78c10a4892d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec3b564d-f1bd-4946-8094-bc8d141db739",
        "cursor": {
          "ref": "9e58ed4e-a36a-434e-8823-c15dc1d1f744",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "eaf44335-9dff-41a3-a696-289b93781435"
        },
        "item": {
          "id": "ec3b564d-f1bd-4946-8094-bc8d141db739",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d48a32ac-fbe1-43d3-8eb4-4d208f3f006e",
          "status": "Created",
          "code": 201,
          "responseTime": 4184,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "874c8959-0338-4716-98c6-df906828786a",
        "cursor": {
          "ref": "ed4bf2e2-0953-46b3-94b4-d9e63801b158",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "be2703a0-e9b2-4c24-b673-c3eafe35a03d"
        },
        "item": {
          "id": "874c8959-0338-4716-98c6-df906828786a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ebbb3f33-28cc-479f-80a2-76abd7210f09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b53f61-158f-4f5b-9f32-c3e754f808f8",
        "cursor": {
          "ref": "4e85884a-4666-4349-9ea6-7b55664d2498",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6694bbbe-e39b-4f5d-b36f-1b7c0319c6de"
        },
        "item": {
          "id": "30b53f61-158f-4f5b-9f32-c3e754f808f8",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "dd802717-5e20-4876-a0bb-703ac96b4168",
          "status": "Created",
          "code": 201,
          "responseTime": 3507,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "798f5fab-e209-4963-9044-f4dd7cd1f7af",
        "cursor": {
          "ref": "729f3e93-6a9a-4fe7-ba16-5e4a6b9598af",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "48e645ac-02c2-4f41-a35a-3c66c78bc6e5"
        },
        "item": {
          "id": "798f5fab-e209-4963-9044-f4dd7cd1f7af",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "76ae925d-e3e8-44bd-8b25-b7cb6ca5240d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "147f0d24-af65-4334-a3a6-7b405dd52385",
        "cursor": {
          "ref": "5f0bb306-3e4a-4767-8946-be74edf717c3",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "627a56a8-c404-41bb-b591-b138144da7c1"
        },
        "item": {
          "id": "147f0d24-af65-4334-a3a6-7b405dd52385",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "2b404d91-c16d-4fa1-86a9-a96c792956d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "164df82f-af52-4035-96a3-fef1dd3b7d6d",
        "cursor": {
          "ref": "5c666ab1-e8b0-4b49-acdd-cdb20dce8ba9",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a44ad6fd-71a8-401e-b4f8-312f2a32c607"
        },
        "item": {
          "id": "164df82f-af52-4035-96a3-fef1dd3b7d6d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0e6f8c0b-c77a-4388-aa50-ad7b738a5ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0f83af1-914b-4475-b8e9-9a4e5250df14",
        "cursor": {
          "ref": "064038dc-2b67-445e-aeec-19693cda6b97",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "90d8856a-b7e8-438f-80fe-3e210af94d11"
        },
        "item": {
          "id": "c0f83af1-914b-4475-b8e9-9a4e5250df14",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "befaa6b3-b7d4-44e2-9dcd-0dea8d9a4d0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb4c3eda-1e1f-4498-918b-458810ef8847",
        "cursor": {
          "ref": "9a58b4e8-521c-485b-9f9b-9f075b046016",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "48e33ac9-8337-439c-ab40-76cd5e80e707"
        },
        "item": {
          "id": "eb4c3eda-1e1f-4498-918b-458810ef8847",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0895a592-1202-48db-83bf-302875124669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1b87daa-29ce-4ba9-a929-7f192f7b5fe7",
        "cursor": {
          "ref": "83588c9a-511c-4b8c-896a-77b9086016d4",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "cc2d4912-2568-41ca-98a5-4e624e818b96"
        },
        "item": {
          "id": "f1b87daa-29ce-4ba9-a929-7f192f7b5fe7",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a093e3cc-ab1c-4598-8626-97ae0a95d1da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fec3c9b-fce5-46a8-9cbd-bf825b4dc1f3",
        "cursor": {
          "ref": "f637f3f5-0ad4-48d9-939b-cd16d64aa6f7",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "989b0ee2-4ad7-406d-aaed-660ba905d6ec"
        },
        "item": {
          "id": "5fec3c9b-fce5-46a8-9cbd-bf825b4dc1f3",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "69284263-e100-4dce-8965-15f9ea19692e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef8cafb-ac19-4401-9ef3-13edd76465eb",
        "cursor": {
          "ref": "8dfefe9e-354a-4277-9b11-0bf28fc977e2",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "84fc3376-efbb-47d0-b48a-6aa667106db2"
        },
        "item": {
          "id": "3ef8cafb-ac19-4401-9ef3-13edd76465eb",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "845b8a66-118a-42da-8f15-208f66da9992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a9e586-0261-4531-a0c2-cd67a8434879",
        "cursor": {
          "ref": "d18ce7ec-be59-460f-b80f-b1e28039b811",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2f5806bb-7e2e-49d8-bd76-a261f879feaa"
        },
        "item": {
          "id": "10a9e586-0261-4531-a0c2-cd67a8434879",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a5153f8c-12ba-451b-ac6a-5300ee763c2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d749b7-c058-41ad-8ae6-afe8ebd71d6c",
        "cursor": {
          "ref": "d64e04d8-259c-4e8c-a798-04e697696f9f",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "18353b0c-94f8-42e7-bc6e-13aba4077fae"
        },
        "item": {
          "id": "11d749b7-c058-41ad-8ae6-afe8ebd71d6c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "34a8201b-40a5-438f-83aa-7d1545f599db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a5f680-29a0-4296-86f1-e38c172c35ee",
        "cursor": {
          "ref": "dc7e0254-0f15-455e-a7ab-2aceb65982bf",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7461cc80-8c91-4f6f-9714-2ce36906e002"
        },
        "item": {
          "id": "93a5f680-29a0-4296-86f1-e38c172c35ee",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7f5105eb-5fbb-4eca-873c-fcf195b536e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd328c60-1b45-4339-9d4d-6de02f956689",
        "cursor": {
          "ref": "4dc1907e-67ee-4bfa-9abb-59dcbfcfc2ed",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9ea932db-1fbf-482c-8662-a01545a77501"
        },
        "item": {
          "id": "dd328c60-1b45-4339-9d4d-6de02f956689",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d074a259-1ff2-4363-ad0a-2d3b6611b1ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5886a6c9-1a0a-4361-8bae-23afb9406780",
        "cursor": {
          "ref": "a3dd60ab-9b64-49b4-9881-4a476f27a123",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ce0ab164-2fe8-4f95-8250-d7779a84a9fe"
        },
        "item": {
          "id": "5886a6c9-1a0a-4361-8bae-23afb9406780",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4f582208-4a0c-4b8c-b68e-f0c6a1dd9885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebecbecc-ff73-4476-82d5-76824ac85a00",
        "cursor": {
          "ref": "ff968c4c-9c20-46a6-b3e9-e7a95a2da44c",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e4ed949e-f41b-4e4d-9778-c19a32d27310"
        },
        "item": {
          "id": "ebecbecc-ff73-4476-82d5-76824ac85a00",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "76768f6a-2974-4b54-a4c6-44f667cbe306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ec0093-0eee-4a65-9e69-552e78b65e6a",
        "cursor": {
          "ref": "ef851ec1-26b4-42a5-91ad-214053792ccf",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b98f0809-78f7-455c-ad55-c80e0d294d11"
        },
        "item": {
          "id": "c5ec0093-0eee-4a65-9e69-552e78b65e6a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "335d0045-8ef4-473e-bb65-e727fe3291b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "570e4d97-73ec-4a29-bec1-24727fed1ff9",
        "cursor": {
          "ref": "a0b257e6-9cfd-4e55-96ab-5f491e61ff0b",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "95bb82d3-f795-444c-be61-23d6df9954fb"
        },
        "item": {
          "id": "570e4d97-73ec-4a29-bec1-24727fed1ff9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b8eb0aec-2172-49cf-9eba-1ed0f368d5df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41623387-fefd-49e4-94a5-036aedd16cf7",
        "cursor": {
          "ref": "a878bd07-e332-44fc-952d-ea3c6db9b753",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "daa4e48d-91d9-4feb-865e-57f836f507cf"
        },
        "item": {
          "id": "41623387-fefd-49e4-94a5-036aedd16cf7",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ee397297-66cd-4bc7-8f69-15e2d2b3e156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f184bfc0-46ef-4860-9e33-c63ad4ace899",
        "cursor": {
          "ref": "53f2992e-9a47-441d-a3a0-255cfe0a156f",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ff08e4ec-86fc-4dd2-acfa-efa57b3baf1f"
        },
        "item": {
          "id": "f184bfc0-46ef-4860-9e33-c63ad4ace899",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7effb654-6dfe-429c-8d70-4a2ab0eaba98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f1e0d0-7ca5-44cc-b1a1-f3942ed5de0f",
        "cursor": {
          "ref": "a856e7d9-441a-47f5-b3f7-623a4c6fb030",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7f906800-737e-48eb-9825-6a3924ad3083"
        },
        "item": {
          "id": "87f1e0d0-7ca5-44cc-b1a1-f3942ed5de0f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "36bb4892-be3d-419b-9336-0948250a56eb",
          "status": "Created",
          "code": 201,
          "responseTime": 2337,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "94c38622-0d0d-4f44-b196-11d0e2de67a3",
        "cursor": {
          "ref": "d7dc3634-91e9-432c-ab33-2e48fc4c649d",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "39e84ce6-b06f-4cf1-965d-5bed2d0e43e4"
        },
        "item": {
          "id": "94c38622-0d0d-4f44-b196-11d0e2de67a3",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "373f6dc5-a456-4df5-bfed-b8f9b809ad82",
          "status": "Created",
          "code": 201,
          "responseTime": 2345,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "bf849b86-2041-4f31-b642-618956f22cf1",
        "cursor": {
          "ref": "aa1b26cb-0cf8-4106-9324-a973d4c4e58f",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "33964f65-28ce-4f53-be74-819093a04600"
        },
        "item": {
          "id": "bf849b86-2041-4f31-b642-618956f22cf1",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "929412eb-619c-422e-a7eb-9e38bc01d994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0cd0933-8610-4ed6-b3c6-f5e70a8201cf",
        "cursor": {
          "ref": "0159b2a5-6496-4d69-88ff-bdda1b661bf9",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "17093d41-57ec-4105-a786-f99ace17cbd1"
        },
        "item": {
          "id": "c0cd0933-8610-4ed6-b3c6-f5e70a8201cf",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a2deb8a0-ac7b-461e-9940-3c202b84efd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35f35df-9fb0-4a12-a1ff-17d6b6ca7065",
        "cursor": {
          "ref": "7cdcef74-b90b-4dce-8e9c-91def2d45e8f",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a7e656c3-d1d7-439c-a93c-fade731a891d"
        },
        "item": {
          "id": "d35f35df-9fb0-4a12-a1ff-17d6b6ca7065",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0118278b-71ee-437e-87de-10543b89a78e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba41fc4-328c-49ff-a338-66d8c3862562",
        "cursor": {
          "ref": "eb64dc5c-a361-45f4-8b45-f68796bc1c18",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f90a96d0-87b2-4f03-a47b-9dc1dd8028f3"
        },
        "item": {
          "id": "4ba41fc4-328c-49ff-a338-66d8c3862562",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "dd7ff2b6-9f6f-4dea-81b8-0d3b277752b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c192aa-080a-40c3-a740-716076967af0",
        "cursor": {
          "ref": "d0cc41cd-88f0-4e95-87dd-c7e8ae01d532",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e6d202f2-aded-443e-9969-3f66490a87e2"
        },
        "item": {
          "id": "60c192aa-080a-40c3-a740-716076967af0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "4562435a-7a2b-48f1-8a45-9e85b2d6de51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa5cbdc-edb7-49eb-af5b-e73cf8de6cd8",
        "cursor": {
          "ref": "aa197b70-2c87-4e64-b208-db4de72b4144",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e98ca60d-6cf9-40cd-88d1-395d84562c28"
        },
        "item": {
          "id": "6fa5cbdc-edb7-49eb-af5b-e73cf8de6cd8",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "623a634d-8887-4dd3-bd95-fd5db24f8de2",
          "status": "Created",
          "code": 201,
          "responseTime": 2471,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "5f62f99c-b0d9-4256-a30b-0cbb3a9cdde1",
        "cursor": {
          "ref": "25cdc355-3e8a-452d-baae-bf72653d8584",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "0675dbe8-129a-4edc-9539-a2b1ce84f5a5"
        },
        "item": {
          "id": "5f62f99c-b0d9-4256-a30b-0cbb3a9cdde1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "18501435-a962-407e-ab96-336285ab2905",
          "status": "Created",
          "code": 201,
          "responseTime": 3208,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "e99a2e0f-0c40-4657-bfa4-39501527ea7f",
        "cursor": {
          "ref": "996c8932-4a51-41a7-892a-a0be569e0ca8",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8e189f67-d897-4ce0-a101-afc67844e39f"
        },
        "item": {
          "id": "e99a2e0f-0c40-4657-bfa4-39501527ea7f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fce99520-4f64-446d-890f-afc07ec42591",
          "status": "Created",
          "code": 201,
          "responseTime": 2919,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "bbe8114f-2c6a-4d21-9b3d-28c74dcbad09",
        "cursor": {
          "ref": "e4cc4e72-f022-4df7-abab-1fbbdc76537e",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "da571b1d-9dde-4c66-a582-11db41a41158"
        },
        "item": {
          "id": "bbe8114f-2c6a-4d21-9b3d-28c74dcbad09",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e902da0a-7ee1-403b-9b5a-32dd636452c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4a3b1d5-8893-409c-b495-2a4a1b073f03",
        "cursor": {
          "ref": "dedcaed0-149b-438e-a9cf-8e1ad615c10a",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8cbf65aa-029c-4957-becf-3d44a5029632"
        },
        "item": {
          "id": "b4a3b1d5-8893-409c-b495-2a4a1b073f03",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "bea05d23-be7e-42cf-858f-a1894b4210e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160af3f1-7ba5-4bf4-8023-13b264134620",
        "cursor": {
          "ref": "d8fed90e-3de8-4774-b17a-7bab08435778",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "cba8a338-ba53-4194-9314-2a24618f8403"
        },
        "item": {
          "id": "160af3f1-7ba5-4bf4-8023-13b264134620",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c0e56e44-ca5b-4354-b5b8-3c697ce1fd5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3828ba9a-65c4-46a2-aaeb-d67e296bdc69",
        "cursor": {
          "ref": "f85f32f1-5835-49f0-9978-08071e4383bb",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "08f64d55-6c4d-49bf-a70d-befb0c9d8896"
        },
        "item": {
          "id": "3828ba9a-65c4-46a2-aaeb-d67e296bdc69",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b173ecc7-515f-4021-8649-2dc353bf63bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ef5d4f-b377-4c04-bdbb-5ce5ffa4b670",
        "cursor": {
          "ref": "7181612c-eb9f-45fe-a6a6-b86d35c50675",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "4331daef-13f3-4554-a098-ba11dc6f64da"
        },
        "item": {
          "id": "10ef5d4f-b377-4c04-bdbb-5ce5ffa4b670",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c7315a73-6e66-44ed-bb5e-39578170e697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487cc6e0-6670-4a06-8b1b-bcc32c2524d9",
        "cursor": {
          "ref": "0e9484a0-5d4e-491a-89e3-0b4107b21215",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c348d6fa-f74e-4796-a8be-dd6bca9a0a7b"
        },
        "item": {
          "id": "487cc6e0-6670-4a06-8b1b-bcc32c2524d9",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "926fb18c-e4c7-473f-89f8-987a757f8083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382bed7d-387f-4dbe-85e2-fd3804e9980f",
        "cursor": {
          "ref": "c774ef4c-b11b-477d-870a-37969202729e",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "563346db-e873-4fde-bcb8-fba392731552"
        },
        "item": {
          "id": "382bed7d-387f-4dbe-85e2-fd3804e9980f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f6a91dce-3fed-4b66-900e-8ad3b846865e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02094035-8baa-4120-8f3b-7d319c806484",
        "cursor": {
          "ref": "4494b40a-0946-45e6-94f2-70179bcc090b",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "8105b6ca-b859-4af3-a467-b5f7acfb6484"
        },
        "item": {
          "id": "02094035-8baa-4120-8f3b-7d319c806484",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "67757781-9683-40a9-9d43-03920c882bb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef35675-b3c4-4f50-8bf7-28fde91e9a77",
        "cursor": {
          "ref": "88ff74c0-4a06-44b2-a6d4-c9cf3d4d8bf5",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d5626937-0777-4f91-8851-5ceff420e3a8"
        },
        "item": {
          "id": "8ef35675-b3c4-4f50-8bf7-28fde91e9a77",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3ae8e8af-9e17-49be-8324-a4d9f4c381f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9799ae68-0cae-4d33-a815-c69c126f57fc",
        "cursor": {
          "ref": "c9fdcd9d-2343-4b91-8d33-319f8463f356",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "67be4a51-d154-4d41-bf13-00e6a1238093"
        },
        "item": {
          "id": "9799ae68-0cae-4d33-a815-c69c126f57fc",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "b6902ada-6df8-408c-9323-2cb82a93ae47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f798ad9-0dfc-4d78-9ed1-c36edaa20c28",
        "cursor": {
          "ref": "128fc2bc-890b-4af8-bf36-262e5ccf5e9e",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "fea29f00-bd42-44be-a56b-688040b1bf5b"
        },
        "item": {
          "id": "2f798ad9-0dfc-4d78-9ed1-c36edaa20c28",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a52211b0-efdf-43ca-bf27-4e4db4138c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb47563c-1973-4175-8cfe-5556777beadd",
        "cursor": {
          "ref": "7f0ae1b7-e848-464b-8f35-51446ba76b4c",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "03706698-10ca-4569-8590-4ece224298bb"
        },
        "item": {
          "id": "cb47563c-1973-4175-8cfe-5556777beadd",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a63d2e76-0f7f-4aad-a57a-d046f1f45959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f24f3a-bcbb-4834-af1f-9549a4cfd903",
        "cursor": {
          "ref": "94b93d2e-bbc1-48c9-9a5f-c6d875bad38a",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "cd9f1d72-1d85-49c1-a4bd-d9a5d953e21d"
        },
        "item": {
          "id": "32f24f3a-bcbb-4834-af1f-9549a4cfd903",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9e17ba2b-5d67-4e82-aaa5-d73cf8364e7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b997d52-8b57-45f7-a33c-be889151f01f",
        "cursor": {
          "ref": "534d7718-ca30-464c-bdfe-c0fc6284efd3",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9b8d6894-e395-4a3b-9bb2-feca7a0765ec"
        },
        "item": {
          "id": "3b997d52-8b57-45f7-a33c-be889151f01f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b8c171ec-8963-4982-8149-48fbf70bb917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85785c97-53cd-4166-9106-81cb5b24cd28",
        "cursor": {
          "ref": "688a4281-dfb3-4019-9f75-95098ab839f4",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5cd4382e-ac17-488b-b056-021f4ba8e6e4"
        },
        "item": {
          "id": "85785c97-53cd-4166-9106-81cb5b24cd28",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3d7c437b-8ae0-4464-892d-73dfad049aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "638d991e-5c34-41e0-a082-224262cf2008",
        "cursor": {
          "ref": "a2b5a2ba-b058-4415-aeca-9defda1bf8d9",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2a0b0a67-0306-46eb-8cd0-34a4f2990d8c"
        },
        "item": {
          "id": "638d991e-5c34-41e0-a082-224262cf2008",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c4158e92-ce51-43d5-bf94-d000585f3190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec3b1f7-2fcb-4d0d-9545-bf1acfbad2d5",
        "cursor": {
          "ref": "46f03b26-43f3-4644-9b29-0ffba80edfef",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2fb99357-8c6d-442e-bd51-3808308409bd"
        },
        "item": {
          "id": "5ec3b1f7-2fcb-4d0d-9545-bf1acfbad2d5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6f3f38f2-37e6-47ee-92ee-36393bb1869c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edfaa390-46cb-4966-ab2b-5711d0c55cba",
        "cursor": {
          "ref": "4a6de0b3-18d0-415c-9d8f-209cbe1380da",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7b916f14-41aa-4e7f-bf0d-0dd6326e44f4"
        },
        "item": {
          "id": "edfaa390-46cb-4966-ab2b-5711d0c55cba",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f9ef0c8b-901e-46cd-9cad-4bb8ad1fc1a0",
          "status": "Created",
          "code": 201,
          "responseTime": 3315,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "2bb5f794-7276-4416-8e64-989fb2b3fed2",
        "cursor": {
          "ref": "50a6ff02-e338-4f69-a4e1-41fa48c2add4",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "fd7de85b-2adb-4fd8-ab86-fda3bf5b58d8"
        },
        "item": {
          "id": "2bb5f794-7276-4416-8e64-989fb2b3fed2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "683a26b3-b95e-44d5-96ae-442055f598d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a00d429-8e4c-4be7-ab2b-0ace34e64461",
        "cursor": {
          "ref": "6ab7ab4c-6080-4dbc-902f-27182ff83f51",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "beea9b22-f801-451e-a967-578173ee3ec6"
        },
        "item": {
          "id": "5a00d429-8e4c-4be7-ab2b-0ace34e64461",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9a74bd0c-87a6-4061-8db1-7eca93b98e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa2fa57-876e-4a18-9d27-628e8a24192e",
        "cursor": {
          "ref": "105ff9be-1022-4c4e-9b3e-c687dd1633e9",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c60f2d8d-8313-4523-b437-779275686959"
        },
        "item": {
          "id": "ffa2fa57-876e-4a18-9d27-628e8a24192e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "757bd3af-e15e-4724-9d83-2cffa75606ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c17ac01f-74e7-4b25-abd1-72ef0a29697a",
        "cursor": {
          "ref": "d60e7e86-c655-4bb3-b263-69cb1f3bd65a",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "bc2347db-fd2b-478f-9b3c-4a7a04a44205"
        },
        "item": {
          "id": "c17ac01f-74e7-4b25-abd1-72ef0a29697a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6b23745e-e900-4f7e-97ec-f3b81a7f1cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c091a5-86b6-42b4-88a6-fb048bbc747c",
        "cursor": {
          "ref": "7363cc98-4aac-4c93-86ac-00c2501792e3",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5a1bfcd9-1209-4fb4-9c3f-a67e33ef0aa8"
        },
        "item": {
          "id": "18c091a5-86b6-42b4-88a6-fb048bbc747c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "dd8d8132-4711-450c-9aa8-93cdee7ba7b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d652533a-d6a0-4665-960b-8020957d2f41",
        "cursor": {
          "ref": "2d262d30-88a1-4849-a996-477ebdf56197",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "941fecfa-7ddc-41fb-8d2d-c9de8782a850"
        },
        "item": {
          "id": "d652533a-d6a0-4665-960b-8020957d2f41",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bfed95e9-7cd2-4cd7-83a7-d5168d6879c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be103ff2-ca5f-4029-8dae-61d399591bef",
        "cursor": {
          "ref": "0d7a1bbe-63c1-4d70-bed4-22099256cb6f",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4289adf1-e9b3-4d4c-bea5-68460bf68fdd"
        },
        "item": {
          "id": "be103ff2-ca5f-4029-8dae-61d399591bef",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "26fc281d-a809-4507-8c90-3068fab84e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb2a815-d10e-425c-a69d-528b0d58a3ad",
        "cursor": {
          "ref": "710f4c66-e479-4c07-8e53-7f534a89c0f4",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "249554e6-e07a-47ea-84a3-be4fc3d0801e"
        },
        "item": {
          "id": "5bb2a815-d10e-425c-a69d-528b0d58a3ad",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "61c4e1b3-1af1-4a1a-9b69-ec9efc1e0cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e783b88-1b8f-421b-a08a-9b8fd44edd8f",
        "cursor": {
          "ref": "b744fda5-22cf-4515-b86b-9e0c95ac8049",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "62067904-ca1b-44a6-9d64-d13c0a9f841f"
        },
        "item": {
          "id": "4e783b88-1b8f-421b-a08a-9b8fd44edd8f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e15c9291-423d-4fc3-9ff7-9ecbe2449886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7a0c7e-0d99-427e-b934-d99b688c29c0",
        "cursor": {
          "ref": "96267e75-7699-4c30-8e8c-6543bc08f2cc",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ddaf7376-93c6-49ef-861a-03bd67d23179"
        },
        "item": {
          "id": "8e7a0c7e-0d99-427e-b934-d99b688c29c0",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b2cfd502-d98b-4033-b30f-ca5526d78340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f1cb5f-903c-47d4-9fc9-0490032468b0",
        "cursor": {
          "ref": "63bea871-1b95-40df-9978-e6d2c8452a16",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4870e4f4-b373-4cde-8421-8290b821e138"
        },
        "item": {
          "id": "b4f1cb5f-903c-47d4-9fc9-0490032468b0",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a7d2fc13-fdfe-49f9-b913-b8c3d296b15b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0f643f-05d4-40d4-83cb-07c55eeee819",
        "cursor": {
          "ref": "d441e54c-30c5-44b8-86af-ac6eff3a8a64",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f4d14835-6a8a-4cef-9b26-ddda77880c3d"
        },
        "item": {
          "id": "3e0f643f-05d4-40d4-83cb-07c55eeee819",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e64ed7e3-a23a-405c-bab1-aeb617a86b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb45f2f-4921-40db-addb-658ef08b8bc9",
        "cursor": {
          "ref": "c7e66716-9017-4c83-b9f4-726db244cf43",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "aa464b7e-e198-44b4-8788-b945cc61e37c"
        },
        "item": {
          "id": "4eb45f2f-4921-40db-addb-658ef08b8bc9",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a8587461-9981-4286-8c36-0f3d7d623b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9729305-3643-41a6-b82f-789b0b1873f8",
        "cursor": {
          "ref": "3c110c38-f72f-4fe3-9a72-e6be141ad4bd",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7e2ff476-34a7-4f8b-b6a7-e25da95fb2f3"
        },
        "item": {
          "id": "a9729305-3643-41a6-b82f-789b0b1873f8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e4c5ed24-0191-4e88-9671-41781e7e045c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f84dd575-de57-4762-bea6-43971411e3ea",
        "cursor": {
          "ref": "ca89492e-36fd-4048-b54a-897417bd9310",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0642cdce-b28e-4ae2-bb51-424f51665cce"
        },
        "item": {
          "id": "f84dd575-de57-4762-bea6-43971411e3ea",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ef76c429-9a61-477a-a51a-3da9db5040bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a31f5a17-ef3c-4d77-9378-23a65685a3a6",
        "cursor": {
          "ref": "9ea6eb29-240b-4b6e-a06b-ce8e7f3600f5",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "1376559a-af2f-48c7-96d8-e3cfdd41f971"
        },
        "item": {
          "id": "a31f5a17-ef3c-4d77-9378-23a65685a3a6",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "72af7950-50c7-465c-8b38-c8ec91d88f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a75dc8-0e99-4958-8be4-0c2502c124ac",
        "cursor": {
          "ref": "f55c1242-6416-4703-9fa9-e417539d3edf",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9962f617-ae1d-48d5-970c-9f179012745e"
        },
        "item": {
          "id": "b5a75dc8-0e99-4958-8be4-0c2502c124ac",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "2f87eb81-9b75-4cda-81f0-1d22065df223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef98c4c1-d170-40b4-be23-2c40ecd74ae4",
        "cursor": {
          "ref": "d44399b7-522d-4534-b73d-9c5c5d990b33",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f398ea32-1a61-4e0d-b5c0-ea20c3f740dd"
        },
        "item": {
          "id": "ef98c4c1-d170-40b4-be23-2c40ecd74ae4",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9e1e32ad-3a6e-4da7-93cf-1a88ab553756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c0ef0c-de0e-4370-b1f9-72fc7580b472",
        "cursor": {
          "ref": "e5502af5-cdeb-4b39-9d22-7acfd7a42bdf",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ef6698ca-319a-4f79-87e1-293571d89bff"
        },
        "item": {
          "id": "07c0ef0c-de0e-4370-b1f9-72fc7580b472",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "94b4d46f-ab24-40f4-94ce-b08915f18f0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffdfd2f7-aacb-4ce2-b58a-bf37a5bf2eb0",
        "cursor": {
          "ref": "b6b0a076-9731-439d-b0ac-0a3075f2ff97",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f8b29123-8fa4-4403-ad2d-2f7a62ec1628"
        },
        "item": {
          "id": "ffdfd2f7-aacb-4ce2-b58a-bf37a5bf2eb0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f56a2623-ddd7-4ee6-b1be-986104bb5908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d630e290-8898-4bb5-a3bf-71c9a908889f",
        "cursor": {
          "ref": "0179a08e-9ac3-4595-b495-e997660ea83b",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3ac8e6eb-d5ab-4eb9-90c3-e27569996839"
        },
        "item": {
          "id": "d630e290-8898-4bb5-a3bf-71c9a908889f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "4490e0e5-2b42-4448-b496-b49ae9f64db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "568f697d-2765-4c8d-bd9a-ec64805f387e",
        "cursor": {
          "ref": "83fa0a80-e9de-4107-a74a-5bc7460586c5",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6ea93129-079f-4a4a-809e-d8b0ef9a3dc1"
        },
        "item": {
          "id": "568f697d-2765-4c8d-bd9a-ec64805f387e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "192fcc7d-8cd4-431b-b9a7-6e3f2e2d1a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc86b59b-21ec-4c99-850e-c66bbb40036a",
        "cursor": {
          "ref": "a1b91f2f-a42a-4e1b-8eae-878af1ea2c5e",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2fef2cad-323c-44b2-9651-620ad4150839"
        },
        "item": {
          "id": "cc86b59b-21ec-4c99-850e-c66bbb40036a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1899549f-86be-47fe-98f3-8cc2ee6e09c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d384c2e9-9e22-492a-bf44-901adab61a57",
        "cursor": {
          "ref": "611f3ae9-86a7-4bb1-95f1-9ba5f2f4254d",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a8ddface-6134-4dea-a457-3982f3842b84"
        },
        "item": {
          "id": "d384c2e9-9e22-492a-bf44-901adab61a57",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3bd7c395-092f-47ab-acac-0216db7b85ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b379710-4d19-474a-8ed4-7f0d19879e7c",
        "cursor": {
          "ref": "a3654eb3-b1ca-4d49-a1ec-ecee75135add",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b288da8e-07fa-4003-893c-df883ccc40a9"
        },
        "item": {
          "id": "6b379710-4d19-474a-8ed4-7f0d19879e7c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "06437402-8a77-48d7-a4ee-4f8b926d5943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "319dafc9-765c-4a4a-aea1-fb7b7d9e158e",
        "cursor": {
          "ref": "ec2e8072-f108-4c9d-a38f-75cd636a0476",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3d79ca51-c417-4cc2-95d9-073c58c1be6c"
        },
        "item": {
          "id": "319dafc9-765c-4a4a-aea1-fb7b7d9e158e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ac972c56-30b9-4498-9ff9-24137ffb2a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d19dd5c-3516-45ee-8ac7-31d8e8378376",
        "cursor": {
          "ref": "2e844390-5a4d-45c6-a5f1-4509f3d9f2e5",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "5f270b36-4620-434c-8deb-d496a5e6644a"
        },
        "item": {
          "id": "9d19dd5c-3516-45ee-8ac7-31d8e8378376",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "cee3289c-a383-441d-9a92-a90aec98b3ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "201c71e7-56ff-4be5-a671-1085b29a9bd7",
        "cursor": {
          "ref": "c373f309-5170-440a-99fc-396ac867caa4",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4dd97771-7f1d-496f-a3af-69f193b0aa0e"
        },
        "item": {
          "id": "201c71e7-56ff-4be5-a671-1085b29a9bd7",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "1e6d3077-0170-4db5-b8be-4be38e592399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3516de3c-ee94-46ca-948e-2098f614802c",
        "cursor": {
          "ref": "009848c9-133b-4d79-aefc-6c9df4e399e8",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c9ceaad9-732a-43fe-a8e3-ad48907cb5a0"
        },
        "item": {
          "id": "3516de3c-ee94-46ca-948e-2098f614802c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "abea62a3-186b-4d9d-874b-7f48ae293f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df5ec7fb-27bd-4f38-9428-b7fdeed4047e",
        "cursor": {
          "ref": "efb20f7a-36cd-4c07-8724-5251ea860885",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e28157fc-195f-4c1b-bdb6-fd7657059258"
        },
        "item": {
          "id": "df5ec7fb-27bd-4f38-9428-b7fdeed4047e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "65a4fe50-9116-4ddc-bd59-4d518b3face6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1843df0f-1f25-40e5-9a09-cebdf3c60fe0",
        "cursor": {
          "ref": "1bad704f-b677-45c5-bbaa-243003e7244e",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9ab2669d-5e3d-49f2-ae9a-c046536ed877"
        },
        "item": {
          "id": "1843df0f-1f25-40e5-9a09-cebdf3c60fe0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8de2239f-8405-46f9-b547-7241370005b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "09c392ce-3c13-46c2-944c-3a03ec8a6db2",
        "cursor": {
          "ref": "5dd2a258-4b45-409d-9a6b-321236aa72ae",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b7a61cd9-b4e9-4b46-908e-6754ee003d6e"
        },
        "item": {
          "id": "09c392ce-3c13-46c2-944c-3a03ec8a6db2",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "3efbde10-c81a-40ac-b179-1202486c1fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "fdc45b00-f6ae-4a6b-92cf-b48306d8a753",
        "cursor": {
          "ref": "2d5871d6-89bf-4365-a862-4775a5849227",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "544409f7-dd71-4bed-9f28-f5dbc293bd9d"
        },
        "item": {
          "id": "fdc45b00-f6ae-4a6b-92cf-b48306d8a753",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9e4c90f4-7061-4b83-8add-cecd00723c4d",
          "status": "Created",
          "code": 201,
          "responseTime": 2486,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "33da0497-e40e-4dc9-bc4e-356c78c77a5b",
        "cursor": {
          "ref": "b0641c43-af1f-4d05-ac4d-02e2a6e60cbd",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ba620002-a9a1-463c-81ca-ba4200a91f51"
        },
        "item": {
          "id": "33da0497-e40e-4dc9-bc4e-356c78c77a5b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "619c3dec-5a66-44cb-82af-cf82080810af",
          "status": "Created",
          "code": 201,
          "responseTime": 2279,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42513c7-9feb-4ba0-b565-00005a5fa208",
        "cursor": {
          "ref": "d9418c19-8056-4087-b16c-3189228af1a9",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1094c054-48cb-4555-ba62-5e8400e747e7"
        },
        "item": {
          "id": "b42513c7-9feb-4ba0-b565-00005a5fa208",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "81b1a816-640e-49e3-8198-d601ef8e954b",
          "status": "Created",
          "code": 201,
          "responseTime": 2582,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b46a35e-dce3-4a69-ba03-17fdad1cd9c7",
        "cursor": {
          "ref": "d49733b2-35cb-4d8d-9e74-c95eef3accb8",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1f344d42-0a45-4b92-93a7-f898ca5d6916"
        },
        "item": {
          "id": "3b46a35e-dce3-4a69-ba03-17fdad1cd9c7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2b3c9f67-d2ae-4dc9-8ee4-dac8b45b350b",
          "status": "Created",
          "code": 201,
          "responseTime": 2821,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-02-26T00:47:17Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-02-26T00:47:17Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "500979a6-53dd-4cad-9de9-f39ae5b4db98",
        "cursor": {
          "ref": "ebfb33ac-de04-47b8-bdeb-ec052081da0b",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "bfd12f63-11d4-413e-bf44-1a87f83bb5cf"
        },
        "item": {
          "id": "500979a6-53dd-4cad-9de9-f39ae5b4db98",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "fe76c6e1-8ca9-4dcb-a779-61bb988c7432",
          "status": "Created",
          "code": 201,
          "responseTime": 2489,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6fb2a9f-fadf-4562-adad-0eef8065a223",
        "cursor": {
          "ref": "fc89dedf-ddc9-4679-97bd-98559a850fb9",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "18e96536-7bd6-4d59-8e08-084411922b2b"
        },
        "item": {
          "id": "a6fb2a9f-fadf-4562-adad-0eef8065a223",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d5226426-e0ae-4e2d-a1c8-fd6ad59ee2c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6fb2a9f-fadf-4562-adad-0eef8065a223",
        "cursor": {
          "ref": "fc89dedf-ddc9-4679-97bd-98559a850fb9",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "18e96536-7bd6-4d59-8e08-084411922b2b"
        },
        "item": {
          "id": "a6fb2a9f-fadf-4562-adad-0eef8065a223",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d5226426-e0ae-4e2d-a1c8-fd6ad59ee2c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "183dfb4b-af4e-40ba-a618-5e4da3def063",
        "cursor": {
          "ref": "c0751fce-cdab-4e8f-9ede-ae5a5f43262e",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7c334c13-6bfd-47f7-bd51-ce73964b51a2"
        },
        "item": {
          "id": "183dfb4b-af4e-40ba-a618-5e4da3def063",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "256ec3c7-d6ac-433e-953f-4312e7d8f16f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8762bc8a-97d1-41e2-8483-5967bf7476b6",
        "cursor": {
          "ref": "675a0bf3-4081-4d34-958a-01a8acfa8f1f",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "32b93035-f419-472d-8fc0-7029f2c855d6"
        },
        "item": {
          "id": "8762bc8a-97d1-41e2-8483-5967bf7476b6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "af8a69aa-ebb0-4554-b33d-d8d6823e1e33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f304598d-f483-4c05-9b51-b961fd5688b1",
        "cursor": {
          "ref": "9590121c-a58d-4dfb-90d8-e5098b9740c8",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "58fa6f0e-8487-4bc9-a4c7-c851b45b0fcf"
        },
        "item": {
          "id": "f304598d-f483-4c05-9b51-b961fd5688b1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0dcdf7a7-559a-45f8-9625-af9cc81a3a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b442280-3d8d-40f1-9a84-8c44b2f5c373",
        "cursor": {
          "ref": "65e5002c-62b6-4df4-bb4f-5ecf6e0c510f",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0e0d6536-aae3-4c52-a0fc-90713e5dce5e"
        },
        "item": {
          "id": "0b442280-3d8d-40f1-9a84-8c44b2f5c373",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5645714d-9ec6-472b-953a-a68a163947c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3625e20c-72e2-4e72-98d4-c56ef443ad6d",
        "cursor": {
          "ref": "a6be66bd-313c-43f4-9c64-0539de778dc6",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "dff209f6-2051-4ae4-934b-567aaa7a2316"
        },
        "item": {
          "id": "3625e20c-72e2-4e72-98d4-c56ef443ad6d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9a49f81d-2d4d-4348-b1f4-6ceedf4c8152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39aeef25-1cff-4a42-a737-40d8555f5eca",
        "cursor": {
          "ref": "6762ead0-74c7-4889-9242-77d1fa1323b1",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b1f7537f-3b14-4163-aa1e-d6508d0ac3dd"
        },
        "item": {
          "id": "39aeef25-1cff-4a42-a737-40d8555f5eca",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "73238688-ec60-47ca-87be-37d8c5162a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56cdea2c-9d91-4495-a57b-95e5fcee9056",
        "cursor": {
          "ref": "36a626d9-0160-43cb-82ae-92062ebc80b3",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6ba37b04-7e44-49ae-9ce9-61207fc11b85"
        },
        "item": {
          "id": "56cdea2c-9d91-4495-a57b-95e5fcee9056",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c9181535-81a6-452e-a8f1-7ff9158982ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d88c0c-38ce-443e-8857-9b7b0d3bab14",
        "cursor": {
          "ref": "f094663e-7128-4fe0-b3e5-43c0da5af631",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6f6bce4e-bee6-462e-9a0c-f201975ef137"
        },
        "item": {
          "id": "a9d88c0c-38ce-443e-8857-9b7b0d3bab14",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "992f4d4a-7168-4caf-ab3c-19fc29c374d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a738890-8715-44a3-8a22-08bb6a94ad6d",
        "cursor": {
          "ref": "fff380bf-9f74-433d-a361-cb3e6a891da3",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "464b57a2-c216-4969-8545-a53e73e1b126"
        },
        "item": {
          "id": "3a738890-8715-44a3-8a22-08bb6a94ad6d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3df5ef26-9304-4034-896a-8bb67acebf2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "752cce33-1de6-4b5b-b0e4-1abb21125bac",
        "cursor": {
          "ref": "5754f6de-c03d-4c03-b6f6-fcdca72cda89",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "1463b035-c8ee-4d0b-8eb8-09e3c4ea7565"
        },
        "item": {
          "id": "752cce33-1de6-4b5b-b0e4-1abb21125bac",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a0a65924-8783-410f-ae65-7cf972fa7628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d71c26-848e-456d-9aec-da9f91725a7d",
        "cursor": {
          "ref": "7033df26-1b9d-4732-b134-4c47745c7210",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3b62cdb2-e1f4-4ede-af07-282f5ff72380"
        },
        "item": {
          "id": "c3d71c26-848e-456d-9aec-da9f91725a7d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3769035b-7b6d-459e-a65a-f74855019b2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e370c05b-fe67-4430-8077-b656f0b1ef36",
        "cursor": {
          "ref": "5a32d528-6c16-4afb-85de-a13edfe77c37",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9eb322d2-c601-45c5-be29-fac42c961ea0"
        },
        "item": {
          "id": "e370c05b-fe67-4430-8077-b656f0b1ef36",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "04edfe83-c2d3-428e-9d3b-1c47efa4548f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4146d808-9e41-46b5-a36e-5b8da8bec8d1",
        "cursor": {
          "ref": "97f0313a-f96c-4cac-9d65-81306de375e9",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b6ccab2b-ded2-429c-858f-1e52768d82f7"
        },
        "item": {
          "id": "4146d808-9e41-46b5-a36e-5b8da8bec8d1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e9f68a12-8829-4e95-a0da-49fc62094c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d06828-4660-4f16-aa04-87a8d2ee23df",
        "cursor": {
          "ref": "90d1df28-8ec2-4acd-a861-9be4029810b3",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3a73e9fa-f01f-48bf-8086-021fcf454d58"
        },
        "item": {
          "id": "58d06828-4660-4f16-aa04-87a8d2ee23df",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2da4f4c9-53d0-4257-ab97-cc40e4e78e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61b50c16-3cee-4f10-83e0-c3019954a9c9",
        "cursor": {
          "ref": "f6fc8195-7732-4025-a052-3094a60903a8",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "eb967fb3-502e-44de-b561-a22f3147b6d8"
        },
        "item": {
          "id": "61b50c16-3cee-4f10-83e0-c3019954a9c9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "44b80b4d-f7f3-4827-8de4-515dbd9017d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f1770e8-2656-4262-b33e-ab03fe5ce560",
        "cursor": {
          "ref": "afa1cefb-3e79-4492-9c22-d9368b801354",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0087a1f0-0d20-41d2-902a-d9deddd88238"
        },
        "item": {
          "id": "9f1770e8-2656-4262-b33e-ab03fe5ce560",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "73b26fad-1db5-4d05-9d84-1746429d7dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e84d5b02-83f1-4574-ac6f-b1d0ff2083f5",
        "cursor": {
          "ref": "e21d2abd-da01-4894-9e68-e268e73ecfbd",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e0b2a1c3-28e8-4a76-844e-b31c8dbf7a88"
        },
        "item": {
          "id": "e84d5b02-83f1-4574-ac6f-b1d0ff2083f5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "96ccd9f8-10ac-4b66-ac50-3ebb3468de4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69f0b532-feaa-4593-aa8d-5397dfd19012",
        "cursor": {
          "ref": "234291a4-e5eb-4382-81e8-f96fce1321bb",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f0bca43e-b8e9-4fcc-9930-a61317f37fd6"
        },
        "item": {
          "id": "69f0b532-feaa-4593-aa8d-5397dfd19012",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "937480ed-7677-4098-bcfc-e8155c654136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a20ef9f-d8c5-4c76-9e99-0e3dfa74a52c",
        "cursor": {
          "ref": "164e7d54-7b86-4508-968a-253b469e6f2f",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "94bf20b6-d760-41f2-aba2-b7bb34808542"
        },
        "item": {
          "id": "8a20ef9f-d8c5-4c76-9e99-0e3dfa74a52c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "645c6597-b72f-40fd-8d4e-146dfe52f2ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df75934-b756-4eaf-a3e4-3c629ba09e84",
        "cursor": {
          "ref": "b717a3d5-9a3e-4694-972e-760a805de742",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e71add6b-2524-474a-8f43-d84bfe44424c"
        },
        "item": {
          "id": "5df75934-b756-4eaf-a3e4-3c629ba09e84",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "768a4827-12fd-486e-98d8-1de7a4bd0ec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b1953e-84e7-4442-96ef-7af06131cb7a",
        "cursor": {
          "ref": "d5b6c050-f832-432e-9cde-3800b57df335",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "eb511bc6-1dd9-4650-8bc4-9f4161f3d311"
        },
        "item": {
          "id": "b9b1953e-84e7-4442-96ef-7af06131cb7a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8f1659e7-c693-41d5-b469-01226ecb22a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2abfa541-b937-491e-9b79-10b11727ad22",
        "cursor": {
          "ref": "852e0320-fa92-413f-bd78-0dac2c1d39d0",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2d7bb3fd-0e4f-4ffb-b4bf-4d4192068d04"
        },
        "item": {
          "id": "2abfa541-b937-491e-9b79-10b11727ad22",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "39325d7e-b43e-47da-ad80-ac704a60a47b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a2bf2f-4abf-4327-b7c7-e0e9c54f67da",
        "cursor": {
          "ref": "f225746f-e1de-4a6b-afdb-b9f3b686b4e5",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4b1504a3-6e61-4911-88f6-5435d6079241"
        },
        "item": {
          "id": "17a2bf2f-4abf-4327-b7c7-e0e9c54f67da",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a7c3fb93-a595-42c3-bfef-b2ae821de743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9345f1af-34f8-46f4-b814-ff8dbddd1609",
        "cursor": {
          "ref": "2ef14c57-da0d-4d37-a812-c81aea00c2b5",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7b311069-e054-4983-b672-4e1f4ff38e78"
        },
        "item": {
          "id": "9345f1af-34f8-46f4-b814-ff8dbddd1609",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "06972d11-c17f-488c-99e7-93d2262c0d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5508792-da33-49d1-8da0-c18b675b5f40",
        "cursor": {
          "ref": "9f020341-0ce5-464f-8eea-83f73afba1bc",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "35eee148-df7c-4cea-ba0c-927152ecc853"
        },
        "item": {
          "id": "f5508792-da33-49d1-8da0-c18b675b5f40",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "30de90fa-c612-4ccf-a158-c2865c023965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8903734b-d14f-4864-94aa-dec1200a2a9f",
        "cursor": {
          "ref": "7d98cb3d-4ed2-4690-823b-3c31b7814c3f",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "6f96932b-ac23-486e-b945-1bd9f9da5d3c"
        },
        "item": {
          "id": "8903734b-d14f-4864-94aa-dec1200a2a9f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "293e468a-9ba6-4c73-829d-99dbbedb49f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b6ab71-1f20-4ef6-97e9-f87dc68e65b7",
        "cursor": {
          "ref": "94b4e8d7-9af8-4b02-8385-e82138a9b2a8",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5cd274d2-5423-4752-9288-3c5a71edfbfc"
        },
        "item": {
          "id": "35b6ab71-1f20-4ef6-97e9-f87dc68e65b7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3360c591-1a95-4f63-acb2-26e6e7321757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "506d05d8-1e9c-4377-a54e-cf1cb1842f5e",
        "cursor": {
          "ref": "813f334f-6fb3-455c-9fa2-8b902139ccdc",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9e194209-afae-4758-bd2c-964fc03b27f4"
        },
        "item": {
          "id": "506d05d8-1e9c-4377-a54e-cf1cb1842f5e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "513fd228-1967-415b-9a55-eef5396d16b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb63616-7ad0-486d-95d7-90783990f654",
        "cursor": {
          "ref": "6ba653ad-3cd4-4448-a2a5-2c9b1f1fe9c8",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "879e15b5-aaad-4f2c-b307-833ec1cdb11e"
        },
        "item": {
          "id": "6eb63616-7ad0-486d-95d7-90783990f654",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "dbd09e8b-9fbe-4729-9dd8-3638f37bf0aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38164d74-f9d2-4b70-82f5-faddc9cb7a1e",
        "cursor": {
          "ref": "3c8b915d-c8a8-46b7-b56e-c33687b61413",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "836aaa7e-96fa-4c31-8a31-786b3bfd11b3"
        },
        "item": {
          "id": "38164d74-f9d2-4b70-82f5-faddc9cb7a1e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1d0ec7ab-d6a8-4a34-8202-927105019fbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62822295-0f7c-4bfa-8dc4-bf61edd24bcb",
        "cursor": {
          "ref": "cfe27b0a-ce8c-4061-a625-2fd1e66f6164",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "564f44b6-8b01-4532-967b-e3a4d308e16e"
        },
        "item": {
          "id": "62822295-0f7c-4bfa-8dc4-bf61edd24bcb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4dde1b72-e326-4212-a6b1-8e167db095ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe72923a-76a3-4860-b85f-1e619f1101cc",
        "cursor": {
          "ref": "abc491b4-290c-415f-a187-5372dff336b6",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d193a7d0-17f7-44ad-853b-c4d5319b5256"
        },
        "item": {
          "id": "fe72923a-76a3-4860-b85f-1e619f1101cc",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "014f9ad4-5282-4b1d-be0b-d1e2a1af81bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "73d70191-1b7d-49a0-8cb9-e80672a66d69",
        "cursor": {
          "ref": "1d413b8d-dc88-4230-ad8c-1ac8c521a550",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3f9d1200-f8b5-4ad7-91ac-4cbd10395d34"
        },
        "item": {
          "id": "73d70191-1b7d-49a0-8cb9-e80672a66d69",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "5f9ca94e-5e1b-4795-8a76-e176292a06ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "324dc2a7-4091-4246-b0a8-d8614038c7ce",
        "cursor": {
          "ref": "3b54d1a4-0fd4-4a26-ace3-3986d4236249",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ae6002f1-a3e0-4967-99eb-35e24ff23707"
        },
        "item": {
          "id": "324dc2a7-4091-4246-b0a8-d8614038c7ce",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8f3364f8-67b0-417a-838a-97177926f75e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "324dc2a7-4091-4246-b0a8-d8614038c7ce",
        "cursor": {
          "ref": "3b54d1a4-0fd4-4a26-ace3-3986d4236249",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ae6002f1-a3e0-4967-99eb-35e24ff23707"
        },
        "item": {
          "id": "324dc2a7-4091-4246-b0a8-d8614038c7ce",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8f3364f8-67b0-417a-838a-97177926f75e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10386e71-8532-45f5-a28e-1c47617879f5",
        "cursor": {
          "ref": "97bcefae-a8d3-44ee-8cfa-33d98b9fd697",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2d81596a-dcaf-419f-83a7-facd1054b26a"
        },
        "item": {
          "id": "10386e71-8532-45f5-a28e-1c47617879f5",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2c1df57f-9377-4637-ac25-d6d1acc9e7e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48af71e2-29eb-447e-8dff-2579ccd5b2b7",
        "cursor": {
          "ref": "84c030e6-ca23-421b-b9fa-c07b34991121",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "28669edd-0199-47f5-9b8c-28c16fcf2c74"
        },
        "item": {
          "id": "48af71e2-29eb-447e-8dff-2579ccd5b2b7",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ffa77a87-d167-46a3-8e17-83816b3fd33c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9863754d-9029-49a1-b36a-21dba0b8f24e",
        "cursor": {
          "ref": "e1919f63-5108-4f51-9e4a-48f7df682ba9",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9c0b1b11-65be-4ba0-be8b-cdbc69b9af78"
        },
        "item": {
          "id": "9863754d-9029-49a1-b36a-21dba0b8f24e",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ab3caba5-02aa-419e-9f22-c281aa984743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb4cf9f-b473-4a2b-8e19-4846eb4aad77",
        "cursor": {
          "ref": "b6a467ca-9c34-43fb-8f0b-57b2ee6c238d",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "36c2293a-8a56-4fe3-bc41-f45027bfd52c"
        },
        "item": {
          "id": "ecb4cf9f-b473-4a2b-8e19-4846eb4aad77",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b09e4319-ef2f-4506-8b29-bebb19c84a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb2ec0ec-cf49-4453-9696-c649a123cd73",
        "cursor": {
          "ref": "aff824e2-17f4-46e3-973b-d1d57a1821dd",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e38500b1-2694-45be-843a-22b7b643faee"
        },
        "item": {
          "id": "eb2ec0ec-cf49-4453-9696-c649a123cd73",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0c0b40a3-c42f-493b-a9a8-d88ab56b76d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d02393-941e-4dae-8803-5fb79ef33b02",
        "cursor": {
          "ref": "f0ca9d5e-2f49-43ce-a2d6-90b3d9d9feb8",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "fe4aa2b0-4eb1-42ec-b3f0-b61c320fa446"
        },
        "item": {
          "id": "63d02393-941e-4dae-8803-5fb79ef33b02",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "76b648cd-e256-43a5-9527-5322e244c3a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c63208-52eb-4a75-b83f-b9ac618d95ba",
        "cursor": {
          "ref": "39b10593-0fad-4222-b30d-d0152afa1cb3",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "41c67bef-e3c1-4d38-a7fc-b8de04025bd9"
        },
        "item": {
          "id": "82c63208-52eb-4a75-b83f-b9ac618d95ba",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "7ef9db56-3b87-4178-b3f3-bd0c06f74e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b8fad04-80c8-44bc-b653-51dc9c19aea9",
        "cursor": {
          "ref": "1f0d1a58-69a0-40f5-b026-739b0f56a465",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "dc62dcd6-4f2b-4d64-ab1d-2b35d4989589"
        },
        "item": {
          "id": "0b8fad04-80c8-44bc-b653-51dc9c19aea9",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "67e6b290-10ac-4a07-9d24-0dc4e00040d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6069abea-b566-4bb3-b2ad-bcd7aa0c548f",
        "cursor": {
          "ref": "4b3aa257-9261-4cda-8d0a-9422b2ebf4cf",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9be117c7-c1d4-437e-9cf8-a6f022848945"
        },
        "item": {
          "id": "6069abea-b566-4bb3-b2ad-bcd7aa0c548f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "03ec3af8-ef9c-46ad-ad18-1cbb2020dadd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4b47a62-4228-431c-a1d8-9897b98a2ed3",
        "cursor": {
          "ref": "d054fc4e-a47e-422f-be20-12d8fbb35e6c",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4525669a-9e1f-4424-90db-c40c343860cb"
        },
        "item": {
          "id": "c4b47a62-4228-431c-a1d8-9897b98a2ed3",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d297b531-9e9e-4ad4-938e-93765f6cd57b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc8b3b6-d7ca-4797-a2ba-78ba44641f3d",
        "cursor": {
          "ref": "63acdde9-e4f9-449e-8dd1-1113e540865a",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4e3e5ed8-2085-48e4-9470-03738b9750d5"
        },
        "item": {
          "id": "8bc8b3b6-d7ca-4797-a2ba-78ba44641f3d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "09e540ad-2542-43d3-acc2-e379284d9efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2368ff28-c521-4372-af20-8bd1e1576b89",
        "cursor": {
          "ref": "97cbb0c4-aeff-4f70-9c11-465b848f949d",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1ab11119-b217-44cb-b765-96d302a52457"
        },
        "item": {
          "id": "2368ff28-c521-4372-af20-8bd1e1576b89",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5b6a5727-391b-4d8a-9b31-dcf63b6afb51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec8d467-3f1e-4a4d-8c10-5a01469092a6",
        "cursor": {
          "ref": "bff90853-ab00-4fde-8221-3ccf22bbc2ab",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "60e5736f-8ddf-43a5-8239-82b39b659236"
        },
        "item": {
          "id": "8ec8d467-3f1e-4a4d-8c10-5a01469092a6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d76be06b-97d7-46dd-a505-04a8a9afe25d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e63a75d4-ae92-4a91-a46a-c4c244380a42",
        "cursor": {
          "ref": "c341fd10-b414-494e-bb6f-5b1c2fb922a9",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b07f610d-91f0-4e35-bc73-8f7e4f90c7e6"
        },
        "item": {
          "id": "e63a75d4-ae92-4a91-a46a-c4c244380a42",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7e8796e5-6545-45a9-a496-79eb05c40224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d98c88-2324-482e-8042-e760e5c566b5",
        "cursor": {
          "ref": "a2fd3941-573c-4363-bf64-cc4dfaaa2f43",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "36a54c14-0e53-44d9-81f0-92ff17a3b4af"
        },
        "item": {
          "id": "a6d98c88-2324-482e-8042-e760e5c566b5",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d47680ce-121b-410f-b58c-ef7388d4485c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b45249-ad54-4520-88f5-a8cfb57ad941",
        "cursor": {
          "ref": "1430e31f-afe5-4a2e-be42-350ae0a5825e",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ac20ba6d-1867-4ed9-809b-1e6040b0ee53"
        },
        "item": {
          "id": "98b45249-ad54-4520-88f5-a8cfb57ad941",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "920d6e05-6340-4f05-b2ea-f27239d89f92",
          "status": "OK",
          "code": 200,
          "responseTime": 275,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "f3d955f7-0b52-4f71-8aa7-8f91a1d992f7",
        "cursor": {
          "ref": "cc00b24b-d174-439a-9c11-be4e44962e68",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "98635fa1-6405-4e1d-843d-223475243706"
        },
        "item": {
          "id": "f3d955f7-0b52-4f71-8aa7-8f91a1d992f7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8d088829-8272-4533-80c9-d7d1241ec854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "456ddd4e-376b-4e89-aa95-d2647fe5a8bc",
        "cursor": {
          "ref": "40816991-c09c-4274-aa9e-7c07b9d4c036",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "407456e0-5f5d-4c3c-b426-c0a919f219b2"
        },
        "item": {
          "id": "456ddd4e-376b-4e89-aa95-d2647fe5a8bc",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "95bbbda5-ec73-451e-9e1b-f9c441f6d51e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a8a61b-162a-483b-a40e-c6d4a93bfdc9",
        "cursor": {
          "ref": "24287d1d-01fa-4f5b-9039-8b36c5f482db",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c767e216-a059-4778-ad1e-e8f32319957b"
        },
        "item": {
          "id": "f3a8a61b-162a-483b-a40e-c6d4a93bfdc9",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8d4364f8-50b0-4c1b-bb48-b73f2692eb73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "983f5645-c23e-4d15-b49d-60fdf029ac31",
        "cursor": {
          "ref": "18d85374-3efa-453e-ad91-531fb75a37fc",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e10e7eff-8f00-41bd-86f3-f3f8e74fc996"
        },
        "item": {
          "id": "983f5645-c23e-4d15-b49d-60fdf029ac31",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f89b523d-08ce-4da7-a98a-aed5cb851794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ad9f58-ce09-4fad-b5d6-4e4faec998e2",
        "cursor": {
          "ref": "f80204f1-3181-42ba-a8d1-831a061ef1ad",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2b63b4f0-9f4e-4014-8e73-620980aa7211"
        },
        "item": {
          "id": "c9ad9f58-ce09-4fad-b5d6-4e4faec998e2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "5266466e-46dc-479f-939b-73e6948af261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ec15024-c6ac-4b3c-99ed-4f2c5bccbc31",
        "cursor": {
          "ref": "0173af4d-c572-49a1-9b34-397b70ce192c",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6b8bf947-87ef-4c83-b6d1-a3c8114305d0"
        },
        "item": {
          "id": "3ec15024-c6ac-4b3c-99ed-4f2c5bccbc31",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "7ade00ee-22eb-44c7-8df3-d7147cab1223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5348431-a049-4ae7-a8a8-77d6f45ae26a",
        "cursor": {
          "ref": "82e666fa-f557-4939-ad4f-67125649d578",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4331b460-ae6c-449b-8ff4-f1f6ecdc4949"
        },
        "item": {
          "id": "b5348431-a049-4ae7-a8a8-77d6f45ae26a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b384a853-b7ae-417d-8e7e-5ecca7789067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0bb71f-e335-44a9-9f78-2f63d270559d",
        "cursor": {
          "ref": "e0a8e601-05fd-40f8-a92e-64758c536a85",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e1cfd954-cbfa-411e-ab99-a3c0cfe173b7"
        },
        "item": {
          "id": "1a0bb71f-e335-44a9-9f78-2f63d270559d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "3192116c-d1db-4e92-a49f-9ff1503c7119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dda69556-e271-4796-8f86-e18e70d96a0e",
        "cursor": {
          "ref": "b80206fb-85a2-412a-bcf3-9ef12f89643d",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "6342e0f3-d312-4fb2-a9b2-5fc0d4de80c3"
        },
        "item": {
          "id": "dda69556-e271-4796-8f86-e18e70d96a0e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a4cfb00d-602e-4c04-af15-a9b17da05e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a28e6e-514a-4e7c-909a-87ebefc059d4",
        "cursor": {
          "ref": "88c8a4bc-d0b2-482a-a7eb-deb3ea15ebbe",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "09be77e8-cfad-4bd1-abf7-9077985bd600"
        },
        "item": {
          "id": "c0a28e6e-514a-4e7c-909a-87ebefc059d4",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "6b6eb78c-209f-4d91-923b-aabfe350436c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d196668c-9dc5-46eb-a067-4b6a0fda985a",
        "cursor": {
          "ref": "16770896-ca25-4848-bda8-2832677af3d5",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "792e6ed5-0d71-41ff-9bcd-6812a4314e19"
        },
        "item": {
          "id": "d196668c-9dc5-46eb-a067-4b6a0fda985a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "518378ba-7582-4a1d-a19a-f271003d42fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e156ac8f-6ea2-43d8-b8f6-fb5589f39187",
        "cursor": {
          "ref": "4049f79b-11b6-4985-8927-92d8d702b939",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "406506c3-bcd2-4821-a866-50f53779daec"
        },
        "item": {
          "id": "e156ac8f-6ea2-43d8-b8f6-fb5589f39187",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "05306113-78ca-40dd-a715-6a3dc7d55ccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9138f402-6191-4cf5-9f15-a6334315bb73",
        "cursor": {
          "ref": "d9df31bf-f8a8-4cc0-ab7c-d9c6ae458e32",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "226522e0-fa36-4c9d-86bc-6517de75fdd7"
        },
        "item": {
          "id": "9138f402-6191-4cf5-9f15-a6334315bb73",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "27fb53c6-ba73-4357-87c4-0fbc7d47e6ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3613f43f-61c1-417b-b682-29543fc84a26",
        "cursor": {
          "ref": "79514f59-5628-4ddd-ac6c-dd650ee42d1f",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0944a6f7-35da-4a80-a204-619caafaa37c"
        },
        "item": {
          "id": "3613f43f-61c1-417b-b682-29543fc84a26",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "02de39ff-85c8-46e8-ac2b-fdea2fba1f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb9ec8b-c750-4b86-8894-9532b681b1f2",
        "cursor": {
          "ref": "2cd7c833-3523-4b0d-92af-54205292d86f",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "fe78cb1d-e6f7-44e5-b3b5-6f7d04ab15bf"
        },
        "item": {
          "id": "1fb9ec8b-c750-4b86-8894-9532b681b1f2",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c0512c9c-5c82-4601-9837-6664bf7aa8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3f56aa-f012-4f41-8bab-13b677db6b86",
        "cursor": {
          "ref": "a74e7be7-53a2-4eb8-8332-24f051b4cc56",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "26530c71-b799-4b50-bbdc-690ec2673ea1"
        },
        "item": {
          "id": "ef3f56aa-f012-4f41-8bab-13b677db6b86",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "68ea88b7-3f8d-4b4c-ae6b-0acde4a0a819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed303fb-aa70-48a0-95cc-f1644abc6c9c",
        "cursor": {
          "ref": "99ed49b6-06be-4cd6-9027-e90c6762f704",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "dc53036c-f442-49db-8a35-c9f761ad0a05"
        },
        "item": {
          "id": "6ed303fb-aa70-48a0-95cc-f1644abc6c9c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f7a7a017-32f9-400b-bdd4-d381b08a9d32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2520567f-d52e-46c4-a81f-b0466b6c2aee",
        "cursor": {
          "ref": "54ff7b46-6d12-4348-b9e4-faffed088255",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ba0efc8c-6c66-4956-b711-d1f2edd1a735"
        },
        "item": {
          "id": "2520567f-d52e-46c4-a81f-b0466b6c2aee",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "87ae7e54-83d0-467c-a72a-2458aa1f12c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d2a61f0-e671-49f7-aca8-499395d22115",
        "cursor": {
          "ref": "068b9cd6-d69f-41d2-b217-dfe290a838b2",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a27e7e49-291b-4849-b07d-1e88acf81fec"
        },
        "item": {
          "id": "5d2a61f0-e671-49f7-aca8-499395d22115",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ae125e85-6014-4509-a60d-c9fb0712c698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41ab12b-0b33-4728-a8c6-a3f5a86982b3",
        "cursor": {
          "ref": "401bbca8-45a6-4854-8365-92534131ac37",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b46a08d7-d323-4fd1-8d08-8a23e3963b02"
        },
        "item": {
          "id": "d41ab12b-0b33-4728-a8c6-a3f5a86982b3",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9dbcb182-5991-4191-bc00-e4764cecec03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7be16e9-32a3-4efa-a901-5fa79b408557",
        "cursor": {
          "ref": "844ab558-9662-443c-86dd-27ee551b337e",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b4e841fc-4f6d-4d65-ada0-8f107e9b99ab"
        },
        "item": {
          "id": "e7be16e9-32a3-4efa-a901-5fa79b408557",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "fcdcb443-089d-4669-850c-c45345e8295c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a588ae29-8d31-4514-b64c-3dec81257666",
        "cursor": {
          "ref": "ead1e492-b355-4da8-b323-a7cda5cb7bcc",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "49ad4bbe-7f35-408a-a43f-c2fb0ec34713"
        },
        "item": {
          "id": "a588ae29-8d31-4514-b64c-3dec81257666",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d813de0a-6d8d-4170-adfb-289f8f103f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a47e35f8-be35-4bd5-b5b6-50c0ca4888ab",
        "cursor": {
          "ref": "ef54321e-22a0-4ed5-b3ed-a1acedcbb33b",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "27b4d442-2ad7-483e-8443-8f26ce02cc72"
        },
        "item": {
          "id": "a47e35f8-be35-4bd5-b5b6-50c0ca4888ab",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9193268d-9ca5-45c7-b9c9-8d1991e51652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77bfc207-bcfc-46e6-92f5-ea2b629eb11a",
        "cursor": {
          "ref": "8ed3bba6-5968-4c9c-9f6d-89e44b59f9c3",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "852e6f33-4ac9-4b96-9d8c-e68783800da6"
        },
        "item": {
          "id": "77bfc207-bcfc-46e6-92f5-ea2b629eb11a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1c409f1c-2c75-4618-9635-671e1d8a39cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5924012-714e-4785-9336-b6b0863c4caf",
        "cursor": {
          "ref": "d46deda0-9990-470a-a891-bcaf0c73a44d",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5964f6ff-331e-4027-9df9-fb18e147817a"
        },
        "item": {
          "id": "e5924012-714e-4785-9336-b6b0863c4caf",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "5c643f56-7d05-453c-bb9d-20668d68dad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe4fbfa2-3a1e-4e18-bae6-a5c9b7f60ffa",
        "cursor": {
          "ref": "925e9ec3-8bbb-4fda-a5a8-74652a1e76ea",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "98a6d604-2a45-46d6-9213-d4a42f02c555"
        },
        "item": {
          "id": "fe4fbfa2-3a1e-4e18-bae6-a5c9b7f60ffa",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a3a3e6f4-5464-4906-904b-ddfddfb3d81a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46824898-5458-40ba-a9a1-1620889a7ec7",
        "cursor": {
          "ref": "5c4b4cb5-2643-4d7f-8dee-8f7053249d28",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "6975b755-50e9-40cd-acf3-917bfb6d4613"
        },
        "item": {
          "id": "46824898-5458-40ba-a9a1-1620889a7ec7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ab429792-545b-47df-95b6-89a4d4acecd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "025a4801-b360-4084-bd57-f31828246d3c",
        "cursor": {
          "ref": "226cee4b-6d13-4e2d-bf9f-1b0073c417bf",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f976a626-dcf3-4e37-9b8f-1b460954bbb2"
        },
        "item": {
          "id": "025a4801-b360-4084-bd57-f31828246d3c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e59e93f4-8f9e-4945-bb9c-572cb454f117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782eb567-1954-4c4e-af37-e3f85b1f0778",
        "cursor": {
          "ref": "d84b6dc8-10df-4fc2-9dc5-5dd73c85da20",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "05049027-77cb-41ed-8ef7-151b8a5bcf3f"
        },
        "item": {
          "id": "782eb567-1954-4c4e-af37-e3f85b1f0778",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6f291b1d-fcdd-4ec9-8d63-f52eaac5d485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2641cd56-5169-40ca-b164-af40eb2caa6f",
        "cursor": {
          "ref": "b58b1c94-729b-4aa0-829b-3f39e2a55194",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "aec81e96-3863-48d6-b44f-b530615cc3ca"
        },
        "item": {
          "id": "2641cd56-5169-40ca-b164-af40eb2caa6f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9eacf796-9576-4682-bc67-842e15f60350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad17fc0-717c-4d12-968d-b500de0d2a6d",
        "cursor": {
          "ref": "3a3162f9-9fd6-4ea4-861c-883298b6fff6",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a8b60892-ad44-468e-aff9-89a7e7db050a"
        },
        "item": {
          "id": "bad17fc0-717c-4d12-968d-b500de0d2a6d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1ac6b18e-dab8-48ea-a43c-3b29b37f25cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f1dde6-1646-43a4-91d0-e95dfd307fbf",
        "cursor": {
          "ref": "1cf9bbb6-f4e6-47df-9936-df8242f40736",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "eeea572b-fa07-4ca8-9797-a130f64bd3bd"
        },
        "item": {
          "id": "15f1dde6-1646-43a4-91d0-e95dfd307fbf",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9311e757-5a57-4d43-a482-423120e15978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f7719c-55d8-4eca-b853-7ebb66264afe",
        "cursor": {
          "ref": "19553b94-0dd4-4489-b0e9-c332b597ab40",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "88b37d7d-379e-4b01-a761-b8a43da60319"
        },
        "item": {
          "id": "10f7719c-55d8-4eca-b853-7ebb66264afe",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ba88300b-30c1-4e03-abb1-c8228b647ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2554a115-2004-4d5f-bcf6-0c5d701fcbd7",
        "cursor": {
          "ref": "015a527f-c29e-4832-8e59-88bda4d9099a",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "176dc66f-4382-421d-8921-eff1f466ad21"
        },
        "item": {
          "id": "2554a115-2004-4d5f-bcf6-0c5d701fcbd7",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d3a5b997-7eb8-467f-8ad6-c5024c6704f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f186bdb5-5039-48c0-bfb2-721166c1a77b",
        "cursor": {
          "ref": "071c84d1-0ed6-4c16-8cb6-509808f9cfdb",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "cbe2b7ec-0763-4d34-a1da-18bac7fef317"
        },
        "item": {
          "id": "f186bdb5-5039-48c0-bfb2-721166c1a77b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "fba7f07b-71ad-44b2-890c-4ffa4c2c82a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3facb059-a051-4bf2-9755-ee78f140adcb",
        "cursor": {
          "ref": "a649cec0-5660-410c-9dfa-d775ca8a2ceb",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "bb994ae2-e8e5-4f37-a8b4-2f06fd246035"
        },
        "item": {
          "id": "3facb059-a051-4bf2-9755-ee78f140adcb",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0de995ef-ff06-41fc-ada0-ec4f7895d200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea544c94-316c-4b7b-96fa-53165bd6e201",
        "cursor": {
          "ref": "6cae2e64-8717-45cc-a647-35734090127f",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "8b584f5a-4fd9-4ff7-9e77-75e01f115d6e"
        },
        "item": {
          "id": "ea544c94-316c-4b7b-96fa-53165bd6e201",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "efa982b8-9145-4b0b-adbf-3800e0c5d44c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f78ab2f4-1789-4a3e-9c10-23cd28cd1441",
        "cursor": {
          "ref": "d8f57689-dcc5-4b60-8e8a-a6f4b4600d05",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "bdec7e77-f1f1-4dd8-a311-689607677774"
        },
        "item": {
          "id": "f78ab2f4-1789-4a3e-9c10-23cd28cd1441",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4c9a7066-4906-4096-be2a-b6ba760b4738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1592fa35-4585-4b41-b120-160246b21e6b",
        "cursor": {
          "ref": "b514a8eb-8eaa-419b-979e-b9fab6c76495",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "97c08ebd-c132-410b-83bf-72cad1765dc5"
        },
        "item": {
          "id": "1592fa35-4585-4b41-b120-160246b21e6b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9adbb325-3be0-45bd-91d1-6078f3cf450b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06cb52cf-bfbd-489a-bd66-467026e47c94",
        "cursor": {
          "ref": "ff3f6204-cb3e-4412-a5e6-52d73b0e80b8",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "79a5ca25-7033-4218-b659-08871564a551"
        },
        "item": {
          "id": "06cb52cf-bfbd-489a-bd66-467026e47c94",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "93282497-17c6-4a84-8136-8508c4619769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e87d4b4-9f75-424f-a7d0-fd2bead10058",
        "cursor": {
          "ref": "81d94b17-8732-4ff4-a770-3881a670d873",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "91dfe761-9050-4eba-ba3a-74819e7cea60"
        },
        "item": {
          "id": "1e87d4b4-9f75-424f-a7d0-fd2bead10058",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e2d3e7c5-2d3a-47b8-9531-88a81247327f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f575c9d4-0a14-4c45-87d8-16e456fb77ea",
        "cursor": {
          "ref": "0b410017-f043-47ff-914f-b4375aa8a044",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "0dbe70ee-de29-401a-a3ea-61f55b4489d7"
        },
        "item": {
          "id": "f575c9d4-0a14-4c45-87d8-16e456fb77ea",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6fe47862-8b7e-4b12-bbf0-39bc31653aa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "993be1d2-64ae-45a2-815e-1f9f15eb8cda",
        "cursor": {
          "ref": "96618278-f2ea-4e31-b759-5277839e6187",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "44ce1718-41a2-48de-b1fb-e0f5a63836dc"
        },
        "item": {
          "id": "993be1d2-64ae-45a2-815e-1f9f15eb8cda",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f3e25f88-ea0f-423f-a672-4c66584b077e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc93697d-e7e1-4c4b-ad9c-cbff675be689",
        "cursor": {
          "ref": "7c54f5b8-a997-40ac-ba73-580bb957ddd1",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6b139ed1-13ce-4132-8cca-ee138a543f9d"
        },
        "item": {
          "id": "cc93697d-e7e1-4c4b-ad9c-cbff675be689",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2e5ea8ce-5e0a-4067-9880-931ee14df6fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c2b2b0e-6c25-4b46-9dc1-6237410006be",
        "cursor": {
          "ref": "c5a89288-6bed-4c1b-973a-1fb55123852f",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "fb6624bf-a1df-4e8c-a79d-289dc886e4d2"
        },
        "item": {
          "id": "2c2b2b0e-6c25-4b46-9dc1-6237410006be",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5217783c-7584-47a7-9026-0783c558dc60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e96af5a7-c454-4fd6-97a8-c67bc265a40e",
        "cursor": {
          "ref": "7834fbc4-423d-4042-99ce-36e607c4457f",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b6066b43-6fd3-492f-b11d-5956ba3c6ce9"
        },
        "item": {
          "id": "e96af5a7-c454-4fd6-97a8-c67bc265a40e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "181b29ae-0b14-4209-a7e4-7a26169c0fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9637e6b5-ac6c-4d1c-afca-8237610495eb",
        "cursor": {
          "ref": "bf393815-a12b-4858-aa9a-73eecfdd1aed",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "33671573-1c00-49f8-ae49-df0c93b20a71"
        },
        "item": {
          "id": "9637e6b5-ac6c-4d1c-afca-8237610495eb",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "79d5e01b-0e3b-43dc-9696-0c477c76fead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e310d20-65bd-44a7-ab2a-7502084f6430",
        "cursor": {
          "ref": "de6dfb54-32dc-4c06-b3fb-052564647f7f",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e6c4e7d1-b871-4ee1-aae0-6beeb247976f"
        },
        "item": {
          "id": "4e310d20-65bd-44a7-ab2a-7502084f6430",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6a1fde29-c364-4976-ac64-6cb728c115ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4421c2c0-9386-4ed4-ba35-3d2b6343379c",
        "cursor": {
          "ref": "a8c4dc51-3562-4f1f-aa4f-a1150caf27ca",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c7d31aac-c41b-49d6-897d-e30078eb5256"
        },
        "item": {
          "id": "4421c2c0-9386-4ed4-ba35-3d2b6343379c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "013fe9d7-ad41-40f5-abb1-2061e389ebc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01d1ddbb-1be9-452b-be1a-7610476516e8",
        "cursor": {
          "ref": "ec8720c1-e129-4734-b0fb-0fa15fa9ba1f",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e20be760-3dd0-498d-b43c-b34478782607"
        },
        "item": {
          "id": "01d1ddbb-1be9-452b-be1a-7610476516e8",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "024d753e-82d2-4c07-b5e8-2d099a7168c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f339df97-dc61-4640-9418-0fa89793354a",
        "cursor": {
          "ref": "2379056e-dc52-4c3f-860e-bd471e9f9c7e",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "61ec102b-349d-485f-8df8-cf006fd67190"
        },
        "item": {
          "id": "f339df97-dc61-4640-9418-0fa89793354a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f693b699-c984-4941-b8aa-4d8501f4c441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a272b76f-44fc-4a80-ba8f-ebafb17c7cd7",
        "cursor": {
          "ref": "0d4fd70b-c63d-462f-8233-fb395abf7f0d",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7aeb7fdc-e518-4bc0-b173-52aff71688bc"
        },
        "item": {
          "id": "a272b76f-44fc-4a80-ba8f-ebafb17c7cd7",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "06cdd5a1-f91b-4a81-85a0-c47068afe93e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab580ad-beb8-412e-ac35-dedb5f4c07d8",
        "cursor": {
          "ref": "7e44ee9d-a629-4e2a-b8a6-3e705c263c7c",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "c2b8e895-da3b-4e2d-bda1-1070c8293288"
        },
        "item": {
          "id": "cab580ad-beb8-412e-ac35-dedb5f4c07d8",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "763cd542-325b-40c6-9c00-ad1a697fb059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94962f27-e7b5-4f7f-b32c-a307f5eff64e",
        "cursor": {
          "ref": "2ad08fc1-c686-4fa9-b24d-a6a73927b53f",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "0dd6b2ca-2c84-4b55-9b84-2a2f42d61601"
        },
        "item": {
          "id": "94962f27-e7b5-4f7f-b32c-a307f5eff64e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "bc68fd23-d044-4aa7-81d4-5c097df51d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33eb156e-cf14-4933-ba35-3e062dc9b81d",
        "cursor": {
          "ref": "3078d558-8362-4731-b5d6-80074f750a43",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ebd78cf5-f0c9-4134-98de-e421397a9531"
        },
        "item": {
          "id": "33eb156e-cf14-4933-ba35-3e062dc9b81d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0a201f8e-838a-4b48-9a1c-149cb45dc808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b88a94da-f113-45e9-8a7a-a017e69d0a99",
        "cursor": {
          "ref": "a561a026-66ee-4286-b816-54832d22e384",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b119bb30-9da2-4b46-9ca4-616b8eff520e"
        },
        "item": {
          "id": "b88a94da-f113-45e9-8a7a-a017e69d0a99",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "0a52ea48-ceab-4391-a971-210fe321e1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bdf919c-e8fe-413f-a8f5-1d4b1c7cb74c",
        "cursor": {
          "ref": "e384554e-463d-4110-8d0f-7a4e40c7c2ca",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "95a42cc1-6dd7-40ce-81f8-5ee4d4556b6a"
        },
        "item": {
          "id": "9bdf919c-e8fe-413f-a8f5-1d4b1c7cb74c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d55ca75b-7830-48a6-a003-c5a3d5ba2436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d3e353-a220-42db-81ab-23a8669f05e9",
        "cursor": {
          "ref": "b5e970cf-e64e-4d6b-8deb-f4b68c66ab19",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "50bf2e02-3db0-4423-a209-529ba159e5d0"
        },
        "item": {
          "id": "b3d3e353-a220-42db-81ab-23a8669f05e9",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3dd7c8a5-a986-46e8-9e74-868d2616a8f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f61c866-46d9-4253-a8c3-e02b0d177527",
        "cursor": {
          "ref": "59c17085-0a82-46e1-b869-d6177a901286",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1cc16b50-eed6-4b71-bd13-4a1edaa2c0a8"
        },
        "item": {
          "id": "7f61c866-46d9-4253-a8c3-e02b0d177527",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b954b28f-f44d-4d07-898a-54110672cff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b4df3a-249f-4665-842c-4f71f1f57999",
        "cursor": {
          "ref": "dcf90f8f-44e0-4b23-b440-bb3e5726621d",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5bcaac65-0808-4d52-a1b1-d9b15af28d38"
        },
        "item": {
          "id": "91b4df3a-249f-4665-842c-4f71f1f57999",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a7811927-ae45-4ccb-8638-76902efaf59f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ecd612-824f-48de-b58a-2b1b560856f2",
        "cursor": {
          "ref": "32926f4b-26d0-4095-8da0-1c41d6129a96",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ef264458-20a1-43f1-9a4f-02f37496c678"
        },
        "item": {
          "id": "b8ecd612-824f-48de-b58a-2b1b560856f2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "71161778-d399-4ccd-a43f-2d772eac60b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "246fb4e0-9477-4a12-a3d0-e8f08bef4afe",
        "cursor": {
          "ref": "9c6e8cf1-3ddb-45dc-ac1f-2adabe46e5a4",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d78f6d4d-cab7-4fe0-8e5a-b7a4a3ae69af"
        },
        "item": {
          "id": "246fb4e0-9477-4a12-a3d0-e8f08bef4afe",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "dfd8cbf7-3652-4689-871f-ec6d09ff1417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "342e47d5-f74f-4230-a01f-21cf3db4d064",
        "cursor": {
          "ref": "6ef6ca90-9cdc-4eac-b860-73c94efd99ad",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "211d7921-dff7-4def-8132-979d2dd4aa57"
        },
        "item": {
          "id": "342e47d5-f74f-4230-a01f-21cf3db4d064",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4fe36849-0700-4140-a863-add73a6f899c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b83c6cf2-3fe6-43d2-adf2-ac8271c21186",
        "cursor": {
          "ref": "354e6b27-58fd-4877-a39c-2ea22c67290f",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "166a51b4-d0bd-4744-89a1-0c81ae07d914"
        },
        "item": {
          "id": "b83c6cf2-3fe6-43d2-adf2-ac8271c21186",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d0fea669-b5f5-4fe6-a7a3-400be116f6fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c67961c-0f2f-4986-b9f2-e6a33e6cae70",
        "cursor": {
          "ref": "52240d65-55fa-4227-8ba2-f05b7349f9d7",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "6419cc51-a460-431a-97e9-bfa1aa7b9e1e"
        },
        "item": {
          "id": "2c67961c-0f2f-4986-b9f2-e6a33e6cae70",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1a8daef7-59b4-46f9-8229-2d84fccc4b02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c68b8ab-53c0-4d99-a97c-bd7b889fa036",
        "cursor": {
          "ref": "057c8ca9-1da1-4bdb-be3e-1fbd56b57b35",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "46a0782e-04de-4508-8124-dad29788a528"
        },
        "item": {
          "id": "3c68b8ab-53c0-4d99-a97c-bd7b889fa036",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "cd38ff24-cc40-4654-a7c8-39e52a169f3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a575525a-c645-4eb6-9290-84a3ca6e94bb",
        "cursor": {
          "ref": "3445ae97-85cf-48ee-8f2b-f538203894d1",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "fc1657ae-81fb-4f49-b346-d3c33385bc0b"
        },
        "item": {
          "id": "a575525a-c645-4eb6-9290-84a3ca6e94bb",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "5c8395d2-e720-4e55-bf45-f722065e0ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7224c73c-2935-4b87-9d5f-afe1580fccef",
        "cursor": {
          "ref": "f089c8f5-4071-4f4d-becb-97b2da5a6ab3",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "514f96cc-e7e6-4a0b-86c4-f61e04720024"
        },
        "item": {
          "id": "7224c73c-2935-4b87-9d5f-afe1580fccef",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b724c858-41ab-473c-994b-bd7442c9ba90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "671c60e6-9d11-4294-99ab-fb2fa3c89533",
        "cursor": {
          "ref": "4890669e-6c99-469e-b42c-5eb8ab8b3ba0",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2ba43d12-67a4-4038-a7c4-bde03a95a87c"
        },
        "item": {
          "id": "671c60e6-9d11-4294-99ab-fb2fa3c89533",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "3fc7b440-72a6-4d26-ad77-34a121af4877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01b01acf-3609-4568-8c68-b730118dd106",
        "cursor": {
          "ref": "68380a91-785d-472c-b1fb-e4ece9e6c3b2",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ab9a62e7-8073-4f1e-ad8a-95bd8cddbcbf"
        },
        "item": {
          "id": "01b01acf-3609-4568-8c68-b730118dd106",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f0d27a26-01a5-4889-b287-6d07a6bd3024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e038145c-7995-4a10-af8f-906db3ce2cc4",
        "cursor": {
          "ref": "76d47be2-e091-432c-bc8e-4464e30a6faf",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "92fdb3a4-1d9b-44bb-b165-d08923d8b9da"
        },
        "item": {
          "id": "e038145c-7995-4a10-af8f-906db3ce2cc4",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3836668b-f335-42f9-98bb-de92fc9b04ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac554bc9-e000-4de6-bf92-429b07b86de8",
        "cursor": {
          "ref": "b71eccd4-3fcd-4d0a-9f71-238a770caf9b",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3a4f4780-4c15-4ed8-a41e-4cd8e29df075"
        },
        "item": {
          "id": "ac554bc9-e000-4de6-bf92-429b07b86de8",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c2eb886e-5236-4516-acb9-a25b352a5d62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5303fa-142a-4cb4-b4a7-2ad71093455b",
        "cursor": {
          "ref": "a495f8fe-8acf-4b01-953c-bad0b74e97ae",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "bd137fe6-26db-4f33-a06c-b435a09306ed"
        },
        "item": {
          "id": "ad5303fa-142a-4cb4-b4a7-2ad71093455b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b7b22503-9ac3-4e40-8a25-8df2c08ba59e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "147e84b3-6f18-4fa3-818c-ea34055a4766",
        "cursor": {
          "ref": "05e01e17-88da-4d40-b610-d208baf3e317",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "af86b151-4ed3-42dd-bd60-2b0648afbfc4"
        },
        "item": {
          "id": "147e84b3-6f18-4fa3-818c-ea34055a4766",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6d6c49a6-13e9-4921-9eca-ac44688c331b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b63737f0-1c53-4fba-9da1-2a38b4c89f90",
        "cursor": {
          "ref": "121bbfb4-39e4-4a6a-9a59-fc851c5faa65",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "953a471d-c456-432a-8905-9a818f82960b"
        },
        "item": {
          "id": "b63737f0-1c53-4fba-9da1-2a38b4c89f90",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f9149f1a-583e-49dc-9d0c-1759f0b67e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "067e0f70-38e8-48e7-a7b0-5043722f1a28",
        "cursor": {
          "ref": "5a10148b-0afc-4c52-bbb5-b9bf4aef417e",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "76ce25c6-c4dc-4ea0-af40-7684629fba6a"
        },
        "item": {
          "id": "067e0f70-38e8-48e7-a7b0-5043722f1a28",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "cc8c6b55-04b9-4354-a9c7-2c76a62541e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55924b0d-2daf-4f98-a9bc-a5a32f556c23",
        "cursor": {
          "ref": "564b2fe7-1415-4dc4-83a0-932b93cabe9b",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b5a26775-75aa-40bb-adc2-63568459f4cf"
        },
        "item": {
          "id": "55924b0d-2daf-4f98-a9bc-a5a32f556c23",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "8a4c31a1-0722-4f03-b449-5ac49a842be4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93fbefa5-a18e-4086-874c-9cfd74c852b8",
        "cursor": {
          "ref": "c2ce7d4d-e117-4747-9f26-6f4e42362311",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8b43ebd6-faeb-45cf-ac82-9a5f735fe318"
        },
        "item": {
          "id": "93fbefa5-a18e-4086-874c-9cfd74c852b8",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b12320fb-ebd6-42bd-9627-ad6b8de0c2aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15350410-7464-4366-80c8-2e43fc9e4d60",
        "cursor": {
          "ref": "fb2abe95-c5cd-480d-90a8-9102de68b52c",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2571c1c3-5a77-4c12-9a02-ae9aa18e4c79"
        },
        "item": {
          "id": "15350410-7464-4366-80c8-2e43fc9e4d60",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b58d9b21-6013-4978-bcc7-4dcb29158952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6d1ad25-1e0f-4bc0-974f-c8e010d6928d",
        "cursor": {
          "ref": "41521608-b626-40d3-be4f-d2ea8e88b0b4",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "be2a878a-1945-4018-88ec-aed59cbbadd1"
        },
        "item": {
          "id": "e6d1ad25-1e0f-4bc0-974f-c8e010d6928d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "33d7084a-2f09-4edb-838f-86793726626d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97723968-2b99-4958-be9d-84f21b1add85",
        "cursor": {
          "ref": "746ca5fc-8e17-4ef4-8911-f68acc0091f6",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6f9a36ea-dcf6-4566-aedb-d7ee35c13a6a"
        },
        "item": {
          "id": "97723968-2b99-4958-be9d-84f21b1add85",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "80028e33-82a2-4235-872c-d423bea5b321",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "f69f84db-fe82-4d50-94fe-a60d28288303",
        "cursor": {
          "ref": "f8855d9b-1205-4e6a-a5f4-d73c84037393",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7c33679b-48ab-4fe3-8a2b-46330504440c"
        },
        "item": {
          "id": "f69f84db-fe82-4d50-94fe-a60d28288303",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "01e7b930-36de-4909-836f-2ff7c4d25402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "af71b716-c803-4c57-8aeb-9a221fc0ff8d",
        "cursor": {
          "ref": "f8626798-ec64-4c5d-8b8e-3021f98ac5f8",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "76716d9f-806b-41ac-abb9-11d45f4cdf5d"
        },
        "item": {
          "id": "af71b716-c803-4c57-8aeb-9a221fc0ff8d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e8328deb-df28-41b5-b26c-52f53d401fee",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "465b066e-7beb-4a97-bb69-c72d25349637",
        "cursor": {
          "ref": "13cb2db5-ea72-4ef0-a3e8-2762b3378668",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a896244c-9650-4ac9-bab4-ec8c64ad39db"
        },
        "item": {
          "id": "465b066e-7beb-4a97-bb69-c72d25349637",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9bb612cf-cd75-4f18-9c27-1106f3a4ed18",
          "status": "OK",
          "code": 200,
          "responseTime": 2099,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "588f368c-9e2b-45bf-b789-f5e7a46b9414",
        "cursor": {
          "ref": "7f5902af-f1c7-4572-bf82-3ce2ec635c0a",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "198f112d-7eb3-408f-b112-36060568618a"
        },
        "item": {
          "id": "588f368c-9e2b-45bf-b789-f5e7a46b9414",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "08123e5c-8b98-4601-af7c-76a47079a2ed",
          "status": "OK",
          "code": 200,
          "responseTime": 2190,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9add1b1-34d2-4d79-8837-a4d325bbe035",
        "cursor": {
          "ref": "2c3d50bc-a9f7-46f7-a7d3-b87f1838cb9d",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b6575ae4-3dd1-4c98-a000-f6c80a589616"
        },
        "item": {
          "id": "c9add1b1-34d2-4d79-8837-a4d325bbe035",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dd4ee476-dcd9-41e9-9ed1-c251fe597ded",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "c9add1b1-34d2-4d79-8837-a4d325bbe035",
        "cursor": {
          "ref": "2c3d50bc-a9f7-46f7-a7d3-b87f1838cb9d",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b6575ae4-3dd1-4c98-a000-f6c80a589616"
        },
        "item": {
          "id": "c9add1b1-34d2-4d79-8837-a4d325bbe035",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dd4ee476-dcd9-41e9-9ed1-c251fe597ded",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "c9add1b1-34d2-4d79-8837-a4d325bbe035",
        "cursor": {
          "ref": "2c3d50bc-a9f7-46f7-a7d3-b87f1838cb9d",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b6575ae4-3dd1-4c98-a000-f6c80a589616"
        },
        "item": {
          "id": "c9add1b1-34d2-4d79-8837-a4d325bbe035",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dd4ee476-dcd9-41e9-9ed1-c251fe597ded",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "1f3d7f1a-60a4-489c-a789-c6186016c252",
        "cursor": {
          "ref": "70c99772-1ca9-4e0a-ac6a-14db56380840",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "47f5c844-e7dd-409f-bc59-06870e09987c"
        },
        "item": {
          "id": "1f3d7f1a-60a4-489c-a789-c6186016c252",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "5c092ec8-533f-44cd-bd67-9b462564a925",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "3adbe951-2566-4d96-aa80-14297192f242",
        "cursor": {
          "ref": "e86198a4-0cad-48c7-aa22-4e025ca5c80d",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "362a6b74-befb-4096-8df0-89b8a7a6cbdc"
        },
        "item": {
          "id": "3adbe951-2566-4d96-aa80-14297192f242",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d47b855d-e8d2-412f-8497-521a245bdc65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "3adbe951-2566-4d96-aa80-14297192f242",
        "cursor": {
          "ref": "e86198a4-0cad-48c7-aa22-4e025ca5c80d",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "362a6b74-befb-4096-8df0-89b8a7a6cbdc"
        },
        "item": {
          "id": "3adbe951-2566-4d96-aa80-14297192f242",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d47b855d-e8d2-412f-8497-521a245bdc65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "9a915420-b094-4c38-a4c5-82a4ab45f36a",
        "cursor": {
          "ref": "d18ccf2d-5c48-43f6-b8cb-66a31e42782d",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2799c2e0-de60-438c-bdd1-904075fbbf1e"
        },
        "item": {
          "id": "9a915420-b094-4c38-a4c5-82a4ab45f36a",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "b8722f34-f7cb-47d7-9534-f9bc48215a73",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 175,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "8c7080d2-4690-467b-978a-7756f18f28db",
        "cursor": {
          "ref": "93c85bfe-f9c9-4eb1-99b0-c2a044b99495",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "1b3d1cec-3a22-4c7f-93f3-6ad8721bcc4a"
        },
        "item": {
          "id": "8c7080d2-4690-467b-978a-7756f18f28db",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "fbd86a9c-cf4d-49f1-a464-5844fd5df6c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "8c7080d2-4690-467b-978a-7756f18f28db",
        "cursor": {
          "ref": "93c85bfe-f9c9-4eb1-99b0-c2a044b99495",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "1b3d1cec-3a22-4c7f-93f3-6ad8721bcc4a"
        },
        "item": {
          "id": "8c7080d2-4690-467b-978a-7756f18f28db",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "fbd86a9c-cf4d-49f1-a464-5844fd5df6c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "ae3aa992-c66d-4882-b737-ecd10be7b1ff",
        "cursor": {
          "ref": "e17bc2e7-a7b3-4198-a1c7-980fc06b66ec",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "cf88a4eb-37d4-465a-82a0-02c4eaf987e0"
        },
        "item": {
          "id": "ae3aa992-c66d-4882-b737-ecd10be7b1ff",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "402ddb59-9a88-4f7f-9cbb-f2f133da102d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}