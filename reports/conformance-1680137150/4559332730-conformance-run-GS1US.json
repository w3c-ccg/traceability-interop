{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9a9c801c-04f3-4833-806a-d31f881b0862",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d10a9463-01a7-4fea-ae3c-6ca699c49c92",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4d04f394-5cee-42f1-9e65-5d12dd8fdd03",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a768c5f8-09c8-4650-b3d5-67ecdb155202"
                }
              }
            ]
          },
          {
            "id": "7aef6933-64ba-440a-9049-61db22f45000",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "50de5fe2-a529-4245-a6fc-3eb6b948bb51",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c52973c4-eb44-4fa6-a705-f6e1cbbcbb00"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6ca8bc3e-81ea-4243-86f6-457ded47c2d0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "710fb5ab-1b50-439c-a5b8-7f0ec12a2f60",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cf39f310-43c0-41f3-851b-81668a4e05c7",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d777d492-7bf8-4dd7-858b-b78f283f1167",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e62fcadf-762b-4680-bd30-b664e5ed901d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "018c55cd-47f1-4ab1-8898-770b232e8fc7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "47c34dde-f9f3-482f-abe7-6553b8244de9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d19da502-fb59-46b6-9a78-9c5a30964db4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9942c5dc-4d80-43b7-889d-041beec44482"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "849e3b0d-4e38-4655-b8f8-21b53a3b2881",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "4977e467-d2a0-4dda-9b0c-e8f4a342d112"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3d17c45b-0d7d-413e-a1da-1583ae4880d7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "68ad7269-1d38-44c3-bd00-6e4945c762a5"
            }
          }
        ]
      },
      {
        "id": "127259c0-f3e9-472a-bb2e-e4b918f4e97a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "5e7593b0-8ee3-425e-be3e-14f8b238a08b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "df7ec8f0-ec3b-43fe-915d-7ef7a34143f9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7200a060-b0d2-4296-9733-2aefe8eba828",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d808d56-e64c-4063-8e14-d56564f61bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea0c9688-66af-433c-b3a1-47329b05e61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88951c0-b06c-432d-a1aa-963f71e5db2b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be86690-f44e-417c-ab94-8a58b8112d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9b36894-2ee7-477f-9d5c-4b4ae5d23102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9187eb9-90f3-42e0-8e24-2a90b731f936",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b8a5a9-d22c-4d7d-99e3-52ad5aa3b7aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "68309f48-de33-476f-81e2-5a3f962c39ac"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a2945279-88ce-41e3-98b4-790cdfaeccaf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "298c53a5-496c-4017-a7a9-e36541848ab1",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c1a5dd-5e79-4b2c-a94a-46599c3ece2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d77a8e3-eb9c-4eff-8ab0-cc101cad3eb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "765c4eda-f584-49a1-b891-c9f292c3c2b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f890d76-e973-48a5-bad3-f665b73672d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2d337be-87fd-4924-abb7-74ad3eccb472",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f776f69-175e-4364-a932-8cbaf2b572ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d0ecf8b-fb11-4697-8072-4450b077cc31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b65709b-271c-4973-b919-58093107a1ab",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "56b90b4b-11e5-48ac-b09e-0542f85fa214"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c0edabc2-5565-434a-99ac-0e2684b912c3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c959bc63-470d-47ae-a16d-5a977c5cc543",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5554af87-7b96-4369-bce2-f174f534b5f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "8dab4ef5-4cb8-4fd2-8c68-8e488bc9c8d3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3aa4d52a-57aa-4ec0-90e3-9d1bb4982e39",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "a6abe711-3b4c-47df-b1bb-7fa2295002f2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df55ab9d-3c1e-4a04-920e-0645a0755a17",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "06dfa489-6264-4719-8275-9a10ed6e9400"
            }
          }
        ]
      },
      {
        "id": "faf3445d-4ab3-46f3-969c-1afb3afe262e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "04eb3ccc-5e00-4a57-8bf1-9d8e2b5b30ae",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a1a9f801-5e4c-4779-8ef5-ced3adb9b590",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1aa65064-8541-45bf-9297-210d1683ab53",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e38ab1f-93db-4dd5-9a7a-ab2f7d560d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b417dd1d-8b68-46a5-8e7f-398c16d6efa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f7a5add-47c9-4f86-8c76-1d9a1e69c0bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9229412-944d-4df3-ace7-3ee3c5620ec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa9b535-a5bc-4ac5-9313-71b079f81db5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6298eac0-d322-46bb-b3fe-7a26f64d5971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af73752f-d8a0-4662-a7b4-2841392ff2c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3c9402-b282-4b9f-9390-aea54ac4c6fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd30db50-2f08-4303-8478-23d22666aff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b011da-af0a-4f70-8476-5e20928d8ce8",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dee6e56-1546-4116-a771-4548dcb019e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23e93975-e7b8-4705-800a-57ef71ae9ca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9fc077-a18e-4ad4-9cf6-50f09bfc1d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bcf90dbd-821b-42ee-8258-15fbb35eb6c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02cebe8f-fdb9-4505-87df-a4b6bc620e2b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f532f402-6994-4fb0-aff8-f24a49bc8028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f43cff2-b0c1-4869-b9c2-2e50d3aa0644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ccfacf-0710-4c35-9096-79cf35ca3e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60cb8f36-ca4c-4059-9e5d-d226e0ab1fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abca9933-45be-4bb7-bfc8-18b00f99df9d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1075c3-c4f5-4be3-9438-2980450ddb8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb038413-e965-4aa3-865c-b91656c63a5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aad9450-9a51-445b-b78b-bfd76e0f8934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47e36afc-f2c2-4aad-ad44-f942df6f72d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7453381f-eebd-4632-bf72-4df8c85fb1c3",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c766f06b-5068-4aa8-a065-45d32d69e3fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2abfcb4c-8833-4fee-bac5-71b4d7794942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4bd99a6-c1cc-4ed2-91c1-837959a75f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69997764-0cf4-4e95-9efb-0a5ab816b885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b7b801-0ee2-4b5c-ae8b-71414fbcbee2",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d186b1a8-acb7-47a6-a0de-dca639e37c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df935cf2-b625-47cf-8664-48ed34508116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b108792-cd9d-4af0-81af-45c332cce5d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5bbcc17-45df-4441-a3cc-85411c5bbbf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9affb6a0-2483-4b72-8bdc-cf06502dc144",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a63605-ab4c-4a60-83c4-097319c7edd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3183e3ad-7a3e-4d1a-a3c9-0477636c5ac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9178d85-406c-4ed6-95e6-4d9aa2595255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd9b2dd6-f4bc-447b-856f-b0392cb7b528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd14cfc-955d-494d-9fa5-3a73c63cc596",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "975c5091-244f-498a-b712-304bb6619b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aaeef1c-626f-4d2e-8092-c5cc458996bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1f680b-c6c3-4d9b-9124-a90100e2ab3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f47d38f-48dd-4d9a-bad4-73a8c30d2d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbeaa5c6-0097-4103-9693-6689f5ddad8d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf99cbb-0969-444a-9baa-aebf822cfc6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec2bd68c-9356-4a49-b834-bcb081205606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acdf9d1a-c7fc-41f8-ad88-fe473d6f3ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54ded282-6a09-4926-8203-376634de74b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "199a985d-abf7-4cd8-bc6d-505139e385c9",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c661c8-142a-4f83-b30c-b965fbbdb1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79467c50-b67a-4d16-820e-bc43fcc16e6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28ea166-30e5-4b53-9d22-b06cbc404204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63ee24f2-a48b-449f-aca7-d11c9623f5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09846f12-c9ac-44cd-8e5c-5a947f738d00",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f9e2904-3c55-4633-ab0d-91011eb7b892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0730fac-58f3-4e1f-b55f-43898499d130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8330e6-ac01-4e73-9097-17df4bfe90e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "948efc9e-e989-4b6c-99bf-a69ef7c9f6f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f324431f-b5c8-4dbd-8e09-1b74596ae26b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86cccf25-9f19-4d77-967d-46a6e253a25e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ead142a-2ced-42e7-8303-ed387d88ee20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add3a976-4058-4917-828a-036a8796c121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5e05d05-b54b-419b-8cf5-a6493bcdb21e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d3b7cd-3836-412e-9271-0ab31ec747ad",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c3eba0-11d2-43d2-86ce-ff902c91194d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10b73b26-8c4b-4f10-8737-6178c5e3c4a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1644b168-e1f2-486a-9670-82c1acb7457c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7c9cf89-b0b7-40b0-865a-fee57914f7ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d37e09-8674-44bd-bfa5-d7ef04d04b56",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae558709-343d-4f28-be4e-d0502c27b0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ffc6c9b-c7f2-4182-a9ad-3e2e10826bec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c88a7d-c125-4f62-870f-b8bafabd31c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "176827e8-0aed-435a-b098-79ab18e4256c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d56d1b-aecc-40ff-83a7-b48fcfce0c5c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4fd7f07-5b6a-475b-9197-a2b94a9c3c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9d92d62-ac63-4fe8-90cf-b18516ef02e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ac0e71-400c-4ce4-a41a-2a3d044515c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06cd7fb5-a795-437a-aaac-feab989c0b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13433d67-26bb-416d-ad2e-561318025969",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44eed1a-24ae-4913-93a1-1790622bd11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "020bb41d-d760-45da-a67b-c9fef4e8b0b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b90ee4-12a1-49cf-af9e-315084cd0b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df19162b-ab9f-4e8a-b384-745cba1b91b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b683fd13-fae6-4d92-8336-c8f090cb81ac",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c174f2-aeb9-4d9c-9a03-42d38c7bd3bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9a07f6d-fc63-4ae5-8978-416ff29d44f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "583e8860-3d87-4da6-b3ee-9844fc96ae7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7621b5d-ef44-4a1e-9772-b07444f12518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cbf06ec-cfbb-4bec-ad52-04a13bf560a4",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a7e1d1-293b-4519-8c26-f289f5335a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b03ede-4e56-48a3-8954-b9147e6b8751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "269ddb0a-5012-4388-a757-ed95ad925cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a04a5b5f-d72e-425e-a71b-6ab844452c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3358770-00a6-4341-9bd3-2daf2e6d2696",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a4e830-5e0c-4d82-98c2-fe055453b948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c864594f-c89d-472c-ba74-26ed1be3b412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d06539-40d8-420f-860b-76271f72e93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c10ed425-c593-407b-a646-ad44402981a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6b5401-5267-45a7-9fb5-16935d08cb2f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c591b112-3671-4b67-a113-6e855c996c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "774dc3cc-504b-48e0-963d-e0e2dd88cbc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67d9be9-c3c6-4f1b-8b78-b731e4ba35bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "68a0d99a-3f65-4a34-aabe-ccc7f7b2a512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef10a5e-9132-4fb2-ae1f-cf46e60714af",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3cd2c0-cded-4d1d-b10f-a54e1ed957f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5341ab65-63f5-4afd-af69-d8e480e9e2ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f17d4295-962a-4446-80c0-a77ed4295d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "912c0ef5-a6ca-4211-91fd-ce369a509731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5984174b-c1c8-495e-85a0-0acaacf103bb",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90f32f4-5636-4a32-8d28-a16379c1cec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c724c06-d60b-4983-a3c0-6cf310467a9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7966ff-8c0d-447c-bca1-add050436f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "592d7cc1-638a-4342-9407-e920eae05c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d9d8807-9c7c-4331-b919-da210f0ea87f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3414a813-1505-45e9-86de-56d067183b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2c50762-b185-4743-a463-3aa7d6e084be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e76d77ee-dd29-4166-8984-66f0dac55afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c138fc1e-2cb1-4f98-88ab-dcc322569571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb66c1d-7eb8-4df7-932b-fb8e739f992f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bafaed7-14b2-4239-92ba-c143589399ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62290f7f-5cc0-4dee-9261-e5f43e1f0afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9551de2b-9aa9-47dc-a311-39d934b9baf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8d146d8-2a60-45f1-a9c1-2ece8718931f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f9c571-057e-4291-8ea6-dbaa09d46c8e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8ee2a31-062a-4c90-b51e-80eba349efb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74b5ed2c-e9a2-4e4d-b971-ad84b43c901a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4e2891-e2a0-499b-8f4e-580598a718dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c3d23fd-6a6f-495a-b5d8-17daa3a9095a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf1e014-0c75-4c4f-9df5-b798d02a38f8",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3156b370-55db-4f37-8cb9-5fddf718c01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c4ed96b-d977-4237-8a49-a8d5a40f75dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52636fa2-a8fc-4ace-bd37-e27db681975c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "452841f0-06ff-436c-b6ae-7d87e85ca127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4781dd35-2a66-4571-aaea-acb1b8ca3735",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7cf3338-48a6-4fc7-9fbf-9e1bee207fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6d24e29-9dc2-476b-a2c9-f50622be4843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea30341-315a-419a-83a8-aabd0ec64ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "668a0c7d-e6a2-4f1c-93e8-d1cf85fafa9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e466b5-ad87-425f-be4f-0d2952b39bcf",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba85d79-2525-494e-b5fb-89b9f5e8c0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "139cfe7e-219f-4764-99da-87aee384cc4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b35f811-4a46-4167-883e-a596aa462698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "135659ca-cdc4-4853-a149-d8257f22bb4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "838fa33a-ada1-420c-a10c-c41483fdd3e8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b948ce0-3383-44ed-9497-5fdb22c55402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0586dca4-125b-40b4-ad48-344b811dd901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a8cdd37-f4c6-4f7f-b465-4b9732d85bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "50c1909e-59c9-4f04-b9e7-cc3fa9ee7ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f5bd8e-a747-4290-863e-2583dea33d50",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f3dc3f2-892b-40ee-a0bf-fd3352d064eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6801b91-01a7-46eb-b7aa-11d6fee82eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc5ff8f3-8386-4b08-9f31-26912ef0d8e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ad9477c-4b41-4caa-bcfd-bc547aec6271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "525208d5-3bdd-4e7c-a3b2-d7c7b8205605",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db51ecc-34c2-4ccb-8e43-e2b76407408e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5af5228-4c7a-4976-82a9-662d16c0f7da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9bd0a18-5cde-46d5-a432-340fb0912fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f90e6379-3f94-4801-8df1-6190c3ab0d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2fb627d-b5ea-4280-b2c5-4efc9d5b1431",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4068d048-b8c7-41ca-ad74-048b637bbcd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ab6a4c3-642f-480e-9fd2-6d03621aa0f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db85876-a584-4c36-8333-b4c13759ca39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "94d5361d-e2a7-4405-9c98-614110ffda03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f6ac99-91eb-4cd4-89fc-56e3fe9e8e26",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "571431ce-8043-4dfd-989a-5b65e3c19178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5c55165-3e5f-40b4-97e9-51abfb1c08e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2db9e76-dcb5-474e-bfce-f7eef4fee37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2327d45e-cfc7-4d52-a5eb-c32f6d58cd06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1989c999-3934-4ac2-b7d7-c7f7af6c03c4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12df4a8b-0dc0-47b3-b1ea-37abee822713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83fe10e4-5806-42c1-a475-12db388f0813"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b13cb3d-8d0d-4d0f-b6f6-d9f7fb14d27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "56a76a95-4e21-4907-8c70-7f778b6d089e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f03ea4-27a3-4aa5-b725-6e4455715acd",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f546c8-3677-4343-9a77-4d1116d048c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b760d7ba-e4cf-4461-a187-93bf1bd7998b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb772f07-20e6-497a-a918-95ddf46d904d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8e4ca153-6793-423e-8344-59fb5ea88e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f332ebb9-71ca-4681-af1a-a8e04cf196b9",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f5d5d2-fb5c-45fa-8991-09ea56d77c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e290295-ee85-4283-8b6b-83ea8adc20bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a81a9d-cb59-442d-aa82-defa97f15539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6140d578-3706-4327-b71b-9eef95093d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ae89d3-9246-47c6-b6b4-9820eb00f1fc",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c353a2d-f19d-4593-9b01-bac9e702a8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db1e02c9-da3e-4c72-9a68-d1bd8a002cc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f11cfbf2-fb21-4850-bfd0-68ade269d9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "699dbdce-3d77-4942-a6e8-2beab59a81ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af7fda4-d88f-49bc-920c-4398b9f948f9",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb4ccf3f-002d-4bf4-bede-cf5ecef6b5c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "498409f2-64a0-442b-9094-65d8a4e516e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "951440aa-23d9-43d3-9124-8ef3b4775e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a5e70e2-7276-48e4-9c6e-ddca06de2af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "416e7e13-a0c0-45f8-94f8-b8c27b0756f9",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ab2bde-de0e-40a0-821b-173d8b4ab453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f49ca9d-040b-46f7-946b-e3dc33a16a68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2020e9be-cd2c-43c9-82ad-2ec8f1006663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "98617649-9fa9-4890-b865-858ba26f3d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe4b7580-00ca-45dd-9263-d704539bf7d8",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6281a244-d0d8-4fdb-8c82-a159f672ef65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bc3692e-9ab6-4b2d-8035-c1b1c914af85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dea0fb9-b95d-4df1-879a-d79b5b6c85dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0361a916-44d0-436d-84cf-6d49b6661bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e241a1-80a6-467e-83fa-937c458479aa",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce63dec4-1c08-491d-b01a-61f69261aa95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35018747-5ca5-40b4-8eb8-445b335726ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5484dd2a-4522-43c7-8da0-f6d61dfe1e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "abef1d01-c7c3-4a33-b81e-bff754c330f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "808afc6e-5ac8-4eea-a79a-bc7551c35741",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91282aaf-77c3-491f-8482-75ff4dde3508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94bd60bd-0677-40aa-964d-96f644761b82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4be7b53-7cce-41a6-bd2c-27c876a9e0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "08b9cf57-d0ec-4ba7-bd1a-f082d8f26f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e53cc39f-260b-4796-8d35-a53b277c29a9",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "994947d3-4209-49e5-860f-2fea4c79677f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cfac5ee-31dd-4e58-9612-a0c1b83e7d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d027e4-bd88-426a-9ea0-32b6cde775bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "84b09408-000f-44ee-aa2b-c922c67c66c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73589b96-ba69-48e5-abe7-1c802d149362",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af010f43-0b7a-4315-8531-1e0e03783d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13b4cbb6-77a2-42f5-9039-04d7050e1c64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb43c69-20ac-4002-b7f5-d0294e20ab49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b57865d-71c3-4331-8b4c-1a4596a07d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d457f6c4-db94-4f21-b770-bf005fbc4921",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f8c13ef-9d69-465a-99a3-1cc3210889f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "862a299d-7e95-4853-8d64-e7f9b74164c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "331fe0d0-16c4-4ca0-81ed-fa220970fe0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4133e8d3-775f-4269-8a5d-6b455ff2591f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ab7c55-a42c-43f4-b83e-deb29be3b94d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc4f8868-71a5-43ab-8087-d059989f2a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c3e23c-7fc2-45e2-8029-7be3f7c4987f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab8706e5-b17f-46e9-93d6-8aaa675acac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "312430b4-3887-436e-b955-cf4f580499cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1caa2dab-95cb-40f6-8f3a-8f7f39ab7390",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e71b694-c0e4-448b-8090-1fd815d1a189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16b20c28-23f3-455e-8c2b-c59a7621d35a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a0c23e6-646b-48f0-bf34-6c93502b72c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7ad33db-8fab-4d6b-988e-451eeee48522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4895b4-30b7-4724-a598-840f6d18c2c4",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f27cc0-3e90-4a86-8d51-0c19a970cf3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7226adf-6ba1-41f2-84a1-ba18abf4cc92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a299e839-74bb-42cf-ac4b-7415e18cd12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f5ff8cf-73a2-452e-8170-4596955ba76c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a442023c-235b-44f5-bbfe-41318ccc91cd",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4312cd6f-be40-49a8-8fb5-d23f3a420c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f15884a-8906-4ef4-865c-2dfa06640214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b06d0856-ae8c-4940-82eb-067af6b7a351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e0d9511a-4519-44ac-a458-817cd5a57d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a1e1b5-a01f-4e7b-955c-1e24ea070c6b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8eb742-bcf4-48c9-883e-803ccd83e228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5204087-b201-40fd-a3f1-a50b1fd005bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa901524-9e41-41a5-a2cc-048746f24405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "95521626-da30-4d95-837c-9cea91ba1004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34550d10-1afd-4527-97b5-29d2d9257a06",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33fb4f5-d3c4-4816-95c7-15bd079b4e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9112fddb-f7d8-4382-80e2-7e554e8c19a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "813eaa8e-5163-40f2-b606-47480f0422ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b17489e1-4e74-49ea-b590-04ee1443d6fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f9afdb-a2eb-46e7-b3a6-07110bf725c0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf79f63-9107-46a1-bb4f-afbc3a8e078f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e6a8069-7889-402c-82e1-306b2d436be1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac90fe68-d17a-41ae-82cd-bfaa390393c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bf19b03-3d97-4412-b38d-5b9764bb2d02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcdc8d04-7c53-46a8-880c-24727c08a2b9",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6b393c-9b53-4880-a9db-7e3415cc7159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "130a7453-37c3-49c9-a6e6-e036c55f37e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821af75a-406e-47b0-81bf-0ae83075936e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "acc0f255-b27f-495a-8b1b-9944b454546f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e52bfa7-ab84-4984-aa85-8082b30cf869",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c82474e-e9d7-495e-a35f-e1a0576bd16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bd9816e-3e3e-4eea-9d66-20c7f023cc33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92742e6-7d66-4e3b-ba38-b395e3fecd80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "09e1ba4c-b142-4b2d-bb5b-ff6e2fc5aacf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b234f303-3a6e-4a84-9e4a-aedbad83f376",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b28a42-db21-4b84-900a-eae60b2a985f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23fa4e55-52b3-4e7c-9a86-7df01e546b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec955a40-ac24-4497-a708-538b55f71611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "35ee224b-d548-47b3-88b2-e1453a890b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9cd9b3-577f-4279-a7b3-7847273ea976",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49c47d7-1f20-4c3f-b331-a9272440f3a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d239b235-0afd-43d6-bdc6-333fca93ebc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed66fa1-8f0d-4719-b51e-85a9ab663a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "59f78ea6-533b-4238-af0e-5c149f7a5e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16c9a40-f92c-4cde-ba61-523cb9d07dea",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1b3d2d-df11-4d56-9350-c8c918b8c279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f15bea1-27c9-4493-9067-cfdc764238b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1835a272-54e8-4f59-b881-c4a5aed948f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "769eda46-a4ee-4def-afda-fded65e0f098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5d1eb8-5eb9-4781-b76f-681e57dea5ef",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba220d9-7115-4605-8356-25035084bd30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6be9fd4c-5560-4802-aa87-7878027b5303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a9979f-efe5-4cb1-9b65-a4e391e20692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0bafdf0-eee5-49ef-82a1-942d960b6669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62c5f6d-d7e5-4a19-bcdb-cfd053f7a727",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef2f96fa-f871-440b-a4e9-bd54b3b0118d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ee7308-dea8-464f-a3aa-9467f34d320b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab05950e-8ad0-4efd-ad78-7e1b445ce74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bea705c2-d0d2-4235-b465-feae0f735492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdde3528-f22a-4b3e-acb4-cd026645ca7e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1a73ed-1218-4ae2-973f-771b2f2f2913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "780b7baa-5cba-4ec1-b1e7-d62b20f09e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28bea836-d200-481d-834a-17560cbd6973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9473282f-aef0-491f-942f-b670d0006406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989c5efb-759e-4657-8749-0189acc9ff73",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d06fdf6-a8f8-405e-be2f-52687d416425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe6c74b-0b31-4cce-bfe0-155457df77c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e36a27ff-d01b-4f55-b343-7562302443e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4df0c8e1-d6fc-4e40-963a-d4445bc1e268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74dfd95-d938-4fbe-a0cd-74d98eefccd8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f33048-b9b5-4390-a8b2-1355bc245f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad626705-c4ab-4f82-9a6d-80f6904590f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dcce848-eb60-4962-bd30-4b8677b6e5d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "283455be-9c63-4852-a5ae-c8c5f388d2aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9d0d81-c057-44c8-a118-98e3e99b9a43",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "049e2a30-d310-4afd-b187-0db3bea4dbea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab702e66-25af-4078-a6d0-dbd844f6b74b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37b2694-67cb-464b-b029-713d5bc7d295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "70c865cd-2c4e-4787-bc22-b2f14b209805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f1be62-21e4-4c7a-8c7d-133906ec151b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0366e195-0658-4a03-96ca-9848b6ab2181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1567523f-8eca-4255-93c6-4aed50a6733f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9447ca68-4029-4c25-8132-1770af74362f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a08dc82-e69a-4804-b6d1-9ed1d1a948d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910cde85-477c-4d37-9c5f-790286d90193",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ef69cc-6596-4644-9765-93b32cc81693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a20f43f7-cbe5-4c6d-b919-cf667438bc38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec3ba3e3-bdca-4aa7-8f2c-e379bb17f9c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "53c7551d-c2e1-41ef-90a3-dda5f1805c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d4bffe-8e24-4d34-8fcf-f8406f7348d1",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e424e72e-64c3-4bb3-aa20-bf4f2031bd99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76ee11cd-82ab-4d53-a492-2c8145f6b1fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40b7749-dabf-4d7e-88be-72dec7d81a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7d143a9e-ae9c-4d65-a5eb-e78586051c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f8259a-288c-4f1d-8ca7-5d54794443f1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e038d978-0a9f-45e7-945f-af23c7315f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2b079e7-add8-4d08-bf0d-5e3a73489537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1f835f-23d0-46ee-924f-17948597c184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "be3a73d0-45d2-4baa-b2e4-2a42a73758eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a0ed29-2335-4c65-8dca-6eb8d3645aab",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "400d442e-d066-460b-8525-0d954b2cc87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c509e209-c3fd-4dd7-bf49-996728a89317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b21b899-47af-4071-8efc-35867572c10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b260bb1c-a5a3-4477-9996-3ed4c6a775f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "038c5381-da0e-46f7-af6d-ec5653e06f3f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05501abe-7956-4533-a572-7d81112812bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8610672-4289-4786-a0cf-a3295ac49e14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a6b1b5-0093-4dbd-bc03-1e2eefa08c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83307c9c-0b6d-4114-ba4f-10ff3cfeb573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c470d931-76b6-4564-9b48-87a021cc49aa",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef803a8-74d0-473b-ac97-960c3e7cf3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6baeeba7-a41d-45e4-ad4d-4a34ba44bf08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2214cbad-ff0f-41c6-8d00-90dd0414373d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "712419d6-727f-45b5-986c-0198e19fc105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89453d75-4ad1-49aa-a9d5-36c80785196b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ffacaa-9d7f-4e15-bf1a-650f2543726b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3e08c20-dacc-453f-98d5-2542ed3984ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3abf85-12a9-4c13-8329-b0cf83d94a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8412feb9-767a-4c5f-87a9-76beb70ca465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77966460-33eb-4379-88b7-28115d4a2f3c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37127f81-1b46-4dd5-8037-d2f79072b1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a905b2e5-362e-4cc5-89b7-0a9624c10b06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56780137-cf89-4e20-88bd-3714e29792fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "899a27e1-c0dd-49e1-8a60-5a0b11a2d8e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709d7965-4f84-4dc0-8cbe-eec87aee9498",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "add6fe7e-07cd-4fc2-a6f8-0aad968581d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0604f55-b36c-4fdf-8775-32384ddc9b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79471313-0478-46e5-8310-8aa00343c396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e416f88a-92d0-431c-bac7-a3cf63514777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518678be-8f46-4891-8360-5932e6751620",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a7f081-bc19-42e2-8204-fbf22850ec16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "617113ac-21db-4a8c-8eef-63df5f38c786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc302a79-ad45-42bf-9ed7-2da9c73f3bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cef18b8f-c646-4010-acce-bba552836b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59de2aa1-0a5c-4afd-a107-05ba6c45490a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad032890-6e96-4a00-83fb-485ff8f49f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed69922c-5b22-463c-a384-25f5eb140ee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9489aa5-87e9-4e4c-b9d3-0bf34b718c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd061337-861e-4c67-bbb2-c9011022aa9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b990ae4-0574-4bbd-a317-5ad89901297c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd841360-6b7e-4b58-9062-b35777d5b198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e528b3-36dc-4b92-a644-1c43b45d6cdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1392df-ca07-47a7-ab00-835aeb09869b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30a4574f-5eaf-4a12-9653-8005965ce9e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9888607-646f-4933-ad28-f3420622f0e1",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a651dd2-9176-4b7a-99ea-6989a17a05ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd1ceb12-c464-4224-a4e6-29d7f7de73b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f94f058-508e-479a-8e63-2b4f78d4ff84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "446c1464-b4e5-4d79-a271-2b36f2058dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4547c6f9-ba5e-4925-9c74-c69cca9a5f7b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c08fe8-6241-4486-b6bb-de647b448ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0d3c309-bee7-4ed8-801b-3d61a362817e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba53875-119b-4424-ad11-5f7d01e70bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af590405-09b5-4a84-9bdd-aeae7c255fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bae0707-145d-4002-90fa-65c466ff6a20",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d20e989-1ee8-4dab-acb1-173d58439675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74606984-9c9e-4797-9233-3691f7492e39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70be2f5-75b9-4134-a128-a4f979af4a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5f20d5f4-9256-4778-9737-bb97804c6618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6cf2608-d8c4-4944-8d8b-2b48c5d450b5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b6e751-dd7b-4dc7-83c2-c5a595f962e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "400d9dcf-a3e1-4f49-b34d-8d3916ce5c44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "253ca6c6-d2d0-49d4-821f-5da37d652491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "551f3a32-b873-4f5c-a412-2a587c30b3da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c40694-61d7-4df7-9fff-6b1c985d5c76",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b7a10ee-7aa9-4ace-ac99-e9832deaeef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa90568d-6566-443f-aae6-691767e0fd61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55570b60-144b-45dc-8d5b-4b49719b43a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "457d80ab-811d-47e3-84e3-814ad6ae7ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444af2be-dc11-46f6-8a13-7ab883d50551",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1600fe39-dd94-4893-8d4e-f14371414763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cf263f9-37ab-4dec-8256-2a99a029b621"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59ba7ce-c1b0-45b9-be3e-07d11211db51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96ed0afb-f339-435a-ab32-dae382f61b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ddb930e-9022-44ab-89d0-3522e7417646",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e4ac3ce-4237-485d-bb22-1d2067160949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad6eb36b-6fa7-4871-bbdc-0cfbb8cef431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fda6ea7-87f2-4c88-85eb-7ee8dfcb21f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "67f685c7-6e71-4cb8-bd31-1b61adbfc55b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d3464d-0415-4663-9916-68212342b079",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ff359f-8990-4e4c-a78e-2da02feea22f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a964d842-b43b-431d-a17d-0411f5e89feb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156afea6-f3ba-42ef-b907-6405c87f3d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "995bc94c-fbf8-4cf7-8ce2-2f75a407453b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ae474e-e0e8-45d9-9443-96faa2864af7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c02378c9-26c2-4b9d-9a1a-92edcfaaff5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba7e3253-4a98-42f0-877f-2e0714b3dabb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da993f9c-5052-4f08-817e-3b9cb71a74c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ff74ee1-cdd0-4858-9c21-1be9912d88ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c9a62d-0c13-4ebd-9494-d7f4cc5dec8c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef538bbd-c2ea-42a2-8349-b27c8bf048f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a900e75f-77b0-4f0d-8262-805f8b3b3cff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc0326f-245a-4c55-b047-4e472c9c35e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b469d34a-d42d-49df-8536-144f890c7eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b105d4b1-5ede-47a3-a060-f4fd6a006d48",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0f24de-dca8-40af-a6ce-1111507ed8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e18159b-c8da-49fa-9352-47f016098a30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e245d0ee-fa81-4e50-bdb9-4a4625c8219d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "551c34d1-06c5-46d7-b5fe-162d79de9ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f9c369-753e-4935-a6a8-df7e4dada842",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c343d6c-6c2e-47a2-a55f-c84f77d8c532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb9aaac1-f7c9-4bcf-8163-41ab1f046b2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a6a634-c9ea-417d-be4e-0ba38c2be3d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "837d8005-a8dc-46b4-811f-803a7616fed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18877c10-181f-4c01-81a2-f351c65e61e6",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a5c178-116e-4ba4-a5d0-285c2e355fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84651f5c-a53f-4aed-bfb9-36c4df1da536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63dbdab2-8fd6-4d2b-8f28-fa03e7718cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "23338705-e9c2-4cc3-9b53-a512055e6bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb0aaa2-b077-45c0-b7ed-b3bd2642d27a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb9ad2d-936c-4126-887d-d83278c33109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d021356-b7c5-4430-8315-1472d82c3a62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7708bf71-c6bb-4deb-a9f3-4eea25a265b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2da71e07-edc0-4e4d-bc4b-6cb5b4deb544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "205592cc-3b1e-4b50-a6de-c9055e565b65",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b693f483-ab23-45e9-857c-eaa716e58bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c368a57d-385b-4ef5-9f4c-6a4edfdb24d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73acb6cc-ebcf-49bb-bff9-28f00a769ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "cde0b26f-5054-4df4-a47b-b6f9e82d208b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "61969561-a24c-4a9c-8e1e-298d4ccd7433",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e1b74bd7-badc-4ea8-a98c-e40c8dd8b176",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4501fe9-a7e5-4a4c-8e50-0e54b5ab3643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f01e0695-f6e4-4a28-829f-4d4e5fceb006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91608fb-16a3-4c0f-b06a-cdbdc0c8fd43",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55fba221-6834-4d59-837b-13a7f33c9254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad9111c-f1e6-4778-a5b3-b11a9afc74db",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ac5e21-0426-401d-85c7-74ab6a70d15f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "401cd4bc-b5a4-489c-8307-1bbd9fab34b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d2e57e1-3de0-4ee8-ba3d-ec1169bb7eb0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c58f892e-d2e8-4c48-9dd7-54ed2296a0c5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75a76c69-c41b-481c-8429-5b4029e3e703",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2fd789e7-2b36-4783-b3fd-dfc418ce8261"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b8b65f6-bae7-4ee5-84d3-25901d81c308",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eac7552a-5467-48b7-941d-941d39a72359"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "24b84675-c686-41a2-849e-81faad89b3a3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "21ac0c28-5aff-4eea-b99f-2f3877938f67"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4d918671-bec2-4373-8da9-aa1cf511427c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ac29dacd-e341-4fa3-a1be-fb311c946b33"
                }
              }
            ]
          },
          {
            "id": "504a8004-6ba1-44ff-89b8-079be766d08f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f4fe1d76-450c-4844-b18f-07651222bf0f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40a0251c-bc01-44c8-87f0-c6b5f84fca0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6427daed-c12b-4084-8001-b9703cbc08b7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da745c2c-586d-45c2-b79e-36260deada0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "12ad38c0-328a-4103-9422-c8bff5f12556"
                    }
                  }
                ]
              },
              {
                "id": "3aed28e8-294a-4c40-873d-e93bc53aafa0",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "638a1ecd-64c1-4e2e-ac43-0cd5b43c6292",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "51aac327-ae70-40d4-ae4f-d638b2e9e2cd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b6ab0ed-5aa5-4ccb-b780-c80074bf24d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c9399313-cfb9-4219-bd9b-1eb5e48bc936"
                    }
                  }
                ]
              },
              {
                "id": "67ffbc12-79bb-4fc9-8942-c35f7c8ffa77",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d0dee56-123c-4443-b8ab-13924fb6f222",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2e7a17c6-a8fc-4fc5-bb36-e0738adfbba7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "810aa400-14aa-4ddb-92dd-99ba997f3d65",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b7ac8f0c-a63d-4d19-9d8f-714ae55e4fd2"
                    }
                  }
                ]
              },
              {
                "id": "98341872-7785-41fb-a2fa-5baee7ec2f33",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a215cbf3-d920-4d8a-862b-fee356c5b056",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5d4e557f-3493-423e-8b4b-3d446935d7f0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99de08cc-0da2-4d99-8552-11989e45657b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "406a417a-1ac1-4424-a082-0cf1d179e33f"
                    }
                  }
                ]
              },
              {
                "id": "a2aa85f8-db03-48be-9253-575451ce5205",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "01c9a523-0b7b-4cd6-a78b-670a2144897b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a676a030-83cf-464e-a097-c7177bc00c86"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7680adf-62b3-421a-92d6-baaf670a9af6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6cd42f6a-d99a-4c98-8f6f-2d439f625562"
                    }
                  }
                ]
              },
              {
                "id": "7d805d8a-00ec-487e-99d5-aa775b7f294a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8fa37b91-d106-48c4-855d-7fd798da02ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e41c5d27-157e-488c-96e7-4fa9d5142ef2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11b00fc5-cc33-453d-b784-a138e2c719d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9b322fda-ea88-4894-8598-3fdd5c9c0f18"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b312ee10-6382-49d5-a105-c7c56ad87b1c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eb7146ce-706d-4161-9c17-e9fbf5f7b040"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "737ccc68-c083-4371-b5d9-914840dda964",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eb120a05-7666-464b-9f35-2a8bd99319a0"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62e154fe-dd90-4138-9dac-bf7e014b901d",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a3d18d89-f664-41ca-b90b-45c4f38a6b7d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f7fdde7-26d3-4b25-8ecb-809b8a3b0be3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0bdb32b5-dfa5-462f-a366-19125c0122d7"
            }
          }
        ]
      },
      {
        "id": "10cc0757-f5ec-4d7b-a6ea-4d1968a91f71",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "523586d2-64a0-4ba3-9b87-6e1889319b34",
            "name": "Negative Testing",
            "item": [
              {
                "id": "39b63e2e-493c-4a5d-ad6a-fb3e40b8b6e4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bca43f71-a373-462a-a6d5-54bc1a1b4e2e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c79f79-0e01-4416-af2d-c3a6858106e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dede555-eea1-42d2-9747-e3c4ba644ea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c476f170-c8b3-449c-ae3b-3af2d27109f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9203d726-cf4a-4bb0-bea1-f2e428f00c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00499d0f-e433-42ca-a8c6-9271eb38cd45",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a01ed9-9325-47c9-a220-2d9051a06717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0941d2c8-1fd7-45bd-86a0-f1b5898117d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a9afbc8-db0c-4ea3-a9e8-d2404714646d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "346e6a0c-9b71-48eb-b6f9-dbd33bbd0dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f2ba7d8-0004-4923-9134-c3f42da93020",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce90fa27-4b15-46c4-a6b0-31bd7ff39302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fd3e785-6c69-4dbd-b76c-7534d4f0e68b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20443b84-10d2-4370-8f35-71ae84208723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee8728ed-a44a-4bad-a20d-1f455242cd32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8952712-b19e-476b-bdb6-87844aff7c6b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84e49f1-45a1-44f1-ba30-a57b56808cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cd695db-a279-4478-977d-c1ab021d6826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95263206-c5e9-4c65-a1e8-91dac750f141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "437abec5-7071-4708-b111-c17a4c5cff88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356efce4-8592-4221-9481-4e39f7990442",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5645ebf4-d2ea-4465-b4e0-f77a642de05a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b44bf8b6-72a6-46ba-8795-8d0b5c12916b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9f46db-1cc2-459a-b5c3-b2648f26d02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "99e14a97-1b18-4302-9ecd-20e86ad6bd9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c013ece-98b6-42bd-95bc-e9833d478a2f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd5dd88-8911-463a-add3-2c6233f3d5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f740520f-2e1a-47f4-a1ff-e5871635b60e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1371fc-2a9d-41ee-86bb-0a3e34fe356d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d6ba34e-1860-4979-9819-a7c6a0e605d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1909671-e391-48ab-90a9-946cf8f4b7df",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e029f3d-152b-47b5-9b8c-45d8ed046afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0993ed9-651b-4252-b018-37b30cde5aa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246df1b0-fc23-4ce2-a47e-237265f2c1b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef4654ab-6db8-4139-82e3-c56f91ff697a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f6b76c5-f254-413b-b4b3-056224b4c71f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cabcdd08-b630-45f7-9e13-79a509bdad7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eee6d1a-8dbc-4b92-b1fc-ecd23f870436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "409d54ce-957a-4759-a44a-30efc5453bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a2bf5d3-0889-44b1-8308-4687cd284ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c7eb02-31a1-4dd5-b3e2-7c9ab6aa243c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf12b56-9ca5-412c-9a0c-840ebc4f1500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5192aa57-53b3-489a-a908-ff8dce8ea2cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c230b217-fcf3-425f-89eb-f55235ddbce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2962847-7509-40a0-a07e-3f0d66228be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02eba9e4-d4ae-4d1a-8a59-c30378524fc2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49eddc8-556e-4661-934f-d7e4469e9085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afbbb1e4-9c14-465d-94f4-6423400cca33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b56c9dc-0ddb-4059-a314-6e341b94d5a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "20b552ab-cf29-4991-84be-4e6108444a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4f4ea5-8963-41b1-a80f-1d6fbcd585e9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f390b21-c4cc-4981-9bab-21b4b3e749a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d200aa45-ae0f-4788-82bf-24b685c5b643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7c9810-2ee8-4312-a216-56d24b744ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6e79d783-b6f1-4f15-bb97-b0988b6a3c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c8b717-5f7a-4360-aedd-1344f8ddfe6d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "145bfda4-73c8-48a1-851a-268cc1db729d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e756b44-aeda-403b-a6d2-c92dc4f294bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e86019c-5da8-413b-8381-0b1cbc09d92a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e08fb150-d321-45df-8471-a15c813096fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1808d4d-4b26-4672-8526-3e5f6b6ea2d2",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4828f7-8c8d-4959-9323-303700722ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae391b40-f4de-46af-9433-7ed755b6b9e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b1d56c-9152-4b3f-8ee9-0c952e89a1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b4efc10-1028-48ef-b52c-d328210cde7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898a5d46-e77e-4bda-b334-0414144d64ab",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3bdf8f7-3e43-40fd-8c59-2ed4ed468340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2276c2f-527c-42cd-8411-066407d173a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a306771-46f5-4701-adc1-2998184f395d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb7a4d13-05ba-4ff2-bdd5-f55ba888a05c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c2a3f0-7827-4aeb-90b1-814d5fa0082f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77af24a6-af71-4247-a85a-ab7141b2b55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6259a7b8-cd42-4e65-9821-23c61fa960d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "250cb7e4-a26a-42d1-86c4-65c4c3e46afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "43732c05-a49e-48ab-9eb2-0ca9d1df0820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db878523-c30a-4209-8f96-87180d3f5ac2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abfe8d69-027f-4a78-87d2-f50df0474de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edcdcda1-72a1-4985-8ddf-d8470d42928a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d5608d-dff8-4ab4-a9b1-0ca9e657a6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5ff5313-2b46-47e9-97d9-35e524bfb0ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90727394-d9b6-401c-8dd2-d5975c633e02",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c029cac7-159a-491f-be4a-e31219fd98ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69e941b8-5ba9-4884-b2e8-6667c78cef30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e97adb-260e-4ddd-853d-05f1c9b81142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d4dfc73-132a-44ee-a944-bb0b5f062ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd830274-9d84-431e-93c4-949c69f8348f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "940fa8a6-1b53-4919-8364-2dd25d2af453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "876ded77-086c-4270-807c-abe57413efc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2737e99f-b566-46f5-9e36-8b51c9e731df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f43982bd-75c9-4d0a-9936-993b04b59790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee0826a-c64f-4e05-844b-943b7fe3d3ea",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ef5f6d-0287-4410-9b53-ab504f456c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8903ec8-9a53-4992-ae6a-fd706102ac42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03eccb9e-d4ee-4158-9d61-9dc28eccbe03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ad4869a-bc6d-4cad-bba5-535dd45e8079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38714c68-c5d2-4f0e-ae93-11c412055023",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6991b931-d45e-4835-b0f1-bb92d0f178fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f6ae92-6ce3-4813-a91d-399654026008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8dd807e-05a2-40b3-bd8b-543baea2f6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f688aa5-db0d-4236-9cc2-5c91da053e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee042397-031e-4b44-b5f6-ab5abed0703c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8592e3f3-cc3a-4046-b2d0-2e9c08936937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e1ce348-d52a-41ab-b193-d7620eef1814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4cf14e-4032-4695-b4b8-f6478c8bf617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92e80be2-efcd-4342-a8f9-d20d27ae1838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b9dfc3-001a-44f6-97fb-449ce22f4a41",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e25f1d-dc16-4f89-bf61-31bf67a22f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c54d4c4-58a7-49d8-95a4-69b8d5c42e4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889c46b1-0c53-4bd4-b553-8c518b445cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee04166-86c2-4e01-80e9-002a838bac17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ccb5b2a-4870-4839-9115-ee61dddcd208",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a5fc6f-9378-4497-9cb9-a59df8c4f5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa02d844-3f23-4df7-b554-6743bcabd619"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4be6a88-ce70-48ca-b837-4f47b2a9cc13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4c8a11b-1959-42b5-9462-77d31bd496fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd529325-47e5-4be3-84f9-d5985cb39ac4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efae8a91-64eb-4123-8227-c57a746a83cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43d28736-c793-4aed-aa45-4ffc2b728cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c87fb83-eabf-4b95-88f3-d6e5794aa44b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "030645ad-ba56-474c-8aa3-9c2ed3128fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697c5cfe-788f-49ee-a7f3-ff9138c875b0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f17a0d36-4a6c-42d1-9662-292abc9bb092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60d377c4-3957-49e0-ba34-88e78d7f2538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ae05a10-2e3d-40e2-940e-18427f0aea8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd47f7d6-5ee2-4be9-b429-151a1239d9fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809fbd69-45b7-41b1-9874-902f9b2ef3b4",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "199b847b-08c7-4976-8299-4f65439e48c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfd43407-f21d-4bf7-bbed-14496d354962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e6be95-0341-4f75-8bdb-c2a64fd69fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "603d65d7-e24e-4310-941c-d0a5f86f1505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c2f2be-1d62-4a4b-a84d-b06f67012c36",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4507e83a-b25d-4e86-83da-548e11e1d7e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec81780d-fe8e-41d3-9078-6fd3b27ea42a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51643991-04b5-4b6f-8871-f75f601f085a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "331a52f1-1fa7-41c9-928b-a243ace958ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee38ee6-3c0d-4656-b5c0-97108c06d810",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46afe86-6041-4abc-b69c-ecb58cee7a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3025e4f1-602b-4286-9904-9c48b4a26879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e34dadf7-6ac0-4f6f-aeac-390e2ca876e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65e7e614-c7d1-47cc-a4e2-cb8a208adabc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c319ddb5-59a8-4f0c-836b-9e604227d718",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09bbdd13-8150-4273-920a-cf7b8d1aeb0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "467e6388-e5cb-4547-813a-39845a0300ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d024467b-d23b-4ea4-b223-6952bd147af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6418428e-b87c-46ed-9752-b6783f371833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2a75f4-568a-436f-8a6f-9b13fd1ddf67",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac526e15-ade3-4608-9215-ffbd8715bcfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f185f09-c2ce-443b-9ea2-6885dfec871e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24475f0b-ee25-4e72-a68c-3d51f476891b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbddb36c-babd-4fb3-9c3d-af5b60f37389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a548c05-dd91-4055-9ab1-4d8d23ef5ef9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a50d03f-8b56-4a46-8082-ce4c107601e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d99a4aa-3ee0-42d6-a879-56310bb83c84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e626ba7-55a5-4b9a-ba34-1edf0ddfbbf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb24bc49-a7c1-4c2b-9553-7ecff8baa36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cabf8e9-b6b2-42ac-89e6-bc6260a93bb4",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "145c19ba-e11a-4fae-9047-bac6c5f7a18a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00bc7cd9-bb91-4859-a16a-045bb09224cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a940b4d-3f52-438d-b528-36b0d9b8bf7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2ad2ce6-3edd-4c1a-b0da-53d5dd71c74d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "587637b7-b888-42fa-851a-53762643c0e7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "04431b74-160b-4000-b199-48c78bbc3656",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5605c644-54b2-4f95-800e-8191d9850455",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bc8f66f4-e5cb-4906-8f64-45c490a59996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c4a997-4e75-4047-af1c-52a551e11075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4dbb7253-2c45-4b89-8684-449a0674a034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b820db95-20de-451a-8e7d-c13ed3d84152",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd65e45-ebd8-4835-b44b-35fe57b37591",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0e3f1395-d81c-464f-869f-faf16977648b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d499407d-4ec2-417e-b95f-a393a853a8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24008143-fdad-4e94-ad6b-fd432e7acb29"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e08c769-27fb-42a4-b05c-547083f89c92",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d73bc095-1cb4-49f7-943b-dd3feccde23b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "344a3aca-a4ea-4467-bf39-c93823e27a27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e3963bd-06ec-405e-a4de-789d2c820c5c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce92d8fe-626b-453d-9345-0495e8da4b43",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9608c98a-cffa-4dc9-abee-3f9cea122824"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa7dbca8-02ed-4062-ba37-e631c1e708f8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f5a1dee6-fb1f-4bba-9965-8d6801c06538"
            }
          }
        ]
      },
      {
        "id": "6ddf53fd-3bf7-45ba-aec9-0ce86e801072",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "70961485-3053-479d-b248-99762c078367",
            "name": "Negative Testing",
            "item": [
              {
                "id": "741c4b30-1821-464b-adb3-bd9c6a1d2b49",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8b472cd7-65b9-40bb-a944-d26882254789",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7792fe4d-3cb9-4c14-b7ac-5712edcf7f98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdd7591b-be66-45c5-831c-10c069aaf16a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f483dd-ab9c-4205-a332-213a501b9446",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a68b0d3a-5ead-4dca-9647-49a9e3c0638c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "706d4037-270d-4174-bed8-df4db6374fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57fb3d82-2cc3-4111-bdd9-f56c9331c732",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ec142f-19eb-4556-b386-a48f4873ec8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dfb463a-7b31-4c33-8014-de32059d46cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82aba62f-85f8-4876-8aaf-922137ca6117",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1528bdd8-7118-46cf-8454-e26b9e0b457d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84298ef6-05f7-41a0-a3c2-d5c3eaa27c1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec171cc-b5cb-42d8-8490-312661b515ac",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "308ef832-b953-418e-9bad-73372594c8d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d90cc34f-3c14-49f8-8af3-d6f2fe57780a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd11876-44c8-420f-8595-679885106e9b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "899b02ac-59c3-4636-8980-a5176987c290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40a6e911-8328-40fb-8c64-6a15ac771bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d85dde40-25bd-4bb9-ad1c-bd44ee552660",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c0bbe1-00c6-4e44-91a7-1c207d6d2dda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba674b34-a084-4b09-ba73-76d011ce5b5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff6446a-1b94-4b9b-8964-e0a268734e1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13dd00cc-b399-4f08-a625-1032d2f6c7d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "229f528f-cc4f-44b2-abbf-ae3ca316826a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f73e392-92bc-4ac4-bda5-d8ccd3ab6941",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb5fbd2a-3a80-41fe-9f08-492a096bb5fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04633c2-cedc-4b5d-aeed-e0ff43da9407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9335694-02ef-4be9-abe0-f80891c26bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "129fc42c-04dc-4f16-a80b-6afb257cbd8f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f8b6dee-a66c-4747-922b-890dd0e45fb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a105610a-393a-4484-89e4-a2dc04d19b30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffeb90e2-5e18-43f3-828e-95d8570c72b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c0100fe-96c3-4929-bd86-e95939068a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e3dfa55-884b-4101-9a24-fd877ea7747d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a3d5b9-5e2c-4deb-931c-bf364fec5c85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c784b5ae-a3c6-41a4-a8b2-8c9ef7eef9ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5a3856-d7f1-45a5-af0c-fcef49c87548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c69fd084-7bee-485b-a4e2-f88cffedb6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffe3973b-2336-4a45-acce-335b5f0615f4",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11dced15-f4ce-43ef-bc5f-6690b16b2a16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05f56d7f-4aa3-4b11-bafc-bb1dc51c01fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba55a0a5-12eb-4117-9876-c20d49e35fa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b539fdd6-ed60-46c8-a016-dc3c7aeb45c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38e3eb49-3ff8-40ad-8c14-c1f6468ca093",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01dc18e9-2314-42f8-9910-9c20290abd63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29b1e353-2a33-43d8-ad87-8b7fb149076c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29593e5a-61ed-4eb7-9ed7-4886b55c0c91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31f6e45a-6782-4172-be96-c29e00cc9e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45bdbdee-f95f-49be-bfb0-16ddccccae74",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3540ed1a-aeee-45bc-a0db-ae17a711069f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cae18c02-7bd1-4f61-a088-bf97d925fa8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37db7ffc-58ec-44b4-917e-7b7b0a292f82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4164ab85-a1ef-464e-a0ad-27658319c828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b080c3-8f18-406a-aca5-2575a29a1179",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f2a566-db61-4c25-a4be-6f1cb0f39ff0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4afaa310-1155-421f-8515-71fb5b800ca7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e879f53-de78-4798-9c80-1630243ebd27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29aee5e9-c81b-4f00-9a61-95aba723cdc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542e44b5-1b07-4797-90d5-49ecb4427f54",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5c5b28-9296-4ed6-8f72-b76215fe9a20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d33d6ef-f63d-420b-8149-c8b8e0c2810d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f09d7c-709a-4bc7-89a8-c932b58e79f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e94a416f-3daa-4404-8cd9-9db6fda1ce3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755f3b4d-1b2a-49af-8fa0-32ab2f1cc376",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7d5ccc-9651-411b-b77e-7dc9202945e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eadde9e1-7b4a-419a-83cc-c9ab63bc8ff6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d47169b-b13b-4d84-b76c-29008482d68b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c66fd59f-c3c2-4b42-a47b-c45a5b57088a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f107f322-492c-48bd-a323-b813663a2a63",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eee0fbf-0c38-47be-8eb9-771211761318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9bebff9-9196-4bde-9859-c4495115c56f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8330c699-d588-4a09-8829-034ef99607dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b7173c3-4c7b-4b7d-a804-e9edfda1cf02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07da83c5-2bc6-489c-ac43-c509a681c769",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723e99f1-6fe4-4525-b91c-06d0884dbf5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc2ab09e-00e9-401f-82ef-472fd103eaf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a430c2-76e1-4554-8dfd-51829de87068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0ca306c-0cf4-4086-870d-5decabde66f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933f92ef-9a1f-4463-9562-1c92e5f947ae",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681f5715-ed90-4838-9d58-4b26abb25607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c7b390e-369d-4ad4-981c-5e3a55549376"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5969c37d-f172-45bf-8b13-281d4813d64d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2160f57a-0200-4905-becc-962944eb06c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac889242-94fc-4f80-931a-8f339443c3e9",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5304c185-e5d1-4796-a40b-04f4db29341f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc4010c4-f2bc-4298-934a-081ad411f59d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e323b49c-bc4d-4773-aa0d-5ec87f80f262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b075d8-7b01-47b7-81d8-7dfa73736143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c502bd17-352c-4439-8c43-af3d12c761ab",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd3a0e1-13a7-4211-9744-99320e09e0e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5b13f4b-25a0-406f-8f71-a0df53902ed6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8abd24f6-f444-49f6-b2eb-66dffc0a113d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b559c34-b8be-4508-8da9-47b40426e58e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebff2623-a8b3-4714-92d4-2891609f0244",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d16556-6581-46e6-83fe-a7ef348ae3f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96305ac1-4767-4311-9c68-b86e2c69fc94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06987f0-e940-43ff-9602-aff615b30680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5336e0cf-479c-4ef5-8303-344c7ffc7cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e79e69b8-f511-4b83-bdee-ec32549504d0",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fdcd348-1be0-4db5-9477-6d8a3e446c74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfafa62a-8310-4967-a7d1-2961dc72641c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24f4d13-7e0b-47de-988b-e7e5c92ff4fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50477a72-314a-42e5-845a-0897fd21ce10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29682ef2-89f1-4447-8444-2b7165891fc1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2caf2921-a367-4cd8-8808-11ee142fe7da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55d0707a-7eee-472d-a0cf-00fa0d96a6b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c968a3cb-c77c-4a85-a92a-0e0100e002e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "838e05c2-d1be-472a-9e80-68fb314e963f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4408faec-3385-4c4d-b538-9f9e97d2559e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d94dfdb-f032-429a-b81f-dbb2534640c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e7a09a9-8f8a-4cff-8d9e-498c3181c3e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dddf0a87-5747-4273-b8da-bc13aaabb422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f05b879b-0b81-47ab-ad62-ab252f3cc5a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8af749-27a3-436d-9cd3-c361ec71b8c2",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b273594a-0bb6-4040-9465-ed955d892df7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be494f05-7bb2-443d-866e-cdb3565ed435"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0468d062-087f-4884-a97d-7d7de6cbb76a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "846e7caa-fb2b-488b-9e8e-2601858df68f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db6e028-81dc-4ee6-801a-f2211c314920",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5cacd0a-a5d0-4bbf-950f-4ddd1dd35244",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1acb5e8f-ef78-4a55-8b1b-8a26180b93e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae95580-295a-4d23-b468-6e43d1335f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6a8c53a-6040-4242-9d5d-8999e7fdc691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e107ee-3e4c-424a-96f1-41659de928f0",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee55fbcc-5295-4908-aac0-c56b37ea9a19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bd9586a-5430-4eea-ac01-cb9f510f0098"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3393ab2-31d7-46b8-b7c8-bbe2ce8aa2e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9b34326-147a-4ff7-86bb-4b738e020be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7000204c-be69-434c-8f6f-89d5656f54bd",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9256b1bc-65f2-4d58-808b-7f9153963a19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a4ce9af-da77-4661-a560-8126218817bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c379b73-25d0-4070-a18f-d7655a5e2601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1e0ee17-2326-4fa3-9a86-7eead0880c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f33bc38-0791-4da1-aa49-193fb5d0c2cd",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97592ca7-3c85-467a-8a64-b1f4b78d515d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63766f9d-97a6-49e9-8ec4-7a4cfd6b25f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "499f14f3-368e-4b93-a89b-64c1f31e108c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8418207-9445-4f4c-97f8-1529685b91df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1521ee7c-024f-42e4-a28e-d627113a7ebd",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5d08aa-e47c-4b9c-8878-f3820f783b57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "493f2b27-7cf7-4eb5-beb1-853eda67a6aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "725795c9-819b-4683-b11f-15843bec7a9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f83e72cf-1e91-4a13-adc9-c3812990925d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08378bf-7277-4cae-942d-27b6bb13ff7f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34cc2d6-4f19-4edb-b310-28be4bf34d9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dd3a5b1-897d-43b1-bd07-61e3fd1ee1f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44126242-2aa2-4e05-9586-d64cc35f99fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1fe130f-ffda-4508-9676-bdc6148183c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22d39ad-135b-42d8-9b32-c8b2de58453d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0ef458-9245-4669-9217-498a76eeb8b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "457b4cca-ac42-41c4-b3bb-378ef701cb95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a35fa72-b798-4539-b7f8-fe7acafd01e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da559b4d-9c80-4a9d-abae-9ecf20eabfa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51fe95c4-c63d-4905-9ea2-a606bff0b80a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d8a2bf4-dd99-4535-83f9-b63f021fc818",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62fbc352-415c-4665-b7fd-3bef38a05691"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d07ff0-27c2-446e-bcf9-c380a8af41e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fc08433-6d64-4c83-9b03-e2503e2e652a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5603829-1b27-43ca-8dff-67f35118a643",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ff9c375-e81a-4f62-a494-107a86fc3a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f6a2a28-351e-4130-9a44-90ec1dc31c0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "266dcf97-4160-4de2-b39c-51cd7411823b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90d5a932-039e-4496-b321-c7e91e55d945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2e69ba-476b-4bdc-b196-e4fd02b3ff1f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8beb330-0418-491f-904b-937ab6cd5106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78bf07db-94ce-4a14-a9fc-18dfc40e63f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b77a89-f161-46e4-843c-1b4d1aec4afb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "954b70fa-e903-4ad5-ba4f-a9279f15f2df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "407bd833-fbef-45f9-be6b-28d0f425613e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3c5205-4bbb-4804-bc5b-69fd8fd8dede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b765d231-d974-41c9-9e2b-1be86c62ba08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee0a9dd-c966-4186-b183-39c94babf622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "640c7e43-5610-4971-9a06-24429dd0ab3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973ea565-cfad-431b-9221-c5cc360be353",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53da1b36-093e-4d8a-8aa2-aea03bde28d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e04f691f-e404-4e7b-95bc-914cb505c759"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ce6f59-86ef-4ef2-a65a-90f65e465a04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00f498fc-72ca-42fe-803b-06124ac43792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be252425-4c55-4b68-951a-6558946776e3",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e752fdf2-8570-4b37-aece-ea9885fcfcfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54b448a0-5289-4286-8279-33c976eff84e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a72f9f-aa4b-4fdf-b996-ddf2562fe5f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "793c8ecf-bd3f-4f6d-9e2b-d313df92a57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c08d3615-7ff6-4c50-aefc-e8ad841ff626",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d8694b2-f77e-4462-b18c-c5e6ccf399e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffccaaaa-fd4a-4151-86cf-5252c618b000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "404be8b6-efd6-4344-b5f0-fbac0e7ff515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afd870ed-f0c2-43ef-b798-f85ab237fc5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d20747-d076-4573-8439-4b17f39b3e47",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7782b1-4790-4156-abcc-d6cc9b781e96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3c54a01-ba86-4c88-bf53-bc711fe1b32d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73d263d-ed09-4715-84cc-fd6728914cb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74b54aec-b436-4b0a-9d6a-4c3facab77a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695f6235-e677-4209-b55b-87f2647e2f04",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73235339-fe04-44c1-99c9-353b1cd981c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc3f460e-5e04-4f9e-a436-a2f0814cd19f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de22e632-bb6c-4905-80d8-248d9eb66400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88929340-7bee-4ef6-9130-e756cd86e4a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be334a2-f49d-41fb-9344-a0211b265f61",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309e27da-c004-4344-b166-c074ad6031df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5beb8ed-fa0d-416c-86e2-85eec01926c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "154b5eed-dc64-4777-a3b5-a25f893074ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54412fd9-f75d-4390-b051-9633ead37257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983f28f4-4bcf-40d7-8e3a-8bfad30f9100",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a928510-4300-43c1-a206-7454c63fec36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4bb7153-34a7-4c36-8fe4-724a490c787e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df09b13e-6154-420b-9ffb-bb3e09f82fd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24298236-7e6c-4f7f-b2c7-ea0c4cb52f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb11432-00a6-44b7-bda9-6cbbd0318659",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4ab29f-b476-4620-9bfd-073b7adf3ee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80adcfec-d6e4-47fa-b362-b38bc319d5fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c32a67-f885-46be-ba88-c8faaee6092d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f50664e9-abca-41a9-8af6-e82d16e697ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f179233c-17cd-4d48-bb55-d4f0969295db",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46445850-cd9e-46d4-8b45-da08d9f669de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cd55f73-3279-4050-a631-9a500bde7675"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b27b33-5708-4b8b-ab58-c33d35951fb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84f8785f-345a-47db-9960-5c552f928c95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a8254d3-99a1-44ee-94ff-012cb8332f81",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac411484-0783-4c5f-81ad-1e68a6e78f52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42112597-ce8a-489e-92df-a60223ffaa84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43841db7-72f2-4127-b7f8-47bb9e22a4e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3610be63-1b1e-45fd-ac92-49bf7b188d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452e01ae-eec4-4d31-8cba-29bd24ddf465",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bad8d59-6f6e-4843-944e-97f06e901499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34cd07a1-b3c9-40da-bd0f-076ed966781e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb465ec-9b22-4ff5-a7d0-d6e7a7bc3fe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "399299df-e0b7-4056-8097-07f650f09f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb78c50-8595-49aa-9b77-ee78f72c8daf",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26baa4f4-f750-438f-a0cb-507b91fc4879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "191889c2-398f-4a10-83a5-942e4cf831d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "773143a3-74c9-4295-8111-09dac86ab76f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cad4718-9bd7-4fd7-9e02-f6ad364c8c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "447941f6-93f9-48ea-8427-e0bea380d724",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f7d79a-f95c-4785-86d6-17b4772b67be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04951700-2169-4cba-85ed-1cc903a22a2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ebbe68-4890-47a7-b332-70e8f80e9c16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d342a4a-e95f-43fa-bef0-79585c81f4e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ee86494-ac8e-45a5-9be8-223d390c44bd",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0a514b-dfb0-4e0d-9ecb-6e2a868ffa61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f15b4447-ced4-4255-94c6-ffcd5c3c20ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5edcaa90-8713-44e9-8b01-71e8df16beaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff2737e3-79e5-4121-9cee-d4c78a9b6dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9656bfc6-eb9f-48b8-a53c-5145abaff666",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085659a5-cfff-467a-997e-47ba3bddbbea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0577ae6b-d5e7-4f74-8c5b-d520e0b94e25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d64d3ceb-a813-4a9f-839a-2a3188553531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dfdbab6-6560-44d5-8086-be609f2b3bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963316f7-f137-4e45-acab-d7670ab81c23",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f87e8a-68a4-4aca-badf-6cc2cb256f22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff731d30-3fde-4501-b530-eff50ff9506d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c9cc070-6dee-45b5-8c62-7f087bc00a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80dde48e-bed3-469e-9d25-900b4d1ed482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3b2e32f-9dbe-4762-bbb6-2ce617292670",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac21cc9-552b-4a90-9124-1aa2a53b8216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eccc6e8a-d13c-48a6-bbef-eb7d0f93b5ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cec8ff8-e4c6-4951-8e1c-29895962e220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b86e7458-2426-4b62-889e-4c964a2eafaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac8e47f-f620-4fa8-87f9-f3fd04eaeafe",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31266f8b-5638-4bd0-b886-a9129b5cd805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7a819de-2dff-4a6f-9d4e-2a19fbc4e72d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a2736c-7c02-475e-a314-98f0cef7b716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "340f1950-ef20-4d9b-b7d9-1bb26ccdb890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa57562-2749-4980-85b9-6b71685a172a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e07719-a5c0-46a2-8076-7b9c9dd8d47e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe8dd941-29ea-4f82-b6e9-a86b8c50ad41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f2ffac-79e3-4522-a812-ab8f520037e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6693f15-c019-4ae5-85fd-95df2ccc00d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb51afe-93e7-48ca-9582-1845b363fd43",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a9cc34-a502-4bcb-a58c-25868ccffc77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eea13a04-0b1d-46e7-8299-65978210b4df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aba6a6c-8a4f-49af-9916-89d45a89c954",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e6dc9cb-bd07-4026-83c3-995ed6ae8127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a205fe-53c8-4ebd-a14a-d96200958c26",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded8e35d-752c-4523-b455-124f26731246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38dd53a8-143c-46fd-ad71-7b413f4e6dae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df50126d-1ceb-4504-b629-5e6a5608ef16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6908ff2-f383-4582-8003-00a2b1adf750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c205bd1a-7658-41c7-a58c-7c99ceca2083",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260eaff0-4216-45fa-beb9-dde4dfb4c752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2378a3ea-d5c0-40aa-9fd2-31ac98ab46a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1970d6-fc4b-48ed-b437-b2473cf978e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72a210db-0276-43af-843b-012e8618926a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d660a3f-ef18-45f0-b6ca-d1d83bcf21d6",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0286e634-ec2d-4587-ab7d-5c86cb13231d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39134404-cb2e-4007-b9e8-1a3c2b093dbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18d19b9-4201-4a44-bd49-55d04761423a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d376e6b-a59c-4a23-a39a-211f4b23c3a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3820a3b0-df60-47d3-8900-2244afc75da7",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc63373-a893-4a21-b393-9890b7538763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c29e0a33-50e8-4cc8-a47a-a14f84fcda4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16510c6a-e668-4649-b7fa-23a5184684c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43912f35-5845-483f-8bc5-d692ef2eda1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860d7349-1aa8-460c-8c1f-8b64533a1cc6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75a42e74-f6e8-422e-8441-5beb58d2563f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4264d8c0-4985-43ef-9c07-7802408dd7ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d4b0f4-e785-41f4-9d81-41881382c283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56c4ea17-09da-4a2b-9728-83fc5a31f174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da2dde8-667e-46ea-a9d1-558133b3e084",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e9674a-a703-4a2b-a33d-f5fd8b4cc6af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a433529-fe09-4a46-8377-ec1c6c0596c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d613cd-f778-4216-b2fc-816b3e6df350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f812957-adba-4177-b5e5-a494c48b483d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1386d99-8583-4ed4-b978-1ea165da5731",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07bdac39-2b69-4636-a650-0bbf415d5de4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b156422-e2a3-4188-bb40-781a0c683c8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "870d6796-03ff-467d-a714-2cc7c6de7b03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "214c0c22-24a0-4314-8e08-bee5e64963e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e422cc6f-d89d-48e7-800c-67ee029e1560",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988ccabd-bf7b-4d4f-aa26-c113b28daf30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73e3ed77-5a66-4111-bbb6-b64756cbd061"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec0a6ba-9b89-4c1e-8de4-2666aa4d93df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b95e30e-9808-4939-9bd9-45de2359865b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660e9232-6b7b-4675-b7b4-7baa1599a13b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e1a1c8-f214-4bb0-b461-5058a4d9892c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb58727c-4d60-4516-8fd6-9db8b176f4ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7891e7d-d376-4f1b-80e8-a7f9f9f15331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c772205c-20f3-436f-9d41-21b6fe8b5588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73eefd5-33e9-493c-8162-c90485899360",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced6a29a-6b48-47ef-a13f-f00ba887c040",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8112d7ae-d7d8-4745-b986-dc247c8df28d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b50e386-302c-4c50-979a-69610b12ffaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3901a968-a428-412e-8969-796b957d603a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7eeac43-9ebe-4b07-8cb5-d13998553988",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c71f090-0024-48ca-a4a3-e249a6c85979",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a38ca10c-7453-42df-a345-9a22acb21f83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8756a92-b446-4545-a6b9-3a04cb868bdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc5e4b9d-f883-4ed6-bbd5-a9b3f164cc0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c87cd8de-c185-4a48-a723-e692e2fe0484",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ed6710-c8e4-4236-9a89-07a811a996f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8146935-e944-4c21-82ea-dc157fd82c9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb378cbc-92fe-42be-be1b-3c01dbab4e2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee64c70a-b0cc-47c6-8125-3b921cfa5ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fcc67d6-01b0-41d0-9094-c8da585c696b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8abcf1-eff7-4605-9316-c6294ecfdfdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46c60dec-f8fd-483d-bfb4-90e83e695b74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c1f5dd-694f-424b-9b93-3fcb81364acd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f513b644-0ebe-4766-b8db-d20c3c531d9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de94423e-6531-4005-8984-7eae0a66f205",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0e0fc6-0afb-4a59-8d5f-5c45820d81ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "409a07a1-c3c4-49b3-9e61-389eeee19a93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "701e7ba9-5ca4-4e20-8c05-5c1c78543345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e26b4aa-366f-47dc-b6fb-f689883592f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d4b053-6c7f-4774-adff-32e71361b92a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92cb0055-a4ab-4c65-88fa-a462b9c06779",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "178bdc6e-2271-4c33-8c00-c123f2f9efb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4542e3-4fa2-48ae-a410-91e86566d003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7f62493-07fd-4892-8aca-814c700b7ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca3896e2-21ff-4415-a404-b35f277783dc",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd48ecc0-1881-420b-a50c-9c1aff79bfd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f1ae359-7425-429f-a462-f9920ec0ba59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b01a29-edfb-4023-a5c2-8082baa020c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35d8a59a-9a4d-4386-9f5d-6da4f6a50e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786fb50b-8739-4708-ac1d-66c1e013af79",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06abb82-06f8-4fd0-ab7e-5202a2952f70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adeaf791-7c0a-46cd-9964-e33e753ff1da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "217783a3-6a0a-4e71-ba69-67088ff1b01b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5711cc3-02b2-4fd8-a1a5-4e7ba94ccf76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2410362-5fda-4ab9-a865-dcf214c13891",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25fa5908-87f8-4f5b-b2d1-bda842952097",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7119a383-6ebc-47f6-9628-2aace3eca139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b197f96a-c27e-403b-814d-c494f807a651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56b0b4fd-6bfa-413c-99a0-1cbb76a11c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5d8512-3915-4653-b94a-1c5f484fd35c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ec646f-44f2-4d19-93ff-550b11b2aaf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6e12730-b0b5-46e0-9ca4-cef38530af69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be9efe16-721f-45aa-aade-26ec932172c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dad69e8e-e1ce-40d1-9e22-5ce05af8d40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a08d40-59c2-4d7b-9da5-55b0d4749425",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0c7a0c-b8cb-4648-b6c4-37a393733bdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b9f8328-2f18-445b-9237-c051166cb785"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ad87aa-5aa3-4faa-9ac8-2114e7a2b289",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37faad83-43b3-4fa3-a808-ea95161ad40a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b737a9-5263-439a-9846-3aed2991b224",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226e5b3c-fe8a-478b-9691-1b9a1c001140",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fdf3a00-f31c-488a-af1d-417dfc6254cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cdd5c0-afaf-4217-918b-f23a237ee918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "612d84d6-32b2-4262-9f0a-1865062a6a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76736893-9476-4d78-bdfc-98934a0308f6",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc65ed4e-fb1a-412a-bf0e-281403e8d7d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3332391e-d029-4991-b28c-50c75f9b0b87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de737ae-7da9-4827-9cb2-05b861098970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97d2d4d5-f859-41d9-9111-d86efcb43b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b481dfaa-d2d6-468e-a5e5-6d5b29484cc2",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7329b6-e0a9-4323-abd7-4fe5af567044",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80c0b014-681c-4467-8501-83ab8350d606"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da038cb1-4bf1-4a8f-adc8-62b3a2d83af2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8acbea15-719e-4ae7-93b5-22d2a556c54c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743c5ec7-f32b-4381-8541-bee9e64a5a22",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0eff1b-3f81-42cd-bfbb-58c27aa129ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8552a6f-f9c9-4b68-9963-9dfedb1ce4a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b8ede6-8b7a-4649-990d-180ac151274a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f65df904-4230-4275-83ac-c520c7782842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a92b6e0-591e-461d-89f7-3b40e2670cd6",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a2efb0-ad6f-4e85-9a5f-18b13fa4ffd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "404792a8-6bfb-471b-9f11-2912835df2bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f52d7e7-e23f-4640-a6c4-70ec2b44818f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4562cb9-2a79-4aa2-9477-df6331c39075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28ae139-b4bf-4f35-a3fe-2514cb1cd14a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac67ac1-e341-440e-b3ca-e6ed4ea159db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c669cdd-5dde-43c2-8ea9-59109fb5f6c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8b0a12-e522-433f-8d3a-ca2b8d236597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e303559e-b9f6-49ee-b6ca-67fadb0f92b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1dcf541-82ab-44cd-be27-50f71e66c24b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa17544e-a6b2-4096-8921-168c5500ea6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5099413b-077f-4bd3-b9d4-138270de3b2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "932ec8f5-c3a7-4e11-8676-715dee93bf4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4a52929-b1a5-43e0-b117-d4524325a676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0018e13-e3ac-4fb5-b877-337cfd55aaf9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb9d2dc-4c20-4e80-92ea-0e91ec48ed54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a1ea626-c9e3-455a-a8ff-4c2ae6f39eea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5fc8e31-c7b3-4b0b-878b-6e22f97401f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d7b92b6-c1dd-466b-84df-f25d635a25ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1426e8de-27f8-4153-92cd-b1c86088e2df",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2c5925-4741-49d0-b661-01660d01249a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "082d51d8-0b32-45ca-bf6e-e822cbf06b89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93eb5714-e7c4-4658-b4d0-841a8aea6f9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8354573f-50ef-4be8-8907-808149ad70c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eeb16d4-9271-42ef-9a9f-be9aca0711b6",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4418aa0c-d088-4b8e-b377-1cb4f245a918",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1430de5d-e470-4ced-b2b5-1d7d0886526b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "069e56d2-684d-4fba-9102-67d0b3a34cfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af9df02e-f55a-49a1-8dd0-d844eb1ff998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9efab4-ce11-461a-bf70-51016393d4cb",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "612735ad-beb6-4259-a312-9f840ebd31ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e078d3d5-bbd9-4e73-9899-be48e9e270e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0bd3d0d-c766-4f86-8030-64765d540480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e958893-3697-4693-ac04-d65e85c6c907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f1c705-b9c5-4754-9e42-70a2813ecc55",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9765a46e-f19f-45b6-92c4-46b20eeab536",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26850848-4433-448d-bf21-9240cf080317"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c8a85c-1193-4ee9-987d-ce96c6e51357",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b10aaea7-2e27-4828-8624-22024c7a8ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53528f6-c4fa-4da2-a38b-8247d6506c6c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55ea88e3-a4e1-4c81-926b-a14003bf2765",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a7b616c-30b4-43e4-a999-dba9c98adf46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf789d6-08e0-4575-8afb-92cdc56531f9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a872de5e-a56d-47f5-9d98-71b31e0acd4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4432162-67ef-4710-a176-6978af8e7b9e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b48e9f-ba54-403d-be8c-73e2e2a0b146",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "153d859f-d2ed-4e97-8ca4-83bf5d0ed8d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a2f444-25be-47bc-8a07-33ba459022c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b349f677-0d04-428d-a1af-e69f5b82f1bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "188647da-6a90-44e2-9f9c-c040e8a2b5b6",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "316c3605-8d48-4409-8867-91effcf94f94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50cdba29-7624-47b6-9062-fc6aaafcabf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ad90d2-c971-4916-8608-3cafbffa779c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fa0bd77-4b55-4b73-927b-aa2da91f942f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a51b614-82bd-4768-a118-55f2df4c6283",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8bd5de4-16b6-4516-b455-6c86e8f76f8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a0367cf-ace8-47a1-a996-17a717ae8a1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45dedb6d-b71e-49bf-afc1-c1b32e70acaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1d8eea4-1d36-40e3-91d1-7743a55adb5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27459084-5a94-4379-a8d8-7ee9bf513b0c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f3d064-8f22-48df-a333-e473be1b34f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a39d1cca-aee7-490a-8cc9-05158b95969a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1cee19a-35ae-48e1-a3a0-8ea236ead3a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ddc6cd6-8d81-4a42-a1c7-63acbf99d3ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e4a9d36-8874-4883-be93-795dd3a455fc",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58973c99-5682-4c82-96a2-1e97884a336b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e4672b2-df94-4d91-b267-166d559ec9dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf2c9e5b-181d-4fe7-8698-ea3bf7132b40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57fac106-0a9e-4a50-86af-2498fcccf80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0785c84-c7fc-4645-98ee-eabc58b6b70a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c6bd02-840f-4003-bd2b-aaa438f7d18b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02afcb73-a6d4-4550-8fad-2a90a303dc21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6686b7a0-44f7-45cc-acfe-2963cb12f1c1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba7dee16-ecaf-4eec-8200-d19cb8b7e43d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1cf91fb-44e3-4bb9-a599-cfdaed1b97c9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a800b02-e177-47ad-aeb4-1128d319220e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5766ffbb-a37e-44a5-849d-75e4b4912080"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "914bdc15-8d90-4b7f-ab0d-6d04773ee6a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17dc61fe-b143-4cc9-907f-73a880b03472"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ca4cd86-342d-4737-b753-71dcfaf64340",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d69d4d8d-7d99-44b8-a5c1-5adeb0638481"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e62a5985-7b7e-48c0-8e16-4984a95665fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "83d7e0cb-f1dd-4de5-a035-4aaf699fe2f9"
                    }
                  }
                ]
              },
              {
                "id": "cdcfe80f-a314-4128-996d-9e8e84286745",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c0194fef-b8c3-4358-b2cf-04400da5e926",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c0633b-336e-44f1-a678-f1375bef746c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "cd980cdf-578c-4052-bca4-cfbe733f9892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb6adcd5-02d3-463f-a465-4fe1e443ff1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "955ad65a-c902-4c86-baaf-b146e347f89c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f4c1b48-d7be-49e2-b439-0bc0cb945cb7",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ed5e11-85a7-426f-b42f-28b01309fce0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6de9bda7-74fc-4c73-a2e7-a79224ca2cb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4278b89c-1f8e-4d05-b373-1ebb0a9af396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b0cf152-1f5a-46f5-bf0f-5ddad4ad55bd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6231062c-d06c-4dc1-9279-35488679d638",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "22194ecb-ab1e-4bf6-822d-8d313aeb1c70"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "68d34d1d-4506-4673-a0ba-aae24be695a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18b5999c-d9e4-4091-9300-79f80a4c0680"
                    }
                  }
                ]
              },
              {
                "id": "49cbbffe-53ea-49b9-866a-c55351560de7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "086d5445-ece5-4bef-a599-2c179c27db55",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c8c2c76-55d6-428f-bb49-c8b563c7e224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "8f2ec159-5666-4247-b18a-5457d8200e15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb20e562-9d3a-474f-ae84-be509966cefd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98e168ec-9a6d-4bb6-8a00-d1216b62a0ad"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0d4ab464-192d-481f-a438-7940862d275f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6e8dcde3-d166-44a4-b9ac-e11fb5db8daa",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "57325cf7-0a69-4537-a629-872a9b20d2a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "21f5132c-2375-425c-b8aa-69d8d175046e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0b3f7f8-017d-441b-b053-78b43a2c1f89",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5654f49-3739-4360-a03b-c7c66bbaca9e"
                    }
                  }
                ]
              },
              {
                "id": "93d0ba12-2b9d-4515-8bf3-1fbd9704956b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a61581f-48ce-4e8a-b040-5339af457674",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "404a20bf-f13b-406c-ad07-77dbe775de6e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5ef27a0-a985-476a-a945-a0b2bb5219a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87ede7d4-f73e-47cf-a99d-49c8f7a88453"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "db0fa51a-4042-4cb1-94d6-d1484ebe74ab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7c400dd5-62e7-4d4e-aa80-cb66096ad317"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2dc2276d-a020-4ec2-8eb9-9b9a999b287c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aa63636d-9721-4dd7-8329-af9ab9340f11"
            }
          }
        ]
      },
      {
        "id": "12fae4a8-bf73-4f1f-9301-89a16c417b57",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "af87da82-4c17-4def-ade9-a0c0e112d696",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bc24aa30-c129-4a4a-8d9a-e2d63a929238",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "323ab108-a5a1-4ca7-9641-57eacc6fbb25",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d935f6c-39d4-4c54-969a-1c1a23d7e38e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3ac0e27c-bfe9-4df0-b211-cf5928630a46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da891ec0-6e1f-4d9e-86d7-95c46d3d7600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "deed0c35-f781-4164-a782-50250fa1d844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d46c4e11-7a2c-4498-bd0f-02f7e9eb0af4",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c84af2c-bcf8-41d7-a8bd-a630f1cec512",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "812aaf65-8a0b-410a-96a0-cd30714b4d1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb6866b-e07b-49b0-8434-e92ac580207d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9960eaef-9d09-4336-ac17-b903f6ea8291"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d0caf49-7531-419a-b699-f021ee5d77c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11ca2969-06fa-44aa-b84c-a28d0796434e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aaf19321-4e21-4229-8e6f-476fcb251260",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4513ce35-fe57-4e9a-84fc-45dfba859f96"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dcf02272-e024-4808-b4fd-51edf13be759",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e9c781d7-d226-41f6-a6fb-3e9f9c393f08"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6cbba5ba-930a-4411-a1d1-0e5ffc23ae6c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "392a89fb-c44f-4822-91ac-07d85a8a0bcb"
            }
          }
        ]
      },
      {
        "id": "9cef8782-9014-43e6-8476-b89bc3699ad2",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "06ffe5da-7e6c-4c09-b6e1-7edad420c70a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "02a29a22-f599-49d4-a7d5-bc6129e818bf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1d2f67cf-050e-4d24-af95-7a583768ff90",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc67ce52-d9d5-44cd-bf2c-b0e7e8169afa",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4bb85b6-afd9-41d2-a554-8489f99d8746"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0c72ed-22da-4992-a7f3-7981cd421af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b9136745-c8f3-4ffe-a833-d469dec218d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717fcd7d-dfb9-497f-b528-71724f5a51da",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a1839c-5f07-4502-b638-340adf50fb06",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b9393541-52e8-48f2-b109-85e071f54030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8679ea-d158-4c05-b255-ef3c536612ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a08fce34-06af-4cf1-8ced-6730675e0d41"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ac88a15-c538-4343-bd0c-96100cdaa029",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00625b08-c3b6-4b39-b718-954835903ea9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c20cf33a-f469-4854-962e-c4cf787b0bda",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "707511b1-bc9d-4e77-9b27-93b097bc3337"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1a1a2c71-d39b-41c6-aa0f-412b94959558",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0e2ab4cf-c051-4a0c-835e-1dfcb0102866"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a99a7ff7-5a4e-4863-af9d-ba28ee9c5d4e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a58ef5a2-35c7-4fe4-acea-40b0899f677e"
            }
          }
        ]
      },
      {
        "id": "a838e49c-7c1c-4658-9ac0-ce8cd935406a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2344d032-fbb4-4fb7-b64c-ad91c398bbf8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "41309546-0f24-4058-a77c-93cd79c9f199",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "80e2aece-06bb-4f77-adf6-302f390ce888",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca3cfee-bc8c-4e65-8d0a-a77471bb02e4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9bbc8e66-5bf4-4b0f-a0d1-4080e8340fe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66f54eb-5499-416a-b97c-2fef00e1616c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5304d3f5-2e00-41a9-8923-7b42e17aba76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f53a51-ab83-4287-ab29-17233d49e0f7",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f56890f-2984-4066-9f0b-5aadaffe8477",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "04e05ae0-477c-4f8d-9d54-3d350fdb02a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "374fac9b-8bf1-4f2a-b87f-2d7938ef996e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa8894cf-2874-463b-a0f0-ad8e83dc7477"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9cf9d166-f953-44f2-aeae-b0afb8335299",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eded86d8-0f5d-463b-9e35-a62be2ccc448"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed62262f-2db1-4408-a20c-6b17fae74829",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6032f14-191e-4524-ad30-2ad14b5f57b4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0b1e66c-43b6-43d8-a76e-a71216443105",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1424fd55-0c01-4cae-8499-e389c2934a91"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "432cd601-2342-4b34-b476-f08238a5eabe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "22ea4704-0a3c-4bfc-b507-578cb8b22888"
            }
          }
        ]
      },
      {
        "id": "1f028cc9-f801-4350-8361-53da21629398",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81d3bafd-b9cf-4607-82d2-fe5ae472af44",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d15f6056-9ba7-4b15-89a4-602a9bb632a7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4fc7d197-ad6d-46f8-89d7-3e080573842d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eb3eb257-21e4-479d-afcc-acb73b143293",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4bced30e-8506-4dac-a770-c87a78883125",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 239.1423076923078,
      "responseMin": 14,
      "responseMax": 4707,
      "responseSd": 691.3682858445247,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1680136725427,
      "completed": 1680136798264
    },
    "executions": [
      {
        "id": "d10a9463-01a7-4fea-ae3c-6ca699c49c92",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "382ecd72-3e9a-4543-823c-90c91aee8177",
          "httpRequestId": "34d12c46-5f54-4080-91e3-cfe471a8ae22"
        },
        "item": {
          "id": "d10a9463-01a7-4fea-ae3c-6ca699c49c92",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "908e09c8-c583-448a-a439-1a868cf63543",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 0
        }
      },
      {
        "id": "7aef6933-64ba-440a-9049-61db22f45000",
        "cursor": {
          "ref": "a5410313-e8a8-4300-8f06-c117756875d3",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6999ddb9-a92b-4898-96d1-eaf7fde82bcb"
        },
        "item": {
          "id": "7aef6933-64ba-440a-9049-61db22f45000",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ba85454a-4ce3-46d2-bc6a-a22f18054b00",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 0
        }
      },
      {
        "id": "cf39f310-43c0-41f3-851b-81668a4e05c7",
        "cursor": {
          "ref": "95c2f363-81ff-4cf0-b957-3ebfae635bed",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d7974919-71a7-4cce-a82b-4efcd0c4907c"
        },
        "item": {
          "id": "cf39f310-43c0-41f3-851b-81668a4e05c7",
          "name": "did_json"
        },
        "response": {
          "id": "c98f9038-27e1-40bc-ac6e-462e47d4db60",
          "status": "OK",
          "code": 200,
          "responseTime": 213,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7200a060-b0d2-4296-9733-2aefe8eba828",
        "cursor": {
          "ref": "e1634f57-a3ec-44d7-abcb-c8aa451cdb6b",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ed68bbcd-a2cf-4ead-92c4-f9e41403dbec"
        },
        "item": {
          "id": "7200a060-b0d2-4296-9733-2aefe8eba828",
          "name": "did:invalid"
        },
        "response": {
          "id": "ee805b82-9ebe-4cbd-a6bf-579872ef9890",
          "status": "Not Found",
          "code": 404,
          "responseTime": 975,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "7200a060-b0d2-4296-9733-2aefe8eba828",
        "cursor": {
          "ref": "e1634f57-a3ec-44d7-abcb-c8aa451cdb6b",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ed68bbcd-a2cf-4ead-92c4-f9e41403dbec"
        },
        "item": {
          "id": "7200a060-b0d2-4296-9733-2aefe8eba828",
          "name": "did:invalid"
        },
        "response": {
          "id": "ee805b82-9ebe-4cbd-a6bf-579872ef9890",
          "status": "Not Found",
          "code": 404,
          "responseTime": 975,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e88951c0-b06c-432d-a1aa-963f71e5db2b",
        "cursor": {
          "ref": "dcee6fb1-7852-49f5-bf98-6e2a0eab6f2b",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9fd4e169-5abe-4fcd-8a31-59a9fec925b8"
        },
        "item": {
          "id": "e88951c0-b06c-432d-a1aa-963f71e5db2b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d2273d7b-8933-4c31-9567-1fc0287f4ddf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 24,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9187eb9-90f3-42e0-8e24-2a90b731f936",
        "cursor": {
          "ref": "1cb6bb26-93dd-4c4f-96db-3adb0e8c8c96",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "be988402-3d42-4db4-bf68-dca25011e494"
        },
        "item": {
          "id": "d9187eb9-90f3-42e0-8e24-2a90b731f936",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "87c37795-8ee1-4bc2-9592-22c57a7e4321",
          "status": "Not Found",
          "code": 404,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "298c53a5-496c-4017-a7a9-e36541848ab1",
        "cursor": {
          "ref": "e95fe884-869a-482b-b68b-89f3734687ec",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "76816189-7e5a-4dfa-8957-a2df7ffb8216"
        },
        "item": {
          "id": "298c53a5-496c-4017-a7a9-e36541848ab1",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "846e7e12-77a5-40e8-bfcf-c3f59b622065",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "d2d337be-87fd-4924-abb7-74ad3eccb472",
        "cursor": {
          "ref": "b4d86eb9-d9c0-4475-b43b-0764447becad",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "360dea0f-8d61-4310-a62c-8a8afb3edaaf"
        },
        "item": {
          "id": "d2d337be-87fd-4924-abb7-74ad3eccb472",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6e8c7360-a050-4528-82a8-21ff069b681a",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d2d337be-87fd-4924-abb7-74ad3eccb472",
        "cursor": {
          "ref": "b4d86eb9-d9c0-4475-b43b-0764447becad",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "360dea0f-8d61-4310-a62c-8a8afb3edaaf"
        },
        "item": {
          "id": "d2d337be-87fd-4924-abb7-74ad3eccb472",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6e8c7360-a050-4528-82a8-21ff069b681a",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "c959bc63-470d-47ae-a16d-5a977c5cc543",
        "cursor": {
          "ref": "97c1f090-2084-4e7b-9dd4-ad22b0c91a54",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b93997af-4fb6-426d-a385-b14108677e86"
        },
        "item": {
          "id": "c959bc63-470d-47ae-a16d-5a977c5cc543",
          "name": "identifiers"
        },
        "response": {
          "id": "0cb2b9be-b950-4f98-a4a5-af9964267cd6",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa65064-8541-45bf-9297-210d1683ab53",
        "cursor": {
          "ref": "b8342253-7acd-4bc7-b1d7-ac687bc522f4",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c8ef754c-0cc4-429c-a428-dbf226558636"
        },
        "item": {
          "id": "1aa65064-8541-45bf-9297-210d1683ab53",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "93cbae59-4db5-43a4-9b8a-8e6272e8c660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa65064-8541-45bf-9297-210d1683ab53",
        "cursor": {
          "ref": "b8342253-7acd-4bc7-b1d7-ac687bc522f4",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c8ef754c-0cc4-429c-a428-dbf226558636"
        },
        "item": {
          "id": "1aa65064-8541-45bf-9297-210d1683ab53",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "93cbae59-4db5-43a4-9b8a-8e6272e8c660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa9b535-a5bc-4ac5-9313-71b079f81db5",
        "cursor": {
          "ref": "c344ebd9-f5e7-48bc-8c65-1b95cc1e11e4",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f8b941ae-ad42-4a58-bca8-d29346c24b22"
        },
        "item": {
          "id": "eaa9b535-a5bc-4ac5-9313-71b079f81db5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b3924cbd-9a92-4304-b7a4-265c7d992151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b011da-af0a-4f70-8476-5e20928d8ce8",
        "cursor": {
          "ref": "a3e293e4-a0be-4ee7-8e6e-579770241cba",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "da566813-a36b-4a5a-837d-890e249aceff"
        },
        "item": {
          "id": "46b011da-af0a-4f70-8476-5e20928d8ce8",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "71e3bb72-11e1-4cb3-8060-508127902471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02cebe8f-fdb9-4505-87df-a4b6bc620e2b",
        "cursor": {
          "ref": "10f8bd1c-8af4-4a23-890f-81b842f77ebb",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "184b64d8-63d1-4319-8c26-6407c5f7ebe0"
        },
        "item": {
          "id": "02cebe8f-fdb9-4505-87df-a4b6bc620e2b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "8e513c9a-575f-4149-a50d-173bcfb7f17c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abca9933-45be-4bb7-bfc8-18b00f99df9d",
        "cursor": {
          "ref": "2e6f6725-04e2-4dc6-864b-a880a6d8821d",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6abec5ad-9943-4145-aaa7-9bf2bb5df298"
        },
        "item": {
          "id": "abca9933-45be-4bb7-bfc8-18b00f99df9d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6aca29d1-ba09-42fc-9e1f-14b2c0da4e01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7453381f-eebd-4632-bf72-4df8c85fb1c3",
        "cursor": {
          "ref": "74d72189-d163-4fe2-8d56-0969da5a303f",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "23793c33-7271-44bc-9eff-4c4a423e4c21"
        },
        "item": {
          "id": "7453381f-eebd-4632-bf72-4df8c85fb1c3",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9f04d87a-3a2b-4dac-83b1-f5ec7322a126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77b7b801-0ee2-4b5c-ae8b-71414fbcbee2",
        "cursor": {
          "ref": "a477496a-88a0-492d-8b50-391513c4f313",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a9f546cc-ca66-4733-a4e9-90c81fde8e00"
        },
        "item": {
          "id": "77b7b801-0ee2-4b5c-ae8b-71414fbcbee2",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "02276699-438a-4954-a9d6-72526e1574fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9affb6a0-2483-4b72-8bdc-cf06502dc144",
        "cursor": {
          "ref": "329d595c-c0a8-4c52-9eb4-f2ac95103d06",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1ef2e535-6574-49ca-a209-592c8e87d28a"
        },
        "item": {
          "id": "9affb6a0-2483-4b72-8bdc-cf06502dc144",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "2b64129b-2c39-44eb-b956-0c2793fe6fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cd14cfc-955d-494d-9fa5-3a73c63cc596",
        "cursor": {
          "ref": "434d9f25-e13b-44b8-8acb-0461d9b2a9a0",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1e90388a-7318-4f16-bf8e-93b1377a3335"
        },
        "item": {
          "id": "0cd14cfc-955d-494d-9fa5-3a73c63cc596",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4c23446e-a7f3-4a2f-8bfe-5527f73f9e46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbeaa5c6-0097-4103-9693-6689f5ddad8d",
        "cursor": {
          "ref": "8eb2eea6-b816-4c07-ad0d-9daafdeae440",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "21390e7d-4a83-4da2-8c49-f5d0a62a6386"
        },
        "item": {
          "id": "dbeaa5c6-0097-4103-9693-6689f5ddad8d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4cdc2dc8-f15c-4792-825a-a15a82ad4abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "199a985d-abf7-4cd8-bc6d-505139e385c9",
        "cursor": {
          "ref": "68e5c5d7-d406-4a32-b93b-244369d0e0e6",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b7bf9546-4d50-4f35-86e1-e99a8c933e24"
        },
        "item": {
          "id": "199a985d-abf7-4cd8-bc6d-505139e385c9",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a6a699ea-d8b0-4c44-a7a6-4c773f784ac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09846f12-c9ac-44cd-8e5c-5a947f738d00",
        "cursor": {
          "ref": "3d351891-8b9f-43c2-af93-70bd1e1b5ef1",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "56db3f18-e01f-4087-974d-8eda0d3eb383"
        },
        "item": {
          "id": "09846f12-c9ac-44cd-8e5c-5a947f738d00",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "daf0b210-5c2a-4436-b9a8-640fa34bf75d",
          "status": "Created",
          "code": 201,
          "responseTime": 1829,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "f324431f-b5c8-4dbd-8e09-1b74596ae26b",
        "cursor": {
          "ref": "b3772f33-d227-4f9d-b094-b2a2bc983d30",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8fabb792-c001-4fab-ae84-42185e3b5874"
        },
        "item": {
          "id": "f324431f-b5c8-4dbd-8e09-1b74596ae26b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a7c63f72-cebd-4687-8094-1c82cdf8999e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d3b7cd-3836-412e-9271-0ab31ec747ad",
        "cursor": {
          "ref": "12261422-7241-4827-95c3-b01b19b60ab8",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8e1c562a-2777-4540-9d25-62233b6f7d87"
        },
        "item": {
          "id": "89d3b7cd-3836-412e-9271-0ab31ec747ad",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0ce29625-165e-4f5d-9bb2-d199cbde2c1f",
          "status": "Created",
          "code": 201,
          "responseTime": 4707,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "00d37e09-8674-44bd-bfa5-d7ef04d04b56",
        "cursor": {
          "ref": "d26bb0a1-f561-48f8-b998-77651be88da1",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5d88df74-b23a-4f60-97a7-88f8aaa7eaff"
        },
        "item": {
          "id": "00d37e09-8674-44bd-bfa5-d7ef04d04b56",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "974462ec-51d0-4356-bcac-08bc0c184c8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d56d1b-aecc-40ff-83a7-b48fcfce0c5c",
        "cursor": {
          "ref": "9f57fd84-ce62-4382-9ff4-81e0f739f210",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "49d2eaa4-710a-424a-a09f-f9062b0660df"
        },
        "item": {
          "id": "49d56d1b-aecc-40ff-83a7-b48fcfce0c5c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9429b5aa-54dc-4948-a7c6-6bd5c3e6681c",
          "status": "Created",
          "code": 201,
          "responseTime": 3297,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "13433d67-26bb-416d-ad2e-561318025969",
        "cursor": {
          "ref": "0e8b9b54-26c0-4288-9650-1db15a57e5d5",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "25664124-eeda-4628-8eac-ac6caba057ec"
        },
        "item": {
          "id": "13433d67-26bb-416d-ad2e-561318025969",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c8538e08-b52c-4a8b-839f-afe8db37364c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b683fd13-fae6-4d92-8336-c8f090cb81ac",
        "cursor": {
          "ref": "09bbeec7-cfce-4610-84d4-828af2a9eef9",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7df5fca2-7c85-4382-bac8-85cafdd6d497"
        },
        "item": {
          "id": "b683fd13-fae6-4d92-8336-c8f090cb81ac",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "04ec00d7-a723-4275-a045-c8fce5f5b021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cbf06ec-cfbb-4bec-ad52-04a13bf560a4",
        "cursor": {
          "ref": "cb78df4e-1f62-4dbe-ba0c-1ee83ca5f771",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2a0d33c9-4732-4a44-8cf0-72ec591963ab"
        },
        "item": {
          "id": "9cbf06ec-cfbb-4bec-ad52-04a13bf560a4",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "59e3f499-1bdc-4d15-bdc0-f9dab868f341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3358770-00a6-4341-9bd3-2daf2e6d2696",
        "cursor": {
          "ref": "2e6bb196-86ca-49b7-b48c-032e767c1511",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3457a9c8-6f39-4788-9958-1eea87077724"
        },
        "item": {
          "id": "e3358770-00a6-4341-9bd3-2daf2e6d2696",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "41f1f1a7-4f6b-45d9-aada-cf30a01f5049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6b5401-5267-45a7-9fb5-16935d08cb2f",
        "cursor": {
          "ref": "72a9e03d-e660-4fb1-b396-899b50e86a15",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e80e6e31-6917-48b7-88a4-a8d87c15570a"
        },
        "item": {
          "id": "9b6b5401-5267-45a7-9fb5-16935d08cb2f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "bd5af342-b7af-4ddd-bd48-79ed5479eaea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef10a5e-9132-4fb2-ae1f-cf46e60714af",
        "cursor": {
          "ref": "9c69bb03-9c5e-4458-87c6-c53b590dd09b",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b240504f-5901-473a-adf4-2c4260b28d5c"
        },
        "item": {
          "id": "0ef10a5e-9132-4fb2-ae1f-cf46e60714af",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ad67e438-eedc-4e84-9788-1cd7c9d12126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5984174b-c1c8-495e-85a0-0acaacf103bb",
        "cursor": {
          "ref": "d28a2fde-9997-4444-9861-81d0ece22bc7",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b77ebf02-98d0-4706-b01c-13542acca017"
        },
        "item": {
          "id": "5984174b-c1c8-495e-85a0-0acaacf103bb",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ef86fbe8-321b-4e94-9069-bb1a87cecb8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d9d8807-9c7c-4331-b919-da210f0ea87f",
        "cursor": {
          "ref": "ebb4e9a5-4974-4d51-abf7-b77f872c0664",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3aed4bec-1e34-45d3-bb76-00fddac3affb"
        },
        "item": {
          "id": "9d9d8807-9c7c-4331-b919-da210f0ea87f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c4391758-7215-4e80-8578-905fa81b7f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb66c1d-7eb8-4df7-932b-fb8e739f992f",
        "cursor": {
          "ref": "ab5459f8-1406-4022-a04c-929b0b12aa55",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "80df864d-c9e5-4b91-874d-8b5c36788477"
        },
        "item": {
          "id": "adb66c1d-7eb8-4df7-932b-fb8e739f992f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c1c53032-604a-4cb0-b2d7-025819483a54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f9c571-057e-4291-8ea6-dbaa09d46c8e",
        "cursor": {
          "ref": "e689a4da-a83e-4bc3-9237-8d3d2745e310",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "cab71655-2c3e-4bab-9eeb-2449878ecc97"
        },
        "item": {
          "id": "94f9c571-057e-4291-8ea6-dbaa09d46c8e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "64431e2e-05b9-410a-afe0-7e2b1567578c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf1e014-0c75-4c4f-9df5-b798d02a38f8",
        "cursor": {
          "ref": "7cc3a2f8-366c-4347-98eb-1e337cfe7d71",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "15df933b-2448-456b-83be-ef35f22fc0b9"
        },
        "item": {
          "id": "9cf1e014-0c75-4c4f-9df5-b798d02a38f8",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6bdf5867-dcfb-4e09-b15c-8cbd04f63095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4781dd35-2a66-4571-aaea-acb1b8ca3735",
        "cursor": {
          "ref": "223892ea-6fb4-4ff6-b563-27b49648351c",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "20bb3f45-0752-4bbd-9b09-5b3769b9866e"
        },
        "item": {
          "id": "4781dd35-2a66-4571-aaea-acb1b8ca3735",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1f247e92-fa36-462d-b632-956b5e96d8f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e466b5-ad87-425f-be4f-0d2952b39bcf",
        "cursor": {
          "ref": "68db2095-59b9-45be-b115-aef287a49e9f",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8c7bc498-5f93-4db0-b8ef-67821d3661c5"
        },
        "item": {
          "id": "02e466b5-ad87-425f-be4f-0d2952b39bcf",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "003174b7-7290-4c04-93fc-5241c93ddf24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "838fa33a-ada1-420c-a10c-c41483fdd3e8",
        "cursor": {
          "ref": "0637458e-15aa-4f68-8676-8b8784e14a8c",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "460dc0f5-f56d-4706-b912-74b23e2974f3"
        },
        "item": {
          "id": "838fa33a-ada1-420c-a10c-c41483fdd3e8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b6058e9d-292f-4e4e-acb5-8cec4719e8ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f5bd8e-a747-4290-863e-2583dea33d50",
        "cursor": {
          "ref": "8136bde7-c335-466d-8333-f02e8767832e",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4a87a134-e253-41cc-b962-11c9675de694"
        },
        "item": {
          "id": "f1f5bd8e-a747-4290-863e-2583dea33d50",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "254ad61c-b572-480f-a030-9e3dd8a015ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "525208d5-3bdd-4e7c-a3b2-d7c7b8205605",
        "cursor": {
          "ref": "7922eb77-a1bf-4d0f-b188-72f515cf6772",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2828f701-1df5-4685-ac7c-d3dab35bdd32"
        },
        "item": {
          "id": "525208d5-3bdd-4e7c-a3b2-d7c7b8205605",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a8734f79-4b83-40f0-9be7-906fe48e91a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2fb627d-b5ea-4280-b2c5-4efc9d5b1431",
        "cursor": {
          "ref": "ff89aa3d-a9f3-44e9-9414-eda3ccfb6ed0",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e8d048fb-885f-4294-b280-539af65e01e4"
        },
        "item": {
          "id": "a2fb627d-b5ea-4280-b2c5-4efc9d5b1431",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7a0a5bdf-f5a1-42cc-bc1f-9bca3f3c93ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f6ac99-91eb-4cd4-89fc-56e3fe9e8e26",
        "cursor": {
          "ref": "9da13521-1bf8-464f-84d5-b3d3c3339fb6",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b3b35480-bfe2-4355-818f-5b4e1f10346c"
        },
        "item": {
          "id": "d7f6ac99-91eb-4cd4-89fc-56e3fe9e8e26",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9569e218-c6b4-46bf-982a-bc4c12dfd740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1989c999-3934-4ac2-b7d7-c7f7af6c03c4",
        "cursor": {
          "ref": "39089fe3-6088-4f9d-8c9c-bfa5fd3a4ac6",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b0591844-1372-4a0c-be76-400e6c0667d3"
        },
        "item": {
          "id": "1989c999-3934-4ac2-b7d7-c7f7af6c03c4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8d8ee458-8cfd-4d67-9eee-d05a78375fc6",
          "status": "Created",
          "code": 201,
          "responseTime": 3205,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "18f03ea4-27a3-4aa5-b725-6e4455715acd",
        "cursor": {
          "ref": "c5d3feec-1422-46ed-8af4-238c937b36e4",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "53b87850-8263-4f5c-9eff-e441e82ce750"
        },
        "item": {
          "id": "18f03ea4-27a3-4aa5-b725-6e4455715acd",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1afc7146-d336-4587-8954-4761badd2475",
          "status": "Created",
          "code": 201,
          "responseTime": 2223,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f332ebb9-71ca-4681-af1a-a8e04cf196b9",
        "cursor": {
          "ref": "630d4085-f308-49a9-82fb-c6abd8134af8",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f418d73e-19ae-4eb1-b647-c22b48c0dc03"
        },
        "item": {
          "id": "f332ebb9-71ca-4681-af1a-a8e04cf196b9",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "49b9f80d-3068-4399-9807-662bf6f7e98f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7ae89d3-9246-47c6-b6b4-9820eb00f1fc",
        "cursor": {
          "ref": "43c6ce23-a2b2-4564-8327-d515789b5bb2",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "788a9b05-8e4a-4658-b0d3-53d328d2a8ae"
        },
        "item": {
          "id": "d7ae89d3-9246-47c6-b6b4-9820eb00f1fc",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5e72fb4e-6820-453c-82e3-bc0cfb1c4018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af7fda4-d88f-49bc-920c-4398b9f948f9",
        "cursor": {
          "ref": "69caba3a-3a2a-4e19-8e20-ea652c99e832",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f1366fe9-7332-4860-889d-4d429b579c2a"
        },
        "item": {
          "id": "8af7fda4-d88f-49bc-920c-4398b9f948f9",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3f0d647d-9edf-4d36-8491-5a2d73997d48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "416e7e13-a0c0-45f8-94f8-b8c27b0756f9",
        "cursor": {
          "ref": "09a9a49c-99df-4c27-8ee7-534c5ba2f126",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f841f252-1336-4ef0-b865-9438915d6522"
        },
        "item": {
          "id": "416e7e13-a0c0-45f8-94f8-b8c27b0756f9",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "73d3bdea-12dc-4b43-a37c-6e08907db66d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe4b7580-00ca-45dd-9263-d704539bf7d8",
        "cursor": {
          "ref": "eb31455a-8531-4316-bde3-2e6e2bb770fb",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "741b2cc1-39b3-4f0d-9342-621517ec582b"
        },
        "item": {
          "id": "fe4b7580-00ca-45dd-9263-d704539bf7d8",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "158b3cc3-2060-4c41-9140-b091156a0da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e241a1-80a6-467e-83fa-937c458479aa",
        "cursor": {
          "ref": "3bcb3bac-09e2-4d13-8208-b216cc5dfdc8",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "dfd09157-f783-4587-b738-208137efaf3f"
        },
        "item": {
          "id": "b7e241a1-80a6-467e-83fa-937c458479aa",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "811cefd0-4fd6-4ff4-9b88-9d054d489e57",
          "status": "Created",
          "code": 201,
          "responseTime": 2168,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "808afc6e-5ac8-4eea-a79a-bc7551c35741",
        "cursor": {
          "ref": "9423a9b9-d06e-4e22-b8f2-6d95b1998b2e",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "7bb1bd54-2281-4f1c-9645-cbda93518522"
        },
        "item": {
          "id": "808afc6e-5ac8-4eea-a79a-bc7551c35741",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "eeae4b53-5499-4f3c-963e-f6552d16dc27",
          "status": "Created",
          "code": 201,
          "responseTime": 2353,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "e53cc39f-260b-4796-8d35-a53b277c29a9",
        "cursor": {
          "ref": "2bbd1291-8bea-434f-8686-5e617759060b",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a5364ec7-f5c6-4031-920f-367cd2509a6e"
        },
        "item": {
          "id": "e53cc39f-260b-4796-8d35-a53b277c29a9",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e6c9a617-0c8e-49f1-9427-4a9affa6c952",
          "status": "Created",
          "code": 201,
          "responseTime": 2445,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "73589b96-ba69-48e5-abe7-1c802d149362",
        "cursor": {
          "ref": "c8521b94-9dc1-4ce4-9b90-107f27567974",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1ed2183a-5826-4545-9683-201b0390eefb"
        },
        "item": {
          "id": "73589b96-ba69-48e5-abe7-1c802d149362",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "0aaaf47d-7ac4-40ca-8f00-700468626dba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d457f6c4-db94-4f21-b770-bf005fbc4921",
        "cursor": {
          "ref": "59c2e771-3909-4b7d-a877-80d968be7c4b",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5596e72c-2446-4f3d-b3c2-a0b1bb09f30d"
        },
        "item": {
          "id": "d457f6c4-db94-4f21-b770-bf005fbc4921",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "bdd7d2d9-9657-4049-b66f-68d5874dae8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ab7c55-a42c-43f4-b83e-deb29be3b94d",
        "cursor": {
          "ref": "8e2b96e5-3410-4354-a612-b47d42096597",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4022e297-fa67-431d-a1b6-0da79529a37e"
        },
        "item": {
          "id": "a9ab7c55-a42c-43f4-b83e-deb29be3b94d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1c1247ad-0f38-4bb2-b1a5-430d018488ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1caa2dab-95cb-40f6-8f3a-8f7f39ab7390",
        "cursor": {
          "ref": "6eb2e917-b973-4c18-bdf9-707109a73615",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "9ffb1ec4-8cec-4ed4-886e-46700323d565"
        },
        "item": {
          "id": "1caa2dab-95cb-40f6-8f3a-8f7f39ab7390",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e37718c4-45a8-49c5-bb58-06f1cbd61c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf4895b4-30b7-4724-a598-840f6d18c2c4",
        "cursor": {
          "ref": "29a87295-9e5e-4cfd-bc7d-7c3536ebd4c0",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "253464e3-9e81-4357-b6cf-7e915c09ff4c"
        },
        "item": {
          "id": "cf4895b4-30b7-4724-a598-840f6d18c2c4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "279bb4ba-995d-470d-9837-c0f0213e3117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a442023c-235b-44f5-bbfe-41318ccc91cd",
        "cursor": {
          "ref": "7aa24197-589c-4370-bc44-ee1fb3633d4c",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f15d6eb7-e399-4023-a8e6-9dfab1935bec"
        },
        "item": {
          "id": "a442023c-235b-44f5-bbfe-41318ccc91cd",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "70d1715b-19c7-4288-b9e5-32afb679de0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a1e1b5-a01f-4e7b-955c-1e24ea070c6b",
        "cursor": {
          "ref": "c3495173-8bbf-463e-a779-c030a12e47fb",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e0a7819b-7549-4a1a-8782-98afebbc3303"
        },
        "item": {
          "id": "d2a1e1b5-a01f-4e7b-955c-1e24ea070c6b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "8179f3cb-3ed4-4323-9ad8-1ebe20abf888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34550d10-1afd-4527-97b5-29d2d9257a06",
        "cursor": {
          "ref": "de77a1f6-7fa4-48a3-81dd-6b03e6b3aed9",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e3966310-00b3-44da-9b45-dd94d8a0aad9"
        },
        "item": {
          "id": "34550d10-1afd-4527-97b5-29d2d9257a06",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9da5fe9c-2c47-41b1-b877-59cd89552773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f9afdb-a2eb-46e7-b3a6-07110bf725c0",
        "cursor": {
          "ref": "dcb2c53e-485b-4649-bbad-573bbb7d3d5b",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "abffb88f-8495-48f9-a869-afbbbe93e025"
        },
        "item": {
          "id": "16f9afdb-a2eb-46e7-b3a6-07110bf725c0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "80e86b62-22fe-4da0-82ae-4ab61fb7f7ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcdc8d04-7c53-46a8-880c-24727c08a2b9",
        "cursor": {
          "ref": "4b2e4070-278a-42d9-9be6-fa53a007b501",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "69ddc176-1f25-4c01-91db-e02d6d8e9f76"
        },
        "item": {
          "id": "bcdc8d04-7c53-46a8-880c-24727c08a2b9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0d85ca52-4bc2-4e57-beee-e584b0f34a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e52bfa7-ab84-4984-aa85-8082b30cf869",
        "cursor": {
          "ref": "458cf3d3-1294-4df2-809d-e382fadd9fad",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "558917b2-fe85-49ad-8b5d-cbea52e1bb0e"
        },
        "item": {
          "id": "1e52bfa7-ab84-4984-aa85-8082b30cf869",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "59163918-2252-420e-83a9-3759b288471e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b234f303-3a6e-4a84-9e4a-aedbad83f376",
        "cursor": {
          "ref": "1619db57-9071-4e8a-b0c2-7b75cbc4969a",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "66f94bab-de2e-4dbd-99c9-86480e0d5d08"
        },
        "item": {
          "id": "b234f303-3a6e-4a84-9e4a-aedbad83f376",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f5221573-f4f2-42ff-a475-142dc8352cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9cd9b3-577f-4279-a7b3-7847273ea976",
        "cursor": {
          "ref": "7d9c4344-c62a-427a-9aad-db6200b9743a",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "373e22a5-0f5f-4d95-8f75-81dbe91c6537"
        },
        "item": {
          "id": "6a9cd9b3-577f-4279-a7b3-7847273ea976",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "015d4fbb-c66a-45d9-bd45-9aa5e7085c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16c9a40-f92c-4cde-ba61-523cb9d07dea",
        "cursor": {
          "ref": "76b360c3-5df4-42e0-994e-0ca075291775",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "4e2cc541-4b22-4245-a8b3-721f30abae16"
        },
        "item": {
          "id": "b16c9a40-f92c-4cde-ba61-523cb9d07dea",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "fb13b9a3-d5e0-4efa-9350-3f952424da35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca5d1eb8-5eb9-4781-b76f-681e57dea5ef",
        "cursor": {
          "ref": "a828ea9e-5003-4fc0-8269-635b68c83395",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "edc2de16-336a-4434-87d7-f4cacacccbe5"
        },
        "item": {
          "id": "ca5d1eb8-5eb9-4781-b76f-681e57dea5ef",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d35bbc16-568e-44ee-b4d6-9514afb98842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62c5f6d-d7e5-4a19-bcdb-cfd053f7a727",
        "cursor": {
          "ref": "b46b4c13-389f-48f3-88d8-3dfe4adefcae",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "fa03acd9-e841-41f2-b13e-65800eef9690"
        },
        "item": {
          "id": "e62c5f6d-d7e5-4a19-bcdb-cfd053f7a727",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8d008120-d86f-42da-acb6-8238fc5641f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdde3528-f22a-4b3e-acb4-cd026645ca7e",
        "cursor": {
          "ref": "bf13f5fe-2c5d-4ef3-861b-1a7cc5790cc8",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "256f2d2f-b42e-43b6-aaff-d5c5659e8cc8"
        },
        "item": {
          "id": "cdde3528-f22a-4b3e-acb4-cd026645ca7e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d3673772-8fc0-48c1-8279-4549963133bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "989c5efb-759e-4657-8749-0189acc9ff73",
        "cursor": {
          "ref": "dc496cf0-6990-42e7-81ea-176f440b3da8",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "6d026130-e4bf-490e-b7c1-eebf378f9115"
        },
        "item": {
          "id": "989c5efb-759e-4657-8749-0189acc9ff73",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "010dcbdd-8878-4645-87b1-2e4a6947ad92",
          "status": "Created",
          "code": 201,
          "responseTime": 2069,
          "responseSize": 976
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "d74dfd95-d938-4fbe-a0cd-74d98eefccd8",
        "cursor": {
          "ref": "9615a201-25b6-4c74-8aa0-86d20a0ad111",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "50e8afb4-fa13-4039-b92b-b1391c595a13"
        },
        "item": {
          "id": "d74dfd95-d938-4fbe-a0cd-74d98eefccd8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e86e38b7-c0a3-48a2-a30c-42c8cfda0a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e9d0d81-c057-44c8-a118-98e3e99b9a43",
        "cursor": {
          "ref": "c27d06c9-863d-4f11-b38f-5cbe0535f560",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e25b4fe4-2728-4bdf-80b6-aae35d8d2516"
        },
        "item": {
          "id": "8e9d0d81-c057-44c8-a118-98e3e99b9a43",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2882b06f-b509-4d90-a230-6460eb0502a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f1be62-21e4-4c7a-8c7d-133906ec151b",
        "cursor": {
          "ref": "959a82d8-13cc-4170-8b1e-c8de3683401e",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9e4ceb43-64df-4c02-9fc8-83cd434abb6e"
        },
        "item": {
          "id": "93f1be62-21e4-4c7a-8c7d-133906ec151b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "408a6a43-8160-4364-8c06-0a1e82b0cc69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910cde85-477c-4d37-9c5f-790286d90193",
        "cursor": {
          "ref": "ed411364-4806-4eeb-b544-5fd97fa455e9",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8bd40d98-47ec-4fbc-98f2-8ca51ef7fd8f"
        },
        "item": {
          "id": "910cde85-477c-4d37-9c5f-790286d90193",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9213ace6-0cb6-4f4f-9103-8a39e60ed4e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53d4bffe-8e24-4d34-8fcf-f8406f7348d1",
        "cursor": {
          "ref": "a72c44d4-64b0-4817-946f-deb7c5b10787",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "fb6322b9-0c61-42c1-ab7e-b134282992e2"
        },
        "item": {
          "id": "53d4bffe-8e24-4d34-8fcf-f8406f7348d1",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6645e8a7-0f25-43e2-ba4b-8bf1417da690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f8259a-288c-4f1d-8ca7-5d54794443f1",
        "cursor": {
          "ref": "634c4f97-cf12-403a-991e-1a15e7561210",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9a737302-1185-4c3c-b67f-020a83833dad"
        },
        "item": {
          "id": "47f8259a-288c-4f1d-8ca7-5d54794443f1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bac333f4-1e3e-4290-ae7f-04219d0a7c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a0ed29-2335-4c65-8dca-6eb8d3645aab",
        "cursor": {
          "ref": "90fa4e11-f3dd-4fb7-91b5-733e53e0e1df",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0c9363f2-55f1-482b-9bc7-01916f0d1c19"
        },
        "item": {
          "id": "a3a0ed29-2335-4c65-8dca-6eb8d3645aab",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7f0a1574-ad37-4104-84c5-1e533f706a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "038c5381-da0e-46f7-af6d-ec5653e06f3f",
        "cursor": {
          "ref": "e2c08810-4e03-4e32-88cf-9090ee729449",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f1c0a10c-87cf-4dcc-b235-ecb5d1c424df"
        },
        "item": {
          "id": "038c5381-da0e-46f7-af6d-ec5653e06f3f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5d102be9-b972-456a-ba6a-3211673a0cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c470d931-76b6-4564-9b48-87a021cc49aa",
        "cursor": {
          "ref": "260e2fb5-9c59-4949-9eb8-9d9aca04f927",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "bce9f3cf-f27c-4717-9cd9-3c6439c5a0cc"
        },
        "item": {
          "id": "c470d931-76b6-4564-9b48-87a021cc49aa",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f96f988a-ab0b-47fd-ac11-336f5e8ce291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89453d75-4ad1-49aa-a9d5-36c80785196b",
        "cursor": {
          "ref": "537c45e8-19ae-4be4-9fcf-a19ad91d40f7",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "21eab77a-9017-46d7-84fe-3c0c5d2a282b"
        },
        "item": {
          "id": "89453d75-4ad1-49aa-a9d5-36c80785196b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d4df1e3c-c645-4a3b-88ce-6afe9c446b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77966460-33eb-4379-88b7-28115d4a2f3c",
        "cursor": {
          "ref": "e1c46c89-aa6b-45b9-af10-4923ddb37a50",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0dcdd01b-996d-460c-98f8-960812ce077a"
        },
        "item": {
          "id": "77966460-33eb-4379-88b7-28115d4a2f3c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "dc77ac2e-3ead-4807-b921-c184d0e737e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "709d7965-4f84-4dc0-8cbe-eec87aee9498",
        "cursor": {
          "ref": "ce7edb66-1a50-4171-9503-d17839b96322",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8d6abfae-dbfb-48fa-a8b3-a7c5661f9541"
        },
        "item": {
          "id": "709d7965-4f84-4dc0-8cbe-eec87aee9498",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "7b69aaf8-177f-4e93-a81a-c2fd41c579f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518678be-8f46-4891-8360-5932e6751620",
        "cursor": {
          "ref": "65066e62-7832-43d1-9ef2-345b8cc55cb0",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e0929d87-5072-4b1f-bf93-62d2919203ea"
        },
        "item": {
          "id": "518678be-8f46-4891-8360-5932e6751620",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "268941a5-f077-4eca-b409-cb218bb6a798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59de2aa1-0a5c-4afd-a107-05ba6c45490a",
        "cursor": {
          "ref": "43600706-3872-400b-b2cb-f8ab15a0831b",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "8c503c8c-651b-42b2-92c7-bdaf374f2b00"
        },
        "item": {
          "id": "59de2aa1-0a5c-4afd-a107-05ba6c45490a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8f200d3d-7a0f-481a-be26-7e20fab18170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b990ae4-0574-4bbd-a317-5ad89901297c",
        "cursor": {
          "ref": "9105492e-1009-4381-a85b-3912b3fb65db",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "29cf0d87-ef9b-4001-8d40-c64480b5038a"
        },
        "item": {
          "id": "3b990ae4-0574-4bbd-a317-5ad89901297c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ea13652e-3aee-4f3e-be70-ffb9ecc403db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9888607-646f-4933-ad28-f3420622f0e1",
        "cursor": {
          "ref": "ed50ab90-ed1a-430b-8b1a-83e82fcf3f2f",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "5512fb3c-286b-4225-b944-234080463627"
        },
        "item": {
          "id": "a9888607-646f-4933-ad28-f3420622f0e1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "df603695-ed3b-4b67-bb3c-ef042c17747e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4547c6f9-ba5e-4925-9c74-c69cca9a5f7b",
        "cursor": {
          "ref": "e6438414-636e-436d-be11-4c8cd83788f7",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "447a8c68-62c0-4605-847c-2e89839da47e"
        },
        "item": {
          "id": "4547c6f9-ba5e-4925-9c74-c69cca9a5f7b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "11dd02e2-30db-4c0c-a420-217056a704ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bae0707-145d-4002-90fa-65c466ff6a20",
        "cursor": {
          "ref": "0049032e-4f19-4c9c-b73c-ec6fbb87d922",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f09c6105-7731-423b-8c64-1d109031ff2d"
        },
        "item": {
          "id": "7bae0707-145d-4002-90fa-65c466ff6a20",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ffc8f339-24ad-4b72-8ad7-c96a81d77c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6cf2608-d8c4-4944-8d8b-2b48c5d450b5",
        "cursor": {
          "ref": "a105e85d-9f27-48c7-99a5-ce2e678cb42f",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e371a307-5e71-4e1b-b1fd-c6585ed2e7c3"
        },
        "item": {
          "id": "c6cf2608-d8c4-4944-8d8b-2b48c5d450b5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "a8c66d84-c327-435a-be44-e2659a71589f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c40694-61d7-4df7-9fff-6b1c985d5c76",
        "cursor": {
          "ref": "5c616006-cb4a-4e4a-8509-c5bb3366c248",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d61b8562-1a28-47b9-ae8d-b3f1a3fbdb55"
        },
        "item": {
          "id": "57c40694-61d7-4df7-9fff-6b1c985d5c76",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d60db3ed-cbe7-4c5b-aa46-5ee323540fcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444af2be-dc11-46f6-8a13-7ab883d50551",
        "cursor": {
          "ref": "47500c40-e968-4e80-8086-24c1f7ae28ca",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "71eb2598-494c-411a-a700-88cd515ab377"
        },
        "item": {
          "id": "444af2be-dc11-46f6-8a13-7ab883d50551",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "dd4857cd-51cf-4de9-a1cf-4c0cac3d33cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ddb930e-9022-44ab-89d0-3522e7417646",
        "cursor": {
          "ref": "a27e9dc9-ea2c-4993-b91f-c0b5c67d209e",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d3db7f51-4631-45e3-b597-15ee8c65156e"
        },
        "item": {
          "id": "0ddb930e-9022-44ab-89d0-3522e7417646",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "7252a8b6-b80a-4441-bb4d-6504ea338984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0d3464d-0415-4663-9916-68212342b079",
        "cursor": {
          "ref": "4a3b3ea6-6dc8-4723-ac64-85b296e34015",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "109dfc90-8390-4ce2-bd9a-8f6c7916874f"
        },
        "item": {
          "id": "c0d3464d-0415-4663-9916-68212342b079",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "978106ac-51e0-48ba-be14-493673a7d1ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ae474e-e0e8-45d9-9443-96faa2864af7",
        "cursor": {
          "ref": "f2fafe0d-11ec-4f98-bf37-40554511daf7",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "64a98e2e-a24e-4a1f-aecb-391a1a15defb"
        },
        "item": {
          "id": "10ae474e-e0e8-45d9-9443-96faa2864af7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a04ebd70-a364-4bf8-9f9c-a21776664ea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c9a62d-0c13-4ebd-9494-d7f4cc5dec8c",
        "cursor": {
          "ref": "ade35331-432d-4ac8-972a-853ce3ff9d7a",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a300b37f-5bea-497e-8b92-226b04b35834"
        },
        "item": {
          "id": "30c9a62d-0c13-4ebd-9494-d7f4cc5dec8c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a58f2f85-a626-443a-80d2-ffcbdb4d3568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b105d4b1-5ede-47a3-a060-f4fd6a006d48",
        "cursor": {
          "ref": "949eb824-f4d8-4edf-aac2-e9a6d7c640b5",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8d1f523a-f761-4b3d-9967-c47a815700f0"
        },
        "item": {
          "id": "b105d4b1-5ede-47a3-a060-f4fd6a006d48",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a3a97b8f-32ee-4c95-9836-47ceee359280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 842,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f9c369-753e-4935-a6a8-df7e4dada842",
        "cursor": {
          "ref": "5875f370-7146-4eef-98a5-8f1f0f20e423",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "fbcb2e15-8549-42dd-9dc6-216ebff5b762"
        },
        "item": {
          "id": "b5f9c369-753e-4935-a6a8-df7e4dada842",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d84515c9-e73a-4d1f-a264-20c245cbd1d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18877c10-181f-4c01-81a2-f351c65e61e6",
        "cursor": {
          "ref": "3884fa2a-e03a-44d8-8daf-b9ae8ee18744",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "53e1cb4d-1ce2-4565-ad87-49bb0289b558"
        },
        "item": {
          "id": "18877c10-181f-4c01-81a2-f351c65e61e6",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "98da111b-5c9a-44e7-8394-26ae31baa7f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb0aaa2-b077-45c0-b7ed-b3bd2642d27a",
        "cursor": {
          "ref": "1c4f5176-11bd-4a4c-8916-3bdc6912a73c",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2373f302-1bd3-49dc-9df3-61a2a27b0d4b"
        },
        "item": {
          "id": "efb0aaa2-b077-45c0-b7ed-b3bd2642d27a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "74f3e232-d4ef-4d57-864c-82afd74eb80b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "205592cc-3b1e-4b50-a6de-c9055e565b65",
        "cursor": {
          "ref": "05aca275-6481-4adc-bfb4-c04c75b7110c",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8ba4efdb-464e-45e3-a718-2a25a2b333aa"
        },
        "item": {
          "id": "205592cc-3b1e-4b50-a6de-c9055e565b65",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e887409d-2ee1-4cad-b9f0-5919b1eba92c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b74bd7-badc-4ea8-a98c-e40c8dd8b176",
        "cursor": {
          "ref": "0c74f219-0664-44fd-ac8c-a857f6f60312",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "bdfa247f-b55f-4e04-aa31-9755223d4c78"
        },
        "item": {
          "id": "e1b74bd7-badc-4ea8-a98c-e40c8dd8b176",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e58243a4-c6f0-4a94-9db8-8d41d2bf355a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "4ad9111c-f1e6-4778-a5b3-b11a9afc74db",
        "cursor": {
          "ref": "cfa71130-ccda-40e8-b520-c2750a20984e",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8c4e5a1b-c7cf-4590-a116-988591ea6939"
        },
        "item": {
          "id": "4ad9111c-f1e6-4778-a5b3-b11a9afc74db",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "23db149a-a0fb-4b0a-a3a7-669c6cda18be",
          "status": "Created",
          "code": 201,
          "responseTime": 3894,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "f4fe1d76-450c-4844-b18f-07651222bf0f",
        "cursor": {
          "ref": "c271bc7c-50ad-42e4-8af7-b8b1e5457981",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "25c4e990-6140-40fa-a0fe-ed820d18b143"
        },
        "item": {
          "id": "f4fe1d76-450c-4844-b18f-07651222bf0f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "97d07f29-9bff-40d2-8a9c-3f05219e6b2a",
          "status": "Created",
          "code": 201,
          "responseTime": 2676,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aed28e8-294a-4c40-873d-e93bc53aafa0",
        "cursor": {
          "ref": "05393d64-c817-4681-b5d3-9b4816099a21",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e280eb9f-523d-49e2-8d29-3226ecfff8f1"
        },
        "item": {
          "id": "3aed28e8-294a-4c40-873d-e93bc53aafa0",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4387141b-9f60-403b-ab2e-c0daf47f9c76",
          "status": "Created",
          "code": 201,
          "responseTime": 2484,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ffbc12-79bb-4fc9-8942-c35f7c8ffa77",
        "cursor": {
          "ref": "fcd064ba-d800-47c4-bbca-cabc2b520ef8",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8c95b8ce-1ad1-44b0-9a01-80344542a16d"
        },
        "item": {
          "id": "67ffbc12-79bb-4fc9-8942-c35f7c8ffa77",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "82615231-b782-474e-9df2-5e6aa2911877",
          "status": "Created",
          "code": 201,
          "responseTime": 2487,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "98341872-7785-41fb-a2fa-5baee7ec2f33",
        "cursor": {
          "ref": "712fc670-612f-4df8-8f51-57b8a94967bf",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9f9d7714-52f4-4f54-a27a-15182ac4774b"
        },
        "item": {
          "id": "98341872-7785-41fb-a2fa-5baee7ec2f33",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "9c73b7d6-d306-4d31-ab4d-5bfa89c04199",
          "status": "Created",
          "code": 201,
          "responseTime": 2443,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2aa85f8-db03-48be-9253-575451ce5205",
        "cursor": {
          "ref": "c8915962-171f-4659-ac18-337db597ef40",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9a065144-50b9-4d6a-b801-eef3eee0b4eb"
        },
        "item": {
          "id": "a2aa85f8-db03-48be-9253-575451ce5205",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1834db74-b7b1-4037-85f4-c826125a176a",
          "status": "Created",
          "code": 201,
          "responseTime": 2481,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-30T00:39:37Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-30T00:39:37Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "7d805d8a-00ec-487e-99d5-aa775b7f294a",
        "cursor": {
          "ref": "084be53b-25f8-4510-a992-633a9a30ff77",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2a6161a3-d910-4293-af45-9fa35fe3f399"
        },
        "item": {
          "id": "7d805d8a-00ec-487e-99d5-aa775b7f294a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ad103aae-e1f9-47bd-bac6-58068b67a7f3",
          "status": "Created",
          "code": 201,
          "responseTime": 2294,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca43f71-a373-462a-a6d5-54bc1a1b4e2e",
        "cursor": {
          "ref": "67ce53f3-fa8b-4cb5-adef-8ee8b049e1f7",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "692dfda8-f624-4e7b-930a-d2f70a474115"
        },
        "item": {
          "id": "bca43f71-a373-462a-a6d5-54bc1a1b4e2e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "95e0cdfc-a924-4608-a649-e880685fd944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca43f71-a373-462a-a6d5-54bc1a1b4e2e",
        "cursor": {
          "ref": "67ce53f3-fa8b-4cb5-adef-8ee8b049e1f7",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "692dfda8-f624-4e7b-930a-d2f70a474115"
        },
        "item": {
          "id": "bca43f71-a373-462a-a6d5-54bc1a1b4e2e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "95e0cdfc-a924-4608-a649-e880685fd944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00499d0f-e433-42ca-a8c6-9271eb38cd45",
        "cursor": {
          "ref": "954be08a-1e7a-4ad8-916d-5313719205c3",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "517e7964-c70b-4ff9-9b4f-d51361a07119"
        },
        "item": {
          "id": "00499d0f-e433-42ca-a8c6-9271eb38cd45",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b1d257a4-1914-4a7f-ae83-88407e9aa64e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f2ba7d8-0004-4923-9134-c3f42da93020",
        "cursor": {
          "ref": "fa15625f-25c9-459e-b1e1-253398ccf665",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4e06190b-9816-4492-8be8-c1feae810fe7"
        },
        "item": {
          "id": "8f2ba7d8-0004-4923-9134-c3f42da93020",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "54f7c97d-7220-4d78-95e2-27f075e68c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8952712-b19e-476b-bdb6-87844aff7c6b",
        "cursor": {
          "ref": "632cb7bf-ef36-471d-b28d-96ae699de1ac",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d0ed6fe9-2b1d-4790-bad5-b23cac2fd435"
        },
        "item": {
          "id": "e8952712-b19e-476b-bdb6-87844aff7c6b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d68372fc-f5c9-4b92-919f-c97981ad572f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356efce4-8592-4221-9481-4e39f7990442",
        "cursor": {
          "ref": "7b499188-1817-40d0-a416-779efb6aafe3",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4d9f83c6-f580-4558-8c09-1f3657ad78ee"
        },
        "item": {
          "id": "356efce4-8592-4221-9481-4e39f7990442",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9b9f580f-701e-4f4d-9ebb-b0ac96831d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c013ece-98b6-42bd-95bc-e9833d478a2f",
        "cursor": {
          "ref": "9592ba01-3a6d-4abb-b599-23e2dfb8c6c2",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "0474a4d9-0a3e-4f99-afd0-4eccd020c726"
        },
        "item": {
          "id": "9c013ece-98b6-42bd-95bc-e9833d478a2f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "70a65358-be7f-4a1b-a25d-929a0cee5168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1909671-e391-48ab-90a9-946cf8f4b7df",
        "cursor": {
          "ref": "3e640e80-0e4a-4375-a6e3-78a5b002b7bb",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "dc0c66ae-b821-4911-9490-6ea1a5a6d42d"
        },
        "item": {
          "id": "e1909671-e391-48ab-90a9-946cf8f4b7df",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "afb03c8c-673c-433b-97c5-bad6b585823c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f6b76c5-f254-413b-b4b3-056224b4c71f",
        "cursor": {
          "ref": "d3b765b0-d49a-42ad-b2b8-735074fb3c33",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0df4b2fa-6402-4c70-a6ae-6e4ab3205a85"
        },
        "item": {
          "id": "4f6b76c5-f254-413b-b4b3-056224b4c71f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2748d545-9353-4d34-adca-73cb1480845a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58c7eb02-31a1-4dd5-b3e2-7c9ab6aa243c",
        "cursor": {
          "ref": "bd3be2d4-ad98-46ad-b5a3-0535e95e8d36",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "08b881aa-0da4-40bc-9979-9d19d1143968"
        },
        "item": {
          "id": "58c7eb02-31a1-4dd5-b3e2-7c9ab6aa243c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "05ae21ea-8ed9-48e0-b409-96b9ac0b18f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02eba9e4-d4ae-4d1a-8a59-c30378524fc2",
        "cursor": {
          "ref": "31ca3b0b-28aa-4251-bf09-35a4cac44466",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f8c0b9df-0ef8-49cd-8490-3a710cc24c27"
        },
        "item": {
          "id": "02eba9e4-d4ae-4d1a-8a59-c30378524fc2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c62572f8-b96b-4f7f-ad93-154ade795e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4f4ea5-8963-41b1-a80f-1d6fbcd585e9",
        "cursor": {
          "ref": "724c7e37-c73e-45c6-9ac3-7a530402c154",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "41714885-4f7e-4dd9-81d5-5dc5a2e857bd"
        },
        "item": {
          "id": "fb4f4ea5-8963-41b1-a80f-1d6fbcd585e9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a24792b4-b949-4f8d-a804-56f038eba7b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3c8b717-5f7a-4360-aedd-1344f8ddfe6d",
        "cursor": {
          "ref": "d5027bd7-7c40-4f1a-bc1b-b25ff396800a",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "7748b307-d970-4834-bfa5-c9e04a9c1bcf"
        },
        "item": {
          "id": "d3c8b717-5f7a-4360-aedd-1344f8ddfe6d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c38d4777-eb46-4182-82d9-89be1755288b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1808d4d-4b26-4672-8526-3e5f6b6ea2d2",
        "cursor": {
          "ref": "8da911fc-bd5d-4230-9768-6acd9befbdd4",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "25441aaf-b5d4-4fac-946a-ef6ce3ae1439"
        },
        "item": {
          "id": "e1808d4d-4b26-4672-8526-3e5f6b6ea2d2",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d5674425-8c98-4d92-8052-20d315c120c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898a5d46-e77e-4bda-b334-0414144d64ab",
        "cursor": {
          "ref": "ce7c1b80-f3a0-4541-8bac-381f6ee61668",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2df6a6b6-e619-4d7d-a291-c87528b3b010"
        },
        "item": {
          "id": "898a5d46-e77e-4bda-b334-0414144d64ab",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f9083e0b-8dfa-4777-9d36-2961347ace30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c2a3f0-7827-4aeb-90b1-814d5fa0082f",
        "cursor": {
          "ref": "1ba19415-0214-4913-a2c9-973e6fccbc3e",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7fae1a38-d05a-43b1-9629-89914834bcd3"
        },
        "item": {
          "id": "35c2a3f0-7827-4aeb-90b1-814d5fa0082f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "38cd68c9-0438-4458-9972-07ed843bc564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db878523-c30a-4209-8f96-87180d3f5ac2",
        "cursor": {
          "ref": "636aa207-567a-459d-b2d2-58992a2129fd",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f92ffc1c-f2de-4cbf-b9e7-9c274602fc64"
        },
        "item": {
          "id": "db878523-c30a-4209-8f96-87180d3f5ac2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1c2f32f8-2d21-44cd-8e20-40eb57a0920c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90727394-d9b6-401c-8dd2-d5975c633e02",
        "cursor": {
          "ref": "8e6f965d-9e99-4b4c-b7dc-ca2d899a2a23",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "613b4f8a-30ec-4082-b9e0-6a84aeaf87e5"
        },
        "item": {
          "id": "90727394-d9b6-401c-8dd2-d5975c633e02",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e90b7be9-a18f-4ae8-85bc-94112066649b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd830274-9d84-431e-93c4-949c69f8348f",
        "cursor": {
          "ref": "06b7fc67-e413-4cf0-9c2d-f7f23ce8c4e3",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3bcaaff9-df44-4861-8c0c-fe50b343a0ee"
        },
        "item": {
          "id": "cd830274-9d84-431e-93c4-949c69f8348f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a2bcb7bd-9998-4466-bef9-66dee4ceebc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee0826a-c64f-4e05-844b-943b7fe3d3ea",
        "cursor": {
          "ref": "95c9a125-18bf-446b-90e0-95add761aa43",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e7b37bf0-c3f7-40f9-b925-a9d067f706cc"
        },
        "item": {
          "id": "7ee0826a-c64f-4e05-844b-943b7fe3d3ea",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "85cb8e07-168d-4f7e-8cc9-794f524dea5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38714c68-c5d2-4f0e-ae93-11c412055023",
        "cursor": {
          "ref": "2f85119c-5eaf-4c59-b96a-fd6caacbbc4e",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8c7e09c8-bd88-4bdc-bf78-48814ae8215b"
        },
        "item": {
          "id": "38714c68-c5d2-4f0e-ae93-11c412055023",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "cec6a0b1-40dd-4e40-bcca-0ecaf19e5517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee042397-031e-4b44-b5f6-ab5abed0703c",
        "cursor": {
          "ref": "e39da0e9-b0e7-42cf-893a-1dcbdfa932f5",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "111b211d-ef59-48e6-bb86-7162b6b3b20a"
        },
        "item": {
          "id": "ee042397-031e-4b44-b5f6-ab5abed0703c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "60647c88-da6f-4f0c-a92b-f2be49659156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b9dfc3-001a-44f6-97fb-449ce22f4a41",
        "cursor": {
          "ref": "d6927bb5-70c1-4b79-adcc-7a4a190f8336",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f46dd4d7-1663-4a9e-87dd-71311a7a275d"
        },
        "item": {
          "id": "22b9dfc3-001a-44f6-97fb-449ce22f4a41",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "cae7f89d-2774-4ccf-8282-b991e29dbe2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ccb5b2a-4870-4839-9115-ee61dddcd208",
        "cursor": {
          "ref": "79dfe29b-2c4b-4afa-a47e-87b3159e1b12",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "22994795-73a4-4c84-86a3-1b9b92f6deee"
        },
        "item": {
          "id": "3ccb5b2a-4870-4839-9115-ee61dddcd208",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "910d824a-c2aa-4be5-a35e-6c86d05fdc40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd529325-47e5-4be3-84f9-d5985cb39ac4",
        "cursor": {
          "ref": "f5fc4dd9-a3ce-4dfe-a2b1-0f03b0d0b22b",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "44cf62ab-52f0-476b-92dc-45e67faef2a8"
        },
        "item": {
          "id": "bd529325-47e5-4be3-84f9-d5985cb39ac4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "02b55ce6-0d36-4638-94be-7a99bd019dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697c5cfe-788f-49ee-a7f3-ff9138c875b0",
        "cursor": {
          "ref": "435ca52c-9a70-484b-98e3-887a2dc3cc28",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0479b442-4626-418e-841d-027f8ba1d7ee"
        },
        "item": {
          "id": "697c5cfe-788f-49ee-a7f3-ff9138c875b0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "309ee1b3-558f-49a9-ae84-4b2a6059d6a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "809fbd69-45b7-41b1-9874-902f9b2ef3b4",
        "cursor": {
          "ref": "f7d1d437-99d3-4f2b-854d-fc4367724556",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "333e39d8-a722-45ff-b4e0-339eec6f6ad9"
        },
        "item": {
          "id": "809fbd69-45b7-41b1-9874-902f9b2ef3b4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d0ddabef-4795-4cef-abe3-7840964de85d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c2f2be-1d62-4a4b-a84d-b06f67012c36",
        "cursor": {
          "ref": "3e0829f0-d452-4b8a-b8e8-6fce55aee8bf",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1ccadfdc-8922-42ec-b7c3-5734a267c7db"
        },
        "item": {
          "id": "f0c2f2be-1d62-4a4b-a84d-b06f67012c36",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ee0cd03c-556e-4657-baa3-d9fe7a0b6748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee38ee6-3c0d-4656-b5c0-97108c06d810",
        "cursor": {
          "ref": "9a5a9eea-fd71-40a8-95f9-4b3f40d10e1c",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d5dd4071-0d8d-4b35-8999-fae59ae2c0a8"
        },
        "item": {
          "id": "fee38ee6-3c0d-4656-b5c0-97108c06d810",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f7d772b9-0175-4496-a0e0-c38fe4dcc240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c319ddb5-59a8-4f0c-836b-9e604227d718",
        "cursor": {
          "ref": "4b42999d-e5b3-4f99-a0b7-76bac27645e8",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a9470b0a-5390-4fcb-882e-03082164f365"
        },
        "item": {
          "id": "c319ddb5-59a8-4f0c-836b-9e604227d718",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f2ef104a-e422-4833-a3b6-35570ef5d56e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a2a75f4-568a-436f-8a6f-9b13fd1ddf67",
        "cursor": {
          "ref": "e9754771-c906-4c0c-b5f1-bfe141a0ce4f",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c35f9eb6-69e5-4a33-84fe-c65af26ff3ad"
        },
        "item": {
          "id": "1a2a75f4-568a-436f-8a6f-9b13fd1ddf67",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "30ac1ecb-e9d1-4414-a237-a8e3f5f0a849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a548c05-dd91-4055-9ab1-4d8d23ef5ef9",
        "cursor": {
          "ref": "8beec6ba-917c-420b-a451-6ac9cbd49fd2",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c32d315e-9873-4d3c-aeb9-c7e7ea26084b"
        },
        "item": {
          "id": "8a548c05-dd91-4055-9ab1-4d8d23ef5ef9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ba1c8f7f-723b-418a-82b9-13e99e466b79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cabf8e9-b6b2-42ac-89e6-bc6260a93bb4",
        "cursor": {
          "ref": "6181df86-20f8-4ad0-921f-892284b7d80a",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "95f7b834-201c-456f-999c-3e0d040912a4"
        },
        "item": {
          "id": "5cabf8e9-b6b2-42ac-89e6-bc6260a93bb4",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "49a94329-7660-4e06-b1b7-2a67c04afce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04431b74-160b-4000-b199-48c78bbc3656",
        "cursor": {
          "ref": "68c70ba3-f7d7-436d-a8e6-f0200197f751",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c4bd53a5-edc6-4e63-8b23-c8d6b6903895"
        },
        "item": {
          "id": "04431b74-160b-4000-b199-48c78bbc3656",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8b9e361f-304f-4b07-8af1-ceb89d0a6127",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "b820db95-20de-451a-8e7d-c13ed3d84152",
        "cursor": {
          "ref": "44c2d61f-99c9-42f9-af46-6096e91996eb",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "edb32f2a-8b7f-4de5-b953-7dcc04b1032b"
        },
        "item": {
          "id": "b820db95-20de-451a-8e7d-c13ed3d84152",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "5bfaf1ba-4718-43f1-b6da-c57aa730e6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "8b472cd7-65b9-40bb-a944-d26882254789",
        "cursor": {
          "ref": "2221db0a-45af-4a5d-8f4b-c739ce31b59d",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c947d371-8be6-4058-8a9a-56326a55cbf0"
        },
        "item": {
          "id": "8b472cd7-65b9-40bb-a944-d26882254789",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e032d89a-db62-4d93-bec8-bb85c53839fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b472cd7-65b9-40bb-a944-d26882254789",
        "cursor": {
          "ref": "2221db0a-45af-4a5d-8f4b-c739ce31b59d",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c947d371-8be6-4058-8a9a-56326a55cbf0"
        },
        "item": {
          "id": "8b472cd7-65b9-40bb-a944-d26882254789",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e032d89a-db62-4d93-bec8-bb85c53839fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f483dd-ab9c-4205-a332-213a501b9446",
        "cursor": {
          "ref": "b2e803c6-fbfd-47f4-a247-133f64ef9a2c",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "22299dd2-7566-408d-99fd-ba44b7375d8e"
        },
        "item": {
          "id": "01f483dd-ab9c-4205-a332-213a501b9446",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "041ba570-9111-4551-a16c-675e8ee703d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57fb3d82-2cc3-4111-bdd9-f56c9331c732",
        "cursor": {
          "ref": "70989981-e988-433f-892d-21eabc44db55",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "beec4d21-57af-4e0b-9e8e-5ffe96a78c09"
        },
        "item": {
          "id": "57fb3d82-2cc3-4111-bdd9-f56c9331c732",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "15ded79d-3a9a-4a54-9723-7f31e83223ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82aba62f-85f8-4876-8aaf-922137ca6117",
        "cursor": {
          "ref": "e2f551ce-37a6-4e81-8bc9-9c5f033ce63c",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ea9dec84-b63e-4762-9473-207127075a98"
        },
        "item": {
          "id": "82aba62f-85f8-4876-8aaf-922137ca6117",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4ad384f9-4cfd-48da-88fd-ca7b1affcf24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec171cc-b5cb-42d8-8490-312661b515ac",
        "cursor": {
          "ref": "f34ef6d1-d862-454c-ba5b-9641c87f8a77",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4770a6c8-d645-4d1a-bca5-01d4bfcdf8e2"
        },
        "item": {
          "id": "eec171cc-b5cb-42d8-8490-312661b515ac",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f59e9734-5a26-4697-b730-805cdc08cc24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bd11876-44c8-420f-8595-679885106e9b",
        "cursor": {
          "ref": "98f4d31c-c67e-489e-ba53-d0b72523738d",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6d799015-ecd4-41f8-8e3c-ac6abdbeb18b"
        },
        "item": {
          "id": "1bd11876-44c8-420f-8595-679885106e9b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "89ea5a09-662e-4b58-8da1-fa0d23832c00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d85dde40-25bd-4bb9-ad1c-bd44ee552660",
        "cursor": {
          "ref": "5204719f-2727-4e85-a58c-1606216c64e6",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "343119e6-7bd7-4631-9b98-930b30de6f45"
        },
        "item": {
          "id": "d85dde40-25bd-4bb9-ad1c-bd44ee552660",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7cd6f676-3d03-4e13-9feb-d457004a94eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "229f528f-cc4f-44b2-abbf-ae3ca316826a",
        "cursor": {
          "ref": "1de762f5-3750-4ec2-9353-a2f6c690a4f5",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "36dcc632-9c82-412c-b10d-a0b51483181d"
        },
        "item": {
          "id": "229f528f-cc4f-44b2-abbf-ae3ca316826a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9a3180a8-b2e4-410d-9c54-8f022758db97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "129fc42c-04dc-4f16-a80b-6afb257cbd8f",
        "cursor": {
          "ref": "7054b73a-8237-4e99-b958-37a68a48efb4",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7d6698a1-569d-4e9e-866d-9f0fe1005ff7"
        },
        "item": {
          "id": "129fc42c-04dc-4f16-a80b-6afb257cbd8f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "98222480-418a-4ca5-b7e4-7c6995b99709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e3dfa55-884b-4101-9a24-fd877ea7747d",
        "cursor": {
          "ref": "c4677856-5dda-4b24-9442-962739b2143d",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "55b6ad2a-c02f-4014-943e-9facbe19cf51"
        },
        "item": {
          "id": "0e3dfa55-884b-4101-9a24-fd877ea7747d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f2336632-ec19-4603-8a7a-3d27f0875951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffe3973b-2336-4a45-acce-335b5f0615f4",
        "cursor": {
          "ref": "ab9cccbe-3bf7-4e3a-af12-a79c78f7357f",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a6e64f90-a930-4f06-920a-759aceae8882"
        },
        "item": {
          "id": "ffe3973b-2336-4a45-acce-335b5f0615f4",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "22877542-504d-4dab-a2e0-27583ce342ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e3eb49-3ff8-40ad-8c14-c1f6468ca093",
        "cursor": {
          "ref": "4f6a0da0-52a5-4839-bd3b-6771b50ac3f2",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ecdef205-3522-46ec-8e24-46442e7e11c0"
        },
        "item": {
          "id": "38e3eb49-3ff8-40ad-8c14-c1f6468ca093",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8b97c82e-d2d5-4921-b2ba-80149816176b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45bdbdee-f95f-49be-bfb0-16ddccccae74",
        "cursor": {
          "ref": "931bd9c3-e471-4bd7-abe5-3127fea328da",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9d9907cc-d9d5-47cd-81e0-ad10bb2270b1"
        },
        "item": {
          "id": "45bdbdee-f95f-49be-bfb0-16ddccccae74",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d98c094e-1794-4e34-8609-366367344929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0b080c3-8f18-406a-aca5-2575a29a1179",
        "cursor": {
          "ref": "38051ff9-b9a9-4b6c-a719-71b50b114b4e",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ae026d72-8cfe-4cf3-bc10-6896af51e99c"
        },
        "item": {
          "id": "a0b080c3-8f18-406a-aca5-2575a29a1179",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1ad3b251-bb58-4dad-aa68-11e68e6eb5fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "542e44b5-1b07-4797-90d5-49ecb4427f54",
        "cursor": {
          "ref": "4a8137cb-32b8-4022-94ea-33b4b4929812",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "80c18aa4-f03b-4966-a4df-6ad41e5f9128"
        },
        "item": {
          "id": "542e44b5-1b07-4797-90d5-49ecb4427f54",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "757f7b9c-3d6d-4edb-bbfe-d9a21e68ec1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "755f3b4d-1b2a-49af-8fa0-32ab2f1cc376",
        "cursor": {
          "ref": "8c0a7b35-29e6-41d5-b6da-1e7851538693",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "227a386c-0d29-4b9c-bf7e-b2684591c8fe"
        },
        "item": {
          "id": "755f3b4d-1b2a-49af-8fa0-32ab2f1cc376",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e6d52190-9b21-4aa9-9d73-c062c9112f74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f107f322-492c-48bd-a323-b813663a2a63",
        "cursor": {
          "ref": "e6c6d2f7-fc31-47bd-81b0-70c4f36bddf2",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b82bba54-14eb-47a5-a5f9-20f030f421f4"
        },
        "item": {
          "id": "f107f322-492c-48bd-a323-b813663a2a63",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "338175f0-af09-4174-bf2a-37a517c9f4fe",
          "status": "OK",
          "code": 200,
          "responseTime": 228,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "07da83c5-2bc6-489c-ac43-c509a681c769",
        "cursor": {
          "ref": "5ad80ad3-f716-4613-b09f-59892ee213dd",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "24c83a20-b65b-4f2a-82d8-83aa5c7f9ed2"
        },
        "item": {
          "id": "07da83c5-2bc6-489c-ac43-c509a681c769",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "64ce712c-5d29-4a78-b9be-1ea1c4f3160e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933f92ef-9a1f-4463-9562-1c92e5f947ae",
        "cursor": {
          "ref": "b9eace15-929e-466b-91a6-d53c4186327d",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "85c81e28-30e8-486e-9e18-adaef81dafe8"
        },
        "item": {
          "id": "933f92ef-9a1f-4463-9562-1c92e5f947ae",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "08711b64-9f78-4260-ae0d-3db8b860351b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac889242-94fc-4f80-931a-8f339443c3e9",
        "cursor": {
          "ref": "6a7bf1c2-c0df-4365-b9a9-11c1658c351b",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "98d5640e-7e9d-48b1-8504-abc92b277877"
        },
        "item": {
          "id": "ac889242-94fc-4f80-931a-8f339443c3e9",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e580dbe7-0ef8-46bf-b2db-9c463367fe0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c502bd17-352c-4439-8c43-af3d12c761ab",
        "cursor": {
          "ref": "5d2580aa-8ef6-4d54-99c7-6aaa1104c48f",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "5958b5ea-55df-41a1-b2bb-68741877f667"
        },
        "item": {
          "id": "c502bd17-352c-4439-8c43-af3d12c761ab",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b7950f76-c25f-4ed4-8377-d06e8bfa87d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebff2623-a8b3-4714-92d4-2891609f0244",
        "cursor": {
          "ref": "e8dad3f3-6468-462c-be3d-c0c40740723d",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3d6b819a-588e-4744-990b-57599b6eb576"
        },
        "item": {
          "id": "ebff2623-a8b3-4714-92d4-2891609f0244",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9bc0e4ae-410a-4a9c-8c3e-e426fc306ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e79e69b8-f511-4b83-bdee-ec32549504d0",
        "cursor": {
          "ref": "79fad475-8728-457a-b4e5-d4535ecf75c3",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "5b458f86-c1a8-452d-be8b-145d9e364d1e"
        },
        "item": {
          "id": "e79e69b8-f511-4b83-bdee-ec32549504d0",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "74606934-b4ab-417f-bec3-0cafa471b50a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29682ef2-89f1-4447-8444-2b7165891fc1",
        "cursor": {
          "ref": "7b171e62-cc5b-4c42-9f8a-94fb158cce80",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "625a21b9-c53e-4531-9519-c3b95445397b"
        },
        "item": {
          "id": "29682ef2-89f1-4447-8444-2b7165891fc1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "24d1597c-9069-4b65-8e58-a8f00e4744ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4408faec-3385-4c4d-b538-9f9e97d2559e",
        "cursor": {
          "ref": "4826d73c-5386-41fd-afd3-a93b4d6e2442",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0ee366bb-93dd-495b-8b63-e45cd0808f8d"
        },
        "item": {
          "id": "4408faec-3385-4c4d-b538-9f9e97d2559e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "409d618b-9caa-44b0-b930-0629a7e31912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e8af749-27a3-436d-9cd3-c361ec71b8c2",
        "cursor": {
          "ref": "a9d36a96-d764-40d5-bacf-1dc65d2bf459",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c7196571-9d14-4721-904d-7f903986094d"
        },
        "item": {
          "id": "6e8af749-27a3-436d-9cd3-c361ec71b8c2",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "8c3deffd-587e-4d7a-ac09-86453f1d7410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db6e028-81dc-4ee6-801a-f2211c314920",
        "cursor": {
          "ref": "5cd6d6e1-2e88-4694-88f1-38d1b6057c0f",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bfb7621e-d764-491e-8be0-7a8cfbd67f3d"
        },
        "item": {
          "id": "5db6e028-81dc-4ee6-801a-f2211c314920",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1413ff11-2f28-4aab-9081-5b4d6c230876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e107ee-3e4c-424a-96f1-41659de928f0",
        "cursor": {
          "ref": "7d6dae92-11fc-467f-959f-ff4532c0f237",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3a577f32-cd72-48c2-a5b5-7762a08ba039"
        },
        "item": {
          "id": "63e107ee-3e4c-424a-96f1-41659de928f0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a66e7ba6-0648-4282-8de9-9f01976a7af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7000204c-be69-434c-8f6f-89d5656f54bd",
        "cursor": {
          "ref": "e0e86493-bedb-4ee4-bed4-07fbe2b50c03",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f19badc5-6a38-47da-8c0e-b643426b3eb4"
        },
        "item": {
          "id": "7000204c-be69-434c-8f6f-89d5656f54bd",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "6be65b15-cb4d-42ea-aed0-4754e2b19da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f33bc38-0791-4da1-aa49-193fb5d0c2cd",
        "cursor": {
          "ref": "176129e3-195c-4d44-9024-88d6740ad5b1",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7d3c766e-0cc1-4339-85d8-ae11ad2f6418"
        },
        "item": {
          "id": "2f33bc38-0791-4da1-aa49-193fb5d0c2cd",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "bfffb565-7327-4e5f-a3eb-54995c38ef5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1521ee7c-024f-42e4-a28e-d627113a7ebd",
        "cursor": {
          "ref": "f9d91151-17cb-4d71-bd15-b46885a46977",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d82c9029-737a-4d49-89b6-7512133e8244"
        },
        "item": {
          "id": "1521ee7c-024f-42e4-a28e-d627113a7ebd",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "51653d2d-5576-4e8b-8240-5ae77a29b68e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e08378bf-7277-4cae-942d-27b6bb13ff7f",
        "cursor": {
          "ref": "376298b1-cb00-4ad9-81cc-313466347fa5",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0d5b29e9-5e61-4ed4-9b88-153e35982a9c"
        },
        "item": {
          "id": "e08378bf-7277-4cae-942d-27b6bb13ff7f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "1c0365db-daee-46fe-bb5a-143b2ce097bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22d39ad-135b-42d8-9b32-c8b2de58453d",
        "cursor": {
          "ref": "805e3397-125b-4cb9-b56d-bc131ef0887c",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9f353784-80f4-494d-9fc3-0a74d0b52ba8"
        },
        "item": {
          "id": "b22d39ad-135b-42d8-9b32-c8b2de58453d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2bb351fc-3917-417a-aff5-5b7beeb86cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51fe95c4-c63d-4905-9ea2-a606bff0b80a",
        "cursor": {
          "ref": "fd38a575-b04e-484f-946b-2230f8c0c7d8",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "fe860091-b98a-492a-b8cd-af63ae5fb577"
        },
        "item": {
          "id": "51fe95c4-c63d-4905-9ea2-a606bff0b80a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d697cff2-2c9e-4933-beef-c203db041649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5603829-1b27-43ca-8dff-67f35118a643",
        "cursor": {
          "ref": "66c00ecc-831b-43c0-8d3e-ed3a1f07d24a",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "11df1983-86d2-42d3-9b99-3499d6ffd0f7"
        },
        "item": {
          "id": "e5603829-1b27-43ca-8dff-67f35118a643",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "fda5fd49-33ef-44ec-94b9-1c89b425438c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2e69ba-476b-4bdc-b196-e4fd02b3ff1f",
        "cursor": {
          "ref": "47000c5e-1dc5-4bce-ad08-d7ac5e883d48",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2be1f9e4-0b9a-452c-9636-927b0adea262"
        },
        "item": {
          "id": "7c2e69ba-476b-4bdc-b196-e4fd02b3ff1f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "91bb153c-e910-4367-b850-dcfadb10c42f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "407bd833-fbef-45f9-be6b-28d0f425613e",
        "cursor": {
          "ref": "148bba70-8493-4477-95c4-b55390461413",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "caee7f81-69c6-4949-b9f2-3abb70747199"
        },
        "item": {
          "id": "407bd833-fbef-45f9-be6b-28d0f425613e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "cf04e821-9840-428f-bad1-dd6f33894ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973ea565-cfad-431b-9221-c5cc360be353",
        "cursor": {
          "ref": "38229428-cebf-402e-bc75-217fd90bff3a",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5c6c198d-3d9e-4f5e-ad58-9c00860e0698"
        },
        "item": {
          "id": "973ea565-cfad-431b-9221-c5cc360be353",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "878a2cd5-722c-49f3-95cb-8b14a9486793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be252425-4c55-4b68-951a-6558946776e3",
        "cursor": {
          "ref": "b9b538e8-f9eb-40aa-b9e7-ce3baf32d5d5",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c7579241-3c9e-4000-8611-77bd6de1216a"
        },
        "item": {
          "id": "be252425-4c55-4b68-951a-6558946776e3",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b6e99779-8e8b-4a5b-b858-2ad2269b80ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c08d3615-7ff6-4c50-aefc-e8ad841ff626",
        "cursor": {
          "ref": "3ad1d611-9817-41a1-9166-eb065a48089d",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5b48f6e0-6b49-4cb2-b549-7ec26ad45af8"
        },
        "item": {
          "id": "c08d3615-7ff6-4c50-aefc-e8ad841ff626",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7cfd1ae1-ac48-45f9-a987-26c4dd861abf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66d20747-d076-4573-8439-4b17f39b3e47",
        "cursor": {
          "ref": "6805a26a-5172-4a95-b4f1-2b56383b52e6",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "bf432aba-da3f-4fd9-91e8-59289f1c67ae"
        },
        "item": {
          "id": "66d20747-d076-4573-8439-4b17f39b3e47",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2ed5f702-89c4-4a62-ac53-4790f5727253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695f6235-e677-4209-b55b-87f2647e2f04",
        "cursor": {
          "ref": "37b9df58-df1f-448d-8859-2715ada6cf96",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "236cadd3-3a55-460b-90c1-940a0e4b50d4"
        },
        "item": {
          "id": "695f6235-e677-4209-b55b-87f2647e2f04",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ba0d969e-989e-41e1-827e-19bb0df8727f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be334a2-f49d-41fb-9344-a0211b265f61",
        "cursor": {
          "ref": "9aabfbfe-775a-447c-ba3c-efcfca4c53d8",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b33c7625-d26e-428b-9db3-c539c6a8bf83"
        },
        "item": {
          "id": "4be334a2-f49d-41fb-9344-a0211b265f61",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4528e2f4-a835-40d1-875a-40916f229f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "983f28f4-4bcf-40d7-8e3a-8bfad30f9100",
        "cursor": {
          "ref": "c083c3dc-fb56-4899-a6b0-0a04adcc301d",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "bb75fae5-f334-480d-a112-5b6c24a3c024"
        },
        "item": {
          "id": "983f28f4-4bcf-40d7-8e3a-8bfad30f9100",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5276ed03-cea1-490c-b9cb-3b89805c36af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb11432-00a6-44b7-bda9-6cbbd0318659",
        "cursor": {
          "ref": "a29925c5-07bc-40c8-b0fa-d1ec38b7e1cd",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "985d6ec5-f063-4d96-8e2a-8f2161e3d057"
        },
        "item": {
          "id": "1fb11432-00a6-44b7-bda9-6cbbd0318659",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "368d978b-d093-4604-a08c-e553c0af78ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 314,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f179233c-17cd-4d48-bb55-d4f0969295db",
        "cursor": {
          "ref": "15573346-b5d3-4fb8-b52e-085b0d8088f9",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "fbd174ca-f023-41b7-b10b-2556c045b2f5"
        },
        "item": {
          "id": "f179233c-17cd-4d48-bb55-d4f0969295db",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9749d1ec-1735-4f95-82e1-516839de7cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a8254d3-99a1-44ee-94ff-012cb8332f81",
        "cursor": {
          "ref": "64def591-66bd-43b4-b110-51466c064c0d",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "29116222-715b-4989-a738-0c9b41a4cc24"
        },
        "item": {
          "id": "5a8254d3-99a1-44ee-94ff-012cb8332f81",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d006bbe7-85b1-47d9-b0c7-20d4102b0222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452e01ae-eec4-4d31-8cba-29bd24ddf465",
        "cursor": {
          "ref": "7c95922e-2caf-48b8-a19a-ab3cd1037a8a",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a8dd1157-d5bf-4e85-b486-8f4acfec48da"
        },
        "item": {
          "id": "452e01ae-eec4-4d31-8cba-29bd24ddf465",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "ba117a89-53ce-40fd-8e14-cc815837ee2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb78c50-8595-49aa-9b77-ee78f72c8daf",
        "cursor": {
          "ref": "83c58647-36ac-4859-bc80-706a6eb56666",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "c143f93e-0f44-4679-981e-735c7a6e81e6"
        },
        "item": {
          "id": "8fb78c50-8595-49aa-9b77-ee78f72c8daf",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "73b428d9-9c62-47eb-b58c-9b16e2fc036d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "447941f6-93f9-48ea-8427-e0bea380d724",
        "cursor": {
          "ref": "ae0075b1-b3ac-48bb-b9c1-932737dcf37b",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9aaa5ad8-80db-4a01-aa31-161d6f54e164"
        },
        "item": {
          "id": "447941f6-93f9-48ea-8427-e0bea380d724",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ce8e3671-ec90-4e1e-b0dc-e50e5b7eb30f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ee86494-ac8e-45a5-9be8-223d390c44bd",
        "cursor": {
          "ref": "a7dd22a6-2892-48f5-8b8f-ac63dda81916",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "fc747d74-eaa4-42c6-a3ec-a4a8135d391d"
        },
        "item": {
          "id": "2ee86494-ac8e-45a5-9be8-223d390c44bd",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f02c5516-2fe8-4286-b011-fa82cb6c3a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9656bfc6-eb9f-48b8-a53c-5145abaff666",
        "cursor": {
          "ref": "9934f7bb-44b8-404d-a486-994b3fe25921",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "dcabffd7-21b8-44bd-ba6c-8494c8499a5c"
        },
        "item": {
          "id": "9656bfc6-eb9f-48b8-a53c-5145abaff666",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5811ca88-41b0-4408-99eb-b1c39c379455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "963316f7-f137-4e45-acab-d7670ab81c23",
        "cursor": {
          "ref": "368df076-749d-46d0-a1d3-2ae805cc7a7e",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d45d4d5e-8572-442c-8f70-84c988311fb3"
        },
        "item": {
          "id": "963316f7-f137-4e45-acab-d7670ab81c23",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f6b22487-2d76-4812-a825-2e41aada316e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3b2e32f-9dbe-4762-bbb6-2ce617292670",
        "cursor": {
          "ref": "d45fa283-bbd7-4121-a7f5-a5898f7e7651",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9c89b3dd-55e0-4fee-8d26-7819f3e5d646"
        },
        "item": {
          "id": "f3b2e32f-9dbe-4762-bbb6-2ce617292670",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5baa8f7e-99df-4563-9812-9787dbff7ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac8e47f-f620-4fa8-87f9-f3fd04eaeafe",
        "cursor": {
          "ref": "3f203021-62fd-4251-aa25-72b7dc86aa02",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ed75a51c-d4e1-4b1f-b230-42f588b0c019"
        },
        "item": {
          "id": "5ac8e47f-f620-4fa8-87f9-f3fd04eaeafe",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9b02fb4f-2b33-4193-963a-4b7e85132b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa57562-2749-4980-85b9-6b71685a172a",
        "cursor": {
          "ref": "d707aa59-732a-4e5d-9c65-4effb815d6b2",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a4c18ba4-7230-41aa-8aa9-d70b1052df4c"
        },
        "item": {
          "id": "2aa57562-2749-4980-85b9-6b71685a172a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f7d51aca-7431-45c2-b791-728563f7ac88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb51afe-93e7-48ca-9582-1845b363fd43",
        "cursor": {
          "ref": "fd91d2e2-fa4a-4def-8b45-6433b625e062",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "45876806-cfb6-4df0-a338-40a4df586a13"
        },
        "item": {
          "id": "6fb51afe-93e7-48ca-9582-1845b363fd43",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5a97f533-3f64-462b-b5d4-7222c70b88ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a205fe-53c8-4ebd-a14a-d96200958c26",
        "cursor": {
          "ref": "c5995f75-d741-435d-9aee-fdbca17e3a84",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4f06e1da-1011-4481-9f18-d985a5ccac7d"
        },
        "item": {
          "id": "80a205fe-53c8-4ebd-a14a-d96200958c26",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e37306db-0ee9-42b8-8d5e-fd27386a3fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c205bd1a-7658-41c7-a58c-7c99ceca2083",
        "cursor": {
          "ref": "e2874165-d796-44f8-b31e-604be0c6a04f",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "c6b6ae0d-2a28-46c0-82fc-a409715372ed"
        },
        "item": {
          "id": "c205bd1a-7658-41c7-a58c-7c99ceca2083",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "dd557380-3f77-4bd8-8ffd-59be32145f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d660a3f-ef18-45f0-b6ca-d1d83bcf21d6",
        "cursor": {
          "ref": "43c7194b-3294-4d18-bd63-ea12e4db1688",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c8d2b30c-0de3-414b-bc68-8fff1b86e84b"
        },
        "item": {
          "id": "3d660a3f-ef18-45f0-b6ca-d1d83bcf21d6",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e25156d4-bffd-44d4-bb57-026676dad0ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3820a3b0-df60-47d3-8900-2244afc75da7",
        "cursor": {
          "ref": "982b0c0f-c274-4be8-a7ee-49f88083ced8",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "787aa563-a013-46af-bd4f-ec6e9349ce18"
        },
        "item": {
          "id": "3820a3b0-df60-47d3-8900-2244afc75da7",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "722ffaa2-ec88-4fe0-bbb0-5c1094712e79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860d7349-1aa8-460c-8c1f-8b64533a1cc6",
        "cursor": {
          "ref": "dd4f6530-ead2-47de-9b90-3715ac224f27",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "00f67458-0b46-4367-a2e0-2e2f9ee2dc5c"
        },
        "item": {
          "id": "860d7349-1aa8-460c-8c1f-8b64533a1cc6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d7dcff0e-7ae7-4ee0-8fc6-3b9bd343da97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da2dde8-667e-46ea-a9d1-558133b3e084",
        "cursor": {
          "ref": "eb9bb4b3-312e-4ad5-97a2-abc7f9e3cbbc",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "63ad5738-6abd-4803-aff3-2c5db9693f0a"
        },
        "item": {
          "id": "7da2dde8-667e-46ea-a9d1-558133b3e084",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6e44e93b-2147-464b-880f-cb526a2f30cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1386d99-8583-4ed4-b978-1ea165da5731",
        "cursor": {
          "ref": "ed638d87-eb47-4530-baeb-2b4a7e1d0ad8",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2bdeb9d3-349e-4bbf-a1fc-f9563eac717b"
        },
        "item": {
          "id": "b1386d99-8583-4ed4-b978-1ea165da5731",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "470fe0b1-012d-4db7-9e23-472eb0e4d225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e422cc6f-d89d-48e7-800c-67ee029e1560",
        "cursor": {
          "ref": "f2c63b7b-46b5-407c-8204-0afca4c074c9",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "bb836c54-5bb9-4399-9d59-dddf69e1c448"
        },
        "item": {
          "id": "e422cc6f-d89d-48e7-800c-67ee029e1560",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "dbda27e5-5c1f-45af-ba71-ba0e1962d418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "660e9232-6b7b-4675-b7b4-7baa1599a13b",
        "cursor": {
          "ref": "b363f1c1-1e10-4943-8441-1f59d5942271",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f8b0c0e4-f7ce-4150-9cf3-cf344c45d49f"
        },
        "item": {
          "id": "660e9232-6b7b-4675-b7b4-7baa1599a13b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "85d50059-e9ef-4bc3-877a-7b2af26e1921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73eefd5-33e9-493c-8162-c90485899360",
        "cursor": {
          "ref": "5e6c55ef-e416-4b4a-9c26-a01b0f0ce3e7",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4edf4787-0bae-46bc-9522-3c8bd909ef99"
        },
        "item": {
          "id": "a73eefd5-33e9-493c-8162-c90485899360",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0cb20d11-1169-4d6b-bdbd-c25e580d49be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7eeac43-9ebe-4b07-8cb5-d13998553988",
        "cursor": {
          "ref": "26d81127-bb53-4c88-bb72-a247630be336",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "377610c8-9625-4fcf-b7ab-ca53ed6a0b81"
        },
        "item": {
          "id": "e7eeac43-9ebe-4b07-8cb5-d13998553988",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "77bcb56b-8490-4c1b-961a-13d708c459ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c87cd8de-c185-4a48-a723-e692e2fe0484",
        "cursor": {
          "ref": "d16f42f7-3c45-4532-9312-67e3ee6fbfcb",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6f94b5da-1531-437d-8ffd-09718cdb2779"
        },
        "item": {
          "id": "c87cd8de-c185-4a48-a723-e692e2fe0484",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9b4b3d80-c282-453f-939c-33b1c42f9988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fcc67d6-01b0-41d0-9094-c8da585c696b",
        "cursor": {
          "ref": "0a5aac09-06f2-4ecf-8286-89a24208bd9a",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f7d49e01-1b4d-4b68-a961-0528d75350ac"
        },
        "item": {
          "id": "2fcc67d6-01b0-41d0-9094-c8da585c696b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "07ad48b7-65f8-4427-9a1a-283c9496f3bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de94423e-6531-4005-8984-7eae0a66f205",
        "cursor": {
          "ref": "7793c49b-9e96-4943-a2fe-23a2a2c1f05d",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "0d80c077-f206-4370-a0bd-58ff81818112"
        },
        "item": {
          "id": "de94423e-6531-4005-8984-7eae0a66f205",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c3e79b31-3b18-4f58-be27-aa0aac307f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d4b053-6c7f-4774-adff-32e71361b92a",
        "cursor": {
          "ref": "bb826e67-af3a-498c-9e0f-954702c6c4b4",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e2b24cf2-86c5-40c4-9ca6-635b206296e7"
        },
        "item": {
          "id": "26d4b053-6c7f-4774-adff-32e71361b92a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "13678812-7512-4815-b32b-bbae18774890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca3896e2-21ff-4415-a404-b35f277783dc",
        "cursor": {
          "ref": "fe4dc530-06f6-429c-bedc-a569a84b5415",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "3d1387f6-1252-419b-9369-eef1dcaaf0b4"
        },
        "item": {
          "id": "ca3896e2-21ff-4415-a404-b35f277783dc",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "413ad0be-d811-40e9-96c2-4d99af31edc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786fb50b-8739-4708-ac1d-66c1e013af79",
        "cursor": {
          "ref": "c701a1e2-d2e9-42fd-bb1d-24871d99cad8",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ef75af6c-1008-4258-9c68-bee27db02946"
        },
        "item": {
          "id": "786fb50b-8739-4708-ac1d-66c1e013af79",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "256e1a32-655a-4338-8720-ea3e518761f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2410362-5fda-4ab9-a865-dcf214c13891",
        "cursor": {
          "ref": "27cb8c38-a8bb-4efd-a201-6097292cca72",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "32f2c06a-7e42-4436-9f0c-2289dee156ab"
        },
        "item": {
          "id": "b2410362-5fda-4ab9-a865-dcf214c13891",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9bd8cf33-d28b-4dda-8f50-9e30b59fbafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b5d8512-3915-4653-b94a-1c5f484fd35c",
        "cursor": {
          "ref": "694b7a78-c96d-43d7-aef3-4a6180dd43bc",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a2494947-e795-4e2a-b4fe-5461b50910aa"
        },
        "item": {
          "id": "1b5d8512-3915-4653-b94a-1c5f484fd35c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "76eac1e2-8b59-4978-a6f0-834a3168491f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a08d40-59c2-4d7b-9da5-55b0d4749425",
        "cursor": {
          "ref": "fb6a7dfb-2dba-4ed4-828d-4a7c4ea25a9b",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "839c2a42-349a-4404-a679-1f43402bc805"
        },
        "item": {
          "id": "40a08d40-59c2-4d7b-9da5-55b0d4749425",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "acbc1b7f-2c0e-4b03-ae29-603566dc3e9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b737a9-5263-439a-9846-3aed2991b224",
        "cursor": {
          "ref": "f1a4352c-4bc2-45ed-b508-1116a179c510",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "bf155d3f-c574-4bdf-a9f7-13c149f78853"
        },
        "item": {
          "id": "e5b737a9-5263-439a-9846-3aed2991b224",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "39d6a8e1-d272-456b-8956-360b3a8fe64d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76736893-9476-4d78-bdfc-98934a0308f6",
        "cursor": {
          "ref": "5a0e7dde-608a-4bc5-87d1-a4465504bfc5",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d5f41136-c936-4e32-a0ca-2e36dcf04582"
        },
        "item": {
          "id": "76736893-9476-4d78-bdfc-98934a0308f6",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f6935b83-a0e6-462d-8570-ea2899dc1f5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b481dfaa-d2d6-468e-a5e5-6d5b29484cc2",
        "cursor": {
          "ref": "e0107e38-e08f-498a-959e-856e9461ba55",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1b85afaa-45fd-4172-8c7b-52ffc3a29d48"
        },
        "item": {
          "id": "b481dfaa-d2d6-468e-a5e5-6d5b29484cc2",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "34c8982c-ab97-4fff-8719-e92091be3b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743c5ec7-f32b-4381-8541-bee9e64a5a22",
        "cursor": {
          "ref": "15050054-6768-4ac6-b738-a9efb22550dc",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "3b754b8c-e183-4b96-8f73-3af860fcf1f2"
        },
        "item": {
          "id": "743c5ec7-f32b-4381-8541-bee9e64a5a22",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e262b96c-22bc-444b-b923-f5cce3baa7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a92b6e0-591e-461d-89f7-3b40e2670cd6",
        "cursor": {
          "ref": "cdf10734-29f6-45fa-a9b1-5f552b9e531f",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a1afabd2-022b-495d-8a6a-825986fd3c52"
        },
        "item": {
          "id": "7a92b6e0-591e-461d-89f7-3b40e2670cd6",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d62550f3-dc74-4d96-89cd-c0b9c0ed0c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a28ae139-b4bf-4f35-a3fe-2514cb1cd14a",
        "cursor": {
          "ref": "dd73ae7f-c914-40d7-853d-717841b35b97",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "bdb1d9a0-5ec2-4e58-bd93-f3043eeda768"
        },
        "item": {
          "id": "a28ae139-b4bf-4f35-a3fe-2514cb1cd14a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2908db27-2469-4b4f-972a-5fbda87f8391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1dcf541-82ab-44cd-be27-50f71e66c24b",
        "cursor": {
          "ref": "be7cde08-d96c-43c9-95f0-0b9f7d34786d",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c83f47db-6ed0-429e-9f0f-3cf5783b9fd4"
        },
        "item": {
          "id": "f1dcf541-82ab-44cd-be27-50f71e66c24b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7df0f7c7-475b-407e-9bb8-d3c97f549b79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0018e13-e3ac-4fb5-b877-337cfd55aaf9",
        "cursor": {
          "ref": "2ac6dbc3-25f8-41f5-a847-e7578db7059f",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "69176308-325a-46c8-9ff4-a1b4fbad1c6f"
        },
        "item": {
          "id": "a0018e13-e3ac-4fb5-b877-337cfd55aaf9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "3c164f7e-dd04-48ea-91f7-c41a94688ac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1426e8de-27f8-4153-92cd-b1c86088e2df",
        "cursor": {
          "ref": "7ce96c35-0635-475d-a911-3d2582f7db13",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8ac31f04-ece2-4e0a-aeab-f6db0221b1ec"
        },
        "item": {
          "id": "1426e8de-27f8-4153-92cd-b1c86088e2df",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4c3580ba-250a-4a50-a9fc-d2f2dec8b2c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eeb16d4-9271-42ef-9a9f-be9aca0711b6",
        "cursor": {
          "ref": "1b39954f-499b-45c9-9b05-112fabb4192a",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ba25c61f-278f-4987-b8cb-ec7896950f47"
        },
        "item": {
          "id": "9eeb16d4-9271-42ef-9a9f-be9aca0711b6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5d111a22-8e7c-487f-984e-62ba788a6569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9efab4-ce11-461a-bf70-51016393d4cb",
        "cursor": {
          "ref": "6ec57ccc-8dfe-4e87-acb4-e7fa02f85f2e",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "42a3fa64-035f-423f-9f31-5d0f54f6999f"
        },
        "item": {
          "id": "de9efab4-ce11-461a-bf70-51016393d4cb",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b3929fe9-c4f5-4470-b405-fee75583051d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43f1c705-b9c5-4754-9e42-70a2813ecc55",
        "cursor": {
          "ref": "ee814e6d-cfd8-4229-b5e2-e9e966e5b1bb",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1dcdd5f6-88d0-4087-a2a5-89fb5fd6b6f4"
        },
        "item": {
          "id": "43f1c705-b9c5-4754-9e42-70a2813ecc55",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "058199c5-78e4-41a8-8bdb-a57900f9d9f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f53528f6-c4fa-4da2-a38b-8247d6506c6c",
        "cursor": {
          "ref": "bb7dec0a-6ca6-4ae6-b7d6-845e8181b99a",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "bf3a012b-ae4f-4de0-ad5f-960ea375a136"
        },
        "item": {
          "id": "f53528f6-c4fa-4da2-a38b-8247d6506c6c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5f76047f-8003-424c-bf27-697191abd2a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4432162-67ef-4710-a176-6978af8e7b9e",
        "cursor": {
          "ref": "2d37f254-0ff4-44dd-bfa6-a8816857ae3b",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e1efa321-11ed-4d7a-b8c9-152ea739eb5b"
        },
        "item": {
          "id": "f4432162-67ef-4710-a176-6978af8e7b9e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "288d2765-0949-4190-9b7d-574d843907d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "188647da-6a90-44e2-9f9c-c040e8a2b5b6",
        "cursor": {
          "ref": "7a10314e-536d-407d-942f-ccacfbf3e3f3",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "348585c5-bdc1-4200-aa68-6e2ea9991d02"
        },
        "item": {
          "id": "188647da-6a90-44e2-9f9c-c040e8a2b5b6",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7f955811-c7c3-49fe-9d00-a20fc79cc0db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a51b614-82bd-4768-a118-55f2df4c6283",
        "cursor": {
          "ref": "9fcf7770-04ec-4d5e-a3e5-a600f5b136cf",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a4879f7f-fd75-4bf0-98fe-253e46ef5f40"
        },
        "item": {
          "id": "0a51b614-82bd-4768-a118-55f2df4c6283",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1f678086-5e2e-4261-a3cd-b1051164cd92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27459084-5a94-4379-a8d8-7ee9bf513b0c",
        "cursor": {
          "ref": "622b6026-a072-4346-be4a-dc8212dcefbb",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7ec371ed-488c-44a2-992d-9b4e91b951ed"
        },
        "item": {
          "id": "27459084-5a94-4379-a8d8-7ee9bf513b0c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3aa4f46d-4434-4544-999f-a1926487ce4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4a9d36-8874-4883-be93-795dd3a455fc",
        "cursor": {
          "ref": "2d92cbf6-fc26-4690-a274-e9ebd1cfa914",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7282ff9a-3393-40c4-9fab-fd3fccc7195e"
        },
        "item": {
          "id": "3e4a9d36-8874-4883-be93-795dd3a455fc",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3342e96c-fe03-409b-8de1-befef63cf659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0785c84-c7fc-4645-98ee-eabc58b6b70a",
        "cursor": {
          "ref": "30030de2-9cfe-47d6-b45a-a3edd64d5dfe",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "62d8d9af-9d28-4aa2-a668-39946c447c91"
        },
        "item": {
          "id": "e0785c84-c7fc-4645-98ee-eabc58b6b70a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "efdab766-8107-47b4-aab8-accb21608a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1cf91fb-44e3-4bb9-a599-cfdaed1b97c9",
        "cursor": {
          "ref": "4992c5c6-69ac-4a83-97ff-7c6af176e84f",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8db33bf3-bc63-4a22-b2cc-be7ff2f02fb6"
        },
        "item": {
          "id": "f1cf91fb-44e3-4bb9-a599-cfdaed1b97c9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e94e1e12-c2ca-4276-915a-90010a77e648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 625,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0194fef-b8c3-4358-b2cf-04400da5e926",
        "cursor": {
          "ref": "8199f5ff-7687-4e04-8ddd-327dbbd33992",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "434319f2-78a4-4908-8987-3f2a5869d2e6"
        },
        "item": {
          "id": "c0194fef-b8c3-4358-b2cf-04400da5e926",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "24cc4da3-8d11-4ebc-852f-9c152eb3cc1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "5f4c1b48-d7be-49e2-b439-0bc0cb945cb7",
        "cursor": {
          "ref": "5822813b-9355-4b72-939f-954531c54e4b",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "30b7b8fb-25a7-4cf0-b680-256c3faafc62"
        },
        "item": {
          "id": "5f4c1b48-d7be-49e2-b439-0bc0cb945cb7",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "3d96a26a-944e-49ad-93eb-7cc94801a989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "086d5445-ece5-4bef-a599-2c179c27db55",
        "cursor": {
          "ref": "c73e2d66-df8a-4b0d-ad70-acf035fd92a0",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "12ac8470-abce-4a59-a48b-c0d2359bfd31"
        },
        "item": {
          "id": "086d5445-ece5-4bef-a599-2c179c27db55",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a92e8eb3-3d73-4990-81fb-b386c9490f0d",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e8dcde3-d166-44a4-b9ac-e11fb5db8daa",
        "cursor": {
          "ref": "056c94dc-03ae-42a9-9621-d6d0514cf01c",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2acc57ba-fa66-458f-a168-c93e26abf522"
        },
        "item": {
          "id": "6e8dcde3-d166-44a4-b9ac-e11fb5db8daa",
          "name": "credentials_verify"
        },
        "response": {
          "id": "401e85d5-854d-44b5-9d17-d925e618a4df",
          "status": "OK",
          "code": 200,
          "responseTime": 1816,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d0ba12-2b9d-4515-8bf3-1fbd9704956b",
        "cursor": {
          "ref": "27926e9a-8793-4a34-8f23-890ae57d80aa",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "dae68398-71e3-4a67-af86-25b310162674"
        },
        "item": {
          "id": "93d0ba12-2b9d-4515-8bf3-1fbd9704956b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "7c92d810-e48c-4655-a619-3bc2ececb9b2",
          "status": "OK",
          "code": 200,
          "responseTime": 2430,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "323ab108-a5a1-4ca7-9641-57eacc6fbb25",
        "cursor": {
          "ref": "4c315442-38dc-4df4-af53-2384aa1ba902",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "54db3a0b-7959-46b1-afd6-aeb61d4b3d5c"
        },
        "item": {
          "id": "323ab108-a5a1-4ca7-9641-57eacc6fbb25",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bd8a919b-57cb-4cac-9bee-14dc84bae8bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 14,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "323ab108-a5a1-4ca7-9641-57eacc6fbb25",
        "cursor": {
          "ref": "4c315442-38dc-4df4-af53-2384aa1ba902",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "54db3a0b-7959-46b1-afd6-aeb61d4b3d5c"
        },
        "item": {
          "id": "323ab108-a5a1-4ca7-9641-57eacc6fbb25",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bd8a919b-57cb-4cac-9bee-14dc84bae8bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 14,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "323ab108-a5a1-4ca7-9641-57eacc6fbb25",
        "cursor": {
          "ref": "4c315442-38dc-4df4-af53-2384aa1ba902",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "54db3a0b-7959-46b1-afd6-aeb61d4b3d5c"
        },
        "item": {
          "id": "323ab108-a5a1-4ca7-9641-57eacc6fbb25",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bd8a919b-57cb-4cac-9bee-14dc84bae8bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 14,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "d46c4e11-7a2c-4498-bd0f-02f7e9eb0af4",
        "cursor": {
          "ref": "3f5d2df0-5aef-4cea-be43-99848931a56b",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7416274b-1a7b-492c-a70d-d5920cb92e1e"
        },
        "item": {
          "id": "d46c4e11-7a2c-4498-bd0f-02f7e9eb0af4",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "170b80f4-168d-48f9-a8b4-ebf8a649a052",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "1d2f67cf-050e-4d24-af95-7a583768ff90",
        "cursor": {
          "ref": "18c3d96d-1efa-444a-9efe-86741579e83d",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bb09ce07-dc7d-4fae-a633-73383192ef50"
        },
        "item": {
          "id": "1d2f67cf-050e-4d24-af95-7a583768ff90",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "23e1af8e-34e9-4b5a-8934-876cb0e1deeb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "1d2f67cf-050e-4d24-af95-7a583768ff90",
        "cursor": {
          "ref": "18c3d96d-1efa-444a-9efe-86741579e83d",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bb09ce07-dc7d-4fae-a633-73383192ef50"
        },
        "item": {
          "id": "1d2f67cf-050e-4d24-af95-7a583768ff90",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "23e1af8e-34e9-4b5a-8934-876cb0e1deeb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "717fcd7d-dfb9-497f-b528-71724f5a51da",
        "cursor": {
          "ref": "67275883-6dda-4323-95dc-72a63fb28359",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0109d133-6205-4832-b835-8b93aa26d8dc"
        },
        "item": {
          "id": "717fcd7d-dfb9-497f-b528-71724f5a51da",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "faab9ae7-d3f3-4c8b-907b-2d3294e4d343",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 109,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "80e2aece-06bb-4f77-adf6-302f390ce888",
        "cursor": {
          "ref": "011869c9-63ab-49d0-bfa4-15c03375b90a",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4e4cfe57-33a6-421a-bcdd-3f131673eb84"
        },
        "item": {
          "id": "80e2aece-06bb-4f77-adf6-302f390ce888",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "268906b4-67e5-4882-9af0-abfd05ab0470",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "80e2aece-06bb-4f77-adf6-302f390ce888",
        "cursor": {
          "ref": "011869c9-63ab-49d0-bfa4-15c03375b90a",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4e4cfe57-33a6-421a-bcdd-3f131673eb84"
        },
        "item": {
          "id": "80e2aece-06bb-4f77-adf6-302f390ce888",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "268906b4-67e5-4882-9af0-abfd05ab0470",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "c7f53a51-ab83-4287-ab29-17233d49e0f7",
        "cursor": {
          "ref": "0b130795-ff7f-467a-95cc-bdec20251c98",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "6b1cb9b1-39a9-4a0a-aeae-e219e894cb23"
        },
        "item": {
          "id": "c7f53a51-ab83-4287-ab29-17233d49e0f7",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "aef5ae8f-4328-4ddb-b689-23d0a725943d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}